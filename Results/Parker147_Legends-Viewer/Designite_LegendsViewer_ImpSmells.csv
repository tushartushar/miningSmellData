Implementation smell,Namespace,Class,File,Method,Description
Long Method,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,GetColumns,The method has 116 lines of code.
Long Method,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The method has 506 lines of code.
Long Method,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,The method has 178 lines of code.
Long Method,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The method has 2634 lines of code.
Long Method,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The method has 104 lines of code.
Long Method,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The method has 149 lines of code.
Long Method,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The method has 101 lines of code.
Long Method,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The method has 283 lines of code.
Long Method,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The method has 104 lines of code.
Long Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The method has 157 lines of code.
Long Method,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,dgResults_CellFormatting,The method has 152 lines of code.
Long Method,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The method has 189 lines of code.
Long Method,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetProperties,The method has 296 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The method has 112 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,NextToken,The method has 176 lines of code.
Long Method,LegendsViewer.Legends,Battle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,Battle,The method has 137 lines of code.
Long Method,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,HistoricalFigure,The method has 115 lines of code.
Long Method,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The method has 125 lines of code.
Complex Method,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,GetColumns,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,MakePopulationPlural,Cyclomatic complexity of the method is 13
Complex Method,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,Cyclomatic complexity of the method is 14
Complex Method,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,Cyclomatic complexity of the method is 116
Complex Method,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,SetupMenu,Cyclomatic complexity of the method is 21
Complex Method,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,MenuClick,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer,ChartMenuItem,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartMenuItem,Cyclomatic complexity of the method is 26
Complex Method,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawTabContent,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer,HistoricalFigureList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer,SitesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer,EntitiesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer,WarsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer,MapFile,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,MapFile,Cyclomatic complexity of the method is 17
Complex Method,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,Cyclomatic complexity of the method is 27
Complex Method,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,Cyclomatic complexity of the method is 20
Complex Method,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintTitle,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintMiscInfo,Cyclomatic complexity of the method is 23
Complex Method,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,Cyclomatic complexity of the method is 17
Complex Method,LegendsViewer.Controls,HTMLControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLControl.cs,NavigateToNewObjectPage,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,GetPrinter,Cyclomatic complexity of the method is 14
Complex Method,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,MakeLink,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Controls,RegionPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\RegionPrinter.cs,Print,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,Cyclomatic complexity of the method is 29
Complex Method,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,Cyclomatic complexity of the method is 14
Complex Method,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,Cyclomatic complexity of the method is 33
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,Cyclomatic complexity of the method is 42
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateWarDisplay,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,Cyclomatic complexity of the method is 13
Complex Method,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseWheel,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,Cyclomatic complexity of the method is 15
Complex Method,LegendsViewer.Controls,MapMenuOption,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,MapMenuOption,Cyclomatic complexity of the method is 15
Complex Method,LegendsViewer.Controls,MapMenuOption,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Click,Cyclomatic complexity of the method is 22
Complex Method,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,SetPathsDijkstra,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,SetPathsPrim,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,CreateSiteNodes,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,BuildSearchInfo,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,BuildQuery,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SelectList_SelectedIndexChanged,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,BuildQuery,Cyclomatic complexity of the method is 17
Complex Method,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,dgResults_CellFormatting,Cyclomatic complexity of the method is 64
Complex Method,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupComparers,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupOrderByComparers,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,Cyclomatic complexity of the method is 19
Complex Method,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,Select,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Controls.Query,SearchList<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchList.cs,OrderBy,Cyclomatic complexity of the method is 18
Complex Method,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetProperties,Cyclomatic complexity of the method is 30
Complex Method,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,ComparerToString,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,StringToComparer,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseIntegerLiteral,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 22
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 36
Complex Method,LegendsViewer.Legends,Abduction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Abduction.cs,Abduction,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,Battle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,Battle,Cyclomatic complexity of the method is 50
Complex Method,LegendsViewer.Legends,BeastAttack,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\BeastAttack.cs,BeastAttack,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,Duel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Duel.cs,Duel,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,EventCollection,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,GetYearTime,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,SiteConquered,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\SiteConquered.cs,SiteConquered,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Legends,Theft,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Theft.cs,Theft,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,War,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\War.cs,War,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,AddHFHFLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AddHFHFLink,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,AddHFHFLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Legends,ChangeHFBodyState,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ChangeHFBodyState,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,ChangeHFState,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ChangeHFState,Cyclomatic complexity of the method is 16
Complex Method,LegendsViewer.Legends,ChangeHFState,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,CreatedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,CreatedSite,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,DestroyedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,DestroyedSite,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,FieldBattle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,FieldBattle,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFConfronted,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,HFDied,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFDied,Cyclomatic complexity of the method is 45
Complex Method,LegendsViewer.Legends,HFDied,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,Cyclomatic complexity of the method is 41
Complex Method,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFSimpleBattleEvent,Cyclomatic complexity of the method is 17
Complex Method,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,HFTravel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFTravel,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,NewSiteLeader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,NewSiteLeader,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,ReclaimSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ReclaimSite,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,SiteTakenOver,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteTakenOver,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,SiteDispute,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteDispute,Cyclomatic complexity of the method is 12
Complex Method,LegendsViewer.Legends,HfDestroyedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HfDestroyedSite,Cyclomatic complexity of the method is 9
Complex Method,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,MakePopulationPlural,Cyclomatic complexity of the method is 13
Complex Method,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,Cyclomatic complexity of the method is 13
Complex Method,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,TimeCountToSeason,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,HistoricalFigure,Cyclomatic complexity of the method is 48
Complex Method,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,ToLink,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,GetRaceTitleString,Cyclomatic complexity of the method is 8
Complex Method,LegendsViewer.Legends,EntityLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Link.cs,EntityLink,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,SiteLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Link.cs,SiteLink,Cyclomatic complexity of the method is 11
Complex Method,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,GetSectionType,Cyclomatic complexity of the method is 13
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,AddItemToWorld,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,AddFromXMLSection,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,AddEvent,Cyclomatic complexity of the method is 70
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,AddEventCollection,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ProcessXMLSection,Cyclomatic complexity of the method is 10
Complex Method,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ProcessCollections,Cyclomatic complexity of the method is 17
Complex Method,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,Cyclomatic complexity of the method is 10
Long Parameter List,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,FileLoader,The method has 11 parameters. Parameters: form' xmlButton' xmlText' historyButton' historyText' sitesButton' sitesText' mapButton' mapText' statusLabel' logText
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Parameter List,LegendsViewer.Legends,Squad,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,Squad,The method has 5 parameters. Parameters: race' numbers' deaths' site' population
Long Parameter List,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ResizeImage,The method has 6 parameters. Parameters: source' dest' height' width' keepRatio' smooth
Long Parameter List,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,DrawPatch,The method has 9 parameters. Parameters: g' x' y' patch' turn' invert' fore' back' stroke
Long Identifier,System.Linq.Dynamic,Res,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,MakePopulationPlural,The length of the statement  "            else if (population.EndsWith("x") || population.EndsWith("ch") || population.EndsWith("sh") || population.EndsWith("s")) population += "es";" is 140.
Long Statement,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,MakePopulationPlural,The length of the statement  "            else if (population.EndsWith("y") && !population.EndsWith("ay") && !population.EndsWith("ey") && !population.EndsWith("iy") && !population.EndsWith("oy") && !population.EndsWith("uy")) population = population.Substring(0' population.Length - 1) + "ies";" is 253.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "            if (newSeries < 0) //Some Error prevention' sometimes Series don't get remade properly during Refresh and will have too man' so force it to remake the series' obsolete? " is 168.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                DwarfChart.ChartAreas.First().AxisX.Minimum = DwarfChart.Series.SelectMany(series => series.Points).Select(point => point.XValue).Min(); " is 136.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                DwarfChart.ChartAreas.First().AxisX.Maximum = DwarfChart.Series.SelectMany(series => series.Points).Select(point => point.XValue).Max(); " is 136.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                DwarfChart.ChartAreas.First().AxisX.Minimum = DwarfChart.Series.SelectMany(series => series.Points).Select(point => point.XValue).Min() - 1; " is 140.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                DwarfChart.ChartAreas.First().AxisX.Maximum = DwarfChart.Series.SelectMany(series => series.Points).Select(point => point.XValue).Max() + 1; " is 140.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList(); " is 135.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break; " is 122.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break; " is 130.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList(); " is 150.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //==================================================== " is 158.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                                    else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type)) " is 123.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                                    count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1))); " is 173.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                                    count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)); " is 130.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                                    count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1))); " is 201.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break; " is 139.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break; " is 123.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break; " is 175.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break; " is 293.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList(); " is 161.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList(); " is 232.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList(); " is 224.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break; " is 297.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break; " is 261.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break; " is 291.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break; " is 297.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList(); " is 139.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList(); " is 129.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList(); " is 183.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList(); " is 192.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death))); " is 136.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; }); " is 256.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break; " is 273.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break; " is 192.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break; " is 196.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); " is 379.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break; " is 374.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break; " is 331.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break; " is 199.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break; " is 343.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break; " is 336.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break; " is 197.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList(); " is 246.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList(); " is 276.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList(); " is 154.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList(); " is 182.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death))); " is 144.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) }); " is 124.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList(); " is 163.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                        deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); }); " is 376.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList(); " is 222.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList(); " is 184.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList(); " is 252.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count); " is 135.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList(); " is 222.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList(); " is 184.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                    var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList(); " is 252.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The length of the statement  "                            series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count); " is 162.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,SetupMenu,The length of the statement  "                if (site.Events.OfType<HFDied>().Count() > 0 || site.Warfare.Count > 0) other.DropDownItems.Add(new ChartMenuItem(this' ChartOption.OtherDeaths)); " is 146.
Long Statement,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,SetupMenu,The length of the statement  "                if (region.Events.OfType<HFDied>().Count() > 0) other.DropDownItems.Add(new ChartMenuItem(this' ChartOption.OtherDeaths)); " is 122.
Long Statement,LegendsViewer,DwarfTabControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,RefreshAll,The length of the statement  "                    else if (page.Current.GetType() == typeof(ChartControl) && (page.Current as ChartControl).FocusObject.GetType() == refreshType)" is 127.
Long Statement,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawTabContent,The length of the statement  "            Rectangle contentRect = vertical ? new Rectangle(0' 0' tabRect.Height' tabRect.Width) : new Rectangle(Point.Empty' tabRect.Size);" is 129.
Long Statement,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawCloseButton,The length of the statement  "                TextRenderer.DrawText(graphics' "X"' closeFont' bounds' Color.White' Color.Red' TextFormatFlags.HorizontalCenter | TextFormatFlags.NoPadding | TextFormatFlags.SingleLine | TextFormatFlags.VerticalCenter);" is 204.
Long Statement,LegendsViewer,HistoricalFigureList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (sortFiltered) filtered = filtered.OrderByDescending(hf => hf.Events.Count(ev => !HistoricalFigure.Filters.Contains(ev.Type))); " is 130.
Long Statement,LegendsViewer,HistoricalFigureList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (sortBattles) filtered = filtered.OrderByDescending(hf => hf.Battles.Count(battle => !World.FilterBattles || battle.Notable)); " is 129.
Long Statement,LegendsViewer,SitesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (name != "") filtered = filtered.Where(s => s.Name.ToLower().Contains(name.ToLower()) || s.UntranslatedName.ToLower().Contains(name.ToLower())); " is 147.
Long Statement,LegendsViewer,SitesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (sortWarfare) filtered = filtered.OrderByDescending(site => site.Warfare.OfType<Battle>().Count(battle => !World.FilterBattles || battle.Notable)); " is 150.
Long Statement,LegendsViewer,SitesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                    if (PopulationType != "All") filtered = filtered.Where(site => site.Populations.Count(population => population.Race == PopulationType) > 0).OrderByDescending(site => site.Populations.Where(population => population.Race == PopulationType).Sum(population => population.Count)); " is 275.
Long Statement,LegendsViewer,SitesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (SortDeaths) filtered = filtered.OrderByDescending(site => site.Events.OfType<HFDied>().Count() + site.Warfare.OfType<Battle>().Sum(battle => battle.AttackerSquads.Sum(squad => squad.Deaths) + battle.DefenderSquads.Sum(squad => squad.Deaths))); " is 247.
Long Statement,LegendsViewer,RegionsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (sortFiltered) filtered = filtered.OrderByDescending(r => r.Events.Count(ev => !WorldRegion.Filters.Contains(ev.Type))); " is 123.
Long Statement,LegendsViewer,RegionsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (sortBattles) filtered = filtered.OrderByDescending(region => region.Battles.Count(battle => !World.FilterBattles || battle.Notable)); " is 137.
Long Statement,LegendsViewer,RegionsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (SortDeaths) filtered = filtered.OrderByDescending(region => region.Events.OfType<HFDied>().Count() + region.Battles.OfType<Battle>().Sum(battle => battle.AttackerSquads.Sum(squad => squad.Deaths) + battle.DefenderSquads.Sum(squad => squad.Deaths))); " is 253.
Long Statement,LegendsViewer,UndergroundRegionsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (sortFiltered) filtered = filtered.OrderByDescending(ur => ur.Events.Count(ev => !UndergroundRegion.Filters.Contains(ev.Type))); " is 131.
Long Statement,LegendsViewer,EntitiesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                if (sortWars) filtered = filtered.OrderByDescending(entity => entity.Wars.Count(war => !world.FilterBattles || war.Notable)); " is 125.
Long Statement,LegendsViewer,EntitiesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,getList,The length of the statement  "                    if (PopulationType != "All") filtered = filtered.Where(entity => entity.Populations.Count(population => population.Race == PopulationType) > 0).OrderByDescending(civ => civ.Populations.Where(population => population.Race == PopulationType).Sum(population => population.Count)); " is 277.
Long Statement,LegendsViewer,WarsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortFiltered) filtered = filtered.OrderByDescending(war => war.GetSubEvents().Count(ev => !War.Filters.Contains(ev.Type))); " is 127.
Long Statement,LegendsViewer,WarsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortConquerings) filtered = filtered.OrderByDescending(war => war.Collections.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging)); " is 182.
Long Statement,LegendsViewer,BattlesList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortFiltered) filtered = filtered.OrderByDescending(battle => battle.GetSubEvents().Count(ev => !Battle.Filters.Contains(ev.Type))); " is 136.
Long Statement,LegendsViewer,ConqueringsList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortFiltered) filtered = filtered.OrderByDescending(pillaging => pillaging.GetSubEvents().Count(ev => !SiteConquered.Filters.Contains(ev.Type))); " is 149.
Long Statement,LegendsViewer,BeastAttackList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortFiltered) filtered = filtered.OrderByDescending(beastAttack => beastAttack.GetSubEvents().Count(ev => !BeastAttack.Filters.Contains(ev.Type))); " is 151.
Long Statement,LegendsViewer,BeastAttackList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The length of the statement  "                if (SortDeaths) filtered = filtered.OrderByDescending(beastAttack => beastAttack.GetSubEvents().OfType<HFDied>().Count()); " is 122.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,LocateOtherFiles,The length of the statement  "            List<string> imageFiles = Directory.GetFiles(directory).Where(file => file.Contains("world") && file.Contains(region) && (file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg"))).ToList();" is 231.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,Load,The length of the statement  "            if (XMLState != FileState.Ready || HistoryState != FileState.Ready || SitesState != FileState.Ready || MapState != FileState.Ready)" is 131.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,Load,The length of the statement  "            if (!(File.Exists(XMLText.Text) && File.Exists(HistoryText.Text) && File.Exists(SitesText.Text) && File.Exists(MapText.Text)))" is 126.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".xml")) > 1 || extractor.ArchiveFileNames.Count(file => file.EndsWith(".xml")) == 0)" is 144.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".world_history.txt")) > 1 || extractor.ArchiveFileNames.Count(file => file.EndsWith("-world_history.txt")) == 0)" is 172.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                if (extractor.ArchiveFileNames.Count(file => file.EndsWith("-world_sites_and_pops.txt")) > 1 || extractor.ArchiveFileNames.Count(file => file.EndsWith("-world_sites_and_pops.txt")) == 0)" is 186.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 0)" is 149.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 1)" is 149.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                    map = extractor.ArchiveFileNames.Single(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg"));" is 147.
Long Statement,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The length of the statement  "                    dlgFileSelect fileSelect = new dlgFileSelect(extractor.ArchiveFileNames.Where(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")).ToList());" is 195.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The length of the statement  "                TabEvents[eventTab].Sort((a' b) => AppHelpers.EventInfo[Array.IndexOf(AppHelpers.EventInfo' AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == a))][1].CompareTo(AppHelpers.EventInfo[Array.IndexOf(AppHelpers.EventInfo' AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == b))][1]));" is 291.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,ChangeHFBaseList,The length of the statement  "            chkAlive.Checked = chkDeity.Checked = chkForce.Checked = chkGhost.Checked = chkVampire.Checked = chkWerebeast.Checked = chkHFLeader.Checked = false;" is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,btnEraShow_Click,The length of the statement  "            Browser.Navigate(ControlOption.HTML' new Era(Convert.ToInt32(numStart.Value)' Convert.ToInt32(numEraEnd.Value)' world));" is 120.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,The length of the statement  "                                     where world.Entities.Count(entity => entity.Populations.Count(population => population.Race == civPopulation.Key) > 0) > 0" is 122.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,The length of the statement  "            var battleEvents = from eventType in world.EventCollections.OfType<Battle>().SelectMany(battle => battle.GetSubEvents())" is 120.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,The length of the statement  "            var conqueringEvents = from eventType in world.EventCollections.OfType<SiteConquered>().SelectMany(conquering => conquering.GetSubEvents())" is 139.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,AfterLoad,The length of the statement  "            var beastAttackEvents = from eventType in world.EventCollections.OfType<BeastAttack>().SelectMany(beastAttack => beastAttack.GetSubEvents())" is 140.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,ResetForm,The length of the statement  "            lblHFList.Font = lblHFList.Font = lblSiteList.Font = lblWarList.Font = new Font(lblHFList.Font.FontFamily' lblHFList.Font.Size' FontStyle.Regular);" is 147.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,ResetForm,The length of the statement  "            chkAlive.Checked = chkDeity.Checked = chkGhost.Checked = chkVampire.Checked = chkWerebeast.Checked = chkForce.Checked = chkHFLeader.Checked = false;" is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.tcWorld.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnAdvancedSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 155.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnChart.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnStats.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnShowMap.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.lblStatus.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));" is 154.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtLog.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 141.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnHFListReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 152.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.lblHFList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 147.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.grpHFFilter.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 147.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox5.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtHFSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 147.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listHFSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnSiteListReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 154.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.lblSiteList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 149.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox6.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtSiteSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listSiteSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 150.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox7.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtRegionSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listRegionSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox8.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listURegionSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox4.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox9.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtCivSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listCivSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 149.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnWarListReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 153.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.lblWarList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox10.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox11.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right)));" is 147.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtWarSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listWarSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 149.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.btnBattleListReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 156.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.lblBattleList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));" is 151.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox12.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox13.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtBattleSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listBattleSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox14.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox15.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtConqueringSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 152.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listConqueringSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 156.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox18.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox17.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.txtBeastAttacksSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 154.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listBeastAttacks.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.groupBox16.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The length of the statement  "            this.listEras.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 144.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "                battleDescription += " occured as part of " + Battle.ParentCollection.ToLink() + " waged by " + (Battle.ParentCollection as War).Attacker.PrintEntity()" is 151.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<b>" + Battle.Attacker.PrintEntity() + " (Attacker) " + (Battle.NotableAttackers.Count + Battle.AttackerSquads.Sum(squad => squad.Numbers)) + " Members' " + Battle.AttackerDeathCount + " Losses</b> " + MakeLink("[Load]"' LinkOption.LoadBattleAttackers) + LineBreak);" is 283.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "                             select new { Race = squads.Key' Numbers = squads.Sum(squad => squad.Numbers)' Deaths = squads.Sum(squad => squad.Deaths) };" is 123.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "                if (Battle.Collection.OfType<FieldBattle>().Where(fieldBattle => fieldBattle.AttackerGeneral == attacker).Count() > 0 ||" is 120.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<b>" + Battle.Defender.PrintEntity() + " (Defender) " + (Battle.NotableDefenders.Count + Battle.DefenderSquads.Sum(squad => squad.Numbers)) + " Members' " + Battle.DefenderDeathCount + " Losses</b> " + MakeLink("[Load]"' LinkOption.LoadBattleDefenders) + LineBreak);" is 283.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "                         select new { Race = squads.Key' Numbers = squads.Sum(squad => squad.Numbers)' Deaths = squads.Sum(squad => squad.Deaths) };" is 123.
Long Statement,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The length of the statement  "                if (Battle.Collection.OfType<FieldBattle>().Where(fieldBattle => fieldBattle.DefenderGeneral == defender).Count() > 0 ||" is 120.
Long Statement,LegendsViewer.Controls,BeastAttackPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BeastAttackPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("The " + Attack.GetOrdinal(Attack.Ordinal) + " Rampage of " + beast + " in " + Attack.Site.ToLink() + "</br>");" is 127.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintTitle,The length of the statement  "                    HTML.AppendLine(Font("Last Known Sites. Year: " + (Entity.SiteHistory.Max(sitePeriod => sitePeriod.EndYear) - 1)' "red"));" is 122.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                        sitesDestroyed = war.AttackerVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 138.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                        sitesLost = war.DefenderVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 133.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                        sitesDestroyed = war.DefenderVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 138.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                        sitesLost = war.AttackerVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 133.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                    kills = war.Collections.OfType<Battle>().Where(battle => battle.Attacker == Entity || battle.Attacker.Parent == Entity).Sum(battle => battle.DefenderDeathCount) + war.Collections.OfType<Battle>().Where(battle => battle.Defender == Entity || battle.Defender.Parent == Entity).Sum(battle => battle.AttackerDeathCount);" is 316.
Long Statement,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintWars,The length of the statement  "                    losses = war.Collections.OfType<Battle>().Where(battle => battle.Attacker == Entity || battle.Attacker.Parent == Entity).Sum(battle => battle.AttackerDeathCount) + war.Collections.OfType<Battle>().Where(battle => battle.Defender == Entity || battle.Defender.Parent == Entity).Sum(battle => battle.DefenderDeathCount);" is 317.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    HTML.Append("</td><td>" + war.ToLink() + "</td><td align=\"right\">" + war.Attacker.PrintEntity() + "</td><td>against</td><td align=\"right\">" + war.Defender.PrintEntity() + "</td>");" is 184.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    int attackerVictories = 0' defenderVictories = 0' attackerConquerings = 0' defenderConquerings = 0' attackerKills' defenderKills;" is 129.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    attackerConquerings = war.AttackerVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 143.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    defenderConquerings = war.DefenderVictories.OfType<SiteConquered>().Count(conquering => conquering.ConquerType != SiteConqueredType.Pillaging);" is 143.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    attackerKills = war.Collections.OfType<Battle>().Where(battle => war.Attacker == battle.Attacker).Sum(battle => battle.DefenderDeathCount) + war.Collections.OfType<Battle>().Where(battle => war.Attacker == battle.Defender).Sum(battle => battle.AttackerDeathCount);" is 264.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    defenderKills = war.Collections.OfType<Battle>().Where(battle => war.Defender == battle.Attacker).Sum(battle => battle.DefenderDeathCount) + war.Collections.OfType<Battle>().Where(battle => war.Defender == battle.Defender).Sum(battle => battle.AttackerDeathCount);" is 264.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<td>Battles:</td><td align=right>" + attackerVictories + "</td><td>/</td><td>" + defenderVictories + "</td>");" is 127.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<td>Sites:</td><td align=right>" + attackerConquerings + "</td><td>/</td><td>" + defenderConquerings + "</td>");" is 129.
Long Statement,LegendsViewer.Controls,EraPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EraPrinter.cs,Print,The length of the statement  "            //List<WorldEvent> eraEvents = World.Events.Where(eraEvent => eraEvent.Year >= StartYear && eraEvent.Year <= EndYear).ToList();" is 127.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintTitle,The length of the statement  "                title += HistoricalFigure.ToLink(false' HistoricalFigure) + " is most often depicted as a " + HistoricalFigure.GetRaceTitleString() + ". "; " is 139.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintReputations,The length of the statement  "                        HTML.AppendLine(ListItem + "First Suspected Ageless Year: " + reputation.FirstSuspectedAgelessYear + "' " + reputation.FirstSuspectedAglessSeason); " is 147.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,The length of the statement  "            if (HistoricalFigure.Battles.Count > 0 && HistoricalFigure.Battles.Last().Collection.OfType<HFDied>().Count(death => death.HistoricalFigure == HistoricalFigure) == 1 && !HistoricalFigure.Battles.Last().Notable) " is 210.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,The length of the statement  "                foreach (Battle battle in HistoricalFigure.Battles.Where(battle => (!World.FilterBattles || battle.Notable) || battle.Collection.OfType<HFDied>().Count(death => death.HistoricalFigure == HistoricalFigure) > 0)) " is 210.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,The length of the statement  "                        if (battle.Collection.OfType<FieldBattle>().Where(fieldBattle => fieldBattle.AttackerGeneral == HistoricalFigure).Count() > 0 || " is 128.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,The length of the statement  "                        if (battle.Collection.OfType<FieldBattle>().Where(fieldBattle => fieldBattle.DefenderGeneral == HistoricalFigure).Count() > 0 || " is 128.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBattles,The length of the statement  "                HTML.AppendLine(Bold("Battles") + " (Unnotable): " + HistoricalFigure.Battles.Where(battle => !battle.Notable).Count() + LineBreak + LineBreak); " is 144.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintKills,The length of the statement  "                    HTML.AppendLine(ListItem + kill.HistoricalFigure.ToLink() + "' in " + kill.Year + " (" + kill.Cause.GetDescription() + ")" + LineBreak); " is 136.
Long Statement,LegendsViewer.Controls,HistoricalFigureHTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HistoricalFigurePrinter.cs,PrintBeastAttacks,The length of the statement  "                    HTML.AppendLine(ListItem + attack.StartYear + "' " + MakeLink(attack.GetOrdinal(attack.Ordinal) + "rampage in "' attack) + attack.Site.ToLink()); " is 145.
Long Statement,LegendsViewer.Controls,HTMLControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLControl.cs,BrowserNavigating,The length of the statement  "                url = url.Substring(url.IndexOf(":") + 1' url.Length - url.IndexOf(":") -1); //remove "about:" at the beginning of the url " is 122.
Long Statement,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,BitmapToHTML,The length of the statement  "                            drawSection.DrawImage(image' new Rectangle(new Point(0' 0)' section.Size)' new Rectangle(new Point(section.Size.Width * column' section.Size.Height * row)' section.Size)' GraphicsUnit.Pixel);" is 191.
Long Statement,LegendsViewer.Controls,RegionPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\RegionPrinter.cs,Print,The length of the statement  "                HTML.AppendLine("<li>Population in Battle: " + Region.Battles.OfType<Battle>().Sum(battle => battle.AttackerSquads.Sum(squad => squad.Deaths) + battle.DefenderSquads.Sum(squad => squad.Deaths)));" is 195.
Long Statement,LegendsViewer.Controls,SiteConqueredPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SiteConqueredPrinter.cs,GetTitle,The length of the statement  "            return "The " + Conquering.GetOrdinal(Conquering.Ordinal) + Conquering.ConquerType + " of " + Conquering.Site.ToLink(false);" is 124.
Long Statement,LegendsViewer.Controls,SiteConqueredPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SiteConqueredPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(Conquering.GetYearTime() + "The " + Conquering.GetOrdinal(Conquering.Ordinal) + Conquering.ConquerType + " of " + Conquering.Site.ToLink() + " ocurred as a result of " + Conquering.Battle.ToLink() " is 212.
Long Statement,LegendsViewer.Controls,SiteConqueredPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SiteConqueredPrinter.cs,Print,The length of the statement  "                + (Conquering.ParentCollection == null ? "" : " in " + Conquering.ParentCollection.ToLink() + " waged by " + (Conquering.ParentCollection as War).Attacker.PrintEntity() + " on " + (Conquering.ParentCollection as War).Defender.PrintEntity() )" is 241.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<td>" + ((warfare.ParentCollection == null) ? "UNKNOWN" :warfare.ParentCollection.ToLink()) + "</td>");" is 120.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                    if (warfare.GetType() == typeof(SiteConquered)) HTML.Append((warfare as SiteConquered).Attacker.PrintEntity() + "</td>");" is 121.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                HTML.AppendLine("<li>Pillagings: " + Site.Warfare.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Pillaging).Count());" is 158.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<li>" + ownerString + "' " + owner.StartCause + " " + Site.ToLink(true' Site) + " in " + owner.StartYear);" is 123.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                    if (attack.GetSubEvents().OfType<HFDied>().Count() > 0) HTML.Append(" (Deaths: " + attack.GetSubEvents().OfType<HFDied>().Count() + ")");" is 137.
Long Statement,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The length of the statement  "                HTML.AppendLine("<li>Population in Battle: " + Site.Warfare.OfType<Battle>().Sum(battle => battle.AttackerSquads.Sum(squad => squad.Deaths) + battle.DefenderSquads.Sum(squad => squad.Deaths)));" is 193.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<b>" + War.Name + " was waged by " + War.Attacker.PrintEntity() + " on " + War.Defender.PrintEntity() + "</b><br/>");" is 134.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            War.Collections.OfType<Battle>().Sum(battle => battle.Collection.OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure)).Count());" is 164.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<li>Kills: " + (War.Collections.OfType<Battle>().Where(battle => battle.Attacker == War.Attacker).Sum(battle => battle.DefenderDeathCount) + War.Collections.OfType<Battle>().Where(battle => battle.Defender == War.Attacker).Sum(battle => battle.AttackerDeathCount)) + "</br>");" is 293.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(" (" + War.AttackerVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Pillaging).Count() + " Pillagings' ");" is 171.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(War.AttackerVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Destruction).Count() + " Destructions' ");" is 168.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(War.AttackerVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Conquest).Count() + " Conquests)");" is 161.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<li>Kills: " + (War.Collections.OfType<Battle>().Where(battle => battle.Attacker == War.Defender).Sum(battle => battle.DefenderDeathCount) + War.Collections.OfType<Battle>().Where(battle => battle.Defender == War.Defender).Sum(battle => battle.AttackerDeathCount)) + "</br>");" is 293.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(" (" + War.DefenderVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Pillaging).Count() + " Pillagings' ");" is 171.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(War.DefenderVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Destruction).Count() + " Destructions' ");" is 168.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "            HTML.AppendLine(War.DefenderVictories.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Conquest).Count() + " Conquests)");" is 161.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<td width=\"20\" align=\"right\">" + warfareCount + ".<td width=\"10\"></td><td>" + warfare.StartYear + "</td>");" is 130.
Long Statement,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The length of the statement  "                HTML.AppendLine("<li>Pillagings: " + War.Collections.OfType<SiteConquered>().Where(conquering => conquering.ConquerType == SiteConqueredType.Pillaging).Count());" is 161.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            mapSize = new Size(Convert.ToInt32(World.Map.Width * resizePercent)' Convert.ToInt32(World.Map.Height * resizePercent));" is 120.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                    resize.DrawImage(World.Map' new Rectangle(0' 0' mapSize.Width' mapSize.Height)' new Rectangle(0' 0' World.Map.Width' World.Map.Height)' GraphicsUnit.Pixel);" is 156.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<li>" + StringToImageHTML(civ.SmallIdenticonString) + " " + civ.ToLink().Substring(0' civ.ToLink().IndexOf("<img")));" is 134.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<li>Historical Figures: " + World.EventCollections.OfType<Battle>().Sum(battle => battle.Collection.OfType<HFDied>().Count()));" is 144.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            HTML.AppendLine("<li>Populations: " + World.EventCollections.OfType<Battle>().Sum(battle => battle.AttackerSquads.Sum(squad => squad.Deaths) + battle.DefenderSquads.Sum(squad => squad.Deaths)));" is 194.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deaths.Add(death));" is 165.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            var popDeaths = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).GroupBy(squad => squad.Race).Select(squad => new { Type = squad.Key' Count = squad.Sum(population => population.Deaths) });" is 227.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "            var deathsGrouped = deaths.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count);" is 149.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                HTML.AppendLine("<h2>" + AppHelpers.EventInfo[Array.IndexOf(AppHelpers.EventInfo' AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == dwarfEvent.Type))][1] + ": " + dwarfEvent.Count + "</h2>");" is 198.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                var subCollections = from subCollection in World.EventCollections.Where(collection => collection.Type == collectionType.Type).SelectMany(collection => collection.Collections)" is 174.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                var eventTypes = from dwarfEvent in World.EventCollections.Where(collection => collection.Type == collectionType.Type).SelectMany(collection => collection.Collection)" is 166.
Long Statement,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The length of the statement  "                    HTML.AppendLine("<li>" + AppHelpers.EventInfo[Array.IndexOf(AppHelpers.EventInfo' AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == eventType.Type))][1] + ": " + eventType.Count);" is 186.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The length of the statement  "            using (LinearGradientBrush heatGradient = new LinearGradientBrush(new Point(0' 0)' new Point(HeatGradient.Width' HeatGradient.Height)' Color.Red' Color.Yellow))" is 160.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The length of the statement  "                //colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.GreenYellow)' Color.Transparent };" is 163.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The length of the statement  "                colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };" is 221.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The length of the statement  "                //colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.White)' Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };" is 257.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The length of the statement  "                //colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(125' Color.Cyan)' Color.FromArgb(50' Color.Blue)};" is 202.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,ConvertAlphaMapToHeatMap,The length of the statement  "                remap.DrawImage(AlphaMap' new Rectangle(0' 0' HeatMap.Width' HeatMap.Height)' 0' 0' HeatMap.Width' HeatMap.Height' GraphicsUnit.Pixel' attributes);" is 147.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The length of the statement  "            BitmapData bmd = source.LockBits(new Rectangle(0' 0' source.Width' source.Height)' ImageLockMode.ReadOnly' source.PixelFormat);" is 127.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The length of the statement  "            BitmapData bmdBlurred = blurred.LockBits(new Rectangle(0' 0' blurred.Width' blurred.Height)' ImageLockMode.ReadOnly' blurred.PixelFormat);" is 138.
Long Statement,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The length of the statement  "                bmdBlurred = blurred.LockBits(new Rectangle(0' 0' blurred.Width' blurred.Height)' ImageLockMode.ReadOnly' blurred.PixelFormat);" is 127.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMap,The length of the statement  "                        adjustAlphaMatrix.Matrix00 = adjustAlphaMatrix.Matrix11 = adjustAlphaMatrix.Matrix22 = adjustAlphaMatrix.Matrix44 = 1.0f; " is 121.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMap,The length of the statement  "                        g.DrawImage(AlternateMap' ClientRectangle' Source.X' Source.Y' Source.Width' Source.Height' GraphicsUnit.Pixel' adjustAlpha); " is 125.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            Rectangle minimapArea = new Rectangle(0' this.Height - MiniMapAreaSideLength' MiniMapAreaSideLength' MiniMapAreaSideLength); " is 124.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            Point miniMapDrawLocation = new Point(minimapArea.X + MiniMapAreaSideLength / 2 - Minimap.Width / 2' minimapArea.Y + MiniMapAreaSideLength / 2 - Minimap.Height / 2); " is 165.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            g.DrawImage(Minimap' new Rectangle(miniMapDrawLocation.X' miniMapDrawLocation.Y' Minimap.Width' Minimap.Height)' new Rectangle(0' 0' Minimap.Width' Minimap.Height)' GraphicsUnit.Pixel); " is 185.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            //Point miniSourceLocation = new Point(minimapArea.X + Convert.ToInt32(Source.X * minimapRatio)' minimapArea.Y + Convert.ToInt32(Source.Y * minimapRatio)); " is 155.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            Point miniSourceLocation = new Point(miniMapDrawLocation.X + Convert.ToInt32(Source.X * minimapRatio)' miniMapDrawLocation.Y + Convert.ToInt32(Source.Y * minimapRatio)); " is 169.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            Size miniSourceSize = new Size(Convert.ToInt32(Source.Width * minimapRatio)' Convert.ToInt32(Source.Height * minimapRatio)); " is 124.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            if (miniSource.Left < minimapArea.Left) { miniSource.Width -= minimapArea.Left - miniSource.Left; miniSource.X = minimapArea.Left; } " is 132.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The length of the statement  "            if (miniSource.Top < minimapArea.Top) { miniSource.Height -= minimapArea.Top - miniSource.Top; miniSource.Y = minimapArea.Top; } " is 128.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The length of the statement  "                g.DrawRectangle(sitePen' siteLocation.X' siteLocation.Y' scaleTileSize.Width - (float)(4 * PixelWidth)' scaleTileSize.Height - (float)(4 * PixelHeight)); " is 153.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The length of the statement  "                    g.DrawEllipse(battlePen' battleLocation.X + scaleTileSize.Width / 4' battleLocation.Y + scaleTileSize.Height / 4' scaleTileSize.Width / 2' scaleTileSize.Height / 2); " is 165.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The length of the statement  "            if (FocusObject != null && FocusObject.GetType() == typeof(SiteConquered)) DrawBattlePaths(g' (FocusObject as SiteConquered).Battle); " is 133.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The length of the statement  "            foreach (War war in DisplayObjects.OfType<War>().Where(war => war.StartYear <= CurrentYear && (war.EndYear >= CurrentYear || war.EndYear == -1))) " is 145.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawEntities,The length of the statement  "                foreach (OwnerPeriod site in civ.SiteHistory.Where(site => ((site.StartYear == CurrentYear && site.StartCause != "took over") || site.StartYear < CurrentYear) " is 158.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawEntities,The length of the statement  "                                drawLostSite.DrawImage(civ.Identicon' new Rectangle(0' 0' civ.Identicon.Width' civ.Identicon.Height)' 0' 0' civ.Identicon.Width' civ.Identicon.Height' GraphicsUnit.Pixel' ia); " is 175.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawEntities,The length of the statement  "                            g.DrawImage(lostSiteIdenticon' new RectangleF(siteLocation.X' siteLocation.Y' scaleTileSize.Width + 1' scaleTileSize.Height + 1)); " is 130.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawEntities,The length of the statement  "                        g.DrawImage(civ.Identicon' new RectangleF(siteLocation.X' siteLocation.Y' scaleTileSize.Width + 1' scaleTileSize.Height + 1)); " is 126.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The length of the statement  "            Rectangle tileInfoBox = new Rectangle(ControlMenu.MenuBox.Width' this.Height - Minimap.Height - Convert.ToInt32(tileInfoSize.Height)' 70' Convert.ToInt32(tileInfoSize.Height)); " is 176.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The length of the statement  "            Rectangle yearBox = new Rectangle(Minimap.Width' this.Height - YearMenu.MenuBox.Height - Convert.ToInt32(yearBoxSize.Height)' YearMenu.MenuBox.Width' Convert.ToInt32(yearBoxSize.Height)); " is 187.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleCivs,The length of the statement  "                DisplayObjects.AddRange(World.Entities.Where(entity => entity.IsCiv && entity != FocusObject && !DisplayObjects.Contains(entity))); " is 131.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleCivs,The length of the statement  "                DisplayObjects.RemoveAll(dwarfObject => dwarfObject.GetType() == typeof(Entity) && dwarfObject != FocusObject && !WarEntities.Contains(dwarfObject)); " is 149.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleSites,The length of the statement  "                DisplayObjects.RemoveAll(dwarfObject => dwarfObject.GetType() == typeof(Site) && dwarfObject != FocusObject && !FocusObjects.Contains(dwarfObject)); " is 148.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleBattles,The length of the statement  "                //DisplayObjects.AddRange(World.EventCollections.OfType<Battle>().Where(battle => !DisplayObjects.Contains(battle) && battle != FocusObject)); " is 142.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleBattles,The length of the statement  "                Battles.AddRange(World.EventCollections.OfType<Battle>().Where(battle => !DisplayObjects.Contains(battle) && battle != FocusObject && !FocusObjects.Contains(battle))); " is 167.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleBattles,The length of the statement  "                if (FocusObjects.Count > 0 && FocusObjects.First().GetType() == typeof(Battle)) Battles.AddRange(FocusObjects.Cast<Battle>()); " is 126.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ToggleBattles,The length of the statement  "                //BattleLocations = DisplayObjects.OfType<Battle>().GroupBy(battle => battle.Coordinates).Select(battle => battle.Key).ToList(); " is 128.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateWarDisplay,The length of the statement  "            foreach (War war in DisplayObjects.OfType<War>().Where(war => war.StartYear <= CurrentYear && (war.EndYear >= CurrentYear || war.EndYear == -1))) " is 145.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "            OptionsMenu.Options.Single(option => option.Text == "Overlays").SubMenu.Options.ForEach(option => option.Toggled = false); " is 122.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "            OptionsMenu.Options.Single(option => option.Text == "Overlays").SubMenu.Options.Single(option => option.Text == overlay).Toggled = true; " is 136.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                    World.EventCollections.OfType<Battle>().Select(battle => battle.Coordinates).ToList().ForEach(coordinates => coordinatesList.Add(coordinates)); " is 143.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                    World.EventCollections.OfType<Battle>().Where(battle => battle.Notable).Select(battle => battle.Coordinates).ToList().ForEach(coordinates => coordinatesList.Add(coordinates)); " is 175.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                    foreach (Location coordinates in World.EventCollections.OfType<Battle>().GroupBy(battle => battle.Coordinates).Select(battle => battle.Key).ToList()) " is 149.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                        occurences.Add(World.EventCollections.OfType<Battle>().Where(battle => battle.Coordinates == coordinates).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount)); " is 176.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                        occurences.Add(World.Sites.Where(site => site.Coordinates == coordinates).Sum(site => site.Populations.Where(population => selectPopulations.SelectedPopulations.Contains(population.Race)).Sum(population => population.Count))); " is 226.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                        occurences.Add(World.Sites.Where(site => site.Coordinates == coordinates).Sum(site => site.Events.Count(dEvent => !LegendsViewer.Legends.Site.Filters.Contains(dEvent.Type)))); " is 175.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                    World.EventCollections.OfType<BeastAttack>().Select(attack => attack.Coordinates).ToList().ForEach(coordinates => coordinatesList.Add(coordinates)); " is 148.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The length of the statement  "                coordinatesList[i] = new Location(coordinatesList[i].X * TileSize + TileSize / 2' coordinatesList[i].Y * TileSize + TileSize / 2); " is 130.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The length of the statement  "            if (openMap.FileName != "" && !openMap.FileName.EndsWith(".bmp") && !openMap.FileName.EndsWith(".png") && !openMap.FileName.EndsWith(".jpeg") && !openMap.FileName.EndsWith(".jpg")) " is 180.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The length of the statement  "                    if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 0) " is 149.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The length of the statement  "                    else if (extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 1) " is 154.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The length of the statement  "                        fileName = extractor.ArchiveFileNames.Single(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")); " is 152.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The length of the statement  "                        dlgFileSelect fileSelect = new dlgFileSelect(extractor.ArchiveFileNames.Where(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")).ToList()); " is 195.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ZoomToBounds,The length of the statement  "                if (Source.X <= ZoomBounds.X && Source.Right >= ZoomBounds.Width && Source.Y <= ZoomBounds.Y && Source.Bottom >= ZoomBounds.Height) " is 131.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateScales,The length of the statement  "            Source.Location = new Point(Center.X - Convert.ToInt32((this.Width / 2) * ZoomCurrent)' Center.Y - Convert.ToInt32((this.Height / 2) * ZoomCurrent)); " is 149.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateScales,The length of the statement  "            AltMapTransparency.Location = new Point(MiniMapAreaSideLength + YearMenu.MenuBox.Width' this.Height - AltMapTransparency.Height); " is 129.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The length of the statement  "             && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5)//	e.Location == MouseClickLocation) " is 122.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The length of the statement  "                else if (HoverMenu.Options.Count == 1 && HoverMenu.Options.Count(option => option.SubMenu.Options.Count(option2 => option2.SubMenu != null) > 0) == 0) " is 150.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "            if (!ControlMenu.HighlightOption(e.X' e.Y) && !YearMenu.HighlightOption(e.X' e.Y) && !OptionsMenu.HighlightOption(e.X' e.Y) && !HoverMenu.Open) " is 143.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "                    foreach (OwnerPeriod sitePeriod in civ.SiteHistory.Where(site => (((site.StartYear == CurrentYear && site.StartCause != "took over") || site.StartYear < CurrentYear) " is 165.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "                foreach (Site site in DisplayObjects.OfType<Site>().Where(site => site.Coordinates == tile && !addOptions.Contains(site))) " is 122.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "                if (FocusObject != null && FocusObject.GetType() == typeof(Battle) && (FocusObject as Battle).Coordinates == tile) addOptions.Add(FocusObject as Battle); " is 153.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "                foreach (Battle battle in DisplayObjects.OfType<War>().SelectMany(war => war.Collections).OfType<Battle>().Where(battle => battle != FocusObject && battle.StartYear == CurrentYear && battle.Coordinates == tile)) " is 211.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The length of the statement  "            if (OptionsMenu.SelectedOption != null || ControlMenu.SelectedOption != null || YearMenu.SelectedOption != null) HoverMenu.Options.Clear(); " is 139.
Long Statement,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,GetClosestSite,The length of the statement  "            foreach (OwnerPeriod period in civ.SiteHistory.Where(site => ((site.StartYear == CurrentYear && site.StartCause != "took over") || site.StartYear < CurrentYear) " is 160.
Long Statement,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The length of the statement  "                        g.DrawLine(arrowPen' MenuBox.Right - subArrow.Height - 2' optionYPosition + OptionHeight / 2' MenuBox.Right - 2' optionYPosition + OptionHeight / 2);" is 149.
Long Statement,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,Create,The length of the statement  "                Site start = civ.SiteHistory.First(period => period.StartYear <= year && (period.EndYear > year || period.EndYear == -1)).Site;" is 127.
Long Statement,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,Create,The length of the statement  "                foreach (Entity.SitePeriod sitePeriod in civ.SiteHistory.Where((period => period.StartYear <= year && (period.EndYear > year || period.EndYear == -1) && period.Site != start)))" is 176.
Long Statement,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,CreateSiteNodes,The length of the statement  "            foreach (OwnerPeriod sitePeriod in civ.SiteHistory.Where(site => ((site.StartYear == year && site.StartCause != "took over") || site.StartYear < year)" is 150.
Long Statement,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,CreateSiteNodes,The length of the statement  "                    Point quadrantPoint = new Point(pathSite.Site.Coordinates.X - siteNode.Site.Coordinates.X' siteNode.Site.Coordinates.Y - pathSite.Site.Coordinates.Y);" is 150.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetComparers,The length of the statement  "                if (PropertySelect.Child != null && PropertySelect.Child.SelectedProperty != null && PropertySelect.ContainsList() && !PropertySelect.ContainsListLast())" is 153.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetComparers,The length of the statement  "            if (OrderByCriteria && PropertySelect.Child != null && (propertyType == typeof(int) || propertyType == typeof(double) || propertyType.IsGenericType))" is 149.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetComparers,The length of the statement  "                comparers.AddRange(new List<QueryComparer>() { QueryComparer.Min' QueryComparer.Max' QueryComparer.Average' QueryComparer.Sum });" is 129.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ComparerChanged,The length of the statement  "                if (comparer == QueryComparer.Min || comparer == QueryComparer.Max || comparer == QueryComparer.Average || comparer == QueryComparer.Sum)" is 137.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ComparerChanged,The length of the statement  "                else if (!Controls.Contains(ValueSelect) && PropertySelect.Child != null && PropertySelect.Child.SelectedProperty != null && !PropertySelect.ContainsListLast())" is 160.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "            //    ValueSelect.Items.AddRange(Enum.GetValues(typeof(SiteConqueredType)).Cast<object>().OrderBy(type => type.GetDescription()).ToArray());" is 140.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "            //    ValueSelect.Items.AddRange(Enum.GetValues(typeof(BattleOutcome)).Cast<object>().OrderBy(outcome => outcome.GetDescription()).ToArray());" is 142.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "            //    ValueSelect.Items.AddRange(Enum.GetValues(typeof(HFState)).Cast<object>().OrderBy(state => state.GetDescription()).ToArray());" is 132.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "            else //if (!selected.Type.IsGenericType)// && selected.Type != typeof(int) && selected.Type != typeof(double))// && PropertySelect.GetLowestProperty().Name != "Name")" is 166.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "                    if (options.FirstOrDefault() != null && (options.First().GetType() == typeof(int) || options.First().GetType() == typeof(double)))" is 130.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetValueOptions,The length of the statement  "            if (previousSelection != null && ValueSelect.Items.Contains(previousSelection)) ValueSelect.SelectedItem = previousSelection;" is 125.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,IsComplete,The length of the statement  "            bool complete = (PropertySelect.SelectedIndex >= 0) && (PropertySelect.GetLowestPropertyType().IsGenericType || PropertySelect.GetLowestPropertyType() == typeof(int) || PropertySelect.GetLowestPropertyType() == typeof(double) || PropertySelect.GetLowestPropertyType() == typeof(string) || PropertySelect.GetLowestPropertyType().IsEnum);" is 336.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,BuildSearchInfo,The length of the statement  "                criteria.SetupComparers((QueryComparer)ComparerSelect.SelectedItem);//  SearchProperty.StringToComparer(ComparerSelect.Text));" is 126.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,BuildSearchInfo,The length of the statement  "            if (PropertySelect.GetLowestPropertyType() == typeof(int) || PropertySelect.GetLowestPropertyType() == typeof(List<int>) || PropertySelect.GetLowestPropertyType().IsGenericType)" is 177.
Long Statement,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,BuildSearchInfo,The length of the statement  "            else if (PropertySelect.GetLowestPropertyType() == typeof(double) || PropertySelect.GetLowestPropertyType() == typeof(List<double>))" is 132.
Long Statement,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,UpdateValueSelects,The length of the statement  "            foreach (CriteriaLine line in Criteria.Where(criteria => Criteria.IndexOf(criteria) > Criteria.IndexOf(criteriaAfter) || Criteria.IndexOf(criteria) < 0))" is 153.
Long Statement,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,OnSelectedIndexChanged,The length of the statement  "            if (!ListPropertiesOnly && SelectedProperty != null && ((!ListPropertiesOnly && SelectedProperty.SubProperties.Count() > 0) || (ListPropertiesOnly && SelectedProperty.SubProperties.Count(property => property.SubProperties.Count > 0) > 0)))" is 239.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SelectList_SelectedIndexChanged,The length of the statement  "            if (SelectProperties.ParentType == typeof(Site) || SelectProperties.ParentType == typeof(Battle)) btnMapResults.Visible = true;" is 127.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SelectSubListChanged,The length of the statement  "            else if (SelectProperties.ParentType == typeof(Site) || SelectProperties.ParentType == typeof(Battle)) btnMapResults.Visible = true;" is 132.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,Search,The length of the statement  "                SearchList.Select(SelectProperties.SelectedProperty.Name' SelectProperties.SelectedProperty.Type.GetGenericArguments()[0]);" is 123.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SearchSelection,The length of the statement  "            //SearchList.Select(SelectProperties.SelectedProperty.Name' SelectProperties.SelectedProperty.Type.GetGenericArguments()[0]);" is 125.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,BuildQuery,The length of the statement  "                        if (currentProperty.SelectedProperty != null && currentProperty.SelectedProperty.Type.IsGenericType && currentProperty.SelectedProperty.Type.GetGenericTypeDefinition() == typeof(List<>))" is 186.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,BuildQuery,The length of the statement  "                        if (currentProperty.SelectedProperty != null && (currentProperty.SelectedProperty.Type == typeof(int) || currentProperty.SelectedProperty.Type == typeof(List<int>))) newCriteria.Value = Convert.ToInt32(line.ValueSelect.Text);" is 225.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,dgResults_CellFormatting,The length of the statement  "                else if (column == "Victories") e.Value = war.AttackerBattleVictories.Count + " / " + war.DefenderBattleVictories.Count;" is 120.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,dgResults_CellFormatting,The length of the statement  "                else if (column == "Sites Lost") e.Value = war.DefenderConquerings.Count(conquering => conquering.Notable) + " / " + war.AttackerConquerings.Count(conquering => conquering.Notable);" is 181.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The length of the statement  "            this.dgResults.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dgResults_CellFormatting);" is 128.
Long Statement,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The length of the statement  "            this.btnMapResults.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));" is 149.
Long Statement,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupComparers,The length of the statement  "                    if ((this.PropertyName != "Value" && this.GetSearchType().GetProperty(this.PropertyName).PropertyType == typeof(string))" is 120.
Long Statement,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupOrderByComparers,The length of the statement  "                if (comparer == QueryComparer.Min || comparer == QueryComparer.Max || comparer == QueryComparer.Average || comparer == QueryComparer.Sum)" is 137.
Long Statement,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupOrderByComparers,The length of the statement  "                        if (this.PropertyName != "Value") propertyIsString = this.GetSearchType().GetProperty(this.PropertyName).PropertyType == typeof(string);" is 136.
Long Statement,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupOrderByComparers,The length of the statement  "                        else propertyIsString = this.Previous.GetSearchType().GetProperty(Previous.PropertyName).PropertyType.GetGenericArguments()[0] == typeof(string);" is 145.
Long Statement,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,ContainsListPropertyLast,The length of the statement  "            if (this.GetSearchType().GetProperty(this.PropertyName).PropertyType.IsGenericType && Next != null && Next.Comparer == QueryComparer.All) return true;" is 150.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The length of the statement  "                    comparer = Expression.Call(property' methodInfo' Expression.Constant(Value)' Expression.Constant(StringComparison.CurrentCultureIgnoreCase));" is 141.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The length of the statement  "                    comparer = Expression.Not(Expression.Call(property' methodInfo' Expression.Constant(Value)' Expression.Constant(StringComparison.CurrentCultureIgnoreCase))); break;" is 164.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The length of the statement  "                        case QueryComparer.ListGreaterThan: comparer = Expression.GreaterThan(comparer' Expression.Constant(Convert.ToInt32(Value))); break;" is 132.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The length of the statement  "                        case QueryComparer.ListLessThan: comparer = Expression.LessThan(comparer' Expression.Constant(Convert.ToInt32(Value))); break;" is 126.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The length of the statement  "                        case QueryComparer.ListEquals: comparer = Expression.Equal(comparer' Expression.Constant(Convert.ToInt32(Value))); break;" is 121.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The length of the statement  "                    //methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.GetGenericArguments().Count() == 2);" is 131.
Long Statement,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The length of the statement  "                    methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.IsStatic && method.GetParameters().Length == 2 && method.GetGenericArguments().Length == 2);" is 185.
Long Statement,LegendsViewer.Controls.Query,SearchList<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchList.cs,OrderBy,The length of the statement  "                                    //List = List.Where(notEmpty.Compile()).OrderByDescending(t => criteria.Select(t).Select(t1 => Convert.ToDouble(t1)).Average()).ToList();" is 137.
Long Statement,LegendsViewer.Controls.Query,SearchList<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchList.cs,OrderBy,The length of the statement  "                                case QueryComparer.Sum: List = List.OrderByDescending(t => criteria.Select(t).Select(t1 => Convert.ToDouble(t1)).Sum()).ToList(); break;" is 136.
Long Statement,LegendsViewer.Controls.Query,SearchList<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchList.cs,OrderBy,The length of the statement  "                                case QueryComparer.Average: List = List.OrderBy(t => criteria.Select(t).Select(t1 => Convert.ToDouble(t1)).AverageOrZero()).ToList(); break;" is 140.
Long Statement,LegendsViewer.Controls.Query,SearchList<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchList.cs,OrderBy,The length of the statement  "                                case QueryComparer.Sum: List = List.OrderBy(t => criteria.Select(t).Select(t1 => Convert.ToDouble(t1)).Sum()).ToList(); break;" is 126.
Long Statement,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetProperties,The length of the statement  "                //(!searchType.IsGenericType || (!noSubProperties && !property.Type.IsGenericType)))// ||  (!noSubProperties && property.Type.IsGenericType && searchType.IsGenericType && searchType.GetGenericArguments()[0] != property.Type.GetGenericArguments()[0]))) " is 251.
Long Statement,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetComparers,The length of the statement  "                comparers = new List<QueryComparer>() { QueryComparer.Equals' QueryComparer.Contains' QueryComparer.StartsWith' QueryComparer.EndsWith' QueryComparer.NotEqual' QueryComparer.NotContains' QueryComparer.NotStartsWith' QueryComparer.NotEndsWith }; " is 244.
Long Statement,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetComparers,The length of the statement  "            else if (type == typeof(int) || (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>)) || type == typeof(double)) " is 132.
Long Statement,LegendsViewer.Legends,Battle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,ToLink,The length of the statement  "                    linkedString = "<a href = \"collection#" + this.ID + "\" title=\"" + title + "\"><font color=\"#6E5007\">" + Name + "</font></a>";" is 130.
Long Statement,LegendsViewer.Legends,BeastAttack,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\BeastAttack.cs,ToLink,The length of the statement  "                    linkedString = "<a href = \"collection#" + this.ID + "\" title=\"" + title + "\"><font color=\"#336600\">" + name + "</font></a>";" is 130.
Long Statement,LegendsViewer.Legends,SiteConquered,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\SiteConquered.cs,ToLink,The length of the statement  "                    linkedString = "<a href = \"collection#" + this.ID + "\"><font color=\"800000\">" + "The " + this.GetOrdinal(Ordinal) + ConquerType + " of " + Site.ToLink(false) + "</font></a>";" is 178.
Long Statement,LegendsViewer.Legends,SiteConquered,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\SiteConquered.cs,ToLink,The length of the statement  "                    linkedString = "<font color=\"Blue\">" + "The " + this.GetOrdinal(Ordinal) + ConquerType + " of " + Site.ToLink(false) + "</font>";" is 131.
Long Statement,LegendsViewer.Legends,War,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\War.cs,ToLink,The length of the statement  "                    string title = Attacker.PrintEntity(false) + " (Attacker)&#13" + Defender.PrintEntity(false) + " (Defender)&#13Deaths: " + DeathCount + " | (" + StartYear + " - ";" is 163.
Long Statement,LegendsViewer.Legends,War,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\War.cs,ToLink,The length of the statement  "                    linkedString = "<a href = \"collection#" + this.ID + "\" title=\"" + title + "\"><font color=\"#6E5007\">" + Name + "</font></a>";" is 130.
Long Statement,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The length of the statement  "            string[] monthNames = { "Granite"' "Slate"' "Felsite"' "Hematite"' "Malachite"' "Galena"' "Limestone"' "Sandstone"' "Timber"' "Moonstone"' "Opal"' "Obsidian" }; " is 160.
Long Statement,LegendsViewer.Legends,ArtifactStored,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Artifact.ToLink(link' pov) + " was stored in " + Site.ToLink(link' pov) + " by " + HistoricalFigure.ToLink(link' pov) + ". "; " is 162.
Long Statement,LegendsViewer.Legends,AssumeIdentity,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Trickster.ToLink(link' pov) + " fooled " + Target.ToLink(link' pov) + " into believing " + Trickster.CasteNoun() + " was " + Identity.ToLink(link' pov) + ". "; " is 196.
Long Statement,LegendsViewer.Legends,ChangeHFState,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            else if (State == HFState.Refugee || State == HFState.Snatcher || State == HFState.Thief) eventString += " became a " + State.ToString().ToLower() + " in "; " is 156.
Long Statement,LegendsViewer.Legends,ChangedCreatureType,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + Changer.ToLink(link' pov) + " changed " + Changee.ToLink(link' pov) + " from a " + OldRace + " into a " + NewRace + ". "; " is 163.
Long Statement,LegendsViewer.Legends,CreatedWorldConstruction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + SiteEntity.ToLink(link' pov) + " of " + Civ.ToLink(link' pov) + " finished the construction of UNKNOWN CONSTRUCTION connecting " + Site1.ToLink(link' pov) + " and " + Site2.ToLink(link' pov) + ". "; " is 240.
Long Statement,LegendsViewer.Legends,FieldBattle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + Attacker.ToLink(link' pov) + " attacked " + Defender.ToLink(link' pov) + " in " + Region.ToLink(link' pov) + ". " + " is 157.
Long Statement,LegendsViewer.Legends,FieldBattle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "                AttackerGeneral.ToLink(link' pov) + " led the attack' and the defenders were led by " + DefenderGeneral.ToLink(link' pov) + ". "; " is 129.
Long Statement,LegendsViewer.Legends,HFDoesInteraction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Doer.ToLink(link' pov) + " (" + Interaction + ") on " + Target.ToLink(link' pov) + ". "; " is 125.
Long Statement,LegendsViewer.Legends,HFGainsSecretGoal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "                case SecretGoal.Immortality: goalString = " became obsessed with " + HistoricalFigure.CasteNoun(true) + " own mortality and sought to extend " + HistoricalFigure.CasteNoun(true) + " life by any means"; break; " is 208.
Long Statement,LegendsViewer.Legends,HFProfanedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + HistoricalFigure.ToLink(link' pov) + " profaned (" + StructureID + ") in " + Site.ToLink(link' pov) + ". "; " is 144.
Long Statement,LegendsViewer.Legends,HFReunion,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + " " + HistoricalFigure1.ToLink(link' pov) + " was reunited with " + HistoricalFigure2.ToLink(link' pov); " is 146.
Long Statement,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            if (SubType == HFSimpleBattleType.HF2LostAfterGivingWounds) eventString = this.GetYearTime() + HistoricalFigure2.ToLink(link' pov) + " was forced to retreat from " " is 163.
Long Statement,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            else if (SubType == HFSimpleBattleType.HF2LostAfterMutualWounds) eventString += " eventually prevailed and " + HistoricalFigure2.ToLink(link' pov) " is 146.
Long Statement,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            else if (SubType == HFSimpleBattleType.HF2LostAfterReceivingWounds) eventString = this.GetYearTime() + HistoricalFigure2.ToLink(link' pov) + " managed to escape from " " is 167.
Long Statement,LegendsViewer.Legends,HFSimpleBattleEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            else if (SubType == HFSimpleBattleType.Scuffle) eventString += " fought with " + HistoricalFigure2.ToLink(link' pov) + ". While defeated' the latter escaped unscathed"; " is 168.
Long Statement,LegendsViewer.Legends,HFTravel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            if (Escaped) return this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " escaped from the " + UndergroundRegion.ToLink(link' pov); " is 137.
Long Statement,LegendsViewer.Legends,NewSiteLeader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            eventString += Defender.ToLink(link' pov) + " and placed " + NewLeader.ToLink(link' pov) + " in charge of " + Site.ToLink(link' pov) + ". The new government was called " + NewSiteEntity.ToLink(link' pov) + ". "; " is 211.
Long Statement,LegendsViewer.Legends,RazedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Entity.ToLink(link' pov) + " razed (" + StructureID + ") in " + Site.ToLink(link' pov) + ". "; " is 131.
Long Statement,LegendsViewer.Legends,RemoveHFEntityLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + " UNKNOWN HISTORICAL FIGURE removed link with " + Civ.ToLink(link' pov) + ". "; " is 121.
Long Statement,LegendsViewer.Legends,EntityPrimaryCriminals,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Entity.ToLink(link' pov) + " became the primary criminal organization in " + Site.ToLink(); " is 128.
Long Statement,LegendsViewer.Legends,EntityRelocate,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = GetYearTime() + Entity.ToLink(link' pov) + " moved to (" + StructureID + ") in " + Site.ToLink(link' pov) + ". "; " is 134.
Long Statement,LegendsViewer.Legends,HFRevived,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " came back from the dead as a " + Ghost + " in " + Site.ToLink(link' pov) + ". "; " is 161.
Long Statement,LegendsViewer.Legends,MasterpieceArchDesign,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " constructed a masterful (UNKNOWN) for " + Civ.ToLink(link' pov) + " is 146.
Long Statement,LegendsViewer.Legends,MasterpieceArchConstructed,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " designed a masterful (UNKNOWN) for " + Civ.ToLink(link' pov) + " is 143.
Long Statement,LegendsViewer.Legends,MasterpieceEngraving,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + "created a masterful engraving for" + Civ.ToLink(link' pov) + " is 140.
Long Statement,LegendsViewer.Legends,MasterpieceFood,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " prepared a masterful (UNKNOWN) for " + Civ.ToLink(link' pov) + " is 143.
Long Statement,LegendsViewer.Legends,MasterpieceItem,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " created a masterful (UNKNOWN) for " + Civ.ToLink(link' pov) + " is 142.
Long Statement,LegendsViewer.Legends,MasterpieceItemImprovement,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " added masterful (UNKNOWN) to a (UNKNOWN) for " " is 127.
Long Statement,LegendsViewer.Legends,AgreementMade,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + "UNKNOWN AGREEMENT proposed by UNKNOWN ENTITY was accepted by UNKNOWN ENTITY at " + Site.ToLink(link' pov) + ". "; " is 156.
Long Statement,LegendsViewer.Legends,CreatedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "                eventString += Builder.ToLink(link' pov) + "' thrust a spire of slade up from the underworld' naming it (UNKNOWN)' and established a gateway between worlds in " " is 160.
Long Statement,LegendsViewer.Legends,HFRazedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + HistoricalFigure.ToLink(link' pov) + " razed a (" + StructureID + ") in " + Site.ToLink(link' pov) + ". "; " is 148.
Long Statement,LegendsViewer.Legends,SiteTributeForced,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The length of the statement  "            string eventString = this.GetYearTime() + Attacker.ToLink(link' pov) + " secured tribute from " + SiteEntity.ToLink(link' pov); " is 127.
Long Statement,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,MakePopulationPlural,The length of the statement  "            else if (population.EndsWith("x") || population.EndsWith("ch") || population.EndsWith("sh") || population.EndsWith("s")) population += "es";" is 140.
Long Statement,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,MakePopulationPlural,The length of the statement  "            else if (population.EndsWith("y") && !population.EndsWith("ay") && !population.EndsWith("ey") && !population.EndsWith("iy") && !population.EndsWith("oy") && !population.EndsWith("uy")) population = population.Substring(0' population.Length - 1) + "ies";" is 253.
Long Statement,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ConvertToLocation,The length of the statement  "            int y = Convert.ToInt32(coordinates.Substring(coordinates.IndexOf("'") + 1' coordinates.Length - coordinates.IndexOf("'") - 1));" is 128.
Long Statement,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ResizeImage,The length of the statement  "                g.DrawImage(source' new Rectangle(0' 0' imageSize.Width' imageSize.Height)' new Rectangle(0' 0' source.Width' source.Height)' GraphicsUnit.Pixel);" is 146.
Long Statement,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The length of the statement  "                    // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here." is 139.
Long Statement,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,ToLink,The length of the statement  "                    if (pov != null && pov.GetType() == typeof(BeastAttack) && (pov as BeastAttack).Beast == this) //Highlight Beast when printing Beast Attack Log " is 143.
Long Statement,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,ToLink,The length of the statement  "                            return "<a href = \"hf#" + this.ID + "\" title=\"" + title + "\"><font color=#339900>" + this.Name.Substring(0' this.Name.IndexOf(" ")) + "</font></a>"; " is 152.
Long Statement,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,ToLink,The length of the statement  "                        else return "<a href = \"hf#" + this.ID + "\" title=\"" + title + "\"><font color=#339900>" + this.Name + "</font></a>"; " is 120.
Long Statement,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,ToLink,The length of the statement  "                        return "the " + GetRaceString() + " " + "<a href = \"hf#" + this.ID + "\" title=\"" + title + "\">" + this.Name + "</a>"; " is 121.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadCiv,The length of the statement  "            CurrentCiv.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2).ToLower());" is 152.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadWorships,The length of the statement  "                    string worshipName = Formatting.InitCaps(Formatting.ReplaceNonAscii(CurrentLine.Substring(2' CurrentLine.IndexOf("'") - 2)));" is 125.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,LeaderStart,The length of the statement  "            return !History.EndOfStream && CurrentLine.Contains(" List") && !CurrentLine.Contains("[*]") && !CurrentLine.Contains("%");" is 123.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The length of the statement  "                        string leaderName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf("[*]") + 4' CurrentLine.IndexOf("(b") - CurrentLine.IndexOf("[*]") - 5));" is 162.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The length of the statement  "                        int reignBegan = Convert.ToInt32(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf(")' ") - CurrentLine.IndexOf(":") - 2));" is 145.
Long Statement,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The length of the statement  "                        if (leader.Positions.Count > 0 && leader.Positions.Last().Ended == -1) //End of leader's last leader position (move up rank etc.)" is 129.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSite,The length of the statement  "            Site.UntranslatedName = Formatting.InitCaps(Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf(' ') + 1' CurrentLine.IndexOf(''') - CurrentLine.IndexOf(' ') - 1)));" is 182.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The length of the statement  "                string entityName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);" is 129.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The length of the statement  "                    Owner.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));" is 137.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The length of the statement  "                string civName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);" is 126.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The length of the statement  "                    Parent.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));" is 138.
Long Statement,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadOfficials,The length of the statement  "                    string officialName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2));" is 159.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The length of the statement  "                List<string> races = Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).OrderBy(entity => entity).ToList(); " is 155.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetHistoricalFigure,The length of the statement  "                    else if (mid == (HistoricalFiguresByName.Count() - 1) && String.Compare(HistoricalFiguresByName[mid - 1].Name' name' true) != 0) " is 128.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetHistoricalFigure,The length of the statement  "                    else if (String.Compare(HistoricalFiguresByName[mid - 1].Name' name' true) != 0 && String.Compare(HistoricalFiguresByName[mid + 1].Name' name' true) != 0) //checks duplicates " is 174.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetEntity,The length of the statement  "                    else if (mid == (EntitiesByName.Count - 1) && String.Compare(EntitiesByName[mid - 1].Name' name' true) != 0) return EntitiesByName[mid]; " is 136.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetEntity,The length of the statement  "                    else if (String.Compare(EntitiesByName[mid - 1].Name' name' true) != 0 && String.Compare(EntitiesByName[mid + 1].Name' name' true) != 0) " is 136.
Long Statement,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,ProcessHFtoEntityLinks,The length of the statement  "                    else if (relatedEntity.Type != EntityLinkType.Enemy || (relatedEntity.Type == EntityLinkType.Enemy && relatedEntity.Entity.IsCiv)) " is 130.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,SafeXMLFile,The length of the statement  "            DialogResult response = MessageBox.Show("There was an error loading this XML file! Do you wish to attempt a repair?"' "Error loading XML"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning);" is 188.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,SafeXMLFile,The length of the statement  "                DialogResult overwrite = MessageBox.Show("Repair completed. Would you like to overwrite the original file with the repaired version? (Note: No effect if opened from an archive)"' "Repair Completed"' MessageBoxButtons.YesNo' MessageBoxIcon.Question);" is 249.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ParseProperty,The length of the statement  "            if (XML.IsEmptyElement) //Need this for bugged XML properties that only have and end element like "</deity>" for historical figures." is 132.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,AddItemToWorld,The length of the statement  "                        World.ParsingErrors.Report("Unknown " + section + " Property: " + property.Name + " - " + subProperty.Name' subProperty.Value);" is 127.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ProcessXMLSection,The length of the statement  "                    era.Events = World.Events.Where(events => events.Year >= era.StartYear && events.Year <= era.EndYear).OrderBy(events => events.Year).ToList();" is 142.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ProcessXMLSection,The length of the statement  "                    era.Wars = World.EventCollections.OfType<War>().Where(war => (war.StartYear >= era.StartYear && war.EndYear <= era.EndYear && war.EndYear != -1) //entire war between" is 165.
Long Statement,LegendsViewer.Legends,XMLParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\XMLParser.cs,ProcessCollections,The length of the statement  "                    var slayers = beastAttack.GetSubEvents().OfType<HFDied>().GroupBy(death => death.Slayer).Select(hf => new { HF = hf.Key' Count = hf.Count() });" is 143.
Complex Conditional,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,MakePopulationPlural,The conditional expression  "population.EndsWith("x") || population.EndsWith("ch") || population.EndsWith("sh") || population.EndsWith("s")"  is complex.
Complex Conditional,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,MakePopulationPlural,The conditional expression  "population.EndsWith("y") && !population.EndsWith("ay") && !population.EndsWith("ey") && !population.EndsWith("iy") && !population.EndsWith("oy") && !population.EndsWith("uy")"  is complex.
Complex Conditional,LegendsViewer,AppHelpers,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\appClasses.cs,InitCaps,The conditional expression  "((part != "the" && part != "of") || (capName.Length == 0)) && part.Length > 0"  is complex.
Complex Conditional,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,SetupMenu,The conditional expression  "((FocusObject is WorldObject) && (FocusObject as WorldObject).Events.Count > 0)                  || (FocusObject.GetType() == typeof(War) && (FocusObject as EventCollection).GetSubEvents().Count > 0)"  is complex.
Complex Conditional,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,Load,The conditional expression  "XMLState != FileState.Ready || HistoryState != FileState.Ready || SitesState != FileState.Ready || MapState != FileState.Ready"  is complex.
Complex Conditional,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,Load,The conditional expression  "!(File.Exists(XMLText.Text) && File.Exists(HistoryText.Text) && File.Exists(SitesText.Text) && File.Exists(MapText.Text))"  is complex.
Complex Conditional,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The conditional expression  "extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 0"  is complex.
Complex Conditional,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,extract_DoWork,The conditional expression  "extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 1"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The conditional expression  "FocusObject.GetType() == typeof(Entity) || FocusObject.GetType() == typeof(War)                    || FocusObject.GetType() == typeof(Battle) || FocusObject.GetType() == typeof(SiteConquered)"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The conditional expression  "openMap.FileName != "" && !openMap.FileName.EndsWith(".bmp") && !openMap.FileName.EndsWith(".png") && !openMap.FileName.EndsWith(".jpeg") && !openMap.FileName.EndsWith(".jpg")"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The conditional expression  "extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 0"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeMap,The conditional expression  "extractor.ArchiveFileNames.Count(file => file.EndsWith(".bmp") || file.EndsWith(".png") || file.EndsWith(".jpg") || file.EndsWith(".jpeg")) == 1"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,Pan,The conditional expression  "xChange > 2 || xChange < -2 || yChange > 2 || yChange < -2"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ZoomToBounds,The conditional expression  "Source.X <= ZoomBounds.X && Source.Right >= ZoomBounds.Width && Source.Y <= ZoomBounds.Y && Source.Bottom >= ZoomBounds.Height"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The conditional expression  "e.Location.X > MouseClickLocation.X - 5 && e.Location.X < MouseClickLocation.X + 5               && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5"  is complex.
Complex Conditional,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseMove,The conditional expression  "!ControlMenu.HighlightOption(e.X' e.Y) && !YearMenu.HighlightOption(e.X' e.Y) && !OptionsMenu.HighlightOption(e.X' e.Y) && !HoverMenu.Open"  is complex.
Complex Conditional,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The conditional expression  "option == SelectedOption ||                        (!Open && ((option == autoShowSubMenu) || (Options.Count == 1)))"  is complex.
Complex Conditional,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,HighlightOption,The conditional expression  "x >= MenuBox.Left && x <= MenuBox.Right && y >= MenuBox.Top && y <= MenuBox.Bottom && Options.Count > 0"  is complex.
Complex Conditional,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Click,The conditional expression  "x >= MenuBox.Left && x <= MenuBox.Right && y >= MenuBox.Top && y <= MenuBox.Bottom"  is complex.
Complex Conditional,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,HighlightOption,The conditional expression  "x >= MenuBox.Left && x <= MenuBox.Right && y >= MenuBox.Top && y <= MenuBox.Bottom"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetComparers,The conditional expression  "PropertySelect.Child != null && PropertySelect.Child.SelectedProperty != null && PropertySelect.ContainsList() && !PropertySelect.ContainsListLast()"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,GetComparers,The conditional expression  "OrderByCriteria && PropertySelect.Child != null && (propertyType == typeof(int) || propertyType == typeof(double) || propertyType.IsGenericType)"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ComparerChanged,The conditional expression  "comparer == QueryComparer.Min || comparer == QueryComparer.Max || comparer == QueryComparer.Average || comparer == QueryComparer.Sum"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ComparerChanged,The conditional expression  "!Controls.Contains(ValueSelect) && PropertySelect.Child != null && PropertySelect.Child.SelectedProperty != null && !PropertySelect.ContainsListLast()"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,OnSelectedIndexChanged,The conditional expression  "!ListPropertiesOnly && SelectedProperty != null && ((!ListPropertiesOnly && SelectedProperty.SubProperties.Count() > 0) || (ListPropertiesOnly && SelectedProperty.SubProperties.Count(property => property.SubProperties.Count > 0) > 0))"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupComparers,The conditional expression  "(this.PropertyName != "Value" && this.GetSearchType().GetProperty(this.PropertyName).PropertyType == typeof(string))                       || (this.PropertyName == "Value" && this.GetSearchType() == typeof(string))"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupOrderByComparers,The conditional expression  "comparer == QueryComparer.Min || comparer == QueryComparer.Max || comparer == QueryComparer.Average || comparer == QueryComparer.Sum"  is complex.
Complex Conditional,LegendsViewer.Controls.Query,SearchProperty,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchProperty.cs,GetComparers,The conditional expression  "type == typeof(int) || (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>)) || type == typeof(double)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                 token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                 token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                 token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                 token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                     (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                 exprType.IsInterface || type.IsInterface"  is complex.
Complex Conditional,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,InitCaps,The conditional expression  "((part != "the" && part != "of") || (capName.Length == 0)) && part.Length > 0"  is complex.
Complex Conditional,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,MakePopulationPlural,The conditional expression  "population.EndsWith("x") || population.EndsWith("ch") || population.EndsWith("sh") || population.EndsWith("s")"  is complex.
Complex Conditional,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,MakePopulationPlural,The conditional expression  "population.EndsWith("y") && !population.EndsWith("ay") && !population.EndsWith("ey") && !population.EndsWith("iy") && !population.EndsWith("oy") && !population.EndsWith("uy")"  is complex.
Virtual Method Call from Constructor,LegendsViewer,ChartControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartControl,The constructor "ChartControl" calls a virtual method "ToLink".
Virtual Method Call from Constructor,LegendsViewer.Controls,HTMLControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLControl.cs,HTMLControl,The constructor "HTMLControl" calls a virtual method "GetTitle".
Virtual Method Call from Constructor,LegendsViewer.Controls,MapControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapControl,The constructor "MapControl" calls a virtual method "ToLink".
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.ChartAreas.Last().BackColor = Color.FromArgb(235' 235' 235);
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.ChartAreas.Last().BackColor = Color.FromArgb(235' 235' 235);
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.ChartAreas.Last().BackColor = Color.FromArgb(235' 235' 235);
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.Legends.Last().Position.Width = 100;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.Legends.Last().Position.Y = 100;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.Legends.Last().Position.Height = 4;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.Titles.Last().Position.X = 50;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartPanel,The following statement contains a magic number: DwarfChart.Titles.Last().Position.Y = 1.5f;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: int minYAxis = 20;
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Chart Setup              {                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineBattleDeaths:                      foreach (Series setup in series)                      {                          if (option == ChartOption.TimelineEvents || option == ChartOption.TimelineEventsFiltered)                              setup.ChartType = SeriesChartType.Area;                          else                              setup.ChartType = SeriesChartType.Line;                          //setup.XValueType = ChartValueType.Int32;                      }                        DwarfChart.Legends.Last().LegendStyle = LegendStyle.Row;                      DwarfChart.Legends.Last().Position.Auto = false;                      DwarfChart.Legends.Last().Position.Width = 100;                      DwarfChart.Legends.Last().Position.Y = 100;                      DwarfChart.Legends.Last().Position.Height = 4;                      DwarfChart.Titles.Last().Text = "Timeline";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.ChartAreas.First().AxisX.Interval = 0;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = 0;                      DwarfChart.Legends.Last().Enabled = true;                      break;                  case ChartOption.WorldHFAlive:                  //case ChartOption.WorldHFDead:                  case ChartOption.WorldHFRaces:                  case ChartOption.WorldOutdoorPopulations:                  case ChartOption.WorldRegionTypes:                  case ChartOption.WorldSitePopulations:                  case ChartOption.WorldDeaths:                  case ChartOption.WorldSiteTypes:                  case ChartOption.WorldUndergroundPopulations:                  case ChartOption.OtherEventTypes:                  case ChartOption.OtherEntityPopulations:                  case ChartOption.OtherKillsByRace:                  //case ChartOption.OtherEntityWarDeaths:                  //case ChartOption.OtherEntityWarKills:                  //case ChartOption.OtherEntityWarLosses:                  case ChartOption.OtherDeaths:                  case ChartOption.OtherSitePopulations:                  case ChartOption.OtherWarLosses:                      series.First().ChartType = SeriesChartType.Pie;                      if (option == ChartOption.OtherWarLosses)                          series.First().CustomProperties = "PieLabelStyle=Outside'PieStartAngle=270";                      else                          series.First().CustomProperties = "CollectedThreshold=0.75' PieLabelStyle=Outside'PieStartAngle=270";                      series.First().IsValueShownAsLabel = true;                      series.First().Label = "#LEGENDTEXT\n#VAL (#PERCENT)";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = true;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.First().Name;                      break;                  //DwarfChart.LegendsViewer.Last().LegendStyle = LegendStyle.Column;                  //DwarfChart.LegendsViewer.Last().Position.Auto = true; break;                  case ChartOption.WorldHFRemaining:                  case ChartOption.OtherBattleRemaining:                      foreach (Series setup in series)                      {                          setup.ChartType = SeriesChartType.Column;                          setup.IsValueShownAsLabel = true;                          setup.CustomProperties = "DrawSideBySide=False";                      }                      //series.Last().CustomProperties += "'LabelStyle=Bottom";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = 0;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = false;                      DwarfChart.ChartAreas.First().AxisX.Interval = 1;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = -30;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.Last().Name;                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Chart Setup              {                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineBattleDeaths:                      foreach (Series setup in series)                      {                          if (option == ChartOption.TimelineEvents || option == ChartOption.TimelineEventsFiltered)                              setup.ChartType = SeriesChartType.Area;                          else                              setup.ChartType = SeriesChartType.Line;                          //setup.XValueType = ChartValueType.Int32;                      }                        DwarfChart.Legends.Last().LegendStyle = LegendStyle.Row;                      DwarfChart.Legends.Last().Position.Auto = false;                      DwarfChart.Legends.Last().Position.Width = 100;                      DwarfChart.Legends.Last().Position.Y = 100;                      DwarfChart.Legends.Last().Position.Height = 4;                      DwarfChart.Titles.Last().Text = "Timeline";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.ChartAreas.First().AxisX.Interval = 0;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = 0;                      DwarfChart.Legends.Last().Enabled = true;                      break;                  case ChartOption.WorldHFAlive:                  //case ChartOption.WorldHFDead:                  case ChartOption.WorldHFRaces:                  case ChartOption.WorldOutdoorPopulations:                  case ChartOption.WorldRegionTypes:                  case ChartOption.WorldSitePopulations:                  case ChartOption.WorldDeaths:                  case ChartOption.WorldSiteTypes:                  case ChartOption.WorldUndergroundPopulations:                  case ChartOption.OtherEventTypes:                  case ChartOption.OtherEntityPopulations:                  case ChartOption.OtherKillsByRace:                  //case ChartOption.OtherEntityWarDeaths:                  //case ChartOption.OtherEntityWarKills:                  //case ChartOption.OtherEntityWarLosses:                  case ChartOption.OtherDeaths:                  case ChartOption.OtherSitePopulations:                  case ChartOption.OtherWarLosses:                      series.First().ChartType = SeriesChartType.Pie;                      if (option == ChartOption.OtherWarLosses)                          series.First().CustomProperties = "PieLabelStyle=Outside'PieStartAngle=270";                      else                          series.First().CustomProperties = "CollectedThreshold=0.75' PieLabelStyle=Outside'PieStartAngle=270";                      series.First().IsValueShownAsLabel = true;                      series.First().Label = "#LEGENDTEXT\n#VAL (#PERCENT)";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = true;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.First().Name;                      break;                  //DwarfChart.LegendsViewer.Last().LegendStyle = LegendStyle.Column;                  //DwarfChart.LegendsViewer.Last().Position.Auto = true; break;                  case ChartOption.WorldHFRemaining:                  case ChartOption.OtherBattleRemaining:                      foreach (Series setup in series)                      {                          setup.ChartType = SeriesChartType.Column;                          setup.IsValueShownAsLabel = true;                          setup.CustomProperties = "DrawSideBySide=False";                      }                      //series.Last().CustomProperties += "'LabelStyle=Bottom";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = 0;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = false;                      DwarfChart.ChartAreas.First().AxisX.Interval = 1;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = -30;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.Last().Name;                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Chart Setup              {                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineBattleDeaths:                      foreach (Series setup in series)                      {                          if (option == ChartOption.TimelineEvents || option == ChartOption.TimelineEventsFiltered)                              setup.ChartType = SeriesChartType.Area;                          else                              setup.ChartType = SeriesChartType.Line;                          //setup.XValueType = ChartValueType.Int32;                      }                        DwarfChart.Legends.Last().LegendStyle = LegendStyle.Row;                      DwarfChart.Legends.Last().Position.Auto = false;                      DwarfChart.Legends.Last().Position.Width = 100;                      DwarfChart.Legends.Last().Position.Y = 100;                      DwarfChart.Legends.Last().Position.Height = 4;                      DwarfChart.Titles.Last().Text = "Timeline";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.ChartAreas.First().AxisX.Interval = 0;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = 0;                      DwarfChart.Legends.Last().Enabled = true;                      break;                  case ChartOption.WorldHFAlive:                  //case ChartOption.WorldHFDead:                  case ChartOption.WorldHFRaces:                  case ChartOption.WorldOutdoorPopulations:                  case ChartOption.WorldRegionTypes:                  case ChartOption.WorldSitePopulations:                  case ChartOption.WorldDeaths:                  case ChartOption.WorldSiteTypes:                  case ChartOption.WorldUndergroundPopulations:                  case ChartOption.OtherEventTypes:                  case ChartOption.OtherEntityPopulations:                  case ChartOption.OtherKillsByRace:                  //case ChartOption.OtherEntityWarDeaths:                  //case ChartOption.OtherEntityWarKills:                  //case ChartOption.OtherEntityWarLosses:                  case ChartOption.OtherDeaths:                  case ChartOption.OtherSitePopulations:                  case ChartOption.OtherWarLosses:                      series.First().ChartType = SeriesChartType.Pie;                      if (option == ChartOption.OtherWarLosses)                          series.First().CustomProperties = "PieLabelStyle=Outside'PieStartAngle=270";                      else                          series.First().CustomProperties = "CollectedThreshold=0.75' PieLabelStyle=Outside'PieStartAngle=270";                      series.First().IsValueShownAsLabel = true;                      series.First().Label = "#LEGENDTEXT\n#VAL (#PERCENT)";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = true;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.First().Name;                      break;                  //DwarfChart.LegendsViewer.Last().LegendStyle = LegendStyle.Column;                  //DwarfChart.LegendsViewer.Last().Position.Auto = true; break;                  case ChartOption.WorldHFRemaining:                  case ChartOption.OtherBattleRemaining:                      foreach (Series setup in series)                      {                          setup.ChartType = SeriesChartType.Column;                          setup.IsValueShownAsLabel = true;                          setup.CustomProperties = "DrawSideBySide=False";                      }                      //series.Last().CustomProperties += "'LabelStyle=Bottom";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = 0;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = false;                      DwarfChart.ChartAreas.First().AxisX.Interval = 1;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = -30;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.Last().Name;                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Chart Setup              {                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineBattleDeaths:                      foreach (Series setup in series)                      {                          if (option == ChartOption.TimelineEvents || option == ChartOption.TimelineEventsFiltered)                              setup.ChartType = SeriesChartType.Area;                          else                              setup.ChartType = SeriesChartType.Line;                          //setup.XValueType = ChartValueType.Int32;                      }                        DwarfChart.Legends.Last().LegendStyle = LegendStyle.Row;                      DwarfChart.Legends.Last().Position.Auto = false;                      DwarfChart.Legends.Last().Position.Width = 100;                      DwarfChart.Legends.Last().Position.Y = 100;                      DwarfChart.Legends.Last().Position.Height = 4;                      DwarfChart.Titles.Last().Text = "Timeline";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.ChartAreas.First().AxisX.Interval = 0;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = 0;                      DwarfChart.Legends.Last().Enabled = true;                      break;                  case ChartOption.WorldHFAlive:                  //case ChartOption.WorldHFDead:                  case ChartOption.WorldHFRaces:                  case ChartOption.WorldOutdoorPopulations:                  case ChartOption.WorldRegionTypes:                  case ChartOption.WorldSitePopulations:                  case ChartOption.WorldDeaths:                  case ChartOption.WorldSiteTypes:                  case ChartOption.WorldUndergroundPopulations:                  case ChartOption.OtherEventTypes:                  case ChartOption.OtherEntityPopulations:                  case ChartOption.OtherKillsByRace:                  //case ChartOption.OtherEntityWarDeaths:                  //case ChartOption.OtherEntityWarKills:                  //case ChartOption.OtherEntityWarLosses:                  case ChartOption.OtherDeaths:                  case ChartOption.OtherSitePopulations:                  case ChartOption.OtherWarLosses:                      series.First().ChartType = SeriesChartType.Pie;                      if (option == ChartOption.OtherWarLosses)                          series.First().CustomProperties = "PieLabelStyle=Outside'PieStartAngle=270";                      else                          series.First().CustomProperties = "CollectedThreshold=0.75' PieLabelStyle=Outside'PieStartAngle=270";                      series.First().IsValueShownAsLabel = true;                      series.First().Label = "#LEGENDTEXT\n#VAL (#PERCENT)";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = true;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.First().Name;                      break;                  //DwarfChart.LegendsViewer.Last().LegendStyle = LegendStyle.Column;                  //DwarfChart.LegendsViewer.Last().Position.Auto = true; break;                  case ChartOption.WorldHFRemaining:                  case ChartOption.OtherBattleRemaining:                      foreach (Series setup in series)                      {                          setup.ChartType = SeriesChartType.Column;                          setup.IsValueShownAsLabel = true;                          setup.CustomProperties = "DrawSideBySide=False";                      }                      //series.Last().CustomProperties += "'LabelStyle=Bottom";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = 0;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = false;                      DwarfChart.ChartAreas.First().AxisX.Interval = 1;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = -30;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.Last().Name;                      break;              }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following statement contains a magic number: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(29' 321);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(29' 321);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(110' 321);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(110' 321);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 3;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAll.Location = new System.Drawing.Point(207' 12);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAll.Location = new System.Drawing.Point(207' 12);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAll.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAll.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnAll.TabIndex = 4;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNone.Location = new System.Drawing.Point(207' 41);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNone.Location = new System.Drawing.Point(207' 41);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNone.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNone.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNone.TabIndex = 5;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNumber.Location = new System.Drawing.Point(207' 292);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNumber.Location = new System.Drawing.Point(207' 292);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNumber.Size = new System.Drawing.Size(84' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNumber.Size = new System.Drawing.Size(84' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnNumber.TabIndex = 6;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnName.Location = new System.Drawing.Point(207' 263);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnName.Location = new System.Drawing.Point(207' 263);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnName.Size = new System.Drawing.Size(84' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnName.Size = new System.Drawing.Size(84' 23);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.btnName.TabIndex = 7;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.listPopulations.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.listPopulations.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.listPopulations.Size = new System.Drawing.Size(189' 303);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.listPopulations.Size = new System.Drawing.Size(189' 303);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.listPopulations.TabIndex = 10;
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(301' 352);
Magic Number,LegendsViewer,dlgPopulation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\dlgPopulation.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(301' 352);
Magic Number,LegendsViewer,DwarfTabControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,WndProc,The following statement contains a magic number: m.Msg > 512 && m.Msg <= 528
Magic Number,LegendsViewer,DwarfTabControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,WndProc,The following statement contains a magic number: m.Msg > 512 && m.Msg <= 528
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,WndProc,The following statement contains a magic number: m.LParam = MAKELPARAM(this.Padding.X + CloseButtonHeight / 2' this.Padding.Y);
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,MAKELPARAM,The following statement contains a magic number: return new IntPtr((hi << 16) | (lo & 0xFFFF));
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawTabContent,The following statement contains a magic number: closeRect.Offset(-2' (contentRect.Height - closeRect.Height) / 2);
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawTabContent,The following statement contains a magic number: closeRect.Offset(-2' (contentRect.Height - closeRect.Height) / 2);
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,DrawTabContent,The following statement contains a magic number: imageRect.Offset(0' (contentRect.Height - imageRect.Height) / 2);
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,GetCloseButtonRect,The following statement contains a magic number: switch (Alignment)             {                 case TabAlignment.Left:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' 0);                     break;                 case TabAlignment.Right:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' tabRect.Height - closeRect.Height);                     break;                 default:                     closeRect.Offset(tabRect.Width - closeRect.Width' (tabRect.Height - closeRect.Height) / 2);                     break;             }
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,GetCloseButtonRect,The following statement contains a magic number: switch (Alignment)             {                 case TabAlignment.Left:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' 0);                     break;                 case TabAlignment.Right:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' tabRect.Height - closeRect.Height);                     break;                 default:                     closeRect.Offset(tabRect.Width - closeRect.Width' (tabRect.Height - closeRect.Height) / 2);                     break;             }
Magic Number,LegendsViewer,TabControlImproved,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,GetCloseButtonRect,The following statement contains a magic number: switch (Alignment)             {                 case TabAlignment.Left:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' 0);                     break;                 case TabAlignment.Right:                     closeRect.Offset((tabRect.Width - closeRect.Width) / 2' tabRect.Height - closeRect.Height);                     break;                 default:                     closeRect.Offset(tabRect.Width - closeRect.Width' (tabRect.Height - closeRect.Height) / 2);                     break;             }
Magic Number,LegendsViewer,HistoricalFigureList,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\SimpleLists.cs,GetList,The following statement contains a magic number: return filtered.Take(500);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.listFiles.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.listFiles.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.listFiles.Size = new System.Drawing.Size(370' 212);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.listFiles.Size = new System.Drawing.Size(370' 212);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(109' 230);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(109' 230);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(190' 230);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(190' 230);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 2;
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(394' 261);
Magic Number,LegendsViewer,dlgFileSelect,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(394' 261);
Magic Number,LegendsViewer,MapFile,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\dlgFileSelect.cs,MapFile,The following statement contains a magic number: Order =3;
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(29' 321);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Location = new System.Drawing.Point(29' 321);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnAccept.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(110' 321);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(110' 321);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 3;
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.listHFRaces.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.listHFRaces.Location = new System.Drawing.Point(12' 12);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.listHFRaces.Size = new System.Drawing.Size(189' 303);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.listHFRaces.Size = new System.Drawing.Size(189' 303);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.listHFRaces.TabIndex = 10;
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(212' 352);
Magic Number,LegendsViewer,dlgHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\dlgHF.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(212' 352);
Magic Number,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,load_DoWork,The following statement contains a magic number: e.Result = new World(files[0]' files[1]' files[2]' files[3]);
Magic Number,LegendsViewer,FileLoader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\FileLoader.cs,load_DoWork,The following statement contains a magic number: e.Result = new World(files[0]' files[1]' files[2]' files[3]);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,frmLegendsViewer,The following statement contains a magic number: btnBack.Location = new Point(tcWorld.Right + 3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,frmLegendsViewer,The following statement contains a magic number: btnBack.Location = new Point(tcWorld.Right + 3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,frmLegendsViewer,The following statement contains a magic number: btnForward.Location = new Point(btnBack.Right + 3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,frmLegendsViewer,The following statement contains a magic number: btnForward.Location = new Point(btnBack.Right + 3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,frmLegendsViewer,The following statement contains a magic number: Browser.Location = new Point(tcWorld.Right' btnBack.Bottom + 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,HideTabControlBorder,The following statement contains a magic number: tc.Left -= 3;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,HideTabControlBorder,The following statement contains a magic number: tc.Top -= 2;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,HideTabControlBorder,The following statement contains a magic number: tc.Width += 6;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,HideTabControlBorder,The following statement contains a magic number: tc.Height += 4;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: hint.SetToolTip(eventCheck' eventInfo[2]);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: eventCheck.Location = new Point(10' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: eventCheck.Location = new Point(10' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: eventCheck.Width = 235;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: btnAll.Location = new Point(10' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: btnAll.Location = new Point(10' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: btnNone.Location = new Point(90' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,GenerateEventFilterCheckBoxes,The following statement contains a magic number: btnNone.Location = new Point(90' 23 * count);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcWorld.Size = new System.Drawing.Size(277' 562);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcWorld.Size = new System.Drawing.Size(277' 562);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcWorld.TabIndex = 2;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSummary.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSummary.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSummary.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSummary.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnAdvancedSearch.Location = new System.Drawing.Point(11' 487);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnAdvancedSearch.Location = new System.Drawing.Point(11' 487);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnAdvancedSearch.Size = new System.Drawing.Size(250' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnAdvancedSearch.Size = new System.Drawing.Size(250' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnAdvancedSearch.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnChart.Location = new System.Drawing.Point(188' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnChart.Location = new System.Drawing.Point(188' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnChart.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnChart.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnChart.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnStats.Location = new System.Drawing.Point(11' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnStats.Location = new System.Drawing.Point(11' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnStats.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnStats.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnStats.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnShowMap.Location = new System.Drawing.Point(100' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnShowMap.Location = new System.Drawing.Point(100' 458);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnShowMap.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnShowMap.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnShowMap.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnMap.Location = new System.Drawing.Point(233' 84);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnMap.Location = new System.Drawing.Point(233' 84);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnMap.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnMap.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnMap.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtMap.Location = new System.Drawing.Point(9' 84);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtMap.Location = new System.Drawing.Point(9' 84);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtMap.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtMap.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtMap.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(8' 112);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(8' 112);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(253' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(253' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSitePops.Location = new System.Drawing.Point(9' 60);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSitePops.Location = new System.Drawing.Point(9' 60);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSitePops.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSitePops.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSitePops.TabIndex = 11;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHistory.Location = new System.Drawing.Point(9' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHistory.Location = new System.Drawing.Point(9' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHistory.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHistory.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHistory.TabIndex = 10;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSitePops.Location = new System.Drawing.Point(233' 57);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSitePops.Location = new System.Drawing.Point(233' 57);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSitePops.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSitePops.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSitePops.TabIndex = 9;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHistory.Location = new System.Drawing.Point(233' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHistory.Location = new System.Drawing.Point(233' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHistory.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHistory.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHistory.TabIndex = 8;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnXML.Location = new System.Drawing.Point(233' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnXML.Location = new System.Drawing.Point(233' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnXML.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnXML.Size = new System.Drawing.Size(30' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnXML.TabIndex = 7;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtXML.Location = new System.Drawing.Point(9' 8);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtXML.Location = new System.Drawing.Point(9' 8);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtXML.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtXML.Size = new System.Drawing.Size(218' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtXML.TabIndex = 6;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtLog.Location = new System.Drawing.Point(9' 138);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtLog.Location = new System.Drawing.Point(9' 138);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtLog.Size = new System.Drawing.Size(254' 314);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtLog.Size = new System.Drawing.Size(254' 314);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtLog.TabIndex = 3;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHF.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHF.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHF.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHF.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcHF.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcHF.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFListReset.Location = new System.Drawing.Point(6' 236);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFListReset.Location = new System.Drawing.Point(6' 236);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFListReset.TabIndex = 41;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblHFList.Location = new System.Drawing.Point(61' 241);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblHFList.Location = new System.Drawing.Point(61' 241);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblHFList.Size = new System.Drawing.Size(192' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblHFList.Size = new System.Drawing.Size(192' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblHFList.TabIndex = 40;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.grpHFFilter.Location = new System.Drawing.Point(3' 280);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.grpHFFilter.Location = new System.Drawing.Point(3' 280);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.grpHFFilter.Size = new System.Drawing.Size(254' 209);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.grpHFFilter.Size = new System.Drawing.Size(254' 209);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.grpHFFilter.TabIndex = 33;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkHFLeader.Location = new System.Drawing.Point(6' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkHFLeader.Location = new System.Drawing.Point(6' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkHFLeader.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkHFLeader.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkHFLeader.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(115' 137);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(115' 137);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortBattles.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortBattles.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortBattles.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortBattles.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortBattles.TabIndex = 21;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortFiltered.TabIndex = 20;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFNone.Location = new System.Drawing.Point(6' 111);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFNone.Location = new System.Drawing.Point(6' 111);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFNone.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radHFSortEvents.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortKills.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortKills.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortKills.Size = new System.Drawing.Size(83' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortKills.Size = new System.Drawing.Size(83' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortKills.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkForce.Location = new System.Drawing.Point(6' 185);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkForce.Location = new System.Drawing.Point(6' 185);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkForce.Size = new System.Drawing.Size(53' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkForce.Size = new System.Drawing.Size(53' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkForce.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point(3' 96);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point(3' 96);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label30.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbType.Location = new System.Drawing.Point(6' 112);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbType.Location = new System.Drawing.Point(6' 112);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbType.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label29.Location = new System.Drawing.Point(3' 57);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label29.Location = new System.Drawing.Point(3' 57);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label29.Size = new System.Drawing.Size(34' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label29.Size = new System.Drawing.Size(34' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label29.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCaste.Location = new System.Drawing.Point(6' 73);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCaste.Location = new System.Drawing.Point(6' 73);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCaste.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCaste.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCaste.TabIndex = 11;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point(3' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point(3' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size(33' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size(33' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label25.TabIndex = 10;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRace.Location = new System.Drawing.Point(6' 33);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRace.Location = new System.Drawing.Point(6' 33);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRace.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRace.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRace.TabIndex = 6;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkAlive.Location = new System.Drawing.Point(73' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkAlive.Location = new System.Drawing.Point(73' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkAlive.Size = new System.Drawing.Size(49' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkAlive.Size = new System.Drawing.Size(49' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkAlive.TabIndex = 4;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkGhost.Location = new System.Drawing.Point(73' 139);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkGhost.Location = new System.Drawing.Point(73' 139);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkGhost.Size = new System.Drawing.Size(54' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkGhost.Size = new System.Drawing.Size(54' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkGhost.TabIndex = 3;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkDeity.Location = new System.Drawing.Point(73' 185);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkDeity.Location = new System.Drawing.Point(73' 185);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkDeity.Size = new System.Drawing.Size(50' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkDeity.Size = new System.Drawing.Size(50' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHFSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHFSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHFSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHFSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtHFSearch.TabIndex = 32;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listHFSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listHFSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listHFSearch.Size = new System.Drawing.Size(256' 186);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listHFSearch.Size = new System.Drawing.Size(256' 186);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listHFSearch.TabIndex = 31;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnHFSearch.TabIndex = 30;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpHFEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSites.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSites.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSites.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSites.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSites.TabIndex = 2;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcSites.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcSites.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteListReset.Location = new System.Drawing.Point(6' 241);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteListReset.Location = new System.Drawing.Point(6' 241);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteListReset.TabIndex = 43;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblSiteList.Location = new System.Drawing.Point(61' 245);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblSiteList.Location = new System.Drawing.Point(61' 245);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblSiteList.Size = new System.Drawing.Size(198' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblSiteList.Size = new System.Drawing.Size(198' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblSiteList.TabIndex = 42;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(3' 284);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(3' 284);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(254' 202);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(254' 202);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 34;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Location = new System.Drawing.Point(6' 59);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Location = new System.Drawing.Point(6' 59);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Size = new System.Drawing.Size(240' 137);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Size = new System.Drawing.Size(240' 137);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteBeastAttacks.Location = new System.Drawing.Point(113' 87);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteBeastAttacks.Location = new System.Drawing.Point(113' 87);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteBeastAttacks.Size = new System.Drawing.Size(91' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteBeastAttacks.Size = new System.Drawing.Size(91' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteBeastAttacks.TabIndex = 23;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortDeaths.Location = new System.Drawing.Point(6' 110);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortDeaths.Location = new System.Drawing.Point(6' 110);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortDeaths.TabIndex = 22;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortConnections.Location = new System.Drawing.Point(113' 64);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortConnections.Location = new System.Drawing.Point(113' 64);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortConnections.Size = new System.Drawing.Size(84' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortConnections.Size = new System.Drawing.Size(84' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSortConnections.TabIndex = 21;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSitePopulation.Location = new System.Drawing.Point(113' 41);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSitePopulation.Location = new System.Drawing.Point(113' 41);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSitePopulation.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSitePopulation.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSitePopulation.TabIndex = 20;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortPopulation.Location = new System.Drawing.Point(113' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortPopulation.Location = new System.Drawing.Point(113' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortPopulation.Size = new System.Drawing.Size(75' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortPopulation.Size = new System.Drawing.Size(75' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortPopulation.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortWarfare.Location = new System.Drawing.Point(6' 87);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortWarfare.Location = new System.Drawing.Point(6' 87);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortWarfare.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortWarfare.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortWarfare.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortFiltered.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteOwners.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteOwners.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteOwners.Size = new System.Drawing.Size(91' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteOwners.Size = new System.Drawing.Size(91' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteOwners.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteNone.Location = new System.Drawing.Point(113' 110);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteNone.Location = new System.Drawing.Point(113' 110);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteNone.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radSiteSortEvents.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label26.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSiteType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSiteType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSiteType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbSiteType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSiteSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSiteSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSiteSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSiteSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtSiteSearch.TabIndex = 33;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listSiteSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listSiteSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listSiteSearch.Size = new System.Drawing.Size(256' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listSiteSearch.Size = new System.Drawing.Size(256' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listSiteSearch.TabIndex = 32;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnSiteSearch.TabIndex = 31;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpSiteEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegions.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegions.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegions.TabIndex = 3;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcRegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcRegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(3' 302);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(3' 302);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(254' 163);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(254' 163);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 34;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Size = new System.Drawing.Size(113' 131);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Size = new System.Drawing.Size(113' 131);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortDeaths.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortDeaths.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortDeaths.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortBattles.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortBattles.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortBattles.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortBattles.Size = new System.Drawing.Size(57' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortBattles.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortFiltered.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionNone.Location = new System.Drawing.Point(6' 111);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionNone.Location = new System.Drawing.Point(6' 111);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionNone.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radRegionSortEvents.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label27.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRegionType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRegionType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRegionType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRegionType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtRegionSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtRegionSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtRegionSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtRegionSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtRegionSearch.TabIndex = 33;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listRegionSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listRegionSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listRegionSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listRegionSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listRegionSearch.TabIndex = 32;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnRegionSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnRegionSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnRegionSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnRegionSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnRegionSearch.TabIndex = 31;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpRegionEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegions.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegions.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegions.TabIndex = 4;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcURegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcURegions.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnURegionSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnURegionSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnURegionSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnURegionSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnURegionSearch.TabIndex = 34;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(3' 303);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(3' 303);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(254' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(254' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 33;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Size = new System.Drawing.Size(113' 92);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Size = new System.Drawing.Size(113' 92);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortFiltered.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionNone.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionNone.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionNone.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radURegionSortEvents.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label28.TabIndex = 12;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbURegionType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbURegionType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbURegionType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbURegionType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listURegionSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listURegionSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listURegionSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listURegionSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listURegionSearch.TabIndex = 32;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpURegionEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivs.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivs.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivs.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivs.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivs.TabIndex = 5;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCivs.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCivs.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivSearch.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(3' 311);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(3' 311);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(254' 175);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(254' 175);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.TabIndex = 37;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(33' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(33' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox9.Location = new System.Drawing.Point(6' 62);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox9.Location = new System.Drawing.Point(6' 62);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox9.Size = new System.Drawing.Size(240' 107);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox9.Size = new System.Drawing.Size(240' 107);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox9.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbEntityPopulation.Location = new System.Drawing.Point(113' 38);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbEntityPopulation.Location = new System.Drawing.Point(113' 38);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbEntityPopulation.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbEntityPopulation.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbEntityPopulation.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortPopulation.Location = new System.Drawing.Point(114' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortPopulation.Location = new System.Drawing.Point(114' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortPopulation.Size = new System.Drawing.Size(75' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortPopulation.Size = new System.Drawing.Size(75' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortPopulation.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortWars.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortWars.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortWars.Size = new System.Drawing.Size(50' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortWars.Size = new System.Drawing.Size(50' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortWars.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSortFiltered.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSites.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSites.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSites.Size = new System.Drawing.Size(48' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSites.Size = new System.Drawing.Size(48' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radCivSites.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntityNone.Location = new System.Drawing.Point(114' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntityNone.Location = new System.Drawing.Point(114' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntityNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntityNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntityNone.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radEntitySortEvents.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkCiv.Location = new System.Drawing.Point(147' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkCiv.Location = new System.Drawing.Point(147' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkCiv.Size = new System.Drawing.Size(80' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkCiv.Size = new System.Drawing.Size(80' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkCiv.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCivRace.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCivRace.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCivRace.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCivRace.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbCivRace.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtCivSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtCivSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtCivSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtCivSearch.Size = new System.Drawing.Size(177' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtCivSearch.TabIndex = 36;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listCivSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listCivSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listCivSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listCivSearch.Size = new System.Drawing.Size(256' 264);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listCivSearch.TabIndex = 35;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnCivSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnCivSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnCivSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnCivSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnCivSearch.TabIndex = 34;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCivEvents.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCollections.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCollections.Location = new System.Drawing.Point(4' 40);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCollections.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCollections.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpCollections.TabIndex = 6;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCollections.ItemSize = new System.Drawing.Size(48' 18);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCollections.ItemSize = new System.Drawing.Size(48' 18);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCollections.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcCollections.Size = new System.Drawing.Size(269' 518);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWars.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWars.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWars.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWars.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcWars.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcWars.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarListReset.Location = new System.Drawing.Point(5' 252);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarListReset.Location = new System.Drawing.Point(5' 252);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarListReset.TabIndex = 48;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblWarList.Location = new System.Drawing.Point(61' 257);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblWarList.Location = new System.Drawing.Point(61' 257);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblWarList.Size = new System.Drawing.Size(189' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblWarList.Size = new System.Drawing.Size(189' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblWarList.TabIndex = 47;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnWarSearch.TabIndex = 46;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox10.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox10.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox10.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox10.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox10.TabIndex = 45;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkFilterWarfare.Location = new System.Drawing.Point(89' 141);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkFilterWarfare.Location = new System.Drawing.Point(89' 141);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkFilterWarfare.Size = new System.Drawing.Size(141' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkFilterWarfare.Size = new System.Drawing.Size(141' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkFilterWarfare.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWarOngoing.Location = new System.Drawing.Point(9' 140);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWarOngoing.Location = new System.Drawing.Point(9' 140);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWarOngoing.Size = new System.Drawing.Size(66' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWarOngoing.Size = new System.Drawing.Size(66' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWarOngoing.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox11.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox11.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox11.Size = new System.Drawing.Size(235' 115);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox11.Size = new System.Drawing.Size(235' 115);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox11.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarsSortConquerings.Location = new System.Drawing.Point(119' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarsSortConquerings.Location = new System.Drawing.Point(119' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarsSortConquerings.Size = new System.Drawing.Size(84' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarsSortConquerings.Size = new System.Drawing.Size(84' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarsSortConquerings.TabIndex = 20;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortWarfare.Location = new System.Drawing.Point(119' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortWarfare.Location = new System.Drawing.Point(119' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortWarfare.Size = new System.Drawing.Size(63' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortWarfare.Size = new System.Drawing.Size(63' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortWarfare.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarDeaths.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarDeaths.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarDeaths.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarLength.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarLength.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarLength.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarLength.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarLength.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortFiltered.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortNone.Location = new System.Drawing.Point(119' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortNone.Location = new System.Drawing.Point(119' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortNone.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radWarSortEvents.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtWarSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtWarSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtWarSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtWarSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtWarSearch.TabIndex = 44;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listWarSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listWarSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listWarSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listWarSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listWarSearch.TabIndex = 43;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpWarEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattles.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattles.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattles.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattles.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcBattles.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcBattles.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleListReset.Location = new System.Drawing.Point(5' 252);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleListReset.Location = new System.Drawing.Point(5' 252);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleListReset.Size = new System.Drawing.Size(50' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleListReset.TabIndex = 48;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblBattleList.Location = new System.Drawing.Point(61' 257);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblBattleList.Location = new System.Drawing.Point(61' 257);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblBattleList.Size = new System.Drawing.Size(189' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblBattleList.Size = new System.Drawing.Size(189' 36);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.lblBattleList.TabIndex = 47;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBattleSearch.TabIndex = 46;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox12.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox12.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox12.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox12.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox12.TabIndex = 45;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox13.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox13.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox13.Size = new System.Drawing.Size(108' 126);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox13.Size = new System.Drawing.Size(108' 126);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox13.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortDeaths.Location = new System.Drawing.Point(6' 63);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortDeaths.Location = new System.Drawing.Point(6' 63);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortDeaths.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortFiltered.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortNone.Location = new System.Drawing.Point(6' 86);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortNone.Location = new System.Drawing.Point(6' 86);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortNone.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBattleSortEvents.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBattleSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBattleSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBattleSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBattleSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBattleSearch.TabIndex = 44;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBattleSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBattleSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBattleSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBattleSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBattleSearch.TabIndex = 43;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBattlesEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConquerins.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConquerins.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConquerins.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConquerins.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConquerins.TabIndex = 2;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcConquerings.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcConquerings.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnConqueringSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnConqueringSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnConqueringSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnConqueringSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnConqueringSearch.TabIndex = 46;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox14.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox14.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox14.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox14.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox14.TabIndex = 45;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(31' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbConqueringType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbConqueringType.Location = new System.Drawing.Point(6' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbConqueringType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbConqueringType.Size = new System.Drawing.Size(121' 21);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.cmbConqueringType.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox15.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox15.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox15.Size = new System.Drawing.Size(108' 116);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox15.Size = new System.Drawing.Size(108' 116);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox15.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortSite.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortSite.Location = new System.Drawing.Point(6' 65);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortSite.Size = new System.Drawing.Size(43' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortSite.Size = new System.Drawing.Size(43' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortSite.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortFiltered.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortNone.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortNone.Location = new System.Drawing.Point(6' 88);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortNone.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radConqueringSortEvents.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtConqueringSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtConqueringSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtConqueringSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtConqueringSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtConqueringSearch.TabIndex = 44;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listConqueringSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listConqueringSearch.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listConqueringSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listConqueringSearch.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listConqueringSearch.TabIndex = 43;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpConqueringsEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttacks.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttacks.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttacks.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttacks.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttacks.TabIndex = 4;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBeastAttacksSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBeastAttacksSearch.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBeastAttacksSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBeastAttacksSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBeastAttacksSearch.TabIndex = 50;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox18.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox18.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox18.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox18.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox18.TabIndex = 49;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox17.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox17.Location = new System.Drawing.Point(133' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox17.Size = new System.Drawing.Size(108' 126);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox17.Size = new System.Drawing.Size(108' 126);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox17.TabIndex = 15;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksDeaths.Location = new System.Drawing.Point(6' 63);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksDeaths.Location = new System.Drawing.Point(6' 63);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksDeaths.Size = new System.Drawing.Size(59' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksDeaths.TabIndex = 17;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksFiltered.Location = new System.Drawing.Point(6' 42);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksFiltered.Size = new System.Drawing.Size(95' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksFiltered.TabIndex = 16;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksNone.Location = new System.Drawing.Point(6' 86);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksNone.Location = new System.Drawing.Point(6' 86);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksNone.Size = new System.Drawing.Size(51' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksNone.TabIndex = 14;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksEvents.Location = new System.Drawing.Point(6' 19);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksEvents.Size = new System.Drawing.Size(58' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.radBeastAttacksEvents.TabIndex = 13;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBeastAttacksSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBeastAttacksSearch.Location = new System.Drawing.Point(81' 5);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBeastAttacksSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBeastAttacksSearch.Size = new System.Drawing.Size(169' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.txtBeastAttacksSearch.TabIndex = 48;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBeastAttacks.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBeastAttacks.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBeastAttacks.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBeastAttacks.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listBeastAttacks.TabIndex = 47;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpBeastAttackEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEras.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEras.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEras.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEras.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEras.TabIndex = 3;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcEras.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcEras.Size = new System.Drawing.Size(261' 492);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tcEras.TabIndex = 2;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraSearch.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraSearch.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraSearch.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox16.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox16.Location = new System.Drawing.Point(3' 296);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox16.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox16.Size = new System.Drawing.Size(247' 164);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.groupBox16.TabIndex = 45;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnEraShow.Location = new System.Drawing.Point(85' 58);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnEraShow.Location = new System.Drawing.Point(85' 58);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnEraShow.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnEraShow.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnEraShow.TabIndex = 21;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(120' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(120' 34);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(10' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(10' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 22;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(134' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(134' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(26' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(26' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 21;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(31' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(31' 16);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(54' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(54' 13);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 20;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.Location = new System.Drawing.Point(34' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.Location = new System.Drawing.Point(34' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.Minimum = new decimal(new int[] {             1'             0'             0'             -2147483648});
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.Size = new System.Drawing.Size(80' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.Size = new System.Drawing.Size(80' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numStart.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numEraEnd.Location = new System.Drawing.Point(136' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numEraEnd.Location = new System.Drawing.Point(136' 32);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numEraEnd.Size = new System.Drawing.Size(80' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numEraEnd.Size = new System.Drawing.Size(80' 20);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.numEraEnd.TabIndex = 20;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listEras.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listEras.Location = new System.Drawing.Point(3' 31);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listEras.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listEras.Size = new System.Drawing.Size(247' 199);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.listEras.TabIndex = 43;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraEvents.Location = new System.Drawing.Point(4' 22);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraEvents.Padding = new System.Windows.Forms.Padding(3);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.tpEraEvents.Size = new System.Drawing.Size(253' 466);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Location = new System.Drawing.Point(296' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Location = new System.Drawing.Point(296' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.TabIndex = 30;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnForward.Location = new System.Drawing.Point(377' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnForward.Location = new System.Drawing.Point(377' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnForward.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnForward.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnForward.TabIndex = 31;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(515' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(515' 6);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 33;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkVampire.Location = new System.Drawing.Point(6' 139);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkVampire.Location = new System.Drawing.Point(6' 139);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkVampire.Size = new System.Drawing.Size(64' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkVampire.Size = new System.Drawing.Size(64' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkVampire.TabIndex = 18;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWerebeast.Location = new System.Drawing.Point(133' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWerebeast.Location = new System.Drawing.Point(133' 162);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWerebeast.Size = new System.Drawing.Size(78' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWerebeast.Size = new System.Drawing.Size(78' 17);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.chkWerebeast.TabIndex = 19;
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 562);
Magic Number,LegendsViewer,frmLegendsViewer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\LegendsViewer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 562);
Magic Number,LegendsViewer.Controls,BattlePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BattlePrinter.cs,Print,The following statement contains a magic number: HTML.AppendLine("<table border=\"0\" width=\"" + (maps[0].Width + maps[1].Width + 10) + "\">");
Magic Number,LegendsViewer.Controls,BeastAttackPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\BeastAttackPrinter.cs,Print,The following statement contains a magic number: HTML.AppendLine("<table border=\"0\" width=\"" + (maps[0].Width + maps[1].Width + 10) + "\">");
Magic Number,LegendsViewer.Controls,EntityPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\EntityPrinter.cs,PrintTitle,The following statement contains a magic number: TableMaker mapTable = new TableMaker(false' maps[0].Width + maps[1].Width + 10);
Magic Number,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,BitmapToHTML,The following statement contains a magic number: int imageSectionCount = 5;
Magic Number,LegendsViewer.Controls,TableMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,StartRow,The following statement contains a magic number: AddData(count.ToString()' 20' TableDataAlign.Right);
Magic Number,LegendsViewer.Controls,TableMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,StartRow,The following statement contains a magic number: AddData(""' 10);
Magic Number,LegendsViewer.Controls,SiteConqueredPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SiteConqueredPrinter.cs,Print,The following statement contains a magic number: HTML.AppendLine("<table border=\"0\" width=\"" + (maps[0].Width + maps[1].Width + 10) + "\">");
Magic Number,LegendsViewer.Controls,SitePrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\SitePrinter.cs,Print,The following statement contains a magic number: HTML.AppendLine("<table border=\"0\" width=\"" + (maps[0].Width + maps[1].Width + 10) + "\">");
Magic Number,LegendsViewer.Controls,WarPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WarPrinter.cs,Print,The following statement contains a magic number: HTML.AppendLine("<table border=\"0\" width=\"" + (maps[0].Width + maps[1].Width + 10) + "\">");
Magic Number,LegendsViewer.Controls,WorldStatsPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\WorldStatsPrinter.cs,Print,The following statement contains a magic number: int mapSideLength = 300;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: HeatGradient = new Bitmap(256' 25);
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: HeatGradient = new Bitmap(256' 25);
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Colors = new Color[] { Color.FromArgb(200' Color.Red)' Color.FromArgb(200' Color.Yellow)' Color.FromArgb(200' Color.Green)' Color.FromArgb(200' Color.Cyan)' Color.FromArgb(200' Color.Blue)' Color.Transparent };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Positions = new float[] { 0.00f' 0.20f' 0.40f' 0.60f' 0.80f' 1.00f };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Positions = new float[] { 0.00f' 0.20f' 0.40f' 0.60f' 0.80f' 1.00f };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Positions = new float[] { 0.00f' 0.20f' 0.40f' 0.60f' 0.80f' 1.00f };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeHeatGradient,The following statement contains a magic number: colorBlend.Positions = new float[] { 0.00f' 0.20f' 0.40f' 0.60f' 0.80f' 1.00f };
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeOccurence,The following statement contains a magic number: int x = OccurenceDiameter / 2;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeOccurence,The following statement contains a magic number: int y = OccurenceDiameter / 2;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeOccurence,The following statement contains a magic number: gpBrush.CenterPoint = new PointF(OccurenceDiameter / 2' OccurenceDiameter / 2);
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,MakeOccurence,The following statement contains a magic number: gpBrush.CenterPoint = new PointF(OccurenceDiameter / 2' OccurenceDiameter / 2);
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,DrawOccurence,The following statement contains a magic number: int X = occurence.X - OccurenceDiameter / 2;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,DrawOccurence,The following statement contains a magic number: int Y = occurence.Y - OccurenceDiameter / 2;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,ConvertAlphaMapToHeatMap,The following statement contains a magic number: ColorMap[] newColorMap = new ColorMap[256];
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,ConvertAlphaMapToHeatMap,The following statement contains a magic number: newColorMap[x].NewColor = HeatGradient.GetPixel(255 - x' 0);
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,ConvertAlphaMapToHeatMap,The following statement contains a magic number: x < 256
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int pixelSize = 4;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int radius = 8;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int totalMax = (radius * 2 + 1) * 256;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int totalMax = (radius * 2 + 1) * 256;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: total += row[(kx) * pixelSize + 3];
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: rowSet[0] = (byte)(total / (radius * 2 + 1));
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: xOffset = 3;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int xOffsetRemove = (1 - radius - 1) * pixelSize + 3;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: int xOffsetAdd = (1 + radius) * pixelSize + 3;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: xOffset = 3;
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: rowSet[xOffset] = (byte)(total / (radius * 2 + 1));
Magic Number,LegendsViewer.Controls,HeatMapMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\HeatMapMaker.cs,Blur,The following statement contains a magic number: rowSet[xOffset] = (byte)(total / (radius * 2 + 1));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: Source = new Rectangle(new Point(Center.X - (this.Width / 2)' Center.Y - (this.Height / 2))' new Size(this.Width' this.Height));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: Source = new Rectangle(new Point(Center.X - (this.Width / 2)' Center.Y - (this.Height / 2))' new Size(this.Width' this.Height));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: AltMapTransparency.Maximum = 100;
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: AltMapTransparency.Size = new System.Drawing.Size(150' 25);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: AltMapTransparency.Size = new System.Drawing.Size(150' 25);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: AltMapTransparency.Value = 100;
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: Center = new Point(Map.Width / 2' Map.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MapPanel,The following statement contains a magic number: Center = new Point(Map.Width / 2' Map.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMap,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(0' 0' 50))' new Rectangle(this.Location' this.Size));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The following statement contains a magic number: Point miniMapDrawLocation = new Point(minimapArea.X + MiniMapAreaSideLength / 2 - Minimap.Width / 2' minimapArea.Y + MiniMapAreaSideLength / 2 - Minimap.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The following statement contains a magic number: Point miniMapDrawLocation = new Point(minimapArea.X + MiniMapAreaSideLength / 2 - Minimap.Width / 2' minimapArea.Y + MiniMapAreaSideLength / 2 - Minimap.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The following statement contains a magic number: Point miniMapDrawLocation = new Point(minimapArea.X + MiniMapAreaSideLength / 2 - Minimap.Width / 2' minimapArea.Y + MiniMapAreaSideLength / 2 - Minimap.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The following statement contains a magic number: Point miniMapDrawLocation = new Point(minimapArea.X + MiniMapAreaSideLength / 2 - Minimap.Width / 2' minimapArea.Y + MiniMapAreaSideLength / 2 - Minimap.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawMiniMap,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(0' 0' 50))' minimapArea);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: siteLocation.X = (float)((site.Coordinates.X * TileSize - Source.X) * PixelWidth + 2 * PixelWidth);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: siteLocation.Y = (float)((site.Coordinates.Y * TileSize - Source.Y) * PixelHeight + 2 * PixelHeight);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawRectangle(sitePen' siteLocation.X' siteLocation.Y' scaleTileSize.Width - (float)(4 * PixelWidth)' scaleTileSize.Height - (float)(4 * PixelHeight));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawRectangle(sitePen' siteLocation.X' siteLocation.Y' scaleTileSize.Width - (float)(4 * PixelWidth)' scaleTileSize.Height - (float)(4 * PixelHeight));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawEllipse(battlePen' battleLocation.X + scaleTileSize.Width / 4' battleLocation.Y + scaleTileSize.Height / 4' scaleTileSize.Width / 2' scaleTileSize.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawEllipse(battlePen' battleLocation.X + scaleTileSize.Width / 4' battleLocation.Y + scaleTileSize.Height / 4' scaleTileSize.Width / 2' scaleTileSize.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawEllipse(battlePen' battleLocation.X + scaleTileSize.Width / 4' battleLocation.Y + scaleTileSize.Height / 4' scaleTileSize.Width / 2' scaleTileSize.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawDisplayObjects,The following statement contains a magic number: g.DrawEllipse(battlePen' battleLocation.X + scaleTileSize.Width / 4' battleLocation.Y + scaleTileSize.Height / 4' scaleTileSize.Width / 2' scaleTileSize.Height / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawEntities,The following statement contains a magic number: cm.Matrix00 = cm.Matrix11 = cm.Matrix22 = cm.Matrix44 = 0.66f;
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The following statement contains a magic number: Font font = new Font("Arial"' 10);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The following statement contains a magic number: Brush boxBrush = new SolidBrush(Color.FromArgb(200' Color.Black));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The following statement contains a magic number: Rectangle tileInfoBox = new Rectangle(ControlMenu.MenuBox.Width' this.Height - Minimap.Height - Convert.ToInt32(tileInfoSize.Height)' 70' Convert.ToInt32(tileInfoSize.Height));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The following statement contains a magic number: g.DrawString(tileLocation.X + "' " + tileLocation.Y' font' fontBrush' new Point(tileInfoBox.X + 3' tileInfoBox.Y));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,DrawInfo,The following statement contains a magic number: g.DrawString(CurrentYear.ToString()' font' fontBrush' new Point(yearBox.X + 3' yearBox.Y));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The following statement contains a magic number: coordinatesList[i] = new Location(coordinatesList[i].X * TileSize + TileSize / 2' coordinatesList[i].Y * TileSize + TileSize / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,MakeOverlay,The following statement contains a magic number: coordinatesList[i] = new Location(coordinatesList[i].X * TileSize + TileSize / 2' coordinatesList[i].Y * TileSize + TileSize / 2);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ChangeAltMapTransparency,The following statement contains a magic number: AltMapAlpha = AltMapTransparency.Value / 100.0f;
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,SiteToScreen,The following statement contains a magic number: screenCoordinates.X = (float)((siteCoordinates.X * TileSize - Source.X + TileSize / 2) * PixelWidth);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,SiteToScreen,The following statement contains a magic number: screenCoordinates.Y = (float)((siteCoordinates.Y * TileSize - Source.Y + TileSize / 2) * PixelHeight);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,Pan,The following statement contains a magic number: xChange > 2 || xChange < -2 || yChange > 2 || yChange < -2
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,Pan,The following statement contains a magic number: xChange > 2 || xChange < -2 || yChange > 2 || yChange < -2
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,Pan,The following statement contains a magic number: xChange > 2 || xChange < -2 || yChange > 2 || yChange < -2
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,Pan,The following statement contains a magic number: xChange > 2 || xChange < -2 || yChange > 2 || yChange < -2
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,ZoomToBounds,The following statement contains a magic number: ZoomCurrent > 0.85
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateScales,The following statement contains a magic number: Source.Location = new Point(Center.X - Convert.ToInt32((this.Width / 2) * ZoomCurrent)' Center.Y - Convert.ToInt32((this.Height / 2) * ZoomCurrent));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,UpdateScales,The following statement contains a magic number: Source.Location = new Point(Center.X - Convert.ToInt32((this.Width / 2) * ZoomCurrent)' Center.Y - Convert.ToInt32((this.Height / 2) * ZoomCurrent));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The following statement contains a magic number: e.Location.X > MouseClickLocation.X - 5 && e.Location.X < MouseClickLocation.X + 5               && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The following statement contains a magic number: e.Location.X > MouseClickLocation.X - 5 && e.Location.X < MouseClickLocation.X + 5               && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The following statement contains a magic number: e.Location.X > MouseClickLocation.X - 5 && e.Location.X < MouseClickLocation.X + 5               && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseUp,The following statement contains a magic number: e.Location.X > MouseClickLocation.X - 5 && e.Location.X < MouseClickLocation.X + 5               && e.Location.Y > MouseClickLocation.Y - 5 && e.Location.Y < MouseClickLocation.Y + 5
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,OnMouseWheel,The following statement contains a magic number: ChangeYear(100);
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,GetClosestSite,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(rise' 2) + Math.Pow(run' 2));
Magic Number,LegendsViewer.Controls,MapPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapControl.cs,GetClosestSite,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(rise' 2) + Math.Pow(run' 2));
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,CalculateSize,The following statement contains a magic number: MenuBox.Width = Convert.ToInt32(fontSize.Width) + XBuffer * 2;
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.FillRectangle(shadowBrush' MenuBox.X + 3' MenuBox.Y + 3' MenuBox.Width' MenuBox.Height);
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.FillRectangle(shadowBrush' MenuBox.X + 3' MenuBox.Y + 3' MenuBox.Width' MenuBox.Height);
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.DrawLine(arrowPen' MenuBox.Right - subArrow.Height - 2' optionYPosition + OptionHeight / 2' MenuBox.Right - 2' optionYPosition + OptionHeight / 2);
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.DrawLine(arrowPen' MenuBox.Right - subArrow.Height - 2' optionYPosition + OptionHeight / 2' MenuBox.Right - 2' optionYPosition + OptionHeight / 2);
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.DrawLine(arrowPen' MenuBox.Right - subArrow.Height - 2' optionYPosition + OptionHeight / 2' MenuBox.Right - 2' optionYPosition + OptionHeight / 2);
Magic Number,LegendsViewer.Controls,MapMenu,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.DrawLine(arrowPen' MenuBox.Right - subArrow.Height - 2' optionYPosition + OptionHeight / 2' MenuBox.Right - 2' optionYPosition + OptionHeight / 2);
Magic Number,LegendsViewer.Controls,MapMenuOption,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,MapMenuOption,The following statement contains a magic number: battles.Count <= 10
Magic Number,LegendsViewer.Controls,MapMenuOption,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,MapMenuOption,The following statement contains a magic number: Width = Convert.ToInt32(stringSize.Width) + 5;
Magic Number,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,CalculateSize,The following statement contains a magic number: MenuBox.Width += Convert.ToInt32(fontSize.Width) + 5;
Magic Number,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.FillRectangle(shadowBrush' MenuBox.X + 3' MenuBox.Y + 3' MenuBox.Width' MenuBox.Height);
Magic Number,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.FillRectangle(shadowBrush' MenuBox.X + 3' MenuBox.Y + 3' MenuBox.Width' MenuBox.Height);
Magic Number,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: int optionWidth = Convert.ToInt32(stringSize.Width) + 5;
Magic Number,LegendsViewer.Controls,MapMenuHorizontal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\MapMenu.cs,Draw,The following statement contains a magic number: g.DrawString(option.Text' menuFont' invertFont' optionXPosition + 5' MenuBox.Y);
Magic Number,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,CreateSiteNodes,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(quadrantPoint.X' 2) + Math.Pow(quadrantPoint.Y' 2));
Magic Number,LegendsViewer.Controls,PathMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Map\PathMaker.cs,CreateSiteNodes,The following statement contains a magic number: double distance = Math.Sqrt(Math.Pow(quadrantPoint.X' 2) + Math.Pow(quadrantPoint.Y' 2));
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Insert.Width = 40;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Insert.Height = 19;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Insert.Font = new System.Drawing.Font("Arial"' 6.5f);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Remove.Width = 51;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Remove.Height = 19;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: Remove.Font = new System.Drawing.Font("Arial"' 6.5f);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: QueryOperatorSelect.Width = 45;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: ComparerSelect.Width = 115;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: ValueSelect.Width = 175;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,CriteriaLine,The following statement contains a magic number: OrderBySelect.Width = 83;
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: PropertySelect.Location = new Point(QueryOperatorSelect.Right + 3' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: ComparerSelect.Location = new Point(PropertySelect.GetRightSide() + 3' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: ValueSelect.Location = new Point(ComparerSelect.Right + 3' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: OrderBySelect.Location = new Point(ValueSelect.Right + 3' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: Insert.Location = new Point(OrderBySelect.Right + 15' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaLine,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaLine.cs,ResizeSelf,The following statement contains a magic number: Remove.Location = new Point(Insert.Right + 3' 0);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,CriteriaPanel,The following statement contains a magic number: Add.Width = 90;
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,CriteriaPanel,The following statement contains a magic number: Add.Height = 19;
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,CriteriaPanel,The following statement contains a magic number: Add.Font = new System.Drawing.Font("Arial"' 6.5f);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,AddNew,The following statement contains a magic number: criteria.Location = new Point(3' CriteriaStartLocation + CriteriaLine.LineHeight * index);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,AddNew,The following statement contains a magic number: Add.Location = new Point(10' Criteria.Last().Bottom + 3);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,AddNew,The following statement contains a magic number: Add.Location = new Point(10' Criteria.Last().Bottom + 3);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,Remove,The following statement contains a magic number: Add.Location = new Point(10' Criteria.Last().Bottom + 3);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,Remove,The following statement contains a magic number: Add.Location = new Point(10' Criteria.Last().Bottom + 3);
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,AutoResize,The following statement contains a magic number: Height = panelHeight + 3;
Magic Number,LegendsViewer.Controls.Query,CriteriaPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\CriteriaPanel.cs,AutoResize,The following statement contains a magic number: Width = panelWidth + 3;
Magic Number,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,PropertyBox,The following statement contains a magic number: DropDownWidth = 175;
Magic Number,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,PropertyBox,The following statement contains a magic number: Width = 50;
Magic Number,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,PropertyBox,The following statement contains a magic number: MinimumSize = new Size(50' 0);
Magic Number,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,OnLocationChanged,The following statement contains a magic number: Child.Location = new Point(Right + 3' Top);
Magic Number,LegendsViewer.Controls.Query,PropertyBox,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\PropertyBox.cs,OnSelectedIndexChanged,The following statement contains a magic number: this.Width = (int)g.MeasureString(this.Text' this.Font).Width + 20;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,QueryControl,The following statement contains a magic number: SelectionPanel.CriteriaStartLocation = lblSelectCriteria.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,QueryControl,The following statement contains a magic number: SearchPanel.CriteriaStartLocation = lblSearchCriteria.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,QueryControl,The following statement contains a magic number: OrderByPanel.CriteriaStartLocation = lblOrderCriteria.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SelectList_SelectedIndexChanged,The following statement contains a magic number: SelectProperties.Location = new Point(SelectList.Right + 3' SelectList.Top);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: SelectionPanel.Top = SelectList.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: btnSearch.Top = OrderByPanel.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: btnMapResults.Top = OrderByPanel.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: lblResults.Top = OrderByPanel.Bottom + 6;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: dgResults.Top = btnSearch.Bottom + 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: dgResults.Height = ClientSize.Height - dgResults.Top - 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,PanelResized,The following statement contains a magic number: dgResults.Width = ClientSize.Width - dgResults.Left - 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,btnSearch_Click,The following statement contains a magic number: dgResults.DataSource = Results.Take(1000).ToList();
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,btnSearch_Click,The following statement contains a magic number: Results.Count > 1000
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(9' 258);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(9' 258);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.TabIndex = 5;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectList.Location = new System.Drawing.Point(3' 18);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectList.Location = new System.Drawing.Point(3' 18);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectList.Size = new System.Drawing.Size(134' 21);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectList.Size = new System.Drawing.Size(134' 21);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectList.TabIndex = 7;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.Location = new System.Drawing.Point(3' 287);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.Location = new System.Drawing.Point(3' 287);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.MinimumSize = new System.Drawing.Size(500' 200);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.MinimumSize = new System.Drawing.Size(500' 200);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.RowHeadersWidth = 65;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.Size = new System.Drawing.Size(600' 200);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.Size = new System.Drawing.Size(600' 200);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.dgResults.TabIndex = 9;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblResults.Location = new System.Drawing.Point(90' 263);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblResults.Location = new System.Drawing.Point(90' 263);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblResults.Size = new System.Drawing.Size(0' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblResults.TabIndex = 11;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnMapResults.Location = new System.Drawing.Point(517' 258);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnMapResults.Location = new System.Drawing.Point(517' 258);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnMapResults.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnMapResults.Size = new System.Drawing.Size(75' 23);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.btnMapResults.TabIndex = 12;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.OrderByPanel.Location = new System.Drawing.Point(3' 182);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.OrderByPanel.Location = new System.Drawing.Point(3' 182);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.OrderByPanel.Size = new System.Drawing.Size(74' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.OrderByPanel.Size = new System.Drawing.Size(74' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.OrderByPanel.TabIndex = 4;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOrderCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOrderCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOrderCriteria.Size = new System.Drawing.Size(68' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOrderCriteria.Size = new System.Drawing.Size(68' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SearchPanel.Location = new System.Drawing.Point(3' 112);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SearchPanel.Location = new System.Drawing.Point(3' 112);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SearchPanel.Size = new System.Drawing.Size(82' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SearchPanel.Size = new System.Drawing.Size(82' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SearchPanel.TabIndex = 3;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchCriteria.Size = new System.Drawing.Size(76' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchCriteria.Size = new System.Drawing.Size(76' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectionPanel.Location = new System.Drawing.Point(3' 42);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectionPanel.Location = new System.Drawing.Point(3' 42);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectionPanel.Size = new System.Drawing.Size(78' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectionPanel.Size = new System.Drawing.Size(78' 16);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.SelectionPanel.TabIndex = 2;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSelectCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSelectCriteria.Location = new System.Drawing.Point(3' 3);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSelectCriteria.Size = new System.Drawing.Size(72' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSelectCriteria.Size = new System.Drawing.Size(72' 13);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.lblSelectCriteria.TabIndex = 4;
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(606' 493);
Magic Number,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(606' 493);
Magic Number,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The following statement contains a magic number: switch (Comparer)             {                 case QueryComparer.Contains:                 case QueryComparer.NotContains:                     types.Add(typeof(string));                     methodInfo = typeof(string).GetMethod("Contains"' types.ToArray()); break;                 case QueryComparer.EndsWith:                 case QueryComparer.NotEndsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("EndsWith"' types.ToArray()); break;                 case QueryComparer.StartsWith:                 case QueryComparer.NotStartsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("StartsWith"' types.ToArray()); break;                 case QueryComparer.Equals:                 case QueryComparer.NotEqual:                     //types.Insert(typeof(T));                     //methodInfo = typeof(T).GetMethod("Equals"' types.ToArray()); break;                     if (PropertyName == null || PropertyName == "Value") types.Add(typeof(T));                     else types.Add(typeof(T).GetProperty(this.PropertyName).PropertyType);                     methodInfo = types.First().GetMethod("Equals"' types.ToArray()); break;                 case QueryComparer.StringEquals:                 case QueryComparer.StringNotEqual:                     methodInfo = typeof(string).GetMethod("Equals"' new Type[] { typeof(string)' typeof(StringComparison) }); break;                 case QueryComparer.Count:                 case QueryComparer.ListEquals:                 case QueryComparer.ListGreaterThan:                 case QueryComparer.ListLessThan:                     types.Add(typeof(Func<T' bool>));                     if (Next != null)                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 2);                     else                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 1);                     break;                 case QueryComparer.Min:                     //methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.GetGenericArguments().Count() == 2);                     methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.IsStatic && method.GetParameters().Length == 2 && method.GetGenericArguments().Length == 2);                     break;             }
Magic Number,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The following statement contains a magic number: switch (Comparer)             {                 case QueryComparer.Contains:                 case QueryComparer.NotContains:                     types.Add(typeof(string));                     methodInfo = typeof(string).GetMethod("Contains"' types.ToArray()); break;                 case QueryComparer.EndsWith:                 case QueryComparer.NotEndsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("EndsWith"' types.ToArray()); break;                 case QueryComparer.StartsWith:                 case QueryComparer.NotStartsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("StartsWith"' types.ToArray()); break;                 case QueryComparer.Equals:                 case QueryComparer.NotEqual:                     //types.Insert(typeof(T));                     //methodInfo = typeof(T).GetMethod("Equals"' types.ToArray()); break;                     if (PropertyName == null || PropertyName == "Value") types.Add(typeof(T));                     else types.Add(typeof(T).GetProperty(this.PropertyName).PropertyType);                     methodInfo = types.First().GetMethod("Equals"' types.ToArray()); break;                 case QueryComparer.StringEquals:                 case QueryComparer.StringNotEqual:                     methodInfo = typeof(string).GetMethod("Equals"' new Type[] { typeof(string)' typeof(StringComparison) }); break;                 case QueryComparer.Count:                 case QueryComparer.ListEquals:                 case QueryComparer.ListGreaterThan:                 case QueryComparer.ListLessThan:                     types.Add(typeof(Func<T' bool>));                     if (Next != null)                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 2);                     else                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 1);                     break;                 case QueryComparer.Min:                     //methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.GetGenericArguments().Count() == 2);                     methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.IsStatic && method.GetParameters().Length == 2 && method.GetGenericArguments().Length == 2);                     break;             }
Magic Number,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The following statement contains a magic number: switch (Comparer)             {                 case QueryComparer.Contains:                 case QueryComparer.NotContains:                     types.Add(typeof(string));                     methodInfo = typeof(string).GetMethod("Contains"' types.ToArray()); break;                 case QueryComparer.EndsWith:                 case QueryComparer.NotEndsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("EndsWith"' types.ToArray()); break;                 case QueryComparer.StartsWith:                 case QueryComparer.NotStartsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("StartsWith"' types.ToArray()); break;                 case QueryComparer.Equals:                 case QueryComparer.NotEqual:                     //types.Insert(typeof(T));                     //methodInfo = typeof(T).GetMethod("Equals"' types.ToArray()); break;                     if (PropertyName == null || PropertyName == "Value") types.Add(typeof(T));                     else types.Add(typeof(T).GetProperty(this.PropertyName).PropertyType);                     methodInfo = types.First().GetMethod("Equals"' types.ToArray()); break;                 case QueryComparer.StringEquals:                 case QueryComparer.StringNotEqual:                     methodInfo = typeof(string).GetMethod("Equals"' new Type[] { typeof(string)' typeof(StringComparison) }); break;                 case QueryComparer.Count:                 case QueryComparer.ListEquals:                 case QueryComparer.ListGreaterThan:                 case QueryComparer.ListLessThan:                     types.Add(typeof(Func<T' bool>));                     if (Next != null)                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 2);                     else                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 1);                     break;                 case QueryComparer.Min:                     //methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.GetGenericArguments().Count() == 2);                     methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.IsStatic && method.GetParameters().Length == 2 && method.GetGenericArguments().Length == 2);                     break;             }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseIif,The following statement contains a magic number: args.Length != 3
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                 case TypeCode.Char:                 case TypeCode.Single:                 case TypeCode.Double:                 case TypeCode.Decimal:                     return 1;                 case TypeCode.SByte:                 case TypeCode.Int16:                 case TypeCode.Int32:                 case TypeCode.Int64:                     return 2;                 case TypeCode.Byte:                 case TypeCode.UInt16:                 case TypeCode.UInt32:                 case TypeCode.UInt64:                     return 3;                 default:                     return 0;             }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                 case TypeCode.Char:                 case TypeCode.Single:                 case TypeCode.Double:                 case TypeCode.Decimal:                     return 1;                 case TypeCode.SByte:                 case TypeCode.Int16:                 case TypeCode.Int32:                 case TypeCode.Int64:                     return 2;                 case TypeCode.Byte:                 case TypeCode.UInt16:                 case TypeCode.UInt32:                 case TypeCode.UInt64:                     return 3;                 default:                     return 0;             }
Magic Number,LegendsViewer.Legends,Battle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,Battle,The following statement contains a magic number: (attackerSquadNumbers.Sum() + NotableAttackers.Count) > ((defenderSquadNumbers.Sum() + NotableDefenders.Count) * 10) //NotableDefenders outnumbered 10 to 1                 && Victor == Attacker                 && AttackerDeathCount < ((NotableAttackers.Count + attackerSquadNumbers.Sum()) * 0.1)
Magic Number,LegendsViewer.Legends,Battle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Battle.cs,Battle,The following statement contains a magic number: (attackerSquadNumbers.Sum() + NotableAttackers.Count) > ((defenderSquadNumbers.Sum() + NotableDefenders.Count) * 10) //NotableDefenders outnumbered 10 to 1                 && Victor == Attacker                 && AttackerDeathCount < ((NotableAttackers.Count + attackerSquadNumbers.Sum()) * 0.1)
Magic Number,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,GetYearTime,The following statement contains a magic number: int month = seconds72 % 100800;
Magic Number,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,GetYearTime,The following statement contains a magic number: month <= 33600
Magic Number,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,GetYearTime,The following statement contains a magic number: int season = seconds72 % 403200;
Magic Number,LegendsViewer.Legends,EventCollection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\EventCollections.cs,GetYearTime,The following statement contains a magic number: season < 100800
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int month = this.Seconds72 % 100800;
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: month <= 33600
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int season = this.Seconds72 % 403200;
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: season < 100800
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int monthIndex = this.Seconds72 / (28 * 1200);
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int monthIndex = this.Seconds72 / (28 * 1200);
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int dayIndex = 1 + (this.Seconds72 % (28 * 1200)) / 1200;
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int dayIndex = 1 + (this.Seconds72 % (28 * 1200)) / 1200;
Magic Number,LegendsViewer.Legends,WorldEvent,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,GetYearTime,The following statement contains a magic number: int dayIndex = 1 + (this.Seconds72 % (28 * 1200)) / 1200;
Magic Number,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following statement contains a magic number: reason != Reasons.Last() && Reasons.Count > 2
Magic Number,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following statement contains a magic number: Reasons.Count > 1 && reason == Reasons[Reasons.Count - 2]
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: H += 360;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: H -= 360;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: H >= 360
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: int r = Clamp((int)(R * 255.0));
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: int g = Clamp((int)(G * 255.0));
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,HsvToRgb,The following statement contains a magic number: int b = Clamp((int)(B * 255.0));
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,Clamp,The following statement contains a magic number: return 255;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,Clamp,The following statement contains a magic number: i > 255
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: value = value * 255;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb(255' v' t' p);
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,TimeCountToSeason,The following statement contains a magic number: int month = count % 100800;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,TimeCountToSeason,The following statement contains a magic number: month <= 33600
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,TimeCountToSeason,The following statement contains a magic number: int season = count % 403200;
Magic Number,LegendsViewer.Legends,Formatting,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Formatting.cs,TimeCountToSeason,The following statement contains a magic number: season < 100800
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadCiv,The following statement contains a magic number: CurrentCiv.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2).ToLower());
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadCiv,The following statement contains a magic number: CurrentCiv.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2).ToLower());
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadWorships,The following statement contains a magic number: string worshipName = Formatting.InitCaps(Formatting.ReplaceNonAscii(CurrentLine.Substring(2' CurrentLine.IndexOf("'") - 2)));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadWorships,The following statement contains a magic number: string worshipName = Formatting.InitCaps(Formatting.ReplaceNonAscii(CurrentLine.Substring(2' CurrentLine.IndexOf("'") - 2)));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The following statement contains a magic number: string leaderType = Formatting.InitCaps(CurrentLine.Substring(1' CurrentLine.IndexOf("List") - 2));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The following statement contains a magic number: string leaderName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf("[*]") + 4' CurrentLine.IndexOf("(b") - CurrentLine.IndexOf("[*]") - 5));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The following statement contains a magic number: string leaderName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf("[*]") + 4' CurrentLine.IndexOf("(b") - CurrentLine.IndexOf("[*]") - 5));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The following statement contains a magic number: int reignBegan = Convert.ToInt32(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf(")' ") - CurrentLine.IndexOf(":") - 2));
Magic Number,LegendsViewer.Legends,HistoryParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoryParser.cs,ReadLeaders,The following statement contains a magic number: int reignBegan = Convert.ToInt32(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf(")' ") - CurrentLine.IndexOf(":") - 2));
Magic Number,LegendsViewer.Legends,HistoricalFigureLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Link.cs,HistoricalFigureLink,The following statement contains a magic number: Strength = 100;
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The following statement contains a magic number: string entityName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The following statement contains a magic number: string entityName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The following statement contains a magic number: Owner.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadSiteOwner,The following statement contains a magic number: Owner.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The following statement contains a magic number: string civName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The following statement contains a magic number: string civName = CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2);
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The following statement contains a magic number: Parent.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadParentCiv,The following statement contains a magic number: Parent.Race = Formatting.InitCaps(CurrentLine.Substring(CurrentLine.IndexOf("'") + 2' CurrentLine.Length - CurrentLine.IndexOf("'") - 2));
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadOfficials,The following statement contains a magic number: string officialName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2));
Magic Number,LegendsViewer.Legends,SitesAndPopulationsParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\SitesAndPopsParser.cs,ReadOfficials,The following statement contains a magic number: string officialName = Formatting.ReplaceNonAscii(CurrentLine.Substring(CurrentLine.IndexOf(":") + 2' CurrentLine.IndexOf("'") - CurrentLine.IndexOf(":") - 2));
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: int maxHue = 300;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: colorIndex * colorVariance < 360
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: alpha = 175;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: races.Count <= 12
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: Bitmap nullIdenticon = new Bitmap(64' 64);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: Bitmap nullIdenticon = new Bitmap(64' 64);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: nullGraphics.FillRectangle(nullBrush' new Rectangle(0' 0' 64' 64));
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateCivIdenticons,The following statement contains a magic number: nullGraphics.FillRectangle(nullBrush' new Rectangle(0' 0' 64' 64));
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int[] worldSizes = { 17' 33' 65' 129' 257 };
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int[] worldSizes = { 17' 33' 65' 129' 257 };
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int[] worldSizes = { 17' 33' 65' 129' 257 };
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int[] worldSizes = { 17' 33' 65' 129' 257 };
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int[] worldSizes = { 17' 33' 65' 129' 257 };
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: int tileSize = 16;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: Formatting.ResizeImage(Map' ref PageMiniMap' 250' 250' true' true);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: Formatting.ResizeImage(Map' ref PageMiniMap' 250' 250' true' true);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: Formatting.ResizeImage(Map' ref MiniMap' 200' 200' true' true);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GenerateMaps,The following statement contains a magic number: Formatting.ResizeImage(Map' ref MiniMap' 200' 200' true' true);
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetHistoricalFigure,The following statement contains a magic number: int mid = min + (max - min) / 2;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetEntity,The following statement contains a magic number: int mid = min + (max - min) / 2;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetEventCollection,The following statement contains a magic number: int mid = min + (max - min) / 2;
Magic Number,LegendsViewer.Legends,World,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\World.cs,GetEvent,The following statement contains a magic number: int mid = min + (max - min) / 2;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: PatchSize = 16;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: size <= 24
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: bool centerInvert = ((code >> 2) & 0x1) != 0;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int cornerType = (code >> 3) & 0x0f;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: bool cornerInvert = ((code >> 7) & 0x1) != 0;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int cornerTurn = (code >> 8) & 0x3;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int sideType = (code >> 10) & 0x0f;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: bool sideInvert = ((code >> 14) & 0x1) != 0;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int sideTurn = (code >> 15) & 0x3;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: backColor = Color.FromArgb(200' 200' 200);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: backColor = Color.FromArgb(200' 200' 200);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: backColor = Color.FromArgb(200' 200' 200);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: renderColor.GetBrightness() < 0.33
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: ColorDistance(ref foreColor' ref backColor) < 32f
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int sourceSize = _patchSize * 3;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' _patchSize * 2' _patchSize' sideType' sideTurn++' sideInvert' ref foreColor' ref backColor'                               ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' _patchSize' _patchSize * 2' sideType' sideTurn++' sideInvert' ref foreColor' ref backColor'                               ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' _patchSize * 2' 0' cornerType' cornerTurn++' cornerInvert' ref foreColor' ref backColor'                               ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' _patchSize * 2' _patchSize * 2' cornerType' cornerTurn++' cornerInvert' ref foreColor'                               ref backColor' ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' _patchSize * 2' _patchSize * 2' cornerType' cornerTurn++' cornerInvert' ref foreColor'                               ref backColor' ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: DrawPatch(graphics' 0' _patchSize * 2' cornerType' cornerTurn' cornerInvert' ref foreColor' ref backColor'                               ref strokeColor);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,Render,The following statement contains a magic number: int fudge = (int)(size * 0.016 * 0);
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,DrawPatch,The following statement contains a magic number: turn %= 4;
Magic Number,Docuverse.Identicon,IdenticonRenderer,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\IdenticonRenderer.cs,DrawPatch,The following statement contains a magic number: g.RotateTransform(turn * 90);
Missing Default,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following switch statement is missing a default case: switch (option) //Series Setup              {                  case ChartOption.TimelineEvents: series.Add(new Series("Events"));                      series.First().Color = Color.FromArgb(65' 140' 240); break;                  case ChartOption.TimelineEventsFiltered: series.Add(new Series("Events (Filtered)"));                      series.First().Color = Color.FromArgb(252' 180' 64); break;                  case ChartOption.TimelineActiveSites: series.Add(new Series("Sites"));                      series.First().Color = Color.FromArgb(145' 70' 170); break;                  case ChartOption.TimelineActiveSitesByRace:                      List<string> races = World.Entities.Where(entity => entity.IsCiv).GroupBy(entity => entity.Race).Select(entity => entity.Key).ToList();                      foreach (string race in races)                      {                          Series raceSeries = new Series(race);                          raceSeries.Color = World.Entities.First(entity => entity.IsCiv && entity.Race == race).LineColor;                          raceSeries.BorderWidth = 3;                          raceSeries.IsVisibleInLegend = false;                          series.Add(raceSeries);                      }                      break;                  case ChartOption.TimelineActiveWars: series.Add(new Series("Wars"));                      series.First().Color = Color.FromArgb(202' 107' 75); break;                  case ChartOption.TimelineAliveHFs:                      series.Add(new Series("Historical Figures"));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimeLineAliveHFSpecific:                      series.Add(new Series(AliveHFRace));                      series.First().Color = Color.FromArgb(224' 64' 10); break;                  case ChartOption.TimelineBattles: series.Add(new Series("Battles"));                      series.First().Color = Color.FromArgb(26' 59' 105); break;                  case ChartOption.TimelineBeastAttacks: series.Add(new Series("Beast Attacks"));                      series.First().Color = Color.FromArgb(105' 170' 60); break;                  case ChartOption.TimelineBattleDeaths: series.Add(new Series("Battle Deaths"));                      series.First().Color = Color.FromArgb(130' 160' 210); break;                  case ChartOption.WorldHFAlive: series.Add(new Series("Historical Figures - Alive")); break;                  case ChartOption.WorldHFRemaining:                      series.Add(new Series("Historical Figures - Totals"));                      series.Add(new Series("Historical Figures - Remaining"));                      break;                  //case ChartOption.WorldHFDead: series.Insert(new Series("Historical Figures - Dead");break;                  case ChartOption.WorldHFRaces: series.Add(new Series("Historical Figures")); break;                  case ChartOption.WorldOutdoorPopulations: series.Add(new Series("Outdoor Populations (Not Including Unnumbered)")); break;                  case ChartOption.WorldRegionTypes: series.Add(new Series("Regions")); break;                  case ChartOption.WorldSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.WorldDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.WorldSiteTypes: series.Add(new Series("Sites")); break;                  case ChartOption.WorldUndergroundPopulations: series.Add(new Series("Underground Populations (Not Including Unnumbered)")); break;                  case ChartOption.OtherEventTypes: series.Add(new Series("Event Types")); break;                  case ChartOption.OtherEntityPopulations: series.Add(new Series("Entity Populations")); break;                  case ChartOption.OtherKillsByRace: series.Add(new Series("Kills by Race")); break;                  case ChartOption.OtherDeaths: series.Add(new Series("Deaths")); break;                  case ChartOption.OtherSitePopulations: series.Add(new Series("Site Populations")); break;                  case ChartOption.OtherWarLosses: series.Add(new Series("War Losses")); break;                  case ChartOption.OtherBattleRemaining:                      series.Add(new Series("Forces - Total"));                      series.Add(new Series("Forces - Remaining"));                      break;              }
Missing Default,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following switch statement is missing a default case: switch (option) //Chart Setup              {                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineBattleDeaths:                      foreach (Series setup in series)                      {                          if (option == ChartOption.TimelineEvents || option == ChartOption.TimelineEventsFiltered)                              setup.ChartType = SeriesChartType.Area;                          else                              setup.ChartType = SeriesChartType.Line;                          //setup.XValueType = ChartValueType.Int32;                      }                        DwarfChart.Legends.Last().LegendStyle = LegendStyle.Row;                      DwarfChart.Legends.Last().Position.Auto = false;                      DwarfChart.Legends.Last().Position.Width = 100;                      DwarfChart.Legends.Last().Position.Y = 100;                      DwarfChart.Legends.Last().Position.Height = 4;                      DwarfChart.Titles.Last().Text = "Timeline";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.ChartAreas.First().AxisX.Interval = 0;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = 0;                      DwarfChart.Legends.Last().Enabled = true;                      break;                  case ChartOption.WorldHFAlive:                  //case ChartOption.WorldHFDead:                  case ChartOption.WorldHFRaces:                  case ChartOption.WorldOutdoorPopulations:                  case ChartOption.WorldRegionTypes:                  case ChartOption.WorldSitePopulations:                  case ChartOption.WorldDeaths:                  case ChartOption.WorldSiteTypes:                  case ChartOption.WorldUndergroundPopulations:                  case ChartOption.OtherEventTypes:                  case ChartOption.OtherEntityPopulations:                  case ChartOption.OtherKillsByRace:                  //case ChartOption.OtherEntityWarDeaths:                  //case ChartOption.OtherEntityWarKills:                  //case ChartOption.OtherEntityWarLosses:                  case ChartOption.OtherDeaths:                  case ChartOption.OtherSitePopulations:                  case ChartOption.OtherWarLosses:                      series.First().ChartType = SeriesChartType.Pie;                      if (option == ChartOption.OtherWarLosses)                          series.First().CustomProperties = "PieLabelStyle=Outside'PieStartAngle=270";                      else                          series.First().CustomProperties = "CollectedThreshold=0.75' PieLabelStyle=Outside'PieStartAngle=270";                      series.First().IsValueShownAsLabel = true;                      series.First().Label = "#LEGENDTEXT\n#VAL (#PERCENT)";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = true;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = true;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.First().Name;                      break;                  //DwarfChart.LegendsViewer.Last().LegendStyle = LegendStyle.Column;                  //DwarfChart.LegendsViewer.Last().Position.Auto = true; break;                  case ChartOption.WorldHFRemaining:                  case ChartOption.OtherBattleRemaining:                      foreach (Series setup in series)                      {                          setup.ChartType = SeriesChartType.Column;                          setup.IsValueShownAsLabel = true;                          setup.CustomProperties = "DrawSideBySide=False";                      }                      //series.Last().CustomProperties += "'LabelStyle=Bottom";                      DwarfChart.ChartAreas.Last().Area3DStyle.Enable3D = false;                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = 0;                      DwarfChart.ChartAreas.First().AxisX.MajorGrid.Enabled = false;                      DwarfChart.ChartAreas.First().AxisX.Interval = 1;                      DwarfChart.ChartAreas.First().AxisX.LabelStyle.Angle = -30;                      DwarfChart.Legends.Last().Enabled = false;                      DwarfChart.Titles.Last().Text = series.Last().Name;                      break;              }
Missing Default,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following switch statement is missing a default case: switch (option) //Generate Series              {                  case ChartOption.TimelineActiveSites:                  case ChartOption.TimelineActiveSitesByRace:                  case ChartOption.TimelineActiveWars:                  case ChartOption.TimelineAliveHFs:                  case ChartOption.TimeLineAliveHFSpecific:                  case ChartOption.TimelineBattles:                  case ChartOption.TimelineBeastAttacks:                  case ChartOption.TimelineEvents:                  case ChartOption.TimelineEventsFiltered:                  case ChartOption.TimelineBattleDeaths:                      int startYear = 0' endYear = 0;                      List<WorldEvent> eventsList = null;                      List<BeastAttack> beastAttacks;                      List<Battle> battles;                      List<War> wars;                      List<HistoricalFigure> aliveHFs = null;                      List<HistoricalFigure> hfs = null;                          if (FocusObject is EventCollection)                          eventsList = (FocusObject as EventCollection).GetSubEvents();                      else                          eventsList = (FocusObject as WorldObject).Events;                        if (FocusObject.GetType() == typeof(Entity)) wars = (FocusObject as Entity).Wars;                      else if (FocusObject.GetType() == typeof(War)) wars = new List<War>() { FocusObject as War };                      else wars = World.Wars;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) battles = (FocusObject as HistoricalFigure).Battles;                      else if (FocusObject.GetType() == typeof(Site)) battles = (FocusObject as Site).Warfare.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(Entity)) battles = (FocusObject as Entity).Wars.SelectMany(war => war.Collections.OfType<Battle>()).ToList();                      else if (FocusObject.GetType() == typeof(War)) battles = (FocusObject as War).Collections.OfType<Battle>().ToList();                      else if (FocusObject.GetType() == typeof(WorldRegion)) battles = (FocusObject as WorldRegion).Battles;                      else battles = World.Battles;                        if (FocusObject.GetType() == typeof(HistoricalFigure)) beastAttacks = (FocusObject as HistoricalFigure).BeastAttacks;                      else if (FocusObject.GetType() == typeof(Site)) beastAttacks = (FocusObject as Site).BeastAttacks;                      else beastAttacks = World.BeastAttacks;                        eventsList = eventsList.OrderBy(events => events.Year).ToList();                      if (eventsList.Count > 0)                      {                          startYear = eventsList.First().Year;                          endYear = eventsList.Last().Year;                      }                        int hfIndex = 0;                      if (option == ChartOption.TimelineAliveHFs || option == ChartOption.TimeLineAliveHFSpecific)                      {                          if (option == ChartOption.TimelineAliveHFs)                              hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          //aliveHFs = World.HistoricalFigures.Where(hf => hf.BirthYear <= startYear).ToList();                          else                              hfs = World.HistoricalFigures.Where(hf => hf.Race == AliveHFRace).OrderBy(hf => hf.BirthYear).ToList(); //====================================================                          aliveHFs = hfs.Where(hf => hf.BirthYear <= startYear).ToList();                          //hfs = World.HistoricalFigures.OrderBy(hf => hf.BirthYear).ToList();                          HistoricalFigure firstHFIndex = hfs.FirstOrDefault(hf => hf.BirthYear > startYear);                          if (firstHFIndex == null)                               hfIndex = 0;                          else                              hfIndex = hfs.IndexOf(firstHFIndex);                      }                        int offset = 0;                      if (startYear == -1)                          offset = 1;                      else                      {                          // offset = startYear % 10;                          // if (offset < 5) offset = 0 - offset;                      }                      DwarfChart.ChartAreas.Last().AxisX.IntervalOffset = offset;                        //uses an event index so the loop doesn't go through every event for each year' only the eventsList for that year                      int eventIndex = 0;                      if (eventsList.Count > 0)                          eventIndex = eventsList.IndexOf(eventsList.First(ev => ev.Year == startYear));                      int beastAttackStartYear = 0;                      int beastAttackIndex = 0;                      if (beastAttacks != null && beastAttacks.Count(ba => ba.StartYear >= startYear) > 0)                      {                          if (beastAttacks.FindIndex(ba => ba.StartYear == startYear) >= 0) beastAttackStartYear = startYear;                          else beastAttackStartYear = beastAttacks.First(ba => ba.StartYear > startYear).StartYear;                          beastAttackIndex = beastAttacks.IndexOf(beastAttacks.First(ba => ba.StartYear == beastAttackStartYear));                      }                      int battleStartYear = 0;                      int battleIndex = 0;                      if (battles != null && battles.Count > 0)                      {                          if (battles.FindIndex(battle => battle.StartYear == startYear) >= 0) battleStartYear = startYear;                          else battleStartYear = battles.First(battle => battle.StartYear > startYear).StartYear;                          battleIndex = battles.IndexOf(battles.First(battle => battle.StartYear == battleStartYear));                      }                      for (int year = startYear; year <= endYear; year++)                      {                          int count = 0;                          switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }                          if (series.Count == 1) series.First().Points.AddXY(year' count);                      }                      int maxPoints = Convert.ToInt32((DwarfChart.ClientRectangle.Width * 0.9)) / 3;                      if (series.First().Points.Count > maxPoints)                      {                          List<double> averagedPoints = new List<double>();                          int averageMaxCount = series.First().Points.Count / maxPoints;                          int averageCount = 0;                          double sum = 0;                          for (int i = 0; i < series.First().Points.Count; i++)                          {                              sum += series.First().Points[i].YValues[0];                              averageCount++;                              if (averageCount == averageMaxCount)                              {                                  averagedPoints.Add(sum / averageCount);                                  sum = 0;                                  averageCount = 0;                              }                          }                          if (averageCount > 0) averagedPoints.Add(sum / averageCount);                          double yearXPoints = Convert.ToDouble(endYear) / averagedPoints.Count;                          series.First().Points.Clear();                          for (int i = 0; i < averagedPoints.Count; i++)                              series.First().Points.AddXY(i * yearXPoints' averagedPoints[i]);                      }                      break;                  case ChartOption.WorldHFAlive:                      World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRemaining:                      var hfTotals = World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList();                      var hfKilled = World.Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hf1 => hf1.Race == hf.Race))).ToList();                      //= World.HistoricalFigures.Where(hf => hf.DeathYear == -1).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderBy(hf => hfTotals.IndexOf(hfTotals.First(hfT => hfT.Race == hf.Race))).ToList();                      int otherLimit = Convert.ToInt32(hfTotals.Sum(hf => hf.Count) * 0.005);                      var otherRaces = hfTotals.Where(hf => hf.Count < otherLimit).Select(hf => hf.Race).ToList();                      int otherTotal = hfTotals.Where(hf => hf.Count < otherLimit).Sum(hf => hf.Count);                      int otherKilled = hfKilled.Where(hf => otherRaces.Contains(hf.Race)).Sum(hf => hf.Count);                      hfTotals.RemoveAll(hf => hf.Count < otherLimit);                      for (int i = 0; i < hfTotals.Count; i++)                      {                          series.First().Points.AddXY(i' hfTotals[i].Count);                          if (hfKilled.Count(hf => hf.Race == hfTotals[i].Race) > 0)                              series.Last().Points.AddXY(i' hfTotals[i].Count - hfKilled.First(hf => hf.Race == hfTotals[i].Race).Count);                          else                              series.Last().Points.AddXY(i' hfTotals[i].Count);                          series.Last().Points.Last().AxisLabel = Formatting.MakePopulationPlural(hfTotals[i].Race);                      }                      series.First().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal);                      series.Last().Points.AddXY(hfTotals.Count(hf => hf.Count >= otherLimit)' otherTotal - otherKilled);                      series.Last().Points.Last().AxisLabel = "Other";                      break;                  //case ChartOption.WorldHFDead:                  //    World.HistoricalFigures.Where(hf => hf.DeathYear > 0).GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldHFRaces:                      World.HistoricalFigures.GroupBy(hf => hf.Race).Select(hf => new { Race = hf.Key' Count = hf.Count() }).OrderByDescending(hf => hf.Count).ToList().ForEach(hf => { series.First().Points.AddY(hf.Count); series.First().Points.Last().LegendText = hf.Race; }); break;                  case ChartOption.WorldRegionTypes:                      World.Regions.GroupBy(region => region.Type).Select(region => new { Type = region.Key' Count = region.Count() }).OrderByDescending(region => region.Count).ToList().ForEach(region => { series.First().Points.AddY(region.Count); series.First().Points.Last().LegendText = region.Type; }); break;                  case ChartOption.WorldSitePopulations:                      World.SitePopulations.GroupBy(pop => pop.Race).Select(pop => new { Type = pop.Key' Count = pop.Sum(population => population.Count) }).OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Type; }); break;                  case ChartOption.WorldDeaths:                  case ChartOption.OtherDeaths:                      List<HFDied> hfDeaths = new List<HFDied>();                      List<Battle.Squad> squads = new List<Battle.Squad>();                      List<string> deathRaces = new List<string>();                      if (option == ChartOption.WorldDeaths)                      {                          hfDeaths = World.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Site))                      {                          hfDeaths = (FocusObject as Site).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as Site).Warfare.OfType<Battle>().SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Region))                      {                          hfDeaths = (FocusObject as WorldRegion).Events.OfType<HFDied>().ToList();                          squads = (FocusObject as WorldRegion).Battles.SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                      else if (FocusObject.GetType() == typeof(Era))                      {                          Era era = (FocusObject as Era);                          hfDeaths = era.Events.OfType<HFDied>().ToList();                          //hfDeaths = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>()).ToList();                          squads = World.Battles.Where(battle => battle.StartYear >= era.StartYear && battle.StartYear <= era.EndYear).SelectMany(battle => battle.AttackerSquads.Concat(battle.DefenderSquads)).ToList();                      }                          hfDeaths.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRaces.Add(AppHelpers.MakePopulationPlural(death)));                      foreach (Battle.Squad squad in squads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Deaths; i++) deathRaces.Add(plural);                      }                      deathRaces.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; });                      break;                  case ChartOption.WorldSiteTypes:                      World.Sites.GroupBy(region => region.Type).Select(site => new { Type = site.Key' Count = site.Count() }).OrderByDescending(site => site.Count).ToList().ForEach(site => { series.First().Points.AddY(site.Count); series.First().Points.Last().LegendText = site.Type; }); break;                  case ChartOption.WorldOutdoorPopulations:                      World.OutdoorPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.WorldUndergroundPopulations:                      World.UndergroundPopulations.Where(pop => pop.Count != int.MaxValue).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherEventTypes:                      if (FocusObject is EventCollection)                          (FocusObject as EventCollection).GetSubEvents().GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; });                      else                          (FocusObject as WorldObject).Events.GroupBy(events => events.Type).Select(events => new { Type = events.Key' Count = events.Count() }).OrderByDescending(events => events.Count).ToList().ForEach(events => { series.First().Points.AddY(events.Count); series.First().Points.Last().LegendText = AppHelpers.EventInfo.Single(eventInfo => eventInfo[0] == events.Type)[1]; }); break;                  case ChartOption.OtherKillsByRace:                      (FocusObject as HistoricalFigure).NotableKills.GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherEntityPopulations:                      (FocusObject as Entity).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  //case ChartOption.OtherDeaths:                  //    (FocusObject as WorldRegion).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  //case ChartOption.OtherSiteDeaths:                  //    (FocusObject as Site).Events.OfType<HFDied>().GroupBy(death => death.HistoricalFigure.Race).Select(death => new { Race = death.Key' Count = death.Count() }).OrderByDescending(death => death.Count).ToList().ForEach(death => { series.First().Points.AddY(death.Count); series.First().Points.Last().LegendText = death.Race; }); break;                  case ChartOption.OtherSitePopulations:                      (FocusObject as Site).Populations.OrderByDescending(pop => pop.Count).ToList().ForEach(pop => { series.First().Points.AddY(pop.Count); series.First().Points.Last().LegendText = pop.Race; }); break;                  case ChartOption.OtherWarLosses:                      List<War> warsList = new List<War>();                      if (FocusObject.GetType() == typeof(War)) warsList.Add(FocusObject as War);                      else if (FocusObject.GetType() == typeof(Entity))                          foreach (War addWar in (FocusObject as Entity).Wars) warsList.Add(addWar);                      List<Entity> entities = warsList.SelectMany(war => new List<Entity> { war.Attacker' war.Defender }).ToList();                      entities = entities.GroupBy(entity => entity).Select(entity => entity.Key).ToList();                      entities.RemoveAll(entity => entity.Parent != null && entities.Contains(entity.Parent));                      foreach (Entity entity in entities)                      {                          List<Battle> battles1 = warsList.SelectMany(wars1 => wars1.Collections.OfType<Battle>()).ToList();                          List<HFDied> hfDeathsList = new List<HFDied>();                          List<Battle.Squad> squadsList = new List<Battle.Squad>();                          List<string> deathRacesList = new List<string>();                          hfDeathsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableAttackers.Contains(death.HistoricalFigure))).ToList();                          hfDeathsList = hfDeathsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.GetSubEvents().OfType<HFDied>().Where(death => battle.NotableDefenders.Contains(death.HistoricalFigure))).ToList()).ToList();                          squadsList = battles1.Where(battle => battle.Attacker == entity || battle.Attacker.Parent == entity).SelectMany(battle => battle.AttackerSquads).ToList();                          squadsList = squadsList.Concat(battles1.Where(battle => battle.Defender == entity || battle.Defender.Parent == entity).SelectMany(battle => battle.DefenderSquads).ToList()).ToList();                          hfDeathsList.Select(death => death.HistoricalFigure.Race).ToList().ForEach(death => deathRacesList.Add(AppHelpers.MakePopulationPlural(death)));                            //squadsList.GroupBy(squad => squad.Race).Select(squad => new { Race = squad.Key' Count = squad.Sum(race => race.Deaths) });                          foreach (Battle.Squad squad in squadsList)                          {                              string plural = AppHelpers.MakePopulationPlural(squad.Race);                              for (int i = 0; i < squad.Deaths; i++) deathRacesList.Add(plural);                          }                            var deathsList = deathRacesList.GroupBy(race => race).Select(race => new { Type = race.Key' Count = race.Count() }).OrderByDescending(race => race.Count).ToList();                          int deathOtherLimit = Convert.ToInt32(deathsList.Sum(death => death.Count) * 0.02);                          deathsList.Where(death => death.Count >= deathOtherLimit).ToList().ForEach(race => { series.First().Points.AddY(race.Count); series.First().Points.Last().LegendText = race.Type; series.First().Points.Last().Color = entity.LineColor; series.First().Points.Last().BorderColor = Color.Gray; series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor); });                          int deathOtherCount = deathsList.Where(death => death.Count < deathOtherLimit).Sum(death => death.Count);                          if (deathOtherCount > 0)                          {                              series.First().Points.AddY(deathOtherCount);                              series.First().Points.Last().LegendText = "Other";                              series.First().Points.Last().Color = entity.LineColor;                              series.First().Points.Last().BorderColor = Color.Gray;                              series.First().Points.Last().LabelBackColor = Color.FromArgb(127' entity.LineColor);                          }                      }                      break;                  case ChartOption.OtherBattleRemaining:                      Battle battle1 = (FocusObject as Battle);                      List<string> attackers = battle1.NotableAttackers.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> attackersKilled = battle1.NotableAttackers.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.AttackerSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) attackers.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) attackersKilled.Add(plural);                      }                      var attackerTotals = attackers.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(attacker => attacker.Count).ToList();                      var attackerTotalsKilled = attackersKilled.GroupBy(attacker => attacker).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(attacker => attackerTotals.IndexOf(attackerTotals.First(race => race.Type == attacker.Type))).ToList();                        for (int i = 0; i < attackerTotals.Count; i++)                      {                          series.First().Points.AddXY(i' attackerTotals[i].Count);                          if (attackerTotalsKilled.Count(race => race.Type == attackerTotals[i].Type) > 0)                              series.Last().Points.AddXY(i' attackerTotals[i].Count - attackerTotalsKilled.First(race => race.Type == attackerTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i' attackerTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Attacker.LineColor;                          series.Last().Points.Last().AxisLabel = attackerTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Attacker.LineColor);                      }                        series.First().Points.AddXY(attackerTotals.Count' 0);                      series.First().Points.Last().IsEmpty = true;                      series.First().Points.Last().Label = "";                      series.Last().Points.AddXY(attackerTotals.Count' 0);                      series.Last().Points.Last().IsEmpty = true;                      series.Last().Points.Last().Label = "";                      series.Last().Points.Last().AxisLabel = "VS.";                        List<string> defenders = battle1.NotableDefenders.Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      List<string> defendersKilled = battle1.NotableDefenders.Where(hf => battle1.GetSubEvents().OfType<HFDied>().Count(death => death.HistoricalFigure == hf) > 0).Select(hf => AppHelpers.MakePopulationPlural(hf.Race)).ToList();                      foreach (Battle.Squad squad in battle1.DefenderSquads)                      {                          string plural = AppHelpers.MakePopulationPlural(squad.Race);                          for (int i = 0; i < squad.Numbers; i++) defenders.Add(plural);                          for (int i = 0; i < squad.Deaths; i++) defendersKilled.Add(plural);                      }                      var defenderTotals = defenders.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderByDescending(defender => defender.Count).ToList();                      var defenderTotalsKilled = defendersKilled.GroupBy(defender => defender).Select(result => new { Type = result.Key' Count = result.Count() }).OrderBy(defender => defenderTotals.IndexOf(defenderTotals.First(race => race.Type == defender.Type))).ToList();                        for (int i = 0; i < defenderTotals.Count; i++)                      {                          series.First().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          if (defenderTotalsKilled.Count(race => race.Type == defenderTotals[i].Type) > 0)                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count - defenderTotalsKilled.First(race => race.Type == defenderTotals[i].Type).Count);                          else                              series.Last().Points.AddXY(i + attackerTotals.Count + 1' defenderTotals[i].Count);                          series.First().Color = Color.LightGray;                          series.Last().Points.Last().Color = battle1.Defender.LineColor;                          series.Last().Points.Last().AxisLabel = defenderTotals[i].Type;                          //series.Last().Points.Last().LabelBackColor = Color.FromArgb(127' battle1.Defender.LineColor);                      }                      break;                }
Missing Default,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following switch statement is missing a default case: switch (option)                          {                              case ChartOption.TimelineEvents:                              case ChartOption.TimelineEventsFiltered:                                  while (eventIndex < eventsList.Count && eventsList[eventIndex].Year == year)                                  {                                      if (option == ChartOption.TimelineEvents) count++;                                      else if (!(FocusObject.GetType().GetField("Filters").GetValue(null) as List<string>).Contains(eventsList[eventIndex].Type))                                          count++;                                      eventIndex++;                                  }                                  break;                              case ChartOption.TimelineActiveSites:                                  if (FocusObject.GetType() == typeof(Era))                                      count = World.Entities.Where(entity => entity.IsCiv).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                  else                                      count = (FocusObject as Entity).SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1));                                  break;                              case ChartOption.TimelineActiveSitesByRace:                                  foreach (Series race in series)                                  {                                      count = World.Entities.Where(entity => entity.IsCiv && entity.Race == race.Name).Sum(entity => entity.SiteHistory.Count(site => year >= site.StartYear && (year <= site.EndYear || site.EndYear == -1)));                                      race.Points.AddXY(year' count);                                  }                                  break;                              case ChartOption.TimelineActiveWars: count = wars.Count(war => year >= war.StartYear && (year <= war.EndYear || war.EndYear == -1)); break;                              case ChartOption.TimelineAliveHFs:                              case ChartOption.TimeLineAliveHFSpecific:                                  aliveHFs.RemoveAll(hf => hf.DeathYear <= year && hf.DeathYear != -1); //Removes Dead HFs                                  while (hfIndex < hfs.Count && hfs[hfIndex].BirthYear == year) //Adds HFs born in current year;                                  {                                      aliveHFs.Add(hfs[hfIndex]);                                      hfIndex++;                                  }                                  count = aliveHFs.Count;                                  break;                              //count = World.HistoricalFigures.Count(hf => year >= hf.BirthYear && (year <= hf.DeathYear || hf.DeathYear == -1)); break;                              case ChartOption.TimelineBattles:                              case ChartOption.TimelineBattleDeaths:                                  //count = battles.Count(battle => battle.StartYear == year);                                  while (battleIndex < battles.Count && battles[battleIndex].StartYear == year)                                  {                                      switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }                                      battleIndex++;                                  }                                  break;                              case ChartOption.TimelineBeastAttacks:                                  while (beastAttackIndex < beastAttacks.Count && beastAttacks[beastAttackIndex].StartYear == year)                                  {                                      count++;                                      beastAttackIndex++;                                  }                                  break;                                //case ChartOption.TimelineBattleDeaths: count = battles.Where(battle => battle.StartYear == year).Sum(battle => battle.AttackerDeathCount + battle.DefenderDeathCount); break;                          }
Missing Default,LegendsViewer,ChartPanel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,GenerateSeries,The following switch statement is missing a default case: switch (option)                                      {                                          case ChartOption.TimelineBattles: count++; break;                                          case ChartOption.TimelineBattleDeaths:                                              Battle yearBattle = battles[battleIndex];                                              count += yearBattle.AttackerDeathCount + yearBattle.DefenderDeathCount;                                              break;                                      }
Missing Default,LegendsViewer,ChartMenuItem,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Chart\ChartControl.cs,ChartMenuItem,The following switch statement is missing a default case: switch (Option)              {                  case ChartOption.TimelineEvents: Text = "Events"; break;                  case ChartOption.TimelineEventsFiltered: Text = "Events (Filtered)"; break;                  case ChartOption.TimelineBattleDeaths: Text = "Battle Deaths"; break;                  case ChartOption.TimelineActiveSites: Text = "Active Sites"; break;                  case ChartOption.TimelineActiveSitesByRace: Text = "Active Sites by Race"; break;                  case ChartOption.TimelineAliveHFs: Text = "Alive Historical Figures"; break;                  case ChartOption.TimeLineAliveHFSpecific: Text = "Alive Historical Figures..."; break;                  case ChartOption.TimelineActiveWars: Text = "Active Wars"; break;                  case ChartOption.TimelineBattles: Text = "Battles"; break;                  case ChartOption.TimelineBeastAttacks: Text = "Beast Attacks"; break;                  case ChartOption.OtherEventTypes: Text = "Event Types"; break;                  case ChartOption.OtherKillsByRace: Text = "Kills"; break;                  case ChartOption.OtherEntityPopulations: Text = "Site Populations"; break;                  case ChartOption.OtherDeaths: Text = "Deaths"; break; ;                  case ChartOption.OtherSitePopulations: Text = "Populations"; break;                  case ChartOption.OtherWarLosses: Text = "War Losses"; break;                  case ChartOption.OtherBattleRemaining: Text = "Remaining Forces"; break;                  case ChartOption.WorldHFRaces: Text = "Historical Figures"; break;                  case ChartOption.WorldHFAlive: Text = "Historical Figures - Alive"; break;                  case ChartOption.WorldHFRemaining: Text = "Hsitorical Figures - Remaining"; break;                  case ChartOption.WorldSitePopulations: Text = "Site Populations"; break;                  case ChartOption.WorldDeaths: Text = "Deaths"; break;                  case ChartOption.WorldSiteTypes: Text = "Sites"; break;                  case ChartOption.WorldRegionTypes: Text = "Regions"; break;                  case ChartOption.WorldOutdoorPopulations: Text = "Outdoor Populations"; break;                  case ChartOption.WorldUndergroundPopulations: Text = "Underground Populations"; break;              }
Missing Default,LegendsViewer,DwarfTabControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,Navigate,The following switch statement is missing a default case: switch(control)             {                 case ControlOption.HTML:                     if (navigateObject != null)                         newControl = new HTMLControl(navigateObject' this' World);                      break;                 case ControlOption.Chart:                     newControl = new ChartControl(World' navigateObject as DwarfObject' this); break;                 case ControlOption.Map:                     newControl = new MapControl(World' navigateObject' this); break;                 case  ControlOption.Search:                     newControl = new SearchControl(this); break;             }
Missing Default,LegendsViewer,DwarfTabControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\DwarfTabControl.cs,WndProc,The following switch statement is missing a default case: switch (m.WParam.ToInt64())                 {                     case 66059:                     case (int)MouseButtons.XButton1: Back(); break;                     case 131595:                     case (int)MouseButtons.XButton2: Forward(); break;                 }
Missing Default,LegendsViewer.Controls,HTMLControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLControl.cs,NavigateToNewControl,The following switch statement is missing a default case: switch (option)                  {                      case LinkOption.LoadMap:                          TabControl.Navigate(ControlOption.Map' HTMLObject); break;                      case LinkOption.LoadChart:                          TabControl.Navigate(ControlOption.Chart' HTMLObject); break;                      case LinkOption.LoadSearch:                          TabControl.Navigate(ControlOption.Search); break;                  }
Missing Default,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,StartList,The following switch statement is missing a default case: switch (listType)             {                 case ListType.Ordered:                     HTML.AppendLine("<ol>"); break;                 case ListType.Unordered:                     HTML.AppendLine("<ul>"); break;             }
Missing Default,LegendsViewer.Controls,HTMLPrinter,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,EndList,The following switch statement is missing a default case: switch (listType)             {                 case ListType.Ordered:                     HTML.AppendLine("</ol>"); break;                 case ListType.Unordered:                     HTML.AppendLine("</ul>"); break;             }
Missing Default,LegendsViewer.Controls,TableMaker,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\HTML\HTMLPrinter.cs,AddData,The following switch statement is missing a default case: switch (align)                 {                     case TableDataAlign.Right:                         dataHTML += "\"right\""; break;                     case TableDataAlign.Center:                         dataHTML += "\"center\""; break;                 }
Missing Default,LegendsViewer.Controls.Query,QueryControl,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\QueryControl.cs,SelectList_SelectedIndexChanged,The following switch statement is missing a default case: switch (SelectList.SelectedItem.ToString())             {                 case "Historical Figures":                      SearchList = new SearchList<HistoricalFigure>(World.HistoricalFigures);                     SelectProperties.ParentType = typeof(HistoricalFigure);                     break;                 case "Entities":                     SearchList = new SearchList<Entity>(World.Entities);                     SelectProperties.ParentType = typeof(Entity);                     break;                 case "Sites":                      SearchList = new SearchList<Site>(World.Sites);                     SelectProperties.ParentType = typeof(Site);                     break;                 case "Regions":                     SearchList = new SearchList<WorldRegion>(World.Regions);                     SelectProperties.ParentType = typeof(WorldRegion);                     break;                 case "Underground Regions":                     SearchList = new SearchList<UndergroundRegion>(World.UndergroundRegions);                     SelectProperties.ParentType = typeof(UndergroundRegion);                     break;                 case "Wars":                     SearchList = new SearchList<War>(World.Wars);                     SelectProperties.ParentType = typeof(War);                     break;                 case "Battles":                     SearchList = new SearchList<Battle>(World.Battles);                     SelectProperties.ParentType = typeof(Battle);                     break;                 case "Conquerings":                     SearchList = new SearchList<SiteConquered>(World.EventCollections.OfType<SiteConquered>().ToList());                     SelectProperties.ParentType = typeof(SiteConquered);                     break;                 case "Beast Attacks":                     SearchList = new SearchList<BeastAttack>(World.BeastAttacks);                     SelectProperties.ParentType = typeof(BeastAttack);                     break;                 case "Artifacts":                     SearchList = new SearchList<Artifact>(World.Artifacts);                     SelectProperties.ParentType = typeof(Artifact);                     break;             }
Missing Default,LegendsViewer.Controls.Query,SearchInfo,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,SetupComparers,The following switch statement is missing a default case: switch (comparer)                     {                         case QueryComparer.Equals: comparer = LegendsViewer.Controls.Query.QueryComparer.ListEquals; break;                         case QueryComparer.GreaterThan: comparer = QueryComparer.ListGreaterThan; break;                         case QueryComparer.LessThan: comparer = QueryComparer.ListLessThan; break;                     }
Missing Default,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetComparer,The following switch statement is missing a default case: switch (Comparer)                     {                         case QueryComparer.Count: comparer = Expression.GreaterThan(comparer' Expression.Constant(0)); break;                         case QueryComparer.ListGreaterThan: comparer = Expression.GreaterThan(comparer' Expression.Constant(Convert.ToInt32(Value))); break;                         case QueryComparer.ListLessThan: comparer = Expression.LessThan(comparer' Expression.Constant(Convert.ToInt32(Value))); break;                         case QueryComparer.ListEquals: comparer = Expression.Equal(comparer' Expression.Constant(Convert.ToInt32(Value))); break;                     }
Missing Default,LegendsViewer.Controls.Query,SearchInfo<T>,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\SearchInfo.cs,GetMethodInfo,The following switch statement is missing a default case: switch (Comparer)             {                 case QueryComparer.Contains:                 case QueryComparer.NotContains:                     types.Add(typeof(string));                     methodInfo = typeof(string).GetMethod("Contains"' types.ToArray()); break;                 case QueryComparer.EndsWith:                 case QueryComparer.NotEndsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("EndsWith"' types.ToArray()); break;                 case QueryComparer.StartsWith:                 case QueryComparer.NotStartsWith:                     types.Add(typeof(string));                     types.Add(typeof(StringComparison));                     methodInfo = typeof(string).GetMethod("StartsWith"' types.ToArray()); break;                 case QueryComparer.Equals:                 case QueryComparer.NotEqual:                     //types.Insert(typeof(T));                     //methodInfo = typeof(T).GetMethod("Equals"' types.ToArray()); break;                     if (PropertyName == null || PropertyName == "Value") types.Add(typeof(T));                     else types.Add(typeof(T).GetProperty(this.PropertyName).PropertyType);                     methodInfo = types.First().GetMethod("Equals"' types.ToArray()); break;                 case QueryComparer.StringEquals:                 case QueryComparer.StringNotEqual:                     methodInfo = typeof(string).GetMethod("Equals"' new Type[] { typeof(string)' typeof(StringComparison) }); break;                 case QueryComparer.Count:                 case QueryComparer.ListEquals:                 case QueryComparer.ListGreaterThan:                 case QueryComparer.ListLessThan:                     types.Add(typeof(Func<T' bool>));                     if (Next != null)                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 2);                     else                         methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Count"                             && method.IsStatic && method.GetParameters().Length == 1);                     break;                 case QueryComparer.Min:                     //methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.GetGenericArguments().Count() == 2);                     methodInfo = typeof(Enumerable).GetMethods().Single(method => method.Name == "Min" && method.IsStatic && method.GetParameters().Length == 2 && method.GetGenericArguments().Length == 2);                     break;             }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {                     case TokenId.Equal:                     case TokenId.DoubleEqual:                         left = GenerateEqual(left' right);                         break;                     case TokenId.ExclamationEqual:                     case TokenId.LessGreater:                         left = GenerateNotEqual(left' right);                         break;                     case TokenId.GreaterThan:                         left = GenerateGreaterThan(left' right);                         break;                     case TokenId.GreaterThanEqual:                         left = GenerateGreaterThanEqual(left' right);                         break;                     case TokenId.LessThan:                         left = GenerateLessThan(left' right);                         break;                     case TokenId.LessThanEqual:                         left = GenerateLessThanEqual(left' right);                         break;                 }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {                     case TokenId.Plus:                         if (left.Type == typeof(string) || right.Type == typeof(string))                             goto case TokenId.Amphersand;                         CheckAndPromoteOperands(typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);                         left = GenerateAdd(left' right);                         break;                     case TokenId.Minus:                         CheckAndPromoteOperands(typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);                         left = GenerateSubtract(left' right);                         break;                     case TokenId.Amphersand:                         left = GenerateStringConcat(left' right);                         break;                 }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {                     case TokenId.Asterisk:                         left = Expression.Multiply(left' right);                         break;                     case TokenId.Slash:                         left = Expression.Divide(left' right);                         break;                     case TokenId.Percent:                     case TokenId.Identifier:                         left = Expression.Modulo(left' right);                         break;                 }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type)) {                             case TypeCode.Int32:                             case TypeCode.UInt32:                             case TypeCode.Int64:                             case TypeCode.UInt64:                                 value = ParseNumber(text' target);                                 break;                             case TypeCode.Double:                                 if (target == typeof(decimal)) value = ParseNumber(text' target);                                 break;                             case TypeCode.String:                                 value = ParseEnum(text' target);                                 break;                         }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type))) {                 case TypeCode.SByte:                     sbyte sb;                     if (sbyte.TryParse(text' out sb)) return sb;                     break;                 case TypeCode.Byte:                     byte b;                     if (byte.TryParse(text' out b)) return b;                     break;                 case TypeCode.Int16:                     short s;                     if (short.TryParse(text' out s)) return s;                     break;                 case TypeCode.UInt16:                     ushort us;                     if (ushort.TryParse(text' out us)) return us;                     break;                 case TypeCode.Int32:                     int i;                     if (int.TryParse(text' out i)) return i;                     break;                 case TypeCode.UInt32:                     uint ui;                     if (uint.TryParse(text' out ui)) return ui;                     break;                 case TypeCode.Int64:                     long l;                     if (long.TryParse(text' out l)) return l;                     break;                 case TypeCode.UInt64:                     ulong ul;                     if (ulong.TryParse(text' out ul)) return ul;                     break;                 case TypeCode.Single:                     float f;                     if (float.TryParse(text' out f)) return f;                     break;                 case TypeCode.Double:                     double d;                     if (double.TryParse(text' out d)) return d;                     break;                 case TypeCode.Decimal:                     decimal e;                     if (decimal.TryParse(text' out e)) return e;                     break;             }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.SByte:                         case TypeCode.Int16:                         case TypeCode.Int32:                         case TypeCode.Int64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.Byte:                         case TypeCode.Int16:                         case TypeCode.UInt16:                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.Int16:                         case TypeCode.Int32:                         case TypeCode.Int64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.UInt16:                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.Int32:                         case TypeCode.Int64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.UInt32:                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.Int64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.UInt64:                         case TypeCode.Single:                         case TypeCode.Double:                         case TypeCode.Decimal:                             return true;                     }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Controls\Query\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                         case TypeCode.Single:                         case TypeCode.Double:                             return true;                     }
Missing Default,LegendsViewer.Legends,Artifact,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Artifact.cs,Artifact,The following switch statement is missing a default case: switch(property.Name)                  {                      case "name": Name = Formatting.InitCaps(property.Value); break;                      case "item": Item = Formatting.InitCaps(property.Value); break;                                      }
Missing Default,LegendsViewer.Legends,Entity,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Entity.cs,Entity,The following switch statement is missing a default case: switch(property.Name)                 {                     case "name": Name = Formatting.InitCaps(property.Value); break;                 }
Missing Default,LegendsViewer.Legends,EntityReputation,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EntityReputation.cs,EntityReputation,The following switch statement is missing a default case: switch (property.Name)                 {                     case "entity_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                     case "unsolved_murders": UnsolvedMurders = Convert.ToInt32(property.Value); break;                     case "first_ageless_year": FirstSuspectedAgelessYear = Convert.ToInt32(property.Value); break;                     case "first_ageless_season_count": FirstSuspectedAglessSeason = Formatting.TimeCountToSeason(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,Era,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Era.cs,Era,The following switch statement is missing a default case: switch(property.Name)                 {                     case "start_year": StartYear = Convert.ToInt32(property.Value); break;                     case "name": Name = property.Value; break;                 }
Missing Default,LegendsViewer.Legends,Abduction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Abduction.cs,Abduction,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = String.Intern(property.Value); break;                     case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                     case "parent_eventcol": ParentCollection = world.GetEventCollection(Convert.ToInt32(property.Value)); break;                     case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                     case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                     case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                     case "attacking_enid": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                     case "defending_enid": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,BeastAttack,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\BeastAttack.cs,BeastAttack,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = Convert.ToInt32(property.Value); break;                     case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                     case "parent_eventcol": ParentCollection = world.GetEventCollection(Convert.ToInt32(property.Value)); break;                     case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                     case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                     case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                     case "defending_enid": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,Duel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Duel.cs,Duel,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = String.Intern(property.Value); break;                     case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                     case "parent_eventcol": ParentCollection = world.GetEventCollection(Convert.ToInt32(property.Value)); break;                     case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                     case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                     case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                     case "attacking_hfid": Attacker = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                     case "defending_hfid": Defender = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,Journey,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Journey.cs,Journey,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = String.Intern(property.Value); break;                 }
Missing Default,LegendsViewer.Legends,SiteConquered,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\SiteConquered.cs,SiteConquered,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = Convert.ToInt32(property.Value); break;                     case "war_eventcol": ParentCollection = world.GetEventCollection(Convert.ToInt32(property.Value)); break;                     case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                     case "attacking_enid": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                     case "defending_enid": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,Theft,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Theft.cs,Theft,The following switch statement is missing a default case: switch (property.Name)                 {                     case "ordinal": Ordinal = String.Intern(property.Value); break;                     case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                     case "parent_eventcol": ParentCollection = world.GetEventCollection(Convert.ToInt32(property.Value)); break;                     case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                     case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                     case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                     case "attacking_enid": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                     case "defending_enid": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,War,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\War.cs,War,The following switch statement is missing a default case: switch (property.Name)                 {                     case "name": Name = Formatting.InitCaps(property.Value); break;                     case "aggressor_ent_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                     case "defender_ent_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                 }
Missing Default,LegendsViewer.Legends,AddHFEntityLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AddHFEntityLink,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,AddHFHFLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AddHFHFLink,The following switch statement is missing a default case: switch (property.Name)                  {                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "hfid_target": HistoricalFigureTarget = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ArtifactLost,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ArtifactLost,The following switch statement is missing a default case: switch(property.Name)                  {                      case "artifact_id": Artifact = world.GetArtifact(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ArtifactPossessed,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ArtifactPossessed,The following switch statement is missing a default case: switch (property.Name)                  {                      case "artifact_id": Artifact = world.GetArtifact(Convert.ToInt32(property.Value)); break;                      case "unit_id": UnitID = Convert.ToInt32(property.Value); break;                      case "hist_figure_id": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ArtifactStored,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ArtifactStored,The following switch statement is missing a default case: switch (property.Name)                  {                      case "artifact_id": Artifact = world.GetArtifact(Convert.ToInt32(property.Value)); break;                      case "unit_id": UnitID = Convert.ToInt32(property.Value); break;                      case "hist_figure_id": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,AssumeIdentity,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AssumeIdentity,The following switch statement is missing a default case: switch (property.Name)                  {                      case "trickster_hfid": Trickster = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "identity_id": property.Known = true; Identity = HistoricalFigure.Unknown; break; //Bad ID' so unknown for now.                      case "target_enid": Target = world.GetEntity(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,AttackedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AttackedSite,The following switch statement is missing a default case: switch(property.Name)                  {                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "attacker_general_hfid": AttackerGeneral = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "defender_general_hfid": DefenderGeneral = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,BodyAbused,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,BodyAbused,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ChangeHFBodyState,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (BodyState)              {                  case BodyState.EntombedAtSite: stateString = "was entombed"; break;                  case BodyState.Unknown: stateString = "(" + UnknownBodyState + ")"; break;              }
Missing Default,LegendsViewer.Legends,ChangeHFJob,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ChangeHFJob,The following switch statement is missing a default case: switch(property.Name)                  {                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ChangedCreatureType,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ChangedCreatureType,The following switch statement is missing a default case: switch(property.Name)                  {                      case "old_race": OldRace = Formatting.FormatRace(property.Value); break;                      case "old_caste": OldCaste = property.Value; break;                      case "new_race": NewRace = Formatting.FormatRace(property.Value); break;                      case "new_caste": NewCaste = property.Value; break;                      case "changee_hfid": Changee = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "changer_hfid": Changer = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,CreatedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,CreatedSite,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "builder_hfid": Builder = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,CreatedWorldConstruction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,CreatedWorldConstruction,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id1": Site1 = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "site_id2": Site2 = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "wcid": WorldConstructionID = Convert.ToInt32(property.Value); break;                      case "master_wcid": MasterWorldConstructionID = Convert.ToInt32(property.Value); break;                  }
Missing Default,LegendsViewer.Legends,CreatureDevoured,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,CreatureDevoured,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,DestroyedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,DestroyedSite,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,FieldBattle,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,FieldBattle,The following switch statement is missing a default case: switch(property.Name)                  {                      case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "attacker_general_hfid": AttackerGeneral = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "defender_general_hfid": DefenderGeneral = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFAbducted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFAbducted,The following switch statement is missing a default case: switch(property.Name)                  {                      case "target_hfid": Target = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "snatcher_hfid": Snatcher = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (Situation)              {                  case ConfrontSituation.GeneralSuspicion: situationString = "aroused general suspicion"; break;                  case ConfrontSituation.Unknown: situationString = "(" + UnknownSituation + ")"; break;              }
Missing Default,LegendsViewer.Legends,HFConfronted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (reason)                  {                      case ConfrontReason.Murder: reasonString += "a murder"; break;                      case ConfrontReason.Ageless: reasonString += "appearing not to age"; break;                      case ConfrontReason.Unknown:                           reasonString += "(" + UnknownReasons[unknownReasonIndex++] + ")";                          break;                  }
Missing Default,LegendsViewer.Legends,HFDoesInteraction,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFDoesInteraction,The following switch statement is missing a default case: switch (property.Name)                  {                      case "doer_hfid": Doer = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "target_hfid": Target = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "interaction": Interaction = property.Value; break;                  }
Missing Default,LegendsViewer.Legends,HFGainsSecretGoal,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (Goal)              {                  case SecretGoal.Immortality: goalString = " became obsessed with " + HistoricalFigure.CasteNoun(true) + " own mortality and sought to extend " + HistoricalFigure.CasteNoun(true) + " life by any means"; break;                  case SecretGoal.Unknown: goalString = " gained secret goal (" + UnknownGoal + ")"; break;              }
Missing Default,LegendsViewer.Legends,HFLearnsSecret,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFLearnsSecret,The following switch statement is missing a default case: switch (property.Name)                  {                      case "student_hfid": Student = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "teacher_hfid": Teacher = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "artifact_id": Artifact = world.GetArtifact(Convert.ToInt32(property.Value)); break;                      case "interaction": Interaction = property.Value; break;                  }
Missing Default,LegendsViewer.Legends,HFNewPet,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFNewPet,The following switch statement is missing a default case: switch(property.Name)                  {                      case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                      case "group_hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFProfanedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFProfanedStructure,The following switch statement is missing a default case: switch (property.Name)                  {                      case "hist_fig_id": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                  }
Missing Default,LegendsViewer.Legends,HFReunion,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFReunion,The following switch statement is missing a default case: switch(property.Name)                  {                      case "group_1_hfid": HistoricalFigure1 = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "group_2_hfid": HistoricalFigure2 = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFTravel,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFTravel,The following switch statement is missing a default case: switch(property.Name)                  {                      case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                      case "escape": Escaped = true; property.Known = true; break;                      case "return": Returned = true; property.Known = true; break;                      case "group_hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFWounded,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFWounded,The following switch statement is missing a default case: switch(property.Name)                  {                      case "woundee_hfid": Woundee = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "wounder_hfid": Wounder = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ImpersonateHF,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ImpersonateHF,The following switch statement is missing a default case: switch(property.Name)                  {                      case "trickster_hfid": Trickster = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "cover_hfid": Cover = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "target_enid": Target = world.GetEntity(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,NewSiteLeader,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,NewSiteLeader,The following switch statement is missing a default case: switch(property.Name)                  {                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "new_site_civ_id": NewSiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "new_leader_hfid": NewLeader = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,PeaceAccepted,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,PeaceAccepted,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,PeaceRejected,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,PeaceRejected,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,PlunderedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,PlunderedSite,The following switch statement is missing a default case: switch(property.Name)                  {                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,RazedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,RazedStructure,The following switch statement is missing a default case: switch (property.Name)                  {                      case "civ_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                  }
Missing Default,LegendsViewer.Legends,ReclaimSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ReclaimSite,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,RemoveHFEntityLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,RemoveHFEntityLink,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ArtifactCreated,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ArtifactCreated,The following switch statement is missing a default case: switch(property.Name)                  {                      case "unit_id": UnitID = Convert.ToInt32(property.Value); break;                      case "artifact_id": Artifact = world.GetArtifact(Convert.ToInt32(property.Value)); break;                      case "hist_figure_id": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "name_only": RecievedName = true; property.Known = true; break;                  }
Missing Default,LegendsViewer.Legends,DiplomatLost,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,DiplomatLost,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,EntityCreated,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,EntityCreated,The following switch statement is missing a default case: switch(property.Name)                  {                      case "entity_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                                            //Unhandled Events                      case "structure_id": property.Known = true; break;                  }
Missing Default,LegendsViewer.Legends,EntityLaw,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (Law)              {                  case EntityLawType.Harsh: eventString += "oppresive"; break;                  case EntityLawType.Unknown: eventString += "(" + UnknownLawType + ")"; break;              }
Missing Default,LegendsViewer.Legends,EntityPrimaryCriminals,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,EntityPrimaryCriminals,The following switch statement is missing a default case: switch (property.Name)                  {                      case "entity_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                  }
Missing Default,LegendsViewer.Legends,EntityRelocate,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,EntityRelocate,The following switch statement is missing a default case: switch (property.Name)                  {                      case "entity_id": Entity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                  }
Missing Default,LegendsViewer.Legends,HFRevived,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFRevived,The following switch statement is missing a default case: switch(property.Name)                  {                      case "ghost": Ghost = property.Value; break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "subregion_id": Region = world.GetRegion(Convert.ToInt32(property.Value)); break;                      case "feature_layer_id": UndergroundRegion = world.GetUndergroundRegion(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceArchDesign,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceArchDesign,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceArchConstructed,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceArchConstructed,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceEngraving,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceEngraving,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceFood,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceFood,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceItem,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceItem,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,MasterpieceItemImprovement,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,MasterpieceItemImprovement,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill_at_time": SkillAtTime = Convert.ToInt32(property.Value); break;                      case "hfid": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "entity_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,SiteAbandoned,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteAbandoned,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,SiteDied,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteDied,The following switch statement is missing a default case: switch(property.Name)                  {                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "abandoned":                          property.Known = true;                          Abandoned = true;                          break;                  }
Missing Default,LegendsViewer.Legends,AddHFSiteLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AddHFSiteLink,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,AgreementMade,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AgreementMade,The following switch statement is missing a default case: switch (property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,CreatedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,CreatedStructure,The following switch statement is missing a default case: switch(property.Name)                  {                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                      case "builder_hfid": Builder = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HFRazedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HFRazedStructure,The following switch statement is missing a default case: switch(property.Name)                  {                      case "structure_id": StructureID = Convert.ToInt32(property.Value); break;                      case "hist_fig_id": HistoricalFigure = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,RemoveHFSiteLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,RemoveHFSiteLink,The following switch statement is missing a default case: switch(property.Name)                  {                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,ReplacedStructure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,ReplacedStructure,The following switch statement is missing a default case: switch(property.Name)                  {                      case "old_ab_id": OldABID = Convert.ToInt32(property.Value); break;                      case "new_ab_id": NewABID = Convert.ToInt32(property.Value); break;                      case "civ_id": Civ = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,SiteTakenOver,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteTakenOver,The following switch statement is missing a default case: switch(property.Name)                  {                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "new_site_civ_id": NewSiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,SiteDispute,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,Print,The following switch statement is missing a default case: switch (Dispute)              {                  case Dispute.FishingRights: dispute = "fishing rights"; break;                  case Dispute.GrazingRights: dispute = "grazing rights"; break;                  case Dispute.LivestockOwnership: dispute = "livestock ownership"; break;                  case Dispute.Territory: dispute = "territory"; break;                  case Dispute.WaterRights: dispute = "water rights"; break;                  case Dispute.RightsOfWay: dispute = "rights of way"; break;              }
Missing Default,LegendsViewer.Legends,HfAttackedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HfAttackedSite,The following switch statement is missing a default case: switch (property.Name)                  {                        case "attacker_hfid": Attacker = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": DefenderCiv = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteCiv = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HfDestroyedSite,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,HfDestroyedSite,The following switch statement is missing a default case: switch (property.Name)                  {                        case "attacker_hfid": Attacker = world.GetHistoricalFigure(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": DefenderCiv = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteCiv = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,AgreementFormed,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,AgreementFormed,The following switch statement is missing a default case: switch (property.Name)                  {                      case "agreement_id": AgreementId = property.Value; break;                  }
Missing Default,LegendsViewer.Legends,SiteTributeForced,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Events.cs,SiteTributeForced,The following switch statement is missing a default case: switch (property.Name)                  {                      case "attacker_civ_id": Attacker = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "defender_civ_id": Defender = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_civ_id": SiteEntity = world.GetEntity(Convert.ToInt32(property.Value)); break;                      case "site_id": Site = world.GetSite(Convert.ToInt32(property.Value)); break;                  }
Missing Default,LegendsViewer.Legends,HistoricalFigure,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,HistoricalFigure,The following switch statement is missing a default case: switch(property.Name)                  {                      case "appeared": Appeared = Convert.ToInt32(property.Value); break;                      case "birth_year": BirthYear = Convert.ToInt32(property.Value); break;                      case "birth_seconds72": BirthSeconds72 = Convert.ToInt32(property.Value); break;                      case "death_year": DeathYear = Convert.ToInt32(property.Value); break;                      case "death_seconds72": DeathSeconds72 = Convert.ToInt32(property.Value); break;                      case "name": Name = String.Intern(Formatting.InitCaps(property.Value)); break;                      case "race": Race = String.Intern(Formatting.FormatRace(property.Value)); break;                      case "caste": Caste = Formatting.InitCaps(property.Value.ToLower().Replace('_'' ' ')); break;                      case "associated_type": AssociatedType = Formatting.InitCaps(property.Value.ToLower().Replace('_'' ' ')); break;                      case "deity": Deity = true; property.Known = true; break;                      case "skeleton": Skeleton = true; property.Known = true; break;                      case "force": Force = true; property.Known = true; break;                      case "zombie": Zombie = true; property.Known = true; break;                      case "ghost": Ghost = true; property.Known = true; break;                      case "hf_link": //Will be processed after all HFs have been loaded                          world.AddHFtoHFLink(this' property);                          property.Known = true;                          List<string> knownSubProperties = new List<string>() { "hfid"' "link_strength"' "link_type" };                          foreach (string subPropertyName in knownSubProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "entity_link":                      case "entity_former_position_link":                      case "entity_position_link":                          world.AddHFtoEntityLink(this' property);                          foreach (string subPropertyName in knownEntitySubProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "entity_reputation":                          world.AddReputation(this' property);                          foreach (string subPropertyName in knownReputationSubProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "entity_squad_link":                      case "entity_former_squad_link":                          property.Known = true;                          foreach (string subPropertyName in knownEntitySquadLinkProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "relationship_profile_hf":                          property.Known = true;                          foreach (string subPropertyName in knownRelationshipProfileProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "site_link":                          world.AddHFtoSiteLink(this' property);                          foreach (string subPropertyName in knownSiteLinkSubProperties)                          {                              Property subProperty = property.SubProperties.FirstOrDefault(property1 => property1.Name == subPropertyName);                              if (subProperty != null)                                  subProperty.Known = true;                          }                          break;                      case "hf_skill": Skills.Add(new Skill(property.SubProperties)); break;                      case "active_interaction":                          ActiveInteractions.Add(property.Value);                          break;                      case "interaction_knowledge":                          InteractionKnowledge.Add(property.Value);                          break;                      case "animated": Animated = true; property.Known = true; break;                      case "animated_string":                          if (AnimatedType != "") throw new Exception("Animated Type already exists.");                          AnimatedType = Formatting.InitCaps(property.Value); break;                      case "journey_pet": JourneyPets.Add(Formatting.FormatRace(property.Value)); break;                      case "goal": Goal = Formatting.InitCaps(property.Value); break;                      case "sphere":                          Spheres.Add(property.Value); break;                      case "current_identity_id":                          world.AddHFCurrentIdentity(this' Convert.ToInt32(property.Value));                          break;                      case "used_identity_id":                          world.AddHFUsedIdentity(this' Convert.ToInt32(property.Value));                          break;                      case "ent_pop_id":                          EntityPopulation = world.GetEntityPopulation(Convert.ToInt32(property.Value)); break;                      case "holds_artifact":                           HoldingArtifacts.Add(world.GetArtifact(Convert.ToInt32(property.Value))); break;                      case "adventurer":                          Adventurer = true;                          property.Known = true;                          break;                  }
Missing Default,LegendsViewer.Legends,Skill,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\HistoricalFigure.cs,Skill,The following switch statement is missing a default case: switch(property.Name)                  {                      case "skill":                          Name = Formatting.InitCaps(property.Value.Replace('_'' ' ').ToLower());                          break;                      case "total_ip":                          Points = Convert.ToInt32(property.Value);                          break;                  }
Missing Default,LegendsViewer.Legends,WorldRegion,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Region.cs,WorldRegion,The following switch statement is missing a default case: switch(property.Name)                 {                     case "name": Name = Formatting.InitCaps(property.Value); break;                     case "type": Type = String.Intern(property.Value); break;                 }
Missing Default,LegendsViewer.Legends,HistoricalFigureLink,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Link.cs,HistoricalFigureLink,The following switch statement is missing a default case: switch (property.Name)                 {                     case "hfid":                         int id = Convert.ToInt32(property.Value);                         HistoricalFigure = world.GetHistoricalFigure(id);                         break;                     case "link_strength": Strength = Convert.ToInt32(property.Value); break;                     case "link_type":                         HistoricalFigureLinkType linkType = HistoricalFigureLinkType.Unknown;                         if (!Enum.TryParse(Formatting.InitCaps(property.Value)' out linkType))                         {                             Type = HistoricalFigureLinkType.Unknown;                             world.ParsingErrors.Report("Unknown HF Link Type: " + property.Value);                         }                         else                             Type = linkType;                                                       break;                 }
Missing Default,LegendsViewer.Legends,Site,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\Site.cs,Site,The following switch statement is missing a default case: switch(property.Name)                 {                     case "type": Type = Formatting.InitCaps(property.Value); break;                     case "name": Name = Formatting.InitCaps(property.Value); break;                     case "coords": Coordinates = Formatting.ConvertToLocation(property.Value); break;                     case "structures": Structures = true; property.Known = true; break;                 }
Missing Default,LegendsViewer.Legends,UndergroundRegion,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\UndergroundRegion.cs,UndergroundRegion,The following switch statement is missing a default case: switch(property.Name)                 {                     case "depth": Depth = Convert.ToInt32(property.Value); break;                     case "type": Type = Formatting.InitCaps(property.Value); break;                 }
Missing Default,LegendsViewer.Legends.EventCollections,Insurrection,C:\research\architectureSmells\repos\Parker147_Legends-Viewer\LegendsViewer\Legends\EventCollections\Insurrection.cs,Insurrection,The following switch statement is missing a default case: switch (property.Name)                 {                     case "site_id":                         Site = world.GetSite(Convert.ToInt32(property.Value));                         break;                     case "target_enid":                         TargetEntity = world.GetEntity(Convert.ToInt32(property.Value));                         break;                     case"ordinal":                         Ordinal = Convert.ToInt32(property.Value);                         break;                 }
