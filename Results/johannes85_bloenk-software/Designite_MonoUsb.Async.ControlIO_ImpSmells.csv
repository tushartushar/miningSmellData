Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,libusb_control_transfer,Cyclomatic complexity of the method is 9
Long Statement,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,Main,The length of the statement  "		throw new Exception (String.Format ("Failed intializing libusb context.\n{0}:{1}"' MonoUsbSessionHandle.LastErrorCode' MonoUsbSessionHandle.LastErrorString)); " is 158.
Long Statement,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,Main,The length of the statement  "			throw new Exception (String.Format ("Failed opening device handle.\n{0}:{1}"' MonoUsbDeviceHandle.LastErrorCode' MonoUsbDeviceHandle.LastErrorString)); " is 151.
Long Statement,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,libusb_control_transfer,The length of the statement  "	transfer.FillControl (deviceHandle' controlSetupHandle' controlTransferDelegate' GCHandle.ToIntPtr (gcCompleteEvent)' timeout); " is 127.
Magic Number,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,Main,The following statement contains a magic number: try {  	// The list is initially empty.  	// Each time refresh is called the list contents are updated.   	profileList.Refresh (sessionHandle);  	// Use the GetList() method to get a generic List of MonoUsbProfiles  	// Find the first profile that matches in MyVidPidPredicate.  	MonoUsbProfile myProfile = profileList.GetList ().Find (MyVidPidPredicate);  	if (myProfile == null) {  		Console.WriteLine ("Device not connected.");  		return;  	}  	// Open the device handle to perform I/O  	myDeviceHandle = myProfile.OpenDeviceHandle ();  	if (myDeviceHandle.IsInvalid)  		throw new Exception (String.Format ("Failed opening device handle.\n{0}:{1}"' MonoUsbDeviceHandle.LastErrorCode' MonoUsbDeviceHandle.LastErrorString));  	int ret;  	MonoUsbError e;  	// Set Configuration  	e = (MonoUsbError)(ret = MonoUsbApi.SetConfiguration (myDeviceHandle' 1));  	if (ret < 0)  		throw new Exception (String.Format ("Failed SetConfiguration.\n{0}:{1}"' e' MonoUsbApi.StrError (e)));  	// Claim Interface  	e = (MonoUsbError)(ret = MonoUsbApi.ClaimInterface (myDeviceHandle' 0));  	if (ret < 0)  		throw new Exception (String.Format ("Failed ClaimInterface.\n{0}:{1}"' e' MonoUsbApi.StrError (e)));  	// Create a vendor specific control setup' allocate 1 byte for return control data.  	byte requestType = (byte)(UsbCtrlFlags.Direction_In | UsbCtrlFlags.Recipient_Device | UsbCtrlFlags.RequestType_Vendor);  	byte request = 0x0F;  	MonoUsbControlSetupHandle controlSetupHandle = new MonoUsbControlSetupHandle (requestType' request' 0' 0' 1);  	// Transfer the control setup packet  	ret = libusb_control_transfer (myDeviceHandle' controlSetupHandle' 1000);  	if (ret > 0) {  		Console.WriteLine ("\nSuccess!\n");  		byte[] ctrlDataBytes = controlSetupHandle.ControlSetup.GetData (ret);  		string ctrlDataString = Helper.HexString (ctrlDataBytes' String.Empty' "h ");  		Console.WriteLine ("Return Length: {0}"' ret);  		Console.WriteLine ("DATA (hex)   : [ {0} ]\n"' ctrlDataString.Trim ());  	}  	MonoUsbApi.ReleaseInterface (myDeviceHandle' 0);  }  finally {  	profileList.Close ();  	if (myDeviceHandle != null)  		myDeviceHandle.Close ();  	sessionHandle.Close ();  }  
Magic Number,MonoUsb.Async.ControlIO,AsyncControlIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.Async.ControlIO\AsyncControlIO.cs,Main,The following statement contains a magic number: ret = libusb_control_transfer (myDeviceHandle' controlSetupHandle' 1000);  
