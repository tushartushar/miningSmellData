Implementation smell,Namespace,Class,File,Method,Description
Long Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,The method has 111 lines of code.
Long Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ParseBenchmarkArgs,The method has 109 lines of code.
Long Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Main,The method has 199 lines of code.
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetBenchmarkDeviceList,Cyclomatic complexity of the method is 11
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,VerifyData,Cyclomatic complexity of the method is 8
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,Cyclomatic complexity of the method is 18
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ParseBenchmarkArgs,Cyclomatic complexity of the method is 34
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,Cyclomatic complexity of the method is 20
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetTestDeviceFromList,Cyclomatic complexity of the method is 10
Complex Method,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Main,Cyclomatic complexity of the method is 50
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Bench_GetTestType,The length of the statement  "	UsbSetupPacket getTestTypePacket = new UsbSetupPacket ((byte)(UsbCtrlFlags.Direction_In | UsbCtrlFlags.Recipient_Device | UsbCtrlFlags.RequestType_Vendor)' (byte)BENCHMARK_DEVICE_COMMANDS.GET_TEST' 0' (short)intf' 1); " is 217.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Bench_SetTestType,The length of the statement  "	UsbSetupPacket setTestTypePacket = new UsbSetupPacket ((byte)(UsbCtrlFlags.Direction_In | UsbCtrlFlags.Recipient_Device | UsbCtrlFlags.RequestType_Vendor)' (byte)BENCHMARK_DEVICE_COMMANDS.SET_TEST' (short)testType' (short)intf' 1); " is 231.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,VerifyData,The length of the statement  "					CONVDAT ("packet-offset={0} expected {1:X2}h got {2:X2}h\n"' verifyIndex' verifyData [verifyIndex]' data [dataIndex + verifyIndex]); " is 132.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferSync,The length of the statement  "	return transferParam.Ep.Transfer (transferParam.Buffer [0]' 0' transferParam.Test.BufferSize' transferParam.Test.Timeout' out transferred); " is 139.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferAsync,The length of the statement  "			handle.Context.Fill (handle.Data' 0' handle.DataMaxLength' transferParam.Test.Timeout' transferParam.IsoPacketSize > 0 ? transferParam.IsoPacketSize : transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize); " is 207.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,The length of the statement  "				CONWRN ("Timeout #{0} {1} on Ep{2:X2}h..\n"' transferParam.RunningTimeoutCount' TRANSFER_DISPLAY (transferParam' "reading"' "writing")' transferParam.Ep.EndpointInfo.Descriptor.EndpointID); " is 189.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,The length of the statement  "				CONERR ("failed {0}! {1} of {2} ret={3}: {4}\n"' TRANSFER_DISPLAY (transferParam' "reading"' "writing")' transferParam.RunningErrorCount' transferParam.Test.Retry + 1' ret' UsbDevice.LastErrorString); " is 200.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,The length of the statement  "					CONWRN ("Short transfer on Ep{0:X2}h expected {1} got {2}.\n"' transferParam.Ep.EndpointInfo.Descriptor.EndpointID' transferParam.Test.BufferSize' transferred); " is 160.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,TransferThreadProc,The length of the statement  "					CONWRN ("Zero-length transfer on Ep{0:X2}h expected {1}.\n"' transferParam.Ep.EndpointInfo.Descriptor.EndpointID' transferParam.Test.BufferSize); " is 145.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ValidateBenchmarkArgs,The length of the statement  "		CONERR ("Invalid BufferCount argument {0}. BufferCount must be greater than 0 and less than or equal to {1}.\n"' testParam.BufferCount' MAX_OUTSTANDING_TRANSFERS); " is 163.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "	if (ReferenceEquals ((testInterface = usb_find_interface (test.Device.Configs [0]' test.Intf' out firstInterface))' null)) { " is 124.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "				transferParam.Ep = test.Device.OpenEndpointReader ((ReadEndpointID)testInterface.EndpointInfoList [i].Descriptor.EndpointID' 0' (EndpointType)(testInterface.EndpointInfoList [i].Descriptor.Attributes & 0x3)); " is 208.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "				transferParam.Ep = test.Device.OpenEndpointWriter ((WriteEndpointID)testInterface.EndpointInfoList [i].Descriptor.EndpointID' (EndpointType)(testInterface.EndpointInfoList [i].Descriptor.Attributes & 0x3)); " is 206.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "		CONERR ("buffer size {0} is not an interval of EP{1:X2}h maximum packet size of {2}!\n"' transferParam.Test.BufferSize' transferParam.Ep.EndpointInfo.Descriptor.EndpointID' transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize); " is 229.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "	if (transferParam.Test.Verify && transferParam.Test.TestType == BENCHMARK_DEVICE_TEST_TYPE.TestTypeLoop && (transferParam.Ep.EndpointInfo.Descriptor.EndpointID & 0x80) == 0) { " is 175.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The length of the statement  "		int packetCount = ((transferParam.Test.BufferCount * transferParam.Test.BufferSize) / transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize); " is 142.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetAverageBytesSec,The length of the statement  "	if ((transferParam.StartTick == 0) || (transferParam.StartTick >= transferParam.LastTick) || transferParam.TotalTransferred == 0) { " is 131.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetCurrentBytesSec,The length of the statement  "	if ((transferParam.StartTick == 0) || (transferParam.LastStartTick == 0) || (transferParam.LastTick <= transferParam.LastStartTick) || transferParam.LastTransferred == 0) { " is 172.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTransferInfo,The length of the statement  "	CONMSG ("{0} {1} (Ep{2:X2}h) max packet size: {3}\n"' EndpointTypeDisplayString [ENDPOINT_TYPE (transferParam)]' TRANSFER_DISPLAY (transferParam' "Read"' "Write")' transferParam.Ep.EndpointInfo.Descriptor.EndpointID' transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize); " is 273.
Long Statement,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTestInfo,The length of the statement  "	CONMSG ("\tVerify Data     : {0}{1}\n"' testParam.Verify ? "On" : "Off"' (testParam.Verify && testParam.VerifyDetails) ? " (Detailed)" : ""); " is 141.
Complex Conditional,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetCurrentBytesSec,The conditional expression  "(transferParam.StartTick == 0) || (transferParam.LastStartTick == 0) || (transferParam.LastTick <= transferParam.LastStartTick) || transferParam.LastTransferred == 0"  is complex.
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ENDPOINT_TYPE,The following statement contains a magic number: return (byte)(TransferParam.Ep.EndpointInfo.Descriptor.Attributes & 3);  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,SetTestDefaults,The following statement contains a magic number: test.Vid = 1234;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,SetTestDefaults,The following statement contains a magic number: test.Pid = 5678;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,SetTestDefaults,The following statement contains a magic number: test.Refresh = 1000;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,SetTestDefaults,The following statement contains a magic number: test.Timeout = 5000;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,SetTestDefaults,The following statement contains a magic number: test.BufferSize = 4096;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetParamIntValue,The following statement contains a magic number: if (!String.IsNullOrEmpty (value)) {  	NumberStyles style = NumberStyles.Integer;  	if (value.ToLower ().StartsWith ("0x")) {  		value = value.Substring (2);  		style = NumberStyles.HexNumber;  	}  	int testValue;  	if (int.TryParse (value' style' null' out testValue)) {  		returnValue = testValue;  		return true;  	}  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetParamIntValue,The following statement contains a magic number: if (value.ToLower ().StartsWith ("0x")) {  	value = value.Substring (2);  	style = NumberStyles.HexNumber;  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetParamIntValue,The following statement contains a magic number: value = value.Substring (2);  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The following statement contains a magic number: if (transferParam.Test.Verify && transferParam.Test.TestType == BENCHMARK_DEVICE_TEST_TYPE.TestTypeLoop && (transferParam.Ep.EndpointInfo.Descriptor.EndpointID & 0x80) == 0) {  	// Data Format:  	// [0][KeyByte] 2 3 4 5 ..to.. wMaxPacketSize (if data byte rolls it is incremented to 1)  	// Increment KeyByte and repeat  	//  	byte indexC = 0;  	int bufferIndex = 0;  	int transferIndex = 0;  	UInt16 dataIndex;  	int packetIndex;  	int packetCount = ((transferParam.Test.BufferCount * transferParam.Test.BufferSize) / transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize);  	for (packetIndex = 0; packetIndex < packetCount; packetIndex++) {  		indexC = 2;  		for (dataIndex = 0; dataIndex < transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize; dataIndex++) {  			if (dataIndex == 0)  				// Start  				transferParam.Buffer [transferIndex] [bufferIndex] = 0;  			else if (dataIndex == 1)  				// Key  				transferParam.Buffer [transferIndex] [bufferIndex] = (byte)(packetIndex & 0xFF);  			else  				// Data  				transferParam.Buffer [transferIndex] [bufferIndex] = indexC++;  			// if wMaxPacketSize is > 255' indexC resets to 1.  			if (indexC == 0)  				indexC = 1;  			bufferIndex++;  			if (transferParam.Test.BufferSize == bufferIndex) {  				bufferIndex = 0;  				transferIndex++;  			}  		}  	}  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The following statement contains a magic number: for (packetIndex = 0; packetIndex < packetCount; packetIndex++) {  	indexC = 2;  	for (dataIndex = 0; dataIndex < transferParam.Ep.EndpointInfo.Descriptor.MaxPacketSize; dataIndex++) {  		if (dataIndex == 0)  			// Start  			transferParam.Buffer [transferIndex] [bufferIndex] = 0;  		else if (dataIndex == 1)  			// Key  			transferParam.Buffer [transferIndex] [bufferIndex] = (byte)(packetIndex & 0xFF);  		else  			// Data  			transferParam.Buffer [transferIndex] [bufferIndex] = indexC++;  		// if wMaxPacketSize is > 255' indexC resets to 1.  		if (indexC == 0)  			indexC = 1;  		bufferIndex++;  		if (transferParam.Test.BufferSize == bufferIndex) {  			bufferIndex = 0;  			transferIndex++;  		}  	}  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,CreateTransferParam,The following statement contains a magic number: indexC = 2;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetAverageBytesSec,The following statement contains a magic number: if ((transferParam.StartTick == 0) || (transferParam.StartTick >= transferParam.LastTick) || transferParam.TotalTransferred == 0) {  	bps = 0;  }  else {  	ticksSec = (transferParam.LastTick - transferParam.StartTick) / 10000000.0;  	bps = (transferParam.TotalTransferred / ticksSec);  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetAverageBytesSec,The following statement contains a magic number: ticksSec = (transferParam.LastTick - transferParam.StartTick) / 10000000.0;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetCurrentBytesSec,The following statement contains a magic number: if ((transferParam.StartTick == 0) || (transferParam.LastStartTick == 0) || (transferParam.LastTick <= transferParam.LastStartTick) || transferParam.LastTransferred == 0) {  	bps = 0;  }  else {  	ticksSec = (transferParam.LastTick - transferParam.LastStartTick) / 10000000.0;  	bps = transferParam.LastTransferred / ticksSec;  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,GetCurrentBytesSec,The following statement contains a magic number: ticksSec = (transferParam.LastTick - transferParam.LastStartTick) / 10000000.0;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTransferInfo,The following statement contains a magic number: if (transferParam.StartTick != 0) {  	GetAverageBytesSec (transferParam' out bpsAverage);  	GetCurrentBytesSec (transferParam' out bpsCurrent);  	CONMSG ("\tTotal Bytes     : {0}\n"' transferParam.TotalTransferred);  	CONMSG ("\tTotal Transfers : {0}\n"' transferParam.Packets);  	if (transferParam.ShortTransferCount > 0) {  		CONMSG ("\tShort Transfers : {0}\n"' transferParam.ShortTransferCount);  	}  	if (transferParam.TotalTimeoutCount > 0) {  		CONMSG ("\tTimeout Errors  : {0}\n"' transferParam.TotalTimeoutCount);  	}  	if (transferParam.TotalErrorCount > 0) {  		CONMSG ("\tOther Errors    : {0}\n"' transferParam.TotalErrorCount);  	}  	CONMSG ("\tAvg. Bytes/sec  : {0:F2}\n"' bpsAverage);  	if (transferParam.StartTick != 0 && transferParam.StartTick < transferParam.LastTick) {  		elapsedSeconds = (transferParam.LastTick - transferParam.StartTick) / 10000000.0;  		CONMSG ("\tElapsed Time    : {0:F2} seconds\n"' elapsedSeconds);  	}  	CONMSG0 ("\n");  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTransferInfo,The following statement contains a magic number: if (transferParam.StartTick != 0 && transferParam.StartTick < transferParam.LastTick) {  	elapsedSeconds = (transferParam.LastTick - transferParam.StartTick) / 10000000.0;  	CONMSG ("\tElapsed Time    : {0:F2} seconds\n"' elapsedSeconds);  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTransferInfo,The following statement contains a magic number: elapsedSeconds = (transferParam.LastTick - transferParam.StartTick) / 10000000.0;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ShowTestInfo,The following statement contains a magic number: CONMSG ("{0} Test Information\n"' TestDisplayString [(byte)testParam.TestType & 3]);  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,WaitForTestTransfer,The following statement contains a magic number: while (!ReferenceEquals (transferParam' null)) {  	if (!transferParam.IsRunning) {  		if (!transferParam.ThreadHandle.IsAlive) {  			CONMSG ("stopped Ep{0:X2}h thread.\n"' transferParam.Ep.EndpointInfo.Descriptor.EndpointID);  			break;  		}  	}  	Thread.Sleep (100);  	CONMSG ("waiting for Ep{0:X2}h thread..\n"' transferParam.Ep.EndpointInfo.Descriptor.EndpointID);  }  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,WaitForTestTransfer,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,ResetRunningStatus,The following statement contains a magic number: transferParam.Packets = -2;  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Main,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Main,The following statement contains a magic number: Thread.Sleep (10);  
Missing Default,LibUsbDotNet,BenchmarkConsole2,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\BenchmarkCon\BenchmarkConsole.cs,Main,The following switch statement is missing a default case: switch (key) {  case 'Q':  case 'q':  	Test.IsUserAborted = true;  	Test.IsCancelled = true;  	break;  case 'T':  case 't':  	ShowTestInfo (Test);  	break;  case 'I':  case 'i':  	// LOCK the display critical section  	lock (DisplayCriticalSection) {  		// Print benchmark test details.  		ShowTransferInfo (ReadTest);  		ShowTransferInfo (WriteTest);  	}  	break;  case 'R':  case 'r':  	// LOCK the display critical section  	lock (DisplayCriticalSection) {  		// Reset the running status.  		ResetRunningStatus (ReadTest);  		ResetRunningStatus (WriteTest);  		// UNLOCK the display critical section  	}  	break;  }  
