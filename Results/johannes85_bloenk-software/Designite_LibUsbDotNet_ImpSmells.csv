Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LibUsbDotNet.DeviceNotify,WindowsDeviceNotifier,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\WindowsDeviceNotifier.cs,OnDeviceChange,Cyclomatic complexity of the method is 11
Complex Method,LibUsbDotNet.DeviceNotify,WindowsDeviceNotifyEventArgs,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\WindowsDeviceNotifyEventArgs.cs,WindowsDeviceNotifyEventArgs,Cyclomatic complexity of the method is 12
Complex Method,LibUsbDotNet.DeviceNotify.Linux,LinuxDeviceNotifier,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDeviceNotifier.cs,Stop,Cyclomatic complexity of the method is 8
Complex Method,LibUsbDotNet.DeviceNotify.Linux,LinuxDeviceNotifier,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDeviceNotifier.cs,Start,Cyclomatic complexity of the method is 8
Complex Method,LibUsbDotNet.DeviceNotify.Linux,LinuxDeviceNotifyEventArgs,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDeviceNotifyEventArgs.cs,LinuxDeviceNotifyEventArgs,Cyclomatic complexity of the method is 8
Complex Method,LibUsbDotNet.Info,UsbConfigInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Info\UsbConfigInfo.cs,UsbConfigInfo,Cyclomatic complexity of the method is 18
Complex Method,LibUsbDotNet.Main,UsbSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbSymbolicName.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,LookupEndpointInfo,Cyclomatic complexity of the method is 8
Complex Method,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,getSPDRPProperties,Cyclomatic complexity of the method is 29
Complex Method,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,GetPropertiesSPDRP,Cyclomatic complexity of the method is 28
Complex Method,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ControlTransferAsync,Cyclomatic complexity of the method is 12
Complex Method,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,StrError,Cyclomatic complexity of the method is 14
Complex Method,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,MonoLibUsbErrorFromTransferStatus,Cyclomatic complexity of the method is 8
Complex Method,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ErrorCodeFromLibUsbError,Cyclomatic complexity of the method is 28
Complex Method,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,Wait,Cyclomatic complexity of the method is 18
Complex Method,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,parseDeviceID,Cyclomatic complexity of the method is 19
Complex Method,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,WinUsbRegistryCallBack,Cyclomatic complexity of the method is 9
Long Parameter List,LibUsbDotNet.Main,Helper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\Helper.cs,ToString,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbKernelVersion,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbKernelVersion.cs,UsbKernelVersion,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,Fill,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,Fill,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,SyncTransfer,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,SyncTransfer,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbTransferQueue,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,UsbTransferQueue,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,Transfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,SubmitAsyncTransfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,SubmitAsyncTransfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,Transfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,ReadPipe,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,WritePipe,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbDeviceFinder,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbDeviceFinder.cs,UsbDeviceFinder,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Main,UsbSetupPacket,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbSetupPacket.cs,UsbSetupPacket,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetCustomDeviceProperty,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceInstanceId,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceInterfacePropertyKeys,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiOpenDevRegKey,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,RegEnumValue,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,RegEnumValue,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,UsbApiBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbApiBase.cs,ControlTransfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal,UsbApiBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbApiBase.cs,GetDescriptor,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Internal,UsbApiBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbApiBase.cs,ReadPipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,UsbApiBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbApiBase.cs,WritePipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,CreateFile,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,FormatMessage,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,DeviceIoControlAsObject,The method has 8 parameters.
Long Parameter List,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,ControlTransferEx,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,UsbIoSync,The method has 6 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,GetDescriptor,The method has 5 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,GetDescriptor,The method has 5 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ControlTransfer,The method has 8 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ControlTransferAsync,The method has 8 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ControlTransfer,The method has 8 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,BulkTransfer,The method has 6 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,BulkTransfer,The method has 6 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,InterruptTransfer,The method has 6 parameters.
Long Parameter List,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,InterruptTransfer,The method has 6 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbControlSetupHandle,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbControlSetupHandle.cs,MonoUsbControlSetupHandle,The method has 6 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbControlSetupHandle,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbControlSetupHandle.cs,MonoUsbControlSetupHandle,The method has 5 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransfer.cs,FillBulk,The method has 7 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransfer.cs,FillInterrupt,The method has 7 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransfer.cs,FillIsochronous,The method has 8 parameters.
Long Parameter List,MonoLibUsb.Transfer,MonoUsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransfer.cs,FillControl,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ControlTransfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,GetDescriptor,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ReadPipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,WritePipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.Internal.LibUsb,LibUsbDriverIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbDriverIO.cs,UsbIOSync,The method has 7 parameters.
Long Parameter List,LibUsbDotNet,UsbError,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbDevice.Error.cs,UsbError,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,IUsbInterface,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\IUsbInterface.cs,GetDescriptor,The method has 6 parameters.
Long Parameter List,LibUsbDotNet,IUsbInterface,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\IUsbInterface.cs,GetDescriptor,The method has 6 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,Read,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,Read,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,Read,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointWriter,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointWriter.cs,Write,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointWriter,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointWriter.cs,Write,The method has 5 parameters.
Long Parameter List,LibUsbDotNet,UsbEndpointWriter,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointWriter.cs,Write,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.LudnMonoLibUsb,MonoUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbDevice.cs,GetDescriptor,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,Fill,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_ControlTransfer,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_GetDescriptor,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_GetPipePolicy,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_ReadPipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_ReadPipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_SetPipePolicy,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_WritePipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WinUsb_WritePipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,ControlTransfer,The method has 5 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,GetDescriptor,The method has 7 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,ReadPipe,The method has 6 parameters.
Long Parameter List,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WritePipe,The method has 6 parameters.
Long Identifier,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,ReadData,The length of the parameter dataReceivedEnabledChangedEvent is 31.
Long Statement,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,Equals,The length of the statement  "	return other.BcdUsb == BcdUsb && other.Class == Class && other.SubClass == SubClass && other.Protocol == Protocol && other.MaxPacketSize0 == MaxPacketSize0 && other.VendorID == VendorID && other.ProductID == ProductID && other.BcdDevice == BcdDevice && other.ManufacturerStringIndex == ManufacturerStringIndex && other.ProductStringIndex == ProductStringIndex && other.SerialStringIndex == SerialStringIndex && other.ConfigurationCount == ConfigurationCount; " is 458.
Long Statement,LibUsbDotNet.DeviceNotify.Info,VolumeNotifyInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Info\VolumeNotifyInfo.cs,ToString,The length of the statement  "	return string.Format ("[Letter:{0}] [IsNetworkVolume:{1}] [ChangeAffectsMediaInDrive:{2}] "' Letter' IsNetworkVolume' ChangeAffectsMediaInDrive); " is 145.
Long Statement,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,Equals,The length of the statement  "	return Equals (other.DeviceFileName' DeviceFileName) && other.BusNumber == BusNumber && other.DeviceAddress == DeviceAddress && Equals (other.DeviceDescriptor' DeviceDescriptor); " is 178.
Long Statement,LibUsbDotNet.Info,UsbConfigInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Info\UsbConfigInfo.cs,ToString,The length of the statement  "	return Descriptor.ToString (prefixSeperator' entitySperator' suffixSeperator) + Helper.ToString (prefixSeperator' names' entitySperator' values' suffixSeperator); " is 162.
Long Statement,LibUsbDotNet.Info,UsbDeviceInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Info\UsbDeviceInfo.cs,ToString,The length of the statement  "	return Descriptor.ToString (prefixSeperator' entitySperator' suffixSeperator) + Helper.ToString (prefixSeperator' names' entitySperator' values' suffixSeperator); " is 162.
Long Statement,LibUsbDotNet.Info,UsbDeviceInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Info\UsbDeviceInfo.cs,GetDeviceDescriptor,The length of the statement  "	bool bSuccess = usbDevice.GetDescriptor ((byte)DescriptorType.Device' 0' 0' gcDeviceDescriptor.AddrOfPinnedObject ()' UsbDeviceDescriptor.Size' out ret); " is 153.
Long Statement,LibUsbDotNet.Info,UsbInterfaceInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Info\UsbInterfaceInfo.cs,ToString,The length of the statement  "	return Descriptor.ToString (prefixSeperator' entitySperator' suffixSeperator) + Helper.ToString (prefixSeperator' names' entitySperator' values' suffixSeperator); " is 162.
Long Statement,LibUsbDotNet.Main,LegacyUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\LegacyUsbRegistry.cs,GetPropertiesSPDRP,The length of the statement  "	deviceProperties.Add (DevicePropertyType.Mfg.ToString ()' usbDevice.Info.Descriptor.ManufacturerStringIndex > 0 ? usbDevice.Info.ManufacturerString : string.Empty); " is 164.
Long Statement,LibUsbDotNet.Main,LegacyUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\LegacyUsbRegistry.cs,GetPropertiesSPDRP,The length of the statement  "	deviceProperties.Add (DevicePropertyType.DeviceDesc.ToString ()' usbDevice.Info.Descriptor.ProductStringIndex > 0 ? usbDevice.Info.ProductString : string.Empty); " is 161.
Long Statement,LibUsbDotNet.Main,LegacyUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\LegacyUsbRegistry.cs,GetPropertiesSPDRP,The length of the statement  "	deviceProperties.Add ("SerialNumber"' usbDevice.Info.Descriptor.SerialStringIndex > 0 ? usbDevice.Info.SerialString : string.Empty); " is 132.
Long Statement,LibUsbDotNet.Main,LegacyUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\LegacyUsbRegistry.cs,GetPropertiesSPDRP,The length of the statement  "	string fakeHardwareIds = GetRegistryHardwareID ((ushort)usbDevice.Info.Descriptor.VendorID' (ushort)usbDevice.Info.Descriptor.ProductID' (ushort)usbDevice.Info.Descriptor.BcdDevice); " is 182.
Long Statement,LibUsbDotNet.Main,Helper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\Helper.cs,HexString,The length of the statement  "	StringBuilder sb = new StringBuilder ((data.Length * 2) + (data.Length * prefix.Length) + (data.Length * suffix.Length)); " is 121.
Long Statement,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,SyncTransfer,The length of the statement  "			if ((ec != ErrorCode.None || transferred != UsbEndpointBase.MaxReadWrite) || !transferContext.IncrementTransfer (transferred)) " is 126.
Long Statement,LibUsbDotNet.Main,UsbTransferQueue,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,transfer,The length of the statement  "			handle = transferParam.mTransferHandles [transferParam.mTransferHandleNextIndex] = new Handle (transferParam.EndpointBase.NewAsyncTransfer ()' transferParam.mBuffer [transferParam.mTransferHandleNextIndex]); " is 207.
Long Statement,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,LookupEndpointInfo,The length of the statement  "				if ((endpointAddress & UsbConstants.ENDPOINT_DIR_MASK) == 0 && (endpointInfo.Descriptor.EndpointID & UsbConstants.ENDPOINT_DIR_MASK) == 0) { " is 140.
Long Statement,LibUsbDotNet.Main,UsbEndpointBase,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbEndpointBase.cs,LookupEndpointInfo,The length of the statement  "				if ((endpointAddress & UsbConstants.ENDPOINT_DIR_MASK) != 0 && (endpointInfo.Descriptor.EndpointID & UsbConstants.ENDPOINT_DIR_MASK) != 0) { " is 140.
Long Statement,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,getSPDRPProperties,The length of the statement  "		bool bSuccess = SetupDiGetDeviceRegistryProperty (deviceInfoSet' ref deviceInfoData' (SPDRP)prop.Value' out regPropType' propBuffer' propBuffer.Length' out iReturnBytes); " is 170.
Long Statement,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The length of the statement  "	if (!SetupDiGetDeviceRegistryProperty (DeviceInfoSet' ref DeviceInfoData' Property' out regValueType' tmp' tmp.Length' out iReqSize)) { " is 135.
Long Statement,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The length of the statement  "		UsbError.Error (ErrorCode.Win32Error' Marshal.GetLastWin32Error ()' "SetupDiGetDeviceRegistryProperty"' typeof(SetupApi)); " is 122.
Long Statement,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,cbHasDeviceInterfaceGUID,The length of the statement  "	bool bSuccess = SetupDiGetCustomDeviceProperty (DeviceInfoSet' ref DeviceInfoData' "DeviceInterfaceGuids"' DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize); " is 196.
Long Statement,LibUsbDotNet.Internal,OverlappedTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\OverlappedTransferContext.cs,Submit,The length of the statement  "	int ret = EndpointBase.PipeTransferSubmit (NextBufPtr' RequestCount' out iTransferred' mIsoPacketSize' Overlapped.GlobalOverlapped); " is 132.
Long Statement,LibUsbDotNet.Internal,OverlappedTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\OverlappedTransferContext.cs,Submit,The length of the statement  "		UsbError usbErr = UsbError.Error (ErrorCode.Win32Error' Marshal.GetLastWin32Error ()' "PipeTransferSubmit"' EndpointBase); " is 122.
Long Statement,LibUsbDotNet.Internal,OverlappedTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\OverlappedTransferContext.cs,Wait,The length of the statement  "	bSuccess = EndpointBase.mUsbApi.GetOverlappedResult (EndpointBase.Handle' Overlapped.GlobalOverlapped' out transferredCount' true); " is 131.
Long Statement,LibUsbDotNet.Internal,OverlappedTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\OverlappedTransferContext.cs,Wait,The length of the statement  "		UsbError usbErr = UsbError.Error (ErrorCode.Win32Error' Marshal.GetLastWin32Error ()' "GetOverlappedResult"' EndpointBase); " is 123.
Long Statement,LibUsbDotNet.Internal,Kernel32,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\Kernel32.cs,FormatSystemMessage,The length of the statement  "		int ret = FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM' IntPtr.Zero' dwMessageId' CultureInfo.CurrentCulture.LCID' m_sbSysMsg' m_sbSysMsg.Capacity - 1' IntPtr.Zero); " is 162.
Long Statement,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,SetConfiguration,The length of the statement  "	setupPkt.RequestType = (byte)UsbEndpointDirection.EndpointOut | (byte)UsbRequestType.TypeStandard | (byte)UsbRequestRecipient.RecipDevice; " is 138.
Long Statement,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,Open,The length of the statement  "		//                UsbDevice.Error(ErrorCode.DeviceNotFound' "The device is no longer attached or failed to open."' typeof(LibUsbDevice)); " is 137.
Long Statement,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,SetAltInterface,The length of the statement  "		throw new UsbException (this' String.Format ("You must claim interface {0} before setting an alternate interface."' interfaceID)); " is 130.
Long Statement,LibUsbDotNet.LibUsb,LibUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbDevice.cs,ControlTransferEx,The length of the statement  "	bool bSuccess = LibUsbDriverIO.ControlTransferEx (mUsbHandle' setupPacket' buffer' bufferLength' out lengthTransferred' timeout); " is 129.
Long Statement,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,GetCustomDeviceKeyValue,The length of the statement  "	bool bSuccess = LibUsbDriverIO.UsbIOSync (usbHandle' LibUsbIoCtl.GET_CUSTOM_REG_PROPERTY' bytesReq' bytesReq.Length' gcbytesReq.AddrOfPinnedObject ()' bytesReq.Length' out iReturnBytes); " is 186.
Long Statement,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,GetPropertiesSPDRP,The length of the statement  "		bool bSuccess = LibUsbDriverIO.UsbIOSync (usbHandle' LibUsbIoCtl.GET_REG_PROPERTY' req' LibUsbRequest.Size' gcPropBuffer.AddrOfPinnedObject ()' propBuffer.Length' out iReturnBytes); " is 181.
Long Statement,MonoLibUsb.Profile,MonoUsbProfileHandleEnumerator,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Profile\MonoUsbProfileHandleEnumerator.cs,MoveNext,The length of the statement  "	IntPtr pNextProfileHandle = Marshal.ReadIntPtr (new IntPtr (mProfileListHandle.DangerousGetHandle ().ToInt64 () + (mNextDeviceProfilePos * IntPtr.Size))); " is 154.
Long Statement,MonoLibUsb.Profile,MonoUsbProfileList,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Profile\MonoUsbProfileList.cs,syncWith,The length of the statement  "			//Console.WriteLine("DeviceDiscovery: Unchanged: Orig:{0} New:{1}"' mList[iFoundOldIndex].ProfileHandle.DangerousGetHandle()' newProfile.ProfileHandle.DangerousGetHandle()); " is 173.
Long Statement,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The length of the statement  "			bool bSuccess = mUsbEventThread.Join ((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)); " is 124.
Long Statement,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The length of the statement  "			//bool bSuccess = mIsStoppedEvent.WaitOne((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)' false); " is 135.
Long Statement,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The length of the statement  "				throw new UsbException (typeof(MonoUsbEventHandler)' "Critical timeout failure! MonoUsbApi.HandleEventsTimeout did not return within the allotted time."); " is 154.
Long Statement,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,GetDescriptor,The length of the statement  "	return ControlTransfer (deviceHandle' (byte)UsbEndpointDirection.EndpointIn' (byte)UsbStandardRequest.GetDescriptor' (short)((descType << 8) | descIndex)' 0' pData' (short)length' 1000); " is 186.
Long Statement,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,ControlTransferAsync,The length of the statement  "	MonoUsbControlSetupHandle setupHandle = new MonoUsbControlSetupHandle (requestType' request' value' index' pData' dataLength); " is 126.
Long Statement,MonoLibUsb.Transfer,MonoUsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransfer.cs,IsoPacket,The length of the statement  "	IntPtr pIsoPacket = new IntPtr (handle.ToInt64 () + OfsIsoPackets + (packetNumber * Marshal.SizeOf (typeof(libusb_iso_packet_descriptor)))); " is 140.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,AbortPipe,The length of the statement  "	return LibUsbDriverIO.UsbIOSync (interfaceHandle' LibUsbIoCtl.ABORT_ENDPOINT' req' LibUsbRequest.Size' IntPtr.Zero' 0' out ret); " is 128.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ResetDevice,The length of the statement  "	return LibUsbDriverIO.UsbIOSync (interfaceHandle' LibUsbIoCtl.RESET_DEVICE' req' LibUsbRequest.Size' IntPtr.Zero' 0' out ret); " is 126.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ControlTransfer,The length of the statement  "	return LibUsbDriverIO.ControlTransfer (interfaceHandle' setupPacket' buffer' bufferLength' out lengthTransferred' UsbConstants.DEFAULT_TIMEOUT); " is 144.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,GetDescriptor,The length of the statement  "	return LibUsbDriverIO.UsbIOSync (interfaceHandle' LibUsbIoCtl.GET_DESCRIPTOR' req' LibUsbRequest.Size' buffer' bufferLength' out lengthTransferred); " is 148.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ReadPipe,The length of the statement  "	int cltCode = endPointBase.Type == EndpointType.Isochronous ? LibUsbIoCtl.ISOCHRONOUS_READ : LibUsbIoCtl.INTERRUPT_OR_BULK_READ; " is 128.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ReadPipe,The length of the statement  "	return Kernel32.DeviceIoControl (endPointBase.Device.Handle' cltCode' req' LibUsbRequest.Size' buffer' bufferLength' out lengthTransferred' pOverlapped); " is 153.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,ResetPipe,The length of the statement  "	return LibUsbDriverIO.UsbIOSync (interfaceHandle' LibUsbIoCtl.RESET_ENDPOINT' req' LibUsbRequest.Size' IntPtr.Zero' 0' out ret); " is 128.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,WritePipe,The length of the statement  "	int cltCode = endPointBase.Type == EndpointType.Isochronous ? LibUsbIoCtl.ISOCHRONOUS_WRITE : LibUsbIoCtl.INTERRUPT_OR_BULK_WRITE; " is 130.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbAPI.cs,WritePipe,The length of the statement  "	return Kernel32.DeviceIoControl (endPointBase.Handle' cltCode' req' LibUsbRequest.Size' buffer' bufferLength' out lengthTransferred' pOverlapped); " is 146.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbDriverIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbDriverIO.cs,OpenDevice,The length of the statement  "	return Kernel32.CreateFile (deviceFileName' NativeFileAccess.SPECIAL' NativeFileShare.NONE' IntPtr.Zero' NativeFileMode.OPEN_EXISTING' NativeFileFlag.FILE_FLAG_OVERLAPPED' IntPtr.Zero); " is 185.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbDriverIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbDriverIO.cs,UsbIOSync,The length of the statement  "	if (!Kernel32.DeviceIoControlAsObject (dev' code' inBuffer' inSize' outBuffer' outSize' ref ret' deviceIoOverlapped.GlobalOverlapped)) { " is 136.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbDriverIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbDriverIO.cs,UsbIOSync,The length of the statement  "				UsbError.Error (ErrorCode.Win32Error' iError' String.Format ("DeviceIoControl code {0:X8} failed:{1}"' code' Kernel32.FormatSystemMessage (iError))' typeof(LibUsbDriverIO)); " is 173.
Long Statement,LibUsbDotNet.Internal.LibUsb,LibUsbDriverIO,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbDriverIO.cs,UsbIOSync,The length of the statement  "	UsbError.Error (ErrorCode.Win32Error' Marshal.GetLastWin32Error ()' "GetOverlappedResult failed.\nIoCtlCode:" + code' typeof(LibUsbDriverIO)); " is 142.
Long Statement,LibUsbDotNet.LudnMonoLibUsb,MonoUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbDevice.cs,ControlTransfer,The length of the statement  "	int ret = MonoUsbApi.ControlTransferAsync ((MonoUsbDeviceHandle)mUsbHandle' setupPacket.RequestType' setupPacket.Request' setupPacket.Value' setupPacket.Index' buffer' (short)bufferLength' UsbConstants.DEFAULT_TIMEOUT); " is 219.
Long Statement,LibUsbDotNet.LudnMonoLibUsb,MonoUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbDevice.cs,GetDescriptor,The length of the statement  "	int ret = MonoUsbApi.GetDescriptor ((MonoUsbDeviceHandle)mUsbHandle' descriptorType' index' buffer' (ushort)bufferLength); " is 122.
Long Statement,LibUsbDotNet.LudnMonoLibUsb,MonoUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbDevice.cs,GetConfigs,The length of the statement  "		int ret = MonoUsbApi.GetConfigDescriptor (usbDevice.mMonoUSBProfile.ProfileHandle' (byte)iConfig' out nextConfigHandle); " is 120.
Long Statement,LibUsbDotNet.LudnMonoLibUsb,MonoUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbDevice.cs,GetConfigs,The length of the statement  "			usbError = UsbError.Error (ErrorCode.MonoApiError' ret' String.Format ("GetConfigDescriptor Failed at index:{0}"' iConfig)' usbDevice); " is 135.
Long Statement,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,Wait,The length of the statement  "			UsbError.Error (ec' ret' String.Format ("Wait:Unable to cancel transfer or the transfer did not return after it was cancelled. Cancelled:{0} TransferCompleted:{1}"' (MonoUsbError)ret' bTransferComplete)' EndpointBase); " is 218.
Long Statement,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,Wait,The length of the statement  "		UsbError.Error (ec' ret' String.Format ("Wait:Critical timeout failure! The transfer callback function was not called within the allotted time.")' EndpointBase); " is 161.
Long Statement,LibUsbDotNet.WinUsb,PipePolicies,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\PipePolicies.cs,ToString,The length of the statement  "	return string.Format ("AllowPartialReads:{0}\r\nShortPacketTerminate:{1}\r\nAutoClearStall:{2}\r\nAutoFlush:{3}\r\nIgnoreShortPackets:{4}\r\nRawIO:{5}\r\nPipeTransferTimeout:{6}\r\nMaxTransferSize:{7}\r\n"' o); " is 210.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetDevicePathList,The length of the statement  "	IntPtr deviceInfo = SetupApi.SetupDiGetClassDevs (ref deviceInterfaceGuid' null' IntPtr.Zero' SetupApi.DICFG.PRESENT | SetupApi.DICFG.DEVICEINTERFACE); " is 151.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetDevicePathList,The length of the statement  "		while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) { " is 128.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetDevicePathList,The length of the statement  "			bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' null); " is 135.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The length of the statement  "	IntPtr deviceInfo = SetupApi.SetupDiGetClassDevs (ref deviceInterfaceGuid' null' IntPtr.Zero' SetupApi.DICFG.PRESENT | SetupApi.DICFG.DEVICEINTERFACE); " is 151.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The length of the statement  "		while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) { " is 128.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The length of the statement  "			bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' ref devInfoData); " is 146.
Long Statement,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,WinUsbRegistryCallBack,The length of the statement  "	bSuccess = SetupApi.SetupDiGetCustomDeviceProperty (deviceInfoSet' ref deviceInfoData' DEVICE_INTERFACE_GUIDS' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize); " is 209.
Long Statement,LibUsbDotNet.WinUsb,WinUsbDevice,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbDevice.cs,QueryDeviceSpeed,The length of the statement  "	bool bSuccess = WinUsbAPI.WinUsb_QueryDeviceInformation (mUsbHandle' DeviceInformationTypes.DeviceSpeed' ref uTransferLength' buf); " is 131.
Long Statement,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,GetDescriptor,The length of the statement  "	return WinUsb_GetDescriptor (InterfaceHandle' DescriptorType' Index' LanguageID' Buffer' BufferLength' out LengthTransferred); " is 126.
Long Statement,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,ReadPipe,The length of the statement  "	return WinUsb_ReadPipe (endPointBase.Device.Handle' endPointBase.EpNum' pBuffer' BufferLength' out LengthTransferred' pOVERLAPPED); " is 131.
Long Statement,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,WritePipe,The length of the statement  "	return WinUsb_WritePipe (endPointBase.Device.Handle' endPointBase.EpNum' pBuffer' BufferLength' out LengthTransferred' pOVERLAPPED); " is 132.
Long Statement,LibUsbDotNet.WinUsb.Internal,WinUsbAPI,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\Internal\WinUsbAPI.cs,OpenDevice,The length of the statement  "	sfhDevice = Kernel32.CreateFile (DevicePath' NativeFileAccess.FILE_GENERIC_WRITE | NativeFileAccess.FILE_GENERIC_READ' NativeFileShare.FILE_SHARE_WRITE | NativeFileShare.FILE_SHARE_READ' IntPtr.Zero' NativeFileMode.OPEN_EXISTING' NativeFileFlag.FILE_ATTRIBUTE_NORMAL | NativeFileFlag.FILE_FLAG_OVERLAPPED' IntPtr.Zero); " is 319.
Magic Number,LibUsbDotNet.Descriptors,LangStringDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\LangStringDescriptor.cs,Get,The following statement contains a magic number: if (totalLength <= 2)  	return false;  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = BcdUsb.GetHashCode ();  	result = (result * 397) ^ Class.GetHashCode ();  	result = (result * 397) ^ SubClass.GetHashCode ();  	result = (result * 397) ^ Protocol.GetHashCode ();  	result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  	result = (result * 397) ^ VendorID.GetHashCode ();  	result = (result * 397) ^ ProductID.GetHashCode ();  	result = (result * 397) ^ BcdDevice.GetHashCode ();  	result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  	result = (result * 397) ^ ProductStringIndex.GetHashCode ();  	result = (result * 397) ^ SerialStringIndex.GetHashCode ();  	result = (result * 397) ^ ConfigurationCount.GetHashCode ();  	return result;  }  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Class.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SubClass.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Protocol.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ MaxPacketSize0.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ VendorID.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ProductID.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ BcdDevice.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ManufacturerStringIndex.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ProductStringIndex.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SerialStringIndex.GetHashCode ();  
Magic Number,LibUsbDotNet.Descriptors,UsbDeviceDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Descriptors\UsbDeviceDescriptor.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ConfigurationCount.GetHashCode ();  
Magic Number,LibUsbDotNet.DeviceNotify.Internal,DevNotifyNativeWindow,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Internal\DevNotifyNativeWindow.cs,DevNotifyNativeWindow,The following statement contains a magic number: cp.X = -100;  
Magic Number,LibUsbDotNet.DeviceNotify.Internal,DevNotifyNativeWindow,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Internal\DevNotifyNativeWindow.cs,DevNotifyNativeWindow,The following statement contains a magic number: cp.Y = -100;  
Magic Number,LibUsbDotNet.DeviceNotify.Internal,DevNotifyNativeWindow,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Internal\DevNotifyNativeWindow.cs,DevNotifyNativeWindow,The following statement contains a magic number: cp.Width = 50;  
Magic Number,LibUsbDotNet.DeviceNotify.Internal,DevNotifyNativeWindow,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Internal\DevNotifyNativeWindow.cs,DevNotifyNativeWindow,The following statement contains a magic number: cp.Height = 50;  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (DeviceFileName != null ? DeviceFileName.GetHashCode () : 0);  	result = (result * 397) ^ BusNumber.GetHashCode ();  	result = (result * 397) ^ DeviceAddress.GetHashCode ();  	result = (result * 397) ^ (DeviceDescriptor != null ? DeviceDescriptor.GetHashCode () : 0);  	return result;  }  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (DeviceFileName != null ? DeviceFileName.GetHashCode () : 0);  	result = (result * 397) ^ BusNumber.GetHashCode ();  	result = (result * 397) ^ DeviceAddress.GetHashCode ();  	result = (result * 397) ^ (DeviceDescriptor != null ? DeviceDescriptor.GetHashCode () : 0);  	return result;  }  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (DeviceFileName != null ? DeviceFileName.GetHashCode () : 0);  	result = (result * 397) ^ BusNumber.GetHashCode ();  	result = (result * 397) ^ DeviceAddress.GetHashCode ();  	result = (result * 397) ^ (DeviceDescriptor != null ? DeviceDescriptor.GetHashCode () : 0);  	return result;  }  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ BusNumber.GetHashCode ();  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ DeviceAddress.GetHashCode ();  
Magic Number,LibUsbDotNet.DeviceNotify.Linux,LinuxDevItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDevItem.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (DeviceDescriptor != null ? DeviceDescriptor.GetHashCode () : 0);  
Magic Number,LibUsbDotNet.Main,UsbTransfer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbTransfer.cs,Cancel,The following statement contains a magic number: mTransferCompleteEvent.WaitOne (5000' false);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsGuid,The following statement contains a magic number: if (len == 16) {  	byte[] guidBytes = new byte[len];  	Array.Copy (buffer' guidBytes' guidBytes.Length);  	rtn = new Guid (guidBytes);  }  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsString,The following statement contains a magic number: if (len > 2)  	return Encoding.Unicode.GetString (buffer' 0' len).TrimEnd (ChNull);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: if (len == 4)  	iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Main,UsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Main\UsbRegistry.cs,GetAsStringInt32,The following statement contains a magic number: iRtn = buffer [0] | ((buffer [1]) << 8) | ((buffer [2]) << 16) | ((buffer [3]) << 24);  
Magic Number,LibUsbDotNet.Internal,OverlappedTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\OverlappedTransferContext.cs,Wait,The following statement contains a magic number: if (iWait != 0) {  	bSuccess = EndpointBase.mUsbApi.AbortPipe (EndpointBase.Handle' EndpointBase.EpNum);  	bool bTransferComplete = mTransferCompleteEvent.WaitOne (100' UsbConstants.EXIT_CONTEXT);  	mTransferCompleteEvent.Set ();  	if (!bSuccess || !bTransferComplete) {  		ErrorCode ec = bSuccess ? ErrorCode.Win32Error : ErrorCode.CancelIoFailed;  		UsbError.Error (ec' Marshal.GetLastWin32Error ()' "Wait:AbortPipe Failed"' this);  		return ec;  	}  	if (iWait == WaitHandle.WaitTimeout)  		return ErrorCode.IoTimedOut;  	return ErrorCode.IoCancelled;  }  
Magic Number,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,LibUsbRegistry,The following statement contains a magic number: if (GetCustomDeviceKeyValue (usbHandle' SYMBOLIC_NAME_KEY' out symbolicName' 512) == ErrorCode.None) {  	mDeviceProperties.Add (SYMBOLIC_NAME_KEY' symbolicName);  }  
Magic Number,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,LibUsbRegistry,The following statement contains a magic number: if (GetCustomDeviceKeyValue (usbHandle' LIBUSB_INTERFACE_GUIDS' out deviceInterfaceGuids' 512) == ErrorCode.None) {  	string[] deviceInterfaceGuidsArray = deviceInterfaceGuids.Split (new char[] {  		'\0'  	}' StringSplitOptions.RemoveEmptyEntries);  	mDeviceProperties.Add (LIBUSB_INTERFACE_GUIDS' deviceInterfaceGuidsArray);  }  
Magic Number,MonoLibUsb.Profile,MonoUsbProfile,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Profile\MonoUsbProfile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (mBusNumber.GetHashCode () * 397) ^ mDeviceAddress.GetHashCode ();  }  
Magic Number,MonoLibUsb.Profile,MonoUsbProfile,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Profile\MonoUsbProfile.cs,GetHashCode,The following statement contains a magic number: return (mBusNumber.GetHashCode () * 397) ^ mDeviceAddress.GetHashCode ();  
Magic Number,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The following statement contains a magic number: if (!IsStopped && mRunning) {  	mRunning = false;  	if (bWait) {  		bool bSuccess = mUsbEventThread.Join ((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2));  		//bool bSuccess = mIsStoppedEvent.WaitOne((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)' false);  		if (!bSuccess) {  			mUsbEventThread.Abort ();  			throw new UsbException (typeof(MonoUsbEventHandler)' "Critical timeout failure! MonoUsbApi.HandleEventsTimeout did not return within the allotted time.");  			//LibUsbDotNet.UsbError.Error(ErrorCode.UnknownError' 0' "Critical timeout failure!"' typeof(MonoUsbEventHandler));  			//mIsStoppedEvent.Set();  		}  	}  	mUsbEventThread = null;  }  
Magic Number,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The following statement contains a magic number: if (!IsStopped && mRunning) {  	mRunning = false;  	if (bWait) {  		bool bSuccess = mUsbEventThread.Join ((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2));  		//bool bSuccess = mIsStoppedEvent.WaitOne((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)' false);  		if (!bSuccess) {  			mUsbEventThread.Abort ();  			throw new UsbException (typeof(MonoUsbEventHandler)' "Critical timeout failure! MonoUsbApi.HandleEventsTimeout did not return within the allotted time.");  			//LibUsbDotNet.UsbError.Error(ErrorCode.UnknownError' 0' "Critical timeout failure!"' typeof(MonoUsbEventHandler));  			//mIsStoppedEvent.Set();  		}  	}  	mUsbEventThread = null;  }  
Magic Number,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The following statement contains a magic number: if (bWait) {  	bool bSuccess = mUsbEventThread.Join ((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2));  	//bool bSuccess = mIsStoppedEvent.WaitOne((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)' false);  	if (!bSuccess) {  		mUsbEventThread.Abort ();  		throw new UsbException (typeof(MonoUsbEventHandler)' "Critical timeout failure! MonoUsbApi.HandleEventsTimeout did not return within the allotted time.");  		//LibUsbDotNet.UsbError.Error(ErrorCode.UnknownError' 0' "Critical timeout failure!"' typeof(MonoUsbEventHandler));  		//mIsStoppedEvent.Set();  	}  }  
Magic Number,MonoLibUsb,MonoUsbEventHandler,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoUsbEventHandler.cs,Stop,The following statement contains a magic number: if (bWait) {  	bool bSuccess = mUsbEventThread.Join ((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2));  	//bool bSuccess = mIsStoppedEvent.WaitOne((int)((mWaitUnixNativeTimeval.tv_sec * 1000 + mWaitUnixNativeTimeval.tv_usec) * 1.2)' false);  	if (!bSuccess) {  		mUsbEventThread.Abort ();  		throw new UsbException (typeof(MonoUsbEventHandler)' "Critical timeout failure! MonoUsbApi.HandleEventsTimeout did not return within the allotted time.");  		//LibUsbDotNet.UsbError.Error(ErrorCode.UnknownError' 0' "Critical timeout failure!"' typeof(MonoUsbEventHandler));  		//mIsStoppedEvent.Set();  	}  }  
Magic Number,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,GetDescriptor,The following statement contains a magic number: return ControlTransfer (deviceHandle' (byte)UsbEndpointDirection.EndpointIn' (byte)UsbStandardRequest.GetDescriptor' (short)((descType << 8) | descIndex)' 0' pData' (short)length' 1000);  
Magic Number,MonoLibUsb,MonoUsbApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\MonoLibUsbApi.cs,GetDescriptor,The following statement contains a magic number: return ControlTransfer (deviceHandle' (byte)UsbEndpointDirection.EndpointIn' (byte)UsbStandardRequest.GetDescriptor' (short)((descType << 8) | descIndex)' 0' pData' (short)length' 1000);  
Magic Number,LibUsbDotNet.Internal.LibUsb,LibUsbIoCtl,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbIoCtl.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);  
Magic Number,LibUsbDotNet.Internal.LibUsb,LibUsbIoCtl,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbIoCtl.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);  
Magic Number,LibUsbDotNet.Internal.LibUsb,LibUsbIoCtl,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbIoCtl.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);  
Magic Number,LibUsbDotNet.Internal.LibUsb,LibUsbRequest,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbRequest.cs,RequestConfigDescriptor,The following statement contains a magic number: Descriptor.Type = (value >> 8) & 0xFF;  
Magic Number,LibUsbDotNet.Internal.LibUsb,LibUsbRequest,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\Internal\LibUsbRequest.cs,RequestStringDescriptor,The following statement contains a magic number: Descriptor.Type = value >> 8 & 0xFF;  
Magic Number,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,ReadFlush,The following statement contains a magic number: while (Read (bufDummy' 10' out iTransferred) == ErrorCode.None && iBufCount < 128) {  	iBufCount++;  }  
Magic Number,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,ReadFlush,The following statement contains a magic number: while (Read (bufDummy' 10' out iTransferred) == ErrorCode.None && iBufCount < 128) {  	iBufCount++;  }  
Magic Number,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,StopReadThread,The following statement contains a magic number: while (mReadThread.IsAlive && ((DateTime.Now - dtStart).TotalSeconds < 5))// 5 sec fail-safe   {  	Thread.Sleep (100);  	Application.DoEvents ();  }  
Magic Number,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,StopReadThread,The following statement contains a magic number: while (mReadThread.IsAlive && ((DateTime.Now - dtStart).TotalSeconds < 5))// 5 sec fail-safe   {  	Thread.Sleep (100);  	Application.DoEvents ();  }  
Magic Number,LibUsbDotNet,UsbEndpointReader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\UsbEndpointReader.cs,StopReadThread,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,freeTransfer,The following statement contains a magic number: mTransferCompleteEvent.WaitOne (200' UsbConstants.EXIT_CONTEXT);  
Magic Number,LibUsbDotNet.LudnMonoLibUsb.Internal,MonoUsbTransferContext,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\MonoLibUsb\Transfer\MonoUsbTransferContext.cs,Wait,The following statement contains a magic number: switch (iWait) {  case 0:  	// TransferCompleteEvent  	if (mTransfer.Status == MonoUsbTansferStatus.TransferCompleted) {  		transferredCount = mTransfer.ActualLength;  		return ErrorCode.Success;  	}  	string s;  	monoError = MonoUsbApi.MonoLibUsbErrorFromTransferStatus (mTransfer.Status);  	ec = MonoUsbApi.ErrorCodeFromLibUsbError ((int)monoError' out s);  	UsbError.Error (ErrorCode.MonoApiError' (int)monoError' "Wait:" + s' EndpointBase);  	return ec;  case 1:  	// TransferCancelEvent  	ret = (int)mTransfer.Cancel ();  	bool bTransferComplete = mTransferCompleteEvent.WaitOne (100' UsbConstants.EXIT_CONTEXT);  	mTransferCompleteEvent.Set ();  	if (ret != 0 || !bTransferComplete) {  		ec = ret == 0 ? ErrorCode.CancelIoFailed : ErrorCode.MonoApiError;  		UsbError.Error (ec' ret' String.Format ("Wait:Unable to cancel transfer or the transfer did not return after it was cancelled. Cancelled:{0} TransferCompleted:{1}"' (MonoUsbError)ret' bTransferComplete)' EndpointBase);  		return ec;  	}  	return ErrorCode.IoCancelled;  default:  	// Critical failure timeout  	mTransfer.Cancel ();  	ec = ((EndpointBase.mEpNum & (byte)UsbCtrlFlags.Direction_In) > 0) ? ErrorCode.ReadFailed : ErrorCode.WriteFailed;  	mTransferCompleteEvent.Set ();  	UsbError.Error (ec' ret' String.Format ("Wait:Critical timeout failure! The transfer callback function was not called within the allotted time.")' EndpointBase);  	return ec;  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetDevicePathList,The following statement contains a magic number: if (deviceInfo != IntPtr.Zero) {  	while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  		int length = 1024;  		detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  		bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' null);  		if (bResult)  			devicePathList.Add (detailHelper.DevicePath);  		devicePathIndex++;  	}  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetDevicePathList,The following statement contains a magic number: while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  	int length = 1024;  	detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  	bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' null);  	if (bResult)  		devicePathList.Add (detailHelper.DevicePath);  	devicePathIndex++;  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The following statement contains a magic number: if (deviceInfo != IntPtr.Zero) {  	while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  		int length = 1024;  		detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  		bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' ref devInfoData);  		if (bResult) {  			WinUsbRegistry regInfo = new WinUsbRegistry ();  			SetupApi.getSPDRPProperties (deviceInfo' ref devInfoData' regInfo.mDeviceProperties);  			// Use the actual winusb device path for SYMBOLIC_NAME_KEY. This will be used to open the device.  			regInfo.mDeviceProperties.Add (SYMBOLIC_NAME_KEY' detailHelper.DevicePath);  			Debug.WriteLine (detailHelper.DevicePath);  			regInfo.mDeviceInterfaceGuids = new Guid[] {  				deviceInterfaceGuid  			};  			StringBuilder sbDeviceID = new StringBuilder (1024);  			if (SetupApi.CM_Get_Device_ID (devInfoData.DevInst' sbDeviceID' sbDeviceID.Capacity' 0) == SetupApi.CR.SUCCESS) {  				regInfo.mDeviceProperties [DEVICE_ID_KEY] = sbDeviceID.ToString ();  			}  			deviceRegistryList.Add (regInfo);  		}  		devicePathIndex++;  	}  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The following statement contains a magic number: if (deviceInfo != IntPtr.Zero) {  	while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  		int length = 1024;  		detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  		bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' ref devInfoData);  		if (bResult) {  			WinUsbRegistry regInfo = new WinUsbRegistry ();  			SetupApi.getSPDRPProperties (deviceInfo' ref devInfoData' regInfo.mDeviceProperties);  			// Use the actual winusb device path for SYMBOLIC_NAME_KEY. This will be used to open the device.  			regInfo.mDeviceProperties.Add (SYMBOLIC_NAME_KEY' detailHelper.DevicePath);  			Debug.WriteLine (detailHelper.DevicePath);  			regInfo.mDeviceInterfaceGuids = new Guid[] {  				deviceInterfaceGuid  			};  			StringBuilder sbDeviceID = new StringBuilder (1024);  			if (SetupApi.CM_Get_Device_ID (devInfoData.DevInst' sbDeviceID' sbDeviceID.Capacity' 0) == SetupApi.CR.SUCCESS) {  				regInfo.mDeviceProperties [DEVICE_ID_KEY] = sbDeviceID.ToString ();  			}  			deviceRegistryList.Add (regInfo);  		}  		devicePathIndex++;  	}  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The following statement contains a magic number: while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  	int length = 1024;  	detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  	bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' ref devInfoData);  	if (bResult) {  		WinUsbRegistry regInfo = new WinUsbRegistry ();  		SetupApi.getSPDRPProperties (deviceInfo' ref devInfoData' regInfo.mDeviceProperties);  		// Use the actual winusb device path for SYMBOLIC_NAME_KEY. This will be used to open the device.  		regInfo.mDeviceProperties.Add (SYMBOLIC_NAME_KEY' detailHelper.DevicePath);  		Debug.WriteLine (detailHelper.DevicePath);  		regInfo.mDeviceInterfaceGuids = new Guid[] {  			deviceInterfaceGuid  		};  		StringBuilder sbDeviceID = new StringBuilder (1024);  		if (SetupApi.CM_Get_Device_ID (devInfoData.DevInst' sbDeviceID' sbDeviceID.Capacity' 0) == SetupApi.CR.SUCCESS) {  			regInfo.mDeviceProperties [DEVICE_ID_KEY] = sbDeviceID.ToString ();  		}  		deviceRegistryList.Add (regInfo);  	}  	devicePathIndex++;  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The following statement contains a magic number: while ((SetupApi.SetupDiEnumDeviceInterfaces (deviceInfo' null' ref deviceInterfaceGuid' devicePathIndex' ref interfaceData))) {  	int length = 1024;  	detailHelper = new SetupApi.DeviceInterfaceDetailHelper (length);  	bool bResult = SetupApi.SetupDiGetDeviceInterfaceDetail (deviceInfo' ref interfaceData' detailHelper.Handle' length' out length' ref devInfoData);  	if (bResult) {  		WinUsbRegistry regInfo = new WinUsbRegistry ();  		SetupApi.getSPDRPProperties (deviceInfo' ref devInfoData' regInfo.mDeviceProperties);  		// Use the actual winusb device path for SYMBOLIC_NAME_KEY. This will be used to open the device.  		regInfo.mDeviceProperties.Add (SYMBOLIC_NAME_KEY' detailHelper.DevicePath);  		Debug.WriteLine (detailHelper.DevicePath);  		regInfo.mDeviceInterfaceGuids = new Guid[] {  			deviceInterfaceGuid  		};  		StringBuilder sbDeviceID = new StringBuilder (1024);  		if (SetupApi.CM_Get_Device_ID (devInfoData.DevInst' sbDeviceID' sbDeviceID.Capacity' 0) == SetupApi.CR.SUCCESS) {  			regInfo.mDeviceProperties [DEVICE_ID_KEY] = sbDeviceID.ToString ();  		}  		deviceRegistryList.Add (regInfo);  	}  	devicePathIndex++;  }  
Magic Number,LibUsbDotNet.WinUsb,WinUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\WinUsb\WinUsbRegistry.cs,GetWinUsbRegistryList,The following statement contains a magic number: if (bResult) {  	WinUsbRegistry regInfo = new WinUsbRegistry ();  	SetupApi.getSPDRPProperties (deviceInfo' ref devInfoData' regInfo.mDeviceProperties);  	// Use the actual winusb device path for SYMBOLIC_NAME_KEY. This will be used to open the device.  	regInfo.mDeviceProperties.Add (SYMBOLIC_NAME_KEY' detailHelper.DevicePath);  	Debug.WriteLine (detailHelper.DevicePath);  	regInfo.mDeviceInterfaceGuids = new Guid[] {  		deviceInterfaceGuid  	};  	StringBuilder sbDeviceID = new StringBuilder (1024);  	if (SetupApi.CM_Get_Device_ID (devInfoData.DevInst' sbDeviceID' sbDeviceID.Capacity' 0) == SetupApi.CR.SUCCESS) {  		regInfo.mDeviceProperties [DEVICE_ID_KEY] = sbDeviceID.ToString ();  	}  	deviceRegistryList.Add (regInfo);  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 2;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 3;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 4;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4'  	5  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4'  	5  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4'  	5  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4'  	5  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNameFromNumber,The following statement contains a magic number: switch (groupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "ClassGuid";  case 5:  	return "String";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNameFromNumber,The following statement contains a magic number: switch (groupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "ClassGuid";  case 5:  	return "String";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNameFromNumber,The following statement contains a magic number: switch (groupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "ClassGuid";  case 5:  	return "String";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNameFromNumber,The following statement contains a magic number: switch (groupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "ClassGuid";  case 5:  	return "String";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: switch (groupName.ToLower ()) {  case "vid":  	return 1;  case "pid":  	return 2;  case "rev":  	return 3;  case "classguid":  	return 4;  case "string":  	return 5;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: switch (groupName.ToLower ()) {  case "vid":  	return 1;  case "pid":  	return 2;  case "rev":  	return 3;  case "classguid":  	return 4;  case "string":  	return 5;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: switch (groupName.ToLower ()) {  case "vid":  	return 1;  case "pid":  	return 2;  case "rev":  	return 3;  case "classguid":  	return 4;  case "string":  	return 5;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: switch (groupName.ToLower ()) {  case "vid":  	return 1;  case "pid":  	return 2;  case "rev":  	return 3;  case "classguid":  	return 4;  case "string":  	return 5;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: return 2;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: return 3;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: return 4;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following statement contains a magic number: return 5;  
Missing Default,LibUsbDotNet.DeviceNotify,WindowsDeviceNotifyEventArgs,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\WindowsDeviceNotifyEventArgs.cs,WindowsDeviceNotifyEventArgs,The following switch statement is missing a default case: switch (mDeviceType) {  case DeviceType.Volume:  	mVolume = new VolumeNotifyInfo (ptrHdr);  	mObject = mVolume;  	break;  case DeviceType.Port:  	mPort = new PortNotifyInfo (ptrHdr);  	mObject = mPort;  	break;  case DeviceType.DeviceInterface:  	mDevice = new UsbDeviceNotifyInfo (ptrHdr);  	mObject = mDevice;  	break;  }  
Missing Default,LibUsbDotNet.DeviceNotify.Linux,LinuxDeviceNotifyEventArgs,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\DeviceNotify\Linux\LinuxDeviceNotifyEventArgs.cs,LinuxDeviceNotifyEventArgs,The following switch statement is missing a default case: switch (mDeviceType) {  case DeviceType.Volume:  	throw new NotImplementedException (mDeviceType.ToString ());  case DeviceType.Port:  	throw new NotImplementedException (mDeviceType.ToString ());  case DeviceType.DeviceInterface:  	mDevice = new LinuxUsbDeviceNotifyInfo (linuxDevItem);  	mObject = mDevice;  	break;  }  
Missing Default,LibUsbDotNet.Internal,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\SetupApi.cs,getSPDRPProperties,The following switch statement is missing a default case: switch ((SPDRP)prop.Value) {  case SPDRP.PhysicalDeviceObjectName:  case SPDRP.LocationInformation:  case SPDRP.Class:  case SPDRP.Mfg:  case SPDRP.DeviceDesc:  case SPDRP.Driver:  case SPDRP.EnumeratorName:  case SPDRP.FriendlyName:  case SPDRP.ClassGuid:  	oValue = UsbRegistry.GetAsString (propBuffer' iReturnBytes);  	break;  case SPDRP.HardwareId:  case SPDRP.CompatibleIds:  case SPDRP.LocationPaths:  	oValue = UsbRegistry.GetAsStringArray (propBuffer' iReturnBytes);  	break;  case SPDRP.BusNumber:  case SPDRP.InstallState:  case SPDRP.LegacyBusType:  case SPDRP.RemovalPolicy:  case SPDRP.UiNumber:  case SPDRP.Address:  	oValue = UsbRegistry.GetAsStringInt32 (propBuffer' iReturnBytes);  	break;  case SPDRP.BusTypeGuid:  	oValue = UsbRegistry.GetAsGuid (propBuffer' iReturnBytes);  	break;  }  
Missing Default,LibUsbDotNet.LibUsb,LibUsbRegistry,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\LibUsb\LibUsbRegistry.cs,GetPropertiesSPDRP,The following switch statement is missing a default case: switch ((DevicePropertyType)prop.Value) {  case DevicePropertyType.PhysicalDeviceObjectName:  case DevicePropertyType.LocationInformation:  case DevicePropertyType.Class:  case DevicePropertyType.Mfg:  case DevicePropertyType.DeviceDesc:  case DevicePropertyType.Driver:  case DevicePropertyType.EnumeratorName:  case DevicePropertyType.FriendlyName:  case DevicePropertyType.ClassGuid:  	oValue = GetAsString (propBuffer' iReturnBytes);  	break;  case DevicePropertyType.HardwareId:  case DevicePropertyType.CompatibleIds:  	oValue = GetAsStringArray (propBuffer' iReturnBytes);  	break;  case DevicePropertyType.BusNumber:  case DevicePropertyType.InstallState:  case DevicePropertyType.LegacyBusType:  case DevicePropertyType.RemovalPolicy:  case DevicePropertyType.UiNumber:  case DevicePropertyType.Address:  	oValue = GetAsStringInt32 (propBuffer' iReturnBytes);  	break;  case DevicePropertyType.BusTypeGuid:  	oValue = GetAsGuid (propBuffer' iReturnBytes);  	break;  }  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following switch statement is missing a default case: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following switch statement is missing a default case: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNameFromNumber,The following switch statement is missing a default case: switch (groupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "ClassGuid";  case 5:  	return "String";  }  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegSymbolicName,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\LibWinUsb\Internal\UsbRegex\RegSymbolicName.cs,GroupNumberFromName,The following switch statement is missing a default case: switch (groupName.ToLower ()) {  case "vid":  	return 1;  case "pid":  	return 2;  case "rev":  	return 3;  case "classguid":  	return 4;  case "string":  	return 5;  }  
