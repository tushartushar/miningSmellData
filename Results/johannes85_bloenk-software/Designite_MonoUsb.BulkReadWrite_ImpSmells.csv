Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The method has 137 lines of code.
Complex Method,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,doBulkAsyncTransfer,Cyclomatic complexity of the method is 8
Complex Method,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,Cyclomatic complexity of the method is 24
Long Parameter List,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,doBulkAsyncTransfer,The method has 6 parameters.
Long Identifier,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,doBulkAsyncTransfer,The length of the parameter monoUsbTransferCallbackDelegate is 31.
Long Statement,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,doBulkAsyncTransfer,The length of the statement  "	transfer.FillBulk (dev_handle' endpoint' gcBuffer.AddrOfPinnedObject ()' length' monoUsbTransferCallbackDelegate' gcUserCompleted.AddrOfPinnedObject ()' timeout); " is 162.
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,fillTestData,The following statement contains a magic number: for (i = 0; i < len; i++)  	data [i] = (byte)(65 + (i & 0xf));  
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,fillTestData,The following statement contains a magic number: data [i] = (byte)(65 + (i & 0xf));  
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The following statement contains a magic number: do {  	try {  		do {  			sessionHandle = new MonoUsbSessionHandle ();  			if (sessionHandle.IsInvalid)  				throw new Exception ("Invalid session handle.");  			Console.WriteLine ("Opening Device..");  			device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  			if ((device_handle == null) || device_handle.IsInvalid)  				break;  			// If TEST_REST_DEVICE = True' reset the device and re-open  			if (TEST_REST_DEVICE) {  				MonoUsbApi.ResetDevice (device_handle);  				device_handle.Close ();  				device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  				if ((device_handle == null) || device_handle.IsInvalid)  					break;  			}  			// Set configuration  			Console.WriteLine ("Set Config..");  			r = MonoUsbApi.SetConfiguration (device_handle' MY_CONFIG);  			if (r != 0)  				break;  			// Claim interface  			Console.WriteLine ("Set Interface..");  			r = MonoUsbApi.ClaimInterface (device_handle' MY_INTERFACE);  			if (r != 0)  				break;  			/////////////////////  			// Write test data //  			/////////////////////  			int packetCount = 0;  			int transferredTotal = 0;  			do {  				Console.WriteLine ("Sending test data..");  				// If the Async TEST_MODE enumeration is set' use  				// the internal transfer function  				if (TEST_MODE == TestMode.Async) {  					r = (int)doBulkAsyncTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  				}  				else {  					// Use the sync bulk transfer API function   					r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  				}  				if (r == 0) {  					packetCount++;  					transferredTotal += transferred;  				}  				// Keep writing data until an error occurs or  				// 4 packets have been sent.  			}  			while (r == 0 && packetCount < 5);  			if (r == (int)MonoUsbError.ErrorTimeout) {  				// This is considered normal operation  				Console.WriteLine ("Write Timed Out. {0} packet(s) written ({1} bytes)"' packetCount' transferredTotal);  			}  			else if (r != (int)MonoUsbError.ErrorTimeout && r != 0) {  				// An error' other than ErrorTimeout was received.   				Console.WriteLine ("Write failed:{0}"' (MonoUsbError)r);  				break;  			}  			////////////////////  			// Read test data //  			////////////////////  			Console.WriteLine ("Reading test data..");  			packetCount = 0;  			transferredTotal = 0;  			do {  				// If the Async TEST_MODE enumeration is set' use  				// the internal transfer function  				if (TEST_MODE == TestMode.Async) {  					r = (int)doBulkAsyncTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  				}  				else {  					// Use the sync bulk transfer API function   					r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  				}  				if (r == (int)MonoUsbError.ErrorTimeout) {  					// This is considered normal operation  					Console.WriteLine ("Read Timed Out. {0} packet(s) read ({1} bytes)"' packetCount' transferredTotal);  				}  				else if (r != 0) {  					// An error' other than ErrorTimeout was received.   					Console.WriteLine ("Read failed:{0}"' (MonoUsbError)r);  				}  				else {  					transferredTotal += transferred;  					packetCount++;  					// Display test data.  					Console.Write ("Received: ");  					Console.WriteLine (System.Text.Encoding.Default.GetString (testReadData' 0' transferred));  				}  				// Keep reading data until an error occurs' (ErrorTimeout)  			}  			while (r == 0);  		}  		while (false);  	}  	finally {  		// Free and close resources  		if (device_handle != null) {  			if (!device_handle.IsInvalid) {  				MonoUsbApi.ReleaseInterface (device_handle' MY_INTERFACE);  				device_handle.Close ();  			}  		}  		if (sessionHandle != null) {  			sessionHandle.Close ();  			sessionHandle = null;  		}  	}  	// Run the entire test TEST_LOOP_COUNT times.  }  while (++loopCount < TEST_LOOP_COUNT);  
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The following statement contains a magic number: try {  	do {  		sessionHandle = new MonoUsbSessionHandle ();  		if (sessionHandle.IsInvalid)  			throw new Exception ("Invalid session handle.");  		Console.WriteLine ("Opening Device..");  		device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  		if ((device_handle == null) || device_handle.IsInvalid)  			break;  		// If TEST_REST_DEVICE = True' reset the device and re-open  		if (TEST_REST_DEVICE) {  			MonoUsbApi.ResetDevice (device_handle);  			device_handle.Close ();  			device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  			if ((device_handle == null) || device_handle.IsInvalid)  				break;  		}  		// Set configuration  		Console.WriteLine ("Set Config..");  		r = MonoUsbApi.SetConfiguration (device_handle' MY_CONFIG);  		if (r != 0)  			break;  		// Claim interface  		Console.WriteLine ("Set Interface..");  		r = MonoUsbApi.ClaimInterface (device_handle' MY_INTERFACE);  		if (r != 0)  			break;  		/////////////////////  		// Write test data //  		/////////////////////  		int packetCount = 0;  		int transferredTotal = 0;  		do {  			Console.WriteLine ("Sending test data..");  			// If the Async TEST_MODE enumeration is set' use  			// the internal transfer function  			if (TEST_MODE == TestMode.Async) {  				r = (int)doBulkAsyncTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  			}  			else {  				// Use the sync bulk transfer API function   				r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  			}  			if (r == 0) {  				packetCount++;  				transferredTotal += transferred;  			}  			// Keep writing data until an error occurs or  			// 4 packets have been sent.  		}  		while (r == 0 && packetCount < 5);  		if (r == (int)MonoUsbError.ErrorTimeout) {  			// This is considered normal operation  			Console.WriteLine ("Write Timed Out. {0} packet(s) written ({1} bytes)"' packetCount' transferredTotal);  		}  		else if (r != (int)MonoUsbError.ErrorTimeout && r != 0) {  			// An error' other than ErrorTimeout was received.   			Console.WriteLine ("Write failed:{0}"' (MonoUsbError)r);  			break;  		}  		////////////////////  		// Read test data //  		////////////////////  		Console.WriteLine ("Reading test data..");  		packetCount = 0;  		transferredTotal = 0;  		do {  			// If the Async TEST_MODE enumeration is set' use  			// the internal transfer function  			if (TEST_MODE == TestMode.Async) {  				r = (int)doBulkAsyncTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  			}  			else {  				// Use the sync bulk transfer API function   				r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  			}  			if (r == (int)MonoUsbError.ErrorTimeout) {  				// This is considered normal operation  				Console.WriteLine ("Read Timed Out. {0} packet(s) read ({1} bytes)"' packetCount' transferredTotal);  			}  			else if (r != 0) {  				// An error' other than ErrorTimeout was received.   				Console.WriteLine ("Read failed:{0}"' (MonoUsbError)r);  			}  			else {  				transferredTotal += transferred;  				packetCount++;  				// Display test data.  				Console.Write ("Received: ");  				Console.WriteLine (System.Text.Encoding.Default.GetString (testReadData' 0' transferred));  			}  			// Keep reading data until an error occurs' (ErrorTimeout)  		}  		while (r == 0);  	}  	while (false);  }  finally {  	// Free and close resources  	if (device_handle != null) {  		if (!device_handle.IsInvalid) {  			MonoUsbApi.ReleaseInterface (device_handle' MY_INTERFACE);  			device_handle.Close ();  		}  	}  	if (sessionHandle != null) {  		sessionHandle.Close ();  		sessionHandle = null;  	}  }  
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The following statement contains a magic number: do {  	sessionHandle = new MonoUsbSessionHandle ();  	if (sessionHandle.IsInvalid)  		throw new Exception ("Invalid session handle.");  	Console.WriteLine ("Opening Device..");  	device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  	if ((device_handle == null) || device_handle.IsInvalid)  		break;  	// If TEST_REST_DEVICE = True' reset the device and re-open  	if (TEST_REST_DEVICE) {  		MonoUsbApi.ResetDevice (device_handle);  		device_handle.Close ();  		device_handle = MonoUsbApi.OpenDeviceWithVidPid (sessionHandle' MY_VID' MY_PID);  		if ((device_handle == null) || device_handle.IsInvalid)  			break;  	}  	// Set configuration  	Console.WriteLine ("Set Config..");  	r = MonoUsbApi.SetConfiguration (device_handle' MY_CONFIG);  	if (r != 0)  		break;  	// Claim interface  	Console.WriteLine ("Set Interface..");  	r = MonoUsbApi.ClaimInterface (device_handle' MY_INTERFACE);  	if (r != 0)  		break;  	/////////////////////  	// Write test data //  	/////////////////////  	int packetCount = 0;  	int transferredTotal = 0;  	do {  		Console.WriteLine ("Sending test data..");  		// If the Async TEST_MODE enumeration is set' use  		// the internal transfer function  		if (TEST_MODE == TestMode.Async) {  			r = (int)doBulkAsyncTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  		}  		else {  			// Use the sync bulk transfer API function   			r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  		}  		if (r == 0) {  			packetCount++;  			transferredTotal += transferred;  		}  		// Keep writing data until an error occurs or  		// 4 packets have been sent.  	}  	while (r == 0 && packetCount < 5);  	if (r == (int)MonoUsbError.ErrorTimeout) {  		// This is considered normal operation  		Console.WriteLine ("Write Timed Out. {0} packet(s) written ({1} bytes)"' packetCount' transferredTotal);  	}  	else if (r != (int)MonoUsbError.ErrorTimeout && r != 0) {  		// An error' other than ErrorTimeout was received.   		Console.WriteLine ("Write failed:{0}"' (MonoUsbError)r);  		break;  	}  	////////////////////  	// Read test data //  	////////////////////  	Console.WriteLine ("Reading test data..");  	packetCount = 0;  	transferredTotal = 0;  	do {  		// If the Async TEST_MODE enumeration is set' use  		// the internal transfer function  		if (TEST_MODE == TestMode.Async) {  			r = (int)doBulkAsyncTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  		}  		else {  			// Use the sync bulk transfer API function   			r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_READ' testReadData' TEST_READ_LEN' out transferred' MY_TIMEOUT);  		}  		if (r == (int)MonoUsbError.ErrorTimeout) {  			// This is considered normal operation  			Console.WriteLine ("Read Timed Out. {0} packet(s) read ({1} bytes)"' packetCount' transferredTotal);  		}  		else if (r != 0) {  			// An error' other than ErrorTimeout was received.   			Console.WriteLine ("Read failed:{0}"' (MonoUsbError)r);  		}  		else {  			transferredTotal += transferred;  			packetCount++;  			// Display test data.  			Console.Write ("Received: ");  			Console.WriteLine (System.Text.Encoding.Default.GetString (testReadData' 0' transferred));  		}  		// Keep reading data until an error occurs' (ErrorTimeout)  	}  	while (r == 0);  }  while (false);  
Magic Number,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The following statement contains a magic number: do {  	Console.WriteLine ("Sending test data..");  	// If the Async TEST_MODE enumeration is set' use  	// the internal transfer function  	if (TEST_MODE == TestMode.Async) {  		r = (int)doBulkAsyncTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  	}  	else {  		// Use the sync bulk transfer API function   		r = MonoUsbApi.BulkTransfer (device_handle' MY_EP_WRITE' testWriteData' TEST_WRITE_LEN' out transferred' MY_TIMEOUT);  	}  	if (r == 0) {  		packetCount++;  		transferredTotal += transferred;  	}  	// Keep writing data until an error occurs or  	// 4 packets have been sent.  }  while (r == 0 && packetCount < 5);  
Missing Default,MonoLibUsb.ShowInfo,BulkReadWrite,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\MonoLibUsb\MonoUsb.BulkReadWrite\BulkReadWrite.cs,Main,The following switch statement is missing a default case: switch (args [0].ToLower ()) {  case "sync":  	TEST_MODE = TestMode.Sync;  	break;  case "async":  	TEST_MODE = TestMode.Async;  	break;  }  
