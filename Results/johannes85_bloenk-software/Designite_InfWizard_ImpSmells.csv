Implementation smell,Namespace,Class,File,Method,Description
Long Method,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The method has 193 lines of code.
Complex Method,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,UpdateDriver,Cyclomatic complexity of the method is 11
Complex Method,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,Cyclomatic complexity of the method is 13
Complex Method,InfWizard,InfWizardStatus,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardStatus.cs,WriteRtfRawStatus,Cyclomatic complexity of the method is 8
Complex Method,InfWizard,InfWizardStatus,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardStatus.cs,WriteRtfStatusArgsLine,Cyclomatic complexity of the method is 15
Complex Method,InfWizard,RemoveDeviceForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\RemoveDeviceForm.cs,DeepClean,Cyclomatic complexity of the method is 12
Complex Method,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,Cyclomatic complexity of the method is 19
Complex Method,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,Cyclomatic complexity of the method is 15
Complex Method,DynamicProps,DynamicTypeDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicTypeDescriptor.cs,sortedPropertyDescriptorCollection,Cyclomatic complexity of the method is 9
Complex Method,InfWizard.InfWriters,InfWriter,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWriter.cs,WriteStringFiles,Cyclomatic complexity of the method is 10
Complex Method,TagNReplace,TagNReplaceString,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\TagnReplace\TagNReplaceString.cs,TagNReplaceString,Cyclomatic complexity of the method is 11
Complex Method,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,Cyclomatic complexity of the method is 47
Complex Method,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,Cyclomatic complexity of the method is 9
Complex Method,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,ActivatePage,Cyclomatic complexity of the method is 8
Long Parameter List,DynamicProps,DynamicPropDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicPropDescriptor.cs,DynamicPropDescriptor,The method has 5 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,FormatMessage,The method has 7 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,UpdateDriverForPlugAndPlayDevices,The method has 5 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,CM_Request_Device_Eject,The method has 5 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetDeviceProperty,The method has 8 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiEnumDriverInfo,The method has 5 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetCustomDeviceProperty,The method has 8 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The method has 7 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The method has 7 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiSetDeviceRegistryProperty,The method has 5 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupCopyOEMInf,The method has 8 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiOpenDevRegKey,The method has 6 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,RegEnumValue,The method has 8 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,RegEnumValue,The method has 8 parameters.
Long Parameter List,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,DiUninstallDevice,The method has 5 parameters.
Long Parameter List,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,DeviceItem,The method has 5 parameters.
Long Identifier,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupCopyOEMInf,The length of the parameter DestinationInfFileNameComponent is 31.
Long Statement,InfWizard,DriverResManager,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResManager.cs,loadResourcesFromPath,The length of the statement  "				InfWizardStatus.Log (CategoryType.DriverResource' StatusType.Warning' "skipping duplicate driver resource {0} found in {1}"' newDriverResource.DisplayName' file); " is 162.
Long Statement,InfWizard,DriverResManager,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResManager.cs,loadResourcesFromPath,The length of the statement  "		InfWizardStatus.Log (CategoryType.DriverResource' StatusType.Info' "failed loading driver resources from working directory :{0}"' ex.ToString ()); " is 146.
Long Statement,InfWizard,DriverResManager,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResManager.cs,loadResourcesFromAssembly,The length of the statement  "		InfWizardStatus.Log (CategoryType.DriverResource' StatusType.Warning' "Failed loading driver resources from executing assembly: {0}"' ex.Message); " is 146.
Long Statement,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,GetDownloadFilename,The length of the statement  "	Match match = Regex.Match (content' "filename=\"(?<filename>.+?)\""' RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant); " is 131.
Long Statement,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,WebClient_DownloadDataCompleted,The length of the statement  "		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex.Message); " is 126.
Long Statement,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,WebClient_DownloadDataCompleted,The length of the statement  "				InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "download failed: {0}"' ex.InnerException.Message); " is 121.
Long Statement,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The length of the statement  "		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex.Message); " is 126.
Long Statement,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The length of the statement  "				InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex.InnerException.Message); " is 141.
Long Statement,InfWizard,FolderBrowserUITypeEditor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\FolderBrowserUITypeEditor.cs,EditValue,The length of the statement  "	IWindowsFormsEditorService edSvc = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService)); " is 120.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,UpdateDriver,The length of the statement  "		bSuccess = SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID); " is 127.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,UpdateDriver,The length of the statement  "		SetupApi.CR status = SetupApi.CM_Reenumerate_DevNode ((int)devInfoData.DevInst' SetupApi.CM.REENUMERATE_RETRY_INSTALLATION); " is 124.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,UpdateDriver,The length of the statement  "			InfWizardStatus.Log (CategoryType.RefreshDriver' StatusType.Success' "re-enumeration of {0} succeeded..."' deviceHardwareID); " is 125.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,UpdateDriver,The length of the statement  "			InfWizardStatus.Log (CategoryType.RefreshDriver' StatusType.Warning' "failed to re-enumerate device node: CR code {0}"' status); " is 128.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "		bSuccess = SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID); " is 127.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "		bSuccess = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) == SetupApi.CR.NO_SUCH_DEVNODE); " is 127.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "		bSuccess = SetupApi.SetupDiGetDeviceRegistryProperty (out configFlags' pDevInfo' ref devInfoData' SetupApi.SPDRP.CONFIGFLAGS); " is 126.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "			InfWizardStatus.Log (CategoryType.CheckRemoved' StatusType.Warning' "could not read SPDRP_CONFIGFLAGS for phantom device {0}"' deviceHardwareID); " is 145.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "		bSuccess = SetupApi.SetupDiSetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.CONFIGFLAGS' flags' Marshal.SizeOf (typeof(uint))); " is 147.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "			InfWizardStatus.Log (CategoryType.CheckRemoved' StatusType.Warning' "could not write SPDRP_CONFIGFLAGS for phantom device {0}"' deviceHardwareID); " is 146.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,CheckRemoved,The length of the statement  "		InfWizardStatus.Log (CategoryType.CheckRemoved' StatusType.Info' "flagged {0} removed devices for reinstallation"' removed); " is 124.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,InstallSetupPackage,The length of the statement  "	bool bSuccess = SetupApi.UpdateDriverForPlugAndPlayDevices (IntPtr.Zero' hardwareId' infPath' SetupApi.INSTALLFLAG.FORCE' IntPtr.Zero); " is 135.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,InstallSetupPackage,The length of the statement  "		InfWizardStatus.Log (CategoryType.InstallSetupPackage' StatusType.Win32Error' "UpdateDriverForPlugAndPlayDevices failed"); " is 122.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,InstallSetupPackage,The length of the statement  "	InfWizardStatus.Log (CategoryType.InstallSetupPackage' StatusType.Warning' "device not detected (copying driver files for next time device is plugged in)"); " is 156.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,InstallSetupPackage,The length of the statement  "	bSuccess = SetupApi.SetupCopyOEMInf (infPath' null' SetupApi.SPOST.SPOST_PATH' 0' sbDestInfFilename' (uint)sbDestInfFilename.Capacity' out requiredSize' null); " is 159.
Long Statement,InfWizard,Wdi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wdi.cs,InstallSetupPackage,The length of the statement  "		InfWizardStatus.Log (CategoryType.InstallSetupPackage' StatusType.Success' "copied inf to {0}"' sbDestInfFilename.ToString ()); " is 127.
Long Statement,InfWizard,RemoveDeviceForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\RemoveDeviceForm.cs,DeepClean,The length of the statement  "			if (MessageBox.Show (sb.ToString ()' String.Format ("Deep Clean: Remove {0} inf files?"' foundInfFileList.Count)' MessageBoxButtons.YesNo) == DialogResult.OK) { " is 160.
Long Statement,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The length of the statement  "			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "requesting driver resource {0}.."' resourceDownload.DisplayName); " is 135.
Long Statement,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The length of the statement  "				InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "failed getting driver resource; operation cancelled."); " is 128.
Long Statement,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The length of the statement  "					InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "deleting driver resource file {0}"' resourceFilename); " is 127.
Long Statement,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The length of the statement  "				InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Success' "saving driver resource {0}"' resourceFilename); " is 120.
Long Statement,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The length of the statement  "			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "get driver resource list connection timed out."); " is 120.
Long Statement,DynamicProps,DynamicPropDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicPropDescriptor.cs,GetValue,The length of the statement  "	return component.GetType ().InvokeMember (Name' BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.Public' null' component' null); " is 143.
Long Statement,DynamicProps,DynamicPropDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicPropDescriptor.cs,SetValue,The length of the statement  "	component.GetType ().InvokeMember (Name' BindingFlags.Instance | BindingFlags.SetProperty | BindingFlags.Public' null' component' new object[] { " is 144.
Long Statement,DynamicProps,DynamicTypeDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicTypeDescriptor.cs,GetProperties,The length of the statement  "		DynamicPropDescriptor dynNew = new DynamicPropDescriptor (mInstance' origProp' mOverrideProps' dynProp' newAttributeArray); " is 123.
Long Statement,InfWizard.InfWriters,InfWriter,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWriter.cs,GetDriverPathFilename,The length of the statement  "	return Path.Combine (DriverDirectory' string.Format ("{0}.{1}"' mDeviceItem.BaseFilename' extention.TrimStart (new char[] { " is 123.
Long Statement,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,FormatSystemMessage,The length of the statement  "	int ret = FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM' IntPtr.Zero' dwMessageId' CultureInfo.CurrentCulture.LCID' sbSystemMessage' sbSystemMessage.Capacity - 1' IntPtr.Zero); " is 172.
Long Statement,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The length of the statement  "	if (!SetupDiGetDeviceRegistryProperty (DeviceInfoSet' ref DeviceInfoData' Property' out regValueType' tmp' tmp.Length' out iReqSize)) { " is 135.
Long Statement,WinApiNet,SetupApi,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\SetupApi.cs,SetupDiGetDeviceRegistryProperty,The length of the statement  "	if (!SetupDiGetDeviceRegistryProperty (DeviceInfoSet' ref DeviceInfoData' Property' out regValueType' tmp' tmp.Length * Marshal.SizeOf (typeof(uint))' out iReqSize)) { " is 167.
Long Statement,TagNReplace,TagNReplaceFile,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\TagnReplace\TagNReplaceFile.cs,TagFile,The length of the statement  "		throw new NotSupportedException ("Source and destination is equal. See the AllowlSourceEqualDest property.\r\nSource:" + fiSource.FullName); " is 140.
Long Statement,TagNReplace,TagNReplaceFile,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\TagnReplace\TagNReplaceFile.cs,TagFile,The length of the statement  "		throw new NotSupportedException ("Destination file already exists. See the AllowOverwrite property.\r\nDest:" + fiDest.FullName); " is 129.
Long Statement,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,SaveUserSettings,The length of the statement  "	settings.UserDeviceInterfaceGUIDs = SaveToStringCollection (settings.UserDeviceInterfaceGUIDs' mDeviceInterfaceGuid' 5); " is 120.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) { " is 166.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "			IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree); " is 139.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "				while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) { " is 130.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		deviceItem.mIsConnected = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) != SetupApi.CR.NO_SUCH_DEVNODE); " is 142.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		if (!SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.SERVICE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) { " is 168.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		if (!SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID)) { " is 123.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "found hardware ID ({0}/{1}): {2}"' hwid + 1' saHardwareIDs.Length' saHardwareIDs [hwid]); " is 159.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "CM_Get_Device_ID:Failed retrieving simple path for device index: {0} HWID:{1} CR error {2}"' devIndex' saHardwareIDs [0]' r); " is 196.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "{0} USB device {1}: {2}"' deviceItem.mDriverless ? "Driverless" : deviceItem.mServiceName' devIndex' deviceItem.mDeviceId); " is 193.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "			bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC); " is 133.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "				bContinue = SetupApi.SetupDiGetDeviceProperty (pDevInfo' ref devInfoData' SetupApi.DEVPKEY_Device_BusReportedDeviceDesc' out propertyType' propBuffer' propBuffer.Length' out requiredSize' 0); " is 191.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "				InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "Failed to locate SetupDiGetDeviceProperty() is Setupapi.dll"); " is 135.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "				bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC); " is 133.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning | StatusType.Win32Error' "Failed reading read device description for {0}: {1}"' devIndex' deviceItem.mDeviceId); " is 183.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		if (SetupApi.SetupDiGetCustomDeviceProperty (pDevInfo' ref devInfoData' "DeviceInterfaceGUIDs"' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) { " is 196.
Long Statement,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The length of the statement  "		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device description: {0}"' deviceItem.DeviceDescription); " is 126.
Long Statement,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,The length of the statement  "		if (item.VendorID.ToLower () != mRemoveDeviceOptions.DeviceItem.VendorID.ToLower () || item.ProductID.ToLower () != mRemoveDeviceOptions.DeviceItem.ProductID.ToLower ()) " is 169.
Long Statement,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,The length of the statement  "		if ((bUninstalled = SetupApi.DiUninstallDevice (IntPtr.Zero' pDeviceInfoSet' ref DeviceInfoData' 0' IntPtr.Zero)) == true) " is 122.
Long Statement,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,The length of the statement  "			InfWizardStatus.Log (CategoryType.RemoveDevice' StatusType.Warning | StatusType.Win32Error' "failed uninstalling device."); " is 123.
Long Statement,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,The length of the statement  "			InfWizardStatus.Log (CategoryType.RemoveDevice' StatusType.Warning | StatusType.Win32Error' "failed uninstalling device."); " is 123.
Long Statement,InfWizard.WizardClassHelpers,DeviceRemoveInfo,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,DeviceFound,The length of the statement  "				InfWizardStatus.Log (CategoryType.RemoveDevice' StatusType.Warning | StatusType.Win32Error' "SetupUninstallOEMInf failed"); " is 123.
Long Statement,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,Next,The length of the statement  "		Debug.Assert (PageIndex < vPages.Count' "Error I've just gone past the finish"' "btnNext_Click tried to go to page " + Convert.ToString (PageIndex + 1) + "' but I only have " + Convert.ToString (vPages.Count)); " is 210.
Long Statement,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The length of the statement  "		RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height); " is 139.
Empty Catch Block,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The method has an empty catch block.
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GetGroupNumbers,The following statement contains a magic number: return new int[] {  	1'  	2'  	3'  	4  };  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following statement contains a magic number: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 2;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 3;  
Magic Number,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following statement contains a magic number: return 4;  
Magic Number,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The following statement contains a magic number: try {  	lock (mDownloadLock) {  		mDownloadCompleteEvent.Reset ();  		if (!ReferenceEquals (progressBar' null)) {  			progressBar.Style = ProgressBarStyle.Continuous;  			progressBar.Minimum = 0;  			progressBar.Maximum = 100;  			progressBar.Value = 0;  		}  		mProgressBar = progressBar;  		mWebClient.DownloadDataAsync (new Uri (uri)' userObject);  	}  }  catch (WebException ex) {  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex.Message);  }  catch (Exception ex) {  	if (ex.InnerException != null) {  		if (ex.InnerException is WebException) {  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex.InnerException.Message);  			return;  		}  	}  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed getting driver resource list: {0}"' ex);  }  
Magic Number,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The following statement contains a magic number: lock (mDownloadLock) {  	mDownloadCompleteEvent.Reset ();  	if (!ReferenceEquals (progressBar' null)) {  		progressBar.Style = ProgressBarStyle.Continuous;  		progressBar.Minimum = 0;  		progressBar.Maximum = 100;  		progressBar.Value = 0;  	}  	mProgressBar = progressBar;  	mWebClient.DownloadDataAsync (new Uri (uri)' userObject);  }  
Magic Number,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The following statement contains a magic number: if (!ReferenceEquals (progressBar' null)) {  	progressBar.Style = ProgressBarStyle.Continuous;  	progressBar.Minimum = 0;  	progressBar.Maximum = 100;  	progressBar.Value = 0;  }  
Magic Number,InfWizard,DriverResourceDownloader,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DriverResource\DriverResourceDownloader.cs,DownloadDataAsync,The following statement contains a magic number: progressBar.Maximum = 100;  
Magic Number,InfWizard,StringDropDownUIEditor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\FolderBrowserUITypeEditor.cs,StringDropDownUIEditor,The following statement contains a magic number: dropListBox.Font = new Font ("Tahoma"' (float)8.5);  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The following statement contains a magic number: try {  	DriverResourceDownloads resourceDownloads = new DriverResourceDownloads ();  	foreach (DataGridViewRow selectedRow in dataGridViewDriverDownloadList.SelectedRows) {  		resourceDownloads.Add (selectedRow.Tag as DriverResourceDownload);  	}  	int waitRet = -1;  	foreach (DriverResourceDownload resourceDownload in resourceDownloads) {  		if (driverResourceDownloader.IsCancelled) {  			waitRet = 1;  			break;  		}  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "requesting driver resource {0}.."' resourceDownload.DisplayName);  		progressBarDownloadDriverResources.Value = 0;  		driverResourceDownloader.DownloadDataAsync (progressBarDownloadDriverResources' resourceDownload.Url' null);  		buttonCancelDownload.Enabled = true;  		WaitHandle[] waitHandles = new WaitHandle[] {  			driverResourceDownloader.CompleteWaitHandle'  			driverResourceDownloader.CancelWaitHandle  		};  		do {  			waitRet = WaitHandle.WaitAny (waitHandles' 10);  			Application.DoEvents ();  			Thread.Sleep (0);  		}  		while (waitRet == WaitHandle.WaitTimeout);  		switch (waitRet) {  		case 0:  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "driver resource downloaded.");  			break;  		case 1:  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "failed getting driver resource; operation cancelled.");  			break;  		case WaitHandle.WaitTimeout:  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "connection timed out.");  			break;  		}  		if (waitRet == 0 && driverResourceDownloader.Result != null) {  			string downloadFilename = driverResourceDownloader.GetDownloadFilename ();  			// TODO: Add main driver resource path for saving downloaded resources  			string path = null;  			if (String.IsNullOrEmpty (path))  				path = Environment.CurrentDirectory;  			string resourceFilename = Path.Combine (path' downloadFilename);  			if (File.Exists (resourceFilename)) {  				InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "deleting driver resource file {0}"' resourceFilename);  				File.Delete (resourceFilename);  			}  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Success' "saving driver resource {0}"' resourceFilename);  			FileStream resourceStreamOut = File.Create (resourceFilename);  			resourceStreamOut.Write (driverResourceDownloader.Result' 0' driverResourceDownloader.Result.Length);  			resourceStreamOut.Flush ();  			resourceStreamOut.Close ();  		}  		else {  			break;  		}  	}  	if (waitRet == 0) {  		if (DriverResManager.LoadResources ()) {  			success = true;  		}  		else {  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "failed loading driver resources!");  		}  	}  }  catch (Exception ex) {  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' ex.ToString ());  	buttonDownloadDriverResources.Enabled = false;  	success = false;  }  finally {  	buttonCancelDownload.Enabled = false;  	rtfDownloadSatus.LoggingEnabled = false;  	if (success) {  		buttonSelectAllDriverResources_Click (this' new EventArgs ());  		wizMain.NextEnabled = DriverResManager.Check ();  	}  	groupBoxDriverList.Enabled = true;  }  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The following statement contains a magic number: foreach (DriverResourceDownload resourceDownload in resourceDownloads) {  	if (driverResourceDownloader.IsCancelled) {  		waitRet = 1;  		break;  	}  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "requesting driver resource {0}.."' resourceDownload.DisplayName);  	progressBarDownloadDriverResources.Value = 0;  	driverResourceDownloader.DownloadDataAsync (progressBarDownloadDriverResources' resourceDownload.Url' null);  	buttonCancelDownload.Enabled = true;  	WaitHandle[] waitHandles = new WaitHandle[] {  		driverResourceDownloader.CompleteWaitHandle'  		driverResourceDownloader.CancelWaitHandle  	};  	do {  		waitRet = WaitHandle.WaitAny (waitHandles' 10);  		Application.DoEvents ();  		Thread.Sleep (0);  	}  	while (waitRet == WaitHandle.WaitTimeout);  	switch (waitRet) {  	case 0:  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "driver resource downloaded.");  		break;  	case 1:  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "failed getting driver resource; operation cancelled.");  		break;  	case WaitHandle.WaitTimeout:  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "connection timed out.");  		break;  	}  	if (waitRet == 0 && driverResourceDownloader.Result != null) {  		string downloadFilename = driverResourceDownloader.GetDownloadFilename ();  		// TODO: Add main driver resource path for saving downloaded resources  		string path = null;  		if (String.IsNullOrEmpty (path))  			path = Environment.CurrentDirectory;  		string resourceFilename = Path.Combine (path' downloadFilename);  		if (File.Exists (resourceFilename)) {  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "deleting driver resource file {0}"' resourceFilename);  			File.Delete (resourceFilename);  		}  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Success' "saving driver resource {0}"' resourceFilename);  		FileStream resourceStreamOut = File.Create (resourceFilename);  		resourceStreamOut.Write (driverResourceDownloader.Result' 0' driverResourceDownloader.Result.Length);  		resourceStreamOut.Flush ();  		resourceStreamOut.Close ();  	}  	else {  		break;  	}  }  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The following statement contains a magic number: do {  	waitRet = WaitHandle.WaitAny (waitHandles' 10);  	Application.DoEvents ();  	Thread.Sleep (0);  }  while (waitRet == WaitHandle.WaitTimeout);  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The following statement contains a magic number: waitRet = WaitHandle.WaitAny (waitHandles' 10);  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The following statement contains a magic number: try {  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "requesting driver resource list..");  	dataGridViewDriverDownloadList.Rows.Clear ();  	driverResourceDownloader.DownloadDataAsync (progressBarDownloadDriverResources' mSettings.DriverResourceUrl' null);  	buttonCancelDownload.Enabled = true;  	int waitRet;  	WaitHandle[] waitHandles = new WaitHandle[] {  		driverResourceDownloader.CompleteWaitHandle'  		driverResourceDownloader.CancelWaitHandle  	};  	do {  		waitRet = WaitHandle.WaitAny (waitHandles' 10);  		Application.DoEvents ();  		Thread.Sleep (0);  	}  	while (waitRet == WaitHandle.WaitTimeout);  	switch (waitRet) {  	case 0:  		break;  	case 1:  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "get driver resource list cancelled.");  		break;  	case WaitHandle.WaitTimeout:  		InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "get driver resource list connection timed out.");  		break;  	}  	if (waitRet == 0 && driverResourceDownloader.Result != null) {  		MemoryStream resultStream = new MemoryStream (driverResourceDownloader.Result);  		DriverResourceDownloads driverResourceDownloads = DriverResourceDownloads.Load (resultStream);  		if (driverResourceDownloads != null) {  			foreach (DriverResourceDownload download in driverResourceDownloads) {  				int row = dataGridViewDriverDownloadList.Rows.Add (new object[] {  					download.DisplayName'  					download.Description  				});  				dataGridViewDriverDownloadList.Rows [row].Tag = download;  			}  			success = true;  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Success' "get driver resource list complete.");  			resultStream.Seek (0' SeekOrigin.Begin);  			try {  				string fileName = driverResourceDownloader.GetDownloadFilename ();  				File.WriteAllBytes (fileName' driverResourceDownloader.Result);  			}  			catch (Exception) {  			}  		}  		if (!success)  			InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "invalid driver resource list.");  	}  }  catch (Exception ex) {  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' ex.ToString ());  	success = false;  }  finally {  	buttonCancelDownload.Enabled = false;  	rtfDownloadSatus.LoggingEnabled = false;  	if (success) {  		groupBoxDriverList.Enabled = true;  		SynchronizationContext.Current.Post (selectDriverResources' true);  	}  }  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The following statement contains a magic number: do {  	waitRet = WaitHandle.WaitAny (waitHandles' 10);  	Application.DoEvents ();  	Thread.Sleep (0);  }  while (waitRet == WaitHandle.WaitTimeout);  
Magic Number,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The following statement contains a magic number: waitRet = WaitHandle.WaitAny (waitHandles' 10);  
Magic Number,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,SaveUserSettings,The following statement contains a magic number: settings.UserDeviceManufacturers = SaveToStringCollection (settings.UserDeviceManufacturers' mManufacturer' 5);  
Magic Number,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,SaveUserSettings,The following statement contains a magic number: settings.UserDeviceDescriptions = SaveToStringCollection (settings.UserDeviceDescriptions' mDeviceDescription' 5);  
Magic Number,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,SaveUserSettings,The following statement contains a magic number: settings.UserDeviceInterfaceGUIDs = SaveToStringCollection (settings.UserDeviceInterfaceGUIDs' mDeviceInterfaceGuid' 5);  
Magic Number,InfWizard.WizardClassHelpers,DeviceItem,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceItem.cs,SaveUserSettings,The following statement contains a magic number: settings.UserSaveDirectorys = SaveToStringCollection (settings.UserSaveDirectorys' mSaveDirectory' 5);  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: for (devIndex = 0; ; devIndex++) {  	if (!SetupApi.SetupDiEnumDeviceInfo (pDevInfo' devIndex' ref devInfoData)) {  		// Reached the end of the eviceInfo list.  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device enumeration complete.");  		break;  	}  	DeviceItem deviceItem = new DeviceItem ();  	// SPDRP_DRIVER seems to do a better job at detecting driverless devices than  	// SPDRP_INSTALL_STATE  	RegistryValueKind propertyType;  	int requiredSize;  	if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceItem.mDriverless = false;  		// Read all string values from the registry driver key  		IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  		if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  			int index = 0;  			int nameLength = 255;  			int dataLength = 1023;  			deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  			StringBuilder sbName = new StringBuilder (nameLength + 1);  			StringBuilder sbValue = new StringBuilder (dataLength + 1);  			RegistryValueKind regValueType;  			while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  				if (regValueType == RegistryValueKind.String)  					deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  				// Get next key/value index  				index++;  				// Reset max lengths  				nameLength = 255;  				dataLength = 1023;  			}  			SetupApi.RegCloseKey (hKey);  		}  	}  	else {  		deviceItem.mDriverless = true;  	}  	// [trobinson] patch  	uint status;  	uint pbmNumber;  	deviceItem.mIsConnected = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) != SetupApi.CR.NO_SUCH_DEVNODE);  	if (deviceItem.mIsConnected)  		deviceItem.mIsConnected = ((pbmNumber & CM_PROB_PHANTOM) != CM_PROB_PHANTOM);  	//if (deviceItem.mDriverless && !deviceItem.mIsConnected)  	//    deviceItem.mDriverless = false;  	// Find only the ones that are driverless  	if (deviceEnumeratorInfo.DriverlessOnly && !deviceItem.mDriverless) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "skipping non driverless device.");  		continue;  	}  	// Driverless devices will return an error  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "driverless device found.");  	// Eliminate USB hubs by checking the driver string  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.SERVICE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "failed getting SPDRP.SERVICE");  		deviceItem.mServiceName = String.Empty;  	}  	else {  		deviceItem.mServiceName = GetAsAutoString (propBuffer);  	}  	bool bContinue = true;  	foreach (string skipServiceName in mSkipServiceNames) {  		if (deviceItem.mServiceName.Trim ().ToLower () == skipServiceName) {  			bContinue = false;  			break;  		}  	}  	if (!bContinue && deviceEnumeratorInfo.SkipWindowsServices)  		continue;  	//if (!bContinue)  	//    continue;  	deviceItem.mIsSkipServiceName = !bContinue;  	string[] saHardwareIDs;  	// Retrieve the hardware ID  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Win32Error' "failed getting SPDRP.HARDWAREID");  		continue;  	}  	if (saHardwareIDs.Length == 0) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "device does not have any hardware ids");  		continue;  	}  	for (int hwid = 0; hwid < saHardwareIDs.Length; hwid++)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "found hardware ID ({0}/{1}): {2}"' hwid + 1' saHardwareIDs.Length' saHardwareIDs [hwid]);  	// Get Device ID  	SetupApi.CR r = SetupApi.CM_Get_Device_ID (devInfoData.DevInst' propBuffer' propBuffer.Length' 0);  	if (r != SetupApi.CR.SUCCESS) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "CM_Get_Device_ID:Failed retrieving simple path for device index: {0} HWID:{1} CR error {2}"' devIndex' saHardwareIDs [0]' r);  		continue;  	}  	deviceItem.mDeviceId = GetAsAutoString (propBuffer);  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "{0} USB device {1}: {2}"' deviceItem.mDriverless ? "Driverless" : deviceItem.mServiceName' devIndex' deviceItem.mDeviceId);  	string sDeviceDescription;  	if (SetupApi.WindowsVersion < WindowsVersionType.WINDOWS_7) {  		// On Vista and earlier' we can use SPDRP_DEVICEDESC  		bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  		if (!bContinue)  			sDeviceDescription = string.Empty;  	}  	else {  		// On Windows 7' the information we want ("Bus reported device description") is  		// accessed through DEVPKEY_Device_BusReportedDeviceDesc  		try {  			bContinue = SetupApi.SetupDiGetDeviceProperty (pDevInfo' ref devInfoData' SetupApi.DEVPKEY_Device_BusReportedDeviceDesc' out propertyType' propBuffer' propBuffer.Length' out requiredSize' 0);  		}  		catch (DllNotFoundException) {  			//if (SetupDiGetDeviceProperty == NULL)  			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "Failed to locate SetupDiGetDeviceProperty() is Setupapi.dll");  			bContinue = false;  		}  		if (bContinue) {  			sDeviceDescription = GetAsAutoString (propBuffer);  		}  		else {  			// fallback to SPDRP_DEVICEDESC (USB husb still use it)  			bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  			if (!bContinue)  				sDeviceDescription = string.Empty;  		}  	}  	if (!bContinue)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning | StatusType.Win32Error' "Failed reading read device description for {0}: {1}"' devIndex' deviceItem.mDeviceId);  	deviceItem.DeviceDescription = sDeviceDescription;  	deviceItem.BaseFilename = sDeviceDescription;  	MatchCollection matches = regHardwareID.Matches (saHardwareIDs [0]);  	foreach (Match match in matches) {  		foreach (NamedGroup namedGroup in RegHardwareID.NAMED_GROUPS) {  			RegHardwareID.ENamedGroups groupEnum = (RegHardwareID.ENamedGroups)namedGroup.GroupNumber;  			Group group = match.Groups [(int)groupEnum];  			if (!group.Success)  				continue;  			switch (groupEnum) {  			case RegHardwareID.ENamedGroups.Vid:  				deviceItem.VendorID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Pid:  				deviceItem.ProductID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Rev:  				//deviceItem.Rev = group.Value;  				break;  			case RegHardwareID.ENamedGroups.MI:  				deviceItem.MI = group.Value;  				if (deviceItem.MI != string.Empty)  					deviceItem.DeviceDescription += String.Format (" (Interface #{0})"' deviceItem.mMI);  				break;  			default:  				throw new ArgumentOutOfRangeException ();  			}  		}  	}  	if (deviceItem.mVid == 0 && deviceItem.mPid == 0)  		continue;  	string sManufacturer;  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out sManufacturer' pDevInfo' ref devInfoData' SetupApi.SPDRP.MFG)) {  		sManufacturer = string.Empty;  	}  	deviceItem.Manufacturer = sManufacturer;  	string[] deviceInterfaceGuids = new string[0];  	if (SetupApi.SetupDiGetCustomDeviceProperty (pDevInfo' ref devInfoData' "DeviceInterfaceGUIDs"' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceInterfaceGuids = GetAsAutoStringArray (propBuffer' requiredSize);  	}  	if (deviceInterfaceGuids.Length > 0)  		deviceItem.DeviceInterfaceGuid = deviceInterfaceGuids [0];  	if (!deviceEnumeratorInfo.DeviceFound (deviceItem' pDevInfo' ref devInfoData))  		break;  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device description: {0}"' deviceItem.DeviceDescription);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: for (devIndex = 0; ; devIndex++) {  	if (!SetupApi.SetupDiEnumDeviceInfo (pDevInfo' devIndex' ref devInfoData)) {  		// Reached the end of the eviceInfo list.  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device enumeration complete.");  		break;  	}  	DeviceItem deviceItem = new DeviceItem ();  	// SPDRP_DRIVER seems to do a better job at detecting driverless devices than  	// SPDRP_INSTALL_STATE  	RegistryValueKind propertyType;  	int requiredSize;  	if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceItem.mDriverless = false;  		// Read all string values from the registry driver key  		IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  		if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  			int index = 0;  			int nameLength = 255;  			int dataLength = 1023;  			deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  			StringBuilder sbName = new StringBuilder (nameLength + 1);  			StringBuilder sbValue = new StringBuilder (dataLength + 1);  			RegistryValueKind regValueType;  			while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  				if (regValueType == RegistryValueKind.String)  					deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  				// Get next key/value index  				index++;  				// Reset max lengths  				nameLength = 255;  				dataLength = 1023;  			}  			SetupApi.RegCloseKey (hKey);  		}  	}  	else {  		deviceItem.mDriverless = true;  	}  	// [trobinson] patch  	uint status;  	uint pbmNumber;  	deviceItem.mIsConnected = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) != SetupApi.CR.NO_SUCH_DEVNODE);  	if (deviceItem.mIsConnected)  		deviceItem.mIsConnected = ((pbmNumber & CM_PROB_PHANTOM) != CM_PROB_PHANTOM);  	//if (deviceItem.mDriverless && !deviceItem.mIsConnected)  	//    deviceItem.mDriverless = false;  	// Find only the ones that are driverless  	if (deviceEnumeratorInfo.DriverlessOnly && !deviceItem.mDriverless) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "skipping non driverless device.");  		continue;  	}  	// Driverless devices will return an error  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "driverless device found.");  	// Eliminate USB hubs by checking the driver string  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.SERVICE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "failed getting SPDRP.SERVICE");  		deviceItem.mServiceName = String.Empty;  	}  	else {  		deviceItem.mServiceName = GetAsAutoString (propBuffer);  	}  	bool bContinue = true;  	foreach (string skipServiceName in mSkipServiceNames) {  		if (deviceItem.mServiceName.Trim ().ToLower () == skipServiceName) {  			bContinue = false;  			break;  		}  	}  	if (!bContinue && deviceEnumeratorInfo.SkipWindowsServices)  		continue;  	//if (!bContinue)  	//    continue;  	deviceItem.mIsSkipServiceName = !bContinue;  	string[] saHardwareIDs;  	// Retrieve the hardware ID  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Win32Error' "failed getting SPDRP.HARDWAREID");  		continue;  	}  	if (saHardwareIDs.Length == 0) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "device does not have any hardware ids");  		continue;  	}  	for (int hwid = 0; hwid < saHardwareIDs.Length; hwid++)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "found hardware ID ({0}/{1}): {2}"' hwid + 1' saHardwareIDs.Length' saHardwareIDs [hwid]);  	// Get Device ID  	SetupApi.CR r = SetupApi.CM_Get_Device_ID (devInfoData.DevInst' propBuffer' propBuffer.Length' 0);  	if (r != SetupApi.CR.SUCCESS) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "CM_Get_Device_ID:Failed retrieving simple path for device index: {0} HWID:{1} CR error {2}"' devIndex' saHardwareIDs [0]' r);  		continue;  	}  	deviceItem.mDeviceId = GetAsAutoString (propBuffer);  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "{0} USB device {1}: {2}"' deviceItem.mDriverless ? "Driverless" : deviceItem.mServiceName' devIndex' deviceItem.mDeviceId);  	string sDeviceDescription;  	if (SetupApi.WindowsVersion < WindowsVersionType.WINDOWS_7) {  		// On Vista and earlier' we can use SPDRP_DEVICEDESC  		bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  		if (!bContinue)  			sDeviceDescription = string.Empty;  	}  	else {  		// On Windows 7' the information we want ("Bus reported device description") is  		// accessed through DEVPKEY_Device_BusReportedDeviceDesc  		try {  			bContinue = SetupApi.SetupDiGetDeviceProperty (pDevInfo' ref devInfoData' SetupApi.DEVPKEY_Device_BusReportedDeviceDesc' out propertyType' propBuffer' propBuffer.Length' out requiredSize' 0);  		}  		catch (DllNotFoundException) {  			//if (SetupDiGetDeviceProperty == NULL)  			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "Failed to locate SetupDiGetDeviceProperty() is Setupapi.dll");  			bContinue = false;  		}  		if (bContinue) {  			sDeviceDescription = GetAsAutoString (propBuffer);  		}  		else {  			// fallback to SPDRP_DEVICEDESC (USB husb still use it)  			bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  			if (!bContinue)  				sDeviceDescription = string.Empty;  		}  	}  	if (!bContinue)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning | StatusType.Win32Error' "Failed reading read device description for {0}: {1}"' devIndex' deviceItem.mDeviceId);  	deviceItem.DeviceDescription = sDeviceDescription;  	deviceItem.BaseFilename = sDeviceDescription;  	MatchCollection matches = regHardwareID.Matches (saHardwareIDs [0]);  	foreach (Match match in matches) {  		foreach (NamedGroup namedGroup in RegHardwareID.NAMED_GROUPS) {  			RegHardwareID.ENamedGroups groupEnum = (RegHardwareID.ENamedGroups)namedGroup.GroupNumber;  			Group group = match.Groups [(int)groupEnum];  			if (!group.Success)  				continue;  			switch (groupEnum) {  			case RegHardwareID.ENamedGroups.Vid:  				deviceItem.VendorID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Pid:  				deviceItem.ProductID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Rev:  				//deviceItem.Rev = group.Value;  				break;  			case RegHardwareID.ENamedGroups.MI:  				deviceItem.MI = group.Value;  				if (deviceItem.MI != string.Empty)  					deviceItem.DeviceDescription += String.Format (" (Interface #{0})"' deviceItem.mMI);  				break;  			default:  				throw new ArgumentOutOfRangeException ();  			}  		}  	}  	if (deviceItem.mVid == 0 && deviceItem.mPid == 0)  		continue;  	string sManufacturer;  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out sManufacturer' pDevInfo' ref devInfoData' SetupApi.SPDRP.MFG)) {  		sManufacturer = string.Empty;  	}  	deviceItem.Manufacturer = sManufacturer;  	string[] deviceInterfaceGuids = new string[0];  	if (SetupApi.SetupDiGetCustomDeviceProperty (pDevInfo' ref devInfoData' "DeviceInterfaceGUIDs"' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceInterfaceGuids = GetAsAutoStringArray (propBuffer' requiredSize);  	}  	if (deviceInterfaceGuids.Length > 0)  		deviceItem.DeviceInterfaceGuid = deviceInterfaceGuids [0];  	if (!deviceEnumeratorInfo.DeviceFound (deviceItem' pDevInfo' ref devInfoData))  		break;  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device description: {0}"' deviceItem.DeviceDescription);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: for (devIndex = 0; ; devIndex++) {  	if (!SetupApi.SetupDiEnumDeviceInfo (pDevInfo' devIndex' ref devInfoData)) {  		// Reached the end of the eviceInfo list.  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device enumeration complete.");  		break;  	}  	DeviceItem deviceItem = new DeviceItem ();  	// SPDRP_DRIVER seems to do a better job at detecting driverless devices than  	// SPDRP_INSTALL_STATE  	RegistryValueKind propertyType;  	int requiredSize;  	if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceItem.mDriverless = false;  		// Read all string values from the registry driver key  		IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  		if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  			int index = 0;  			int nameLength = 255;  			int dataLength = 1023;  			deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  			StringBuilder sbName = new StringBuilder (nameLength + 1);  			StringBuilder sbValue = new StringBuilder (dataLength + 1);  			RegistryValueKind regValueType;  			while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  				if (regValueType == RegistryValueKind.String)  					deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  				// Get next key/value index  				index++;  				// Reset max lengths  				nameLength = 255;  				dataLength = 1023;  			}  			SetupApi.RegCloseKey (hKey);  		}  	}  	else {  		deviceItem.mDriverless = true;  	}  	// [trobinson] patch  	uint status;  	uint pbmNumber;  	deviceItem.mIsConnected = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) != SetupApi.CR.NO_SUCH_DEVNODE);  	if (deviceItem.mIsConnected)  		deviceItem.mIsConnected = ((pbmNumber & CM_PROB_PHANTOM) != CM_PROB_PHANTOM);  	//if (deviceItem.mDriverless && !deviceItem.mIsConnected)  	//    deviceItem.mDriverless = false;  	// Find only the ones that are driverless  	if (deviceEnumeratorInfo.DriverlessOnly && !deviceItem.mDriverless) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "skipping non driverless device.");  		continue;  	}  	// Driverless devices will return an error  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "driverless device found.");  	// Eliminate USB hubs by checking the driver string  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.SERVICE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "failed getting SPDRP.SERVICE");  		deviceItem.mServiceName = String.Empty;  	}  	else {  		deviceItem.mServiceName = GetAsAutoString (propBuffer);  	}  	bool bContinue = true;  	foreach (string skipServiceName in mSkipServiceNames) {  		if (deviceItem.mServiceName.Trim ().ToLower () == skipServiceName) {  			bContinue = false;  			break;  		}  	}  	if (!bContinue && deviceEnumeratorInfo.SkipWindowsServices)  		continue;  	//if (!bContinue)  	//    continue;  	deviceItem.mIsSkipServiceName = !bContinue;  	string[] saHardwareIDs;  	// Retrieve the hardware ID  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Win32Error' "failed getting SPDRP.HARDWAREID");  		continue;  	}  	if (saHardwareIDs.Length == 0) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "device does not have any hardware ids");  		continue;  	}  	for (int hwid = 0; hwid < saHardwareIDs.Length; hwid++)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "found hardware ID ({0}/{1}): {2}"' hwid + 1' saHardwareIDs.Length' saHardwareIDs [hwid]);  	// Get Device ID  	SetupApi.CR r = SetupApi.CM_Get_Device_ID (devInfoData.DevInst' propBuffer' propBuffer.Length' 0);  	if (r != SetupApi.CR.SUCCESS) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "CM_Get_Device_ID:Failed retrieving simple path for device index: {0} HWID:{1} CR error {2}"' devIndex' saHardwareIDs [0]' r);  		continue;  	}  	deviceItem.mDeviceId = GetAsAutoString (propBuffer);  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "{0} USB device {1}: {2}"' deviceItem.mDriverless ? "Driverless" : deviceItem.mServiceName' devIndex' deviceItem.mDeviceId);  	string sDeviceDescription;  	if (SetupApi.WindowsVersion < WindowsVersionType.WINDOWS_7) {  		// On Vista and earlier' we can use SPDRP_DEVICEDESC  		bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  		if (!bContinue)  			sDeviceDescription = string.Empty;  	}  	else {  		// On Windows 7' the information we want ("Bus reported device description") is  		// accessed through DEVPKEY_Device_BusReportedDeviceDesc  		try {  			bContinue = SetupApi.SetupDiGetDeviceProperty (pDevInfo' ref devInfoData' SetupApi.DEVPKEY_Device_BusReportedDeviceDesc' out propertyType' propBuffer' propBuffer.Length' out requiredSize' 0);  		}  		catch (DllNotFoundException) {  			//if (SetupDiGetDeviceProperty == NULL)  			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "Failed to locate SetupDiGetDeviceProperty() is Setupapi.dll");  			bContinue = false;  		}  		if (bContinue) {  			sDeviceDescription = GetAsAutoString (propBuffer);  		}  		else {  			// fallback to SPDRP_DEVICEDESC (USB husb still use it)  			bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  			if (!bContinue)  				sDeviceDescription = string.Empty;  		}  	}  	if (!bContinue)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning | StatusType.Win32Error' "Failed reading read device description for {0}: {1}"' devIndex' deviceItem.mDeviceId);  	deviceItem.DeviceDescription = sDeviceDescription;  	deviceItem.BaseFilename = sDeviceDescription;  	MatchCollection matches = regHardwareID.Matches (saHardwareIDs [0]);  	foreach (Match match in matches) {  		foreach (NamedGroup namedGroup in RegHardwareID.NAMED_GROUPS) {  			RegHardwareID.ENamedGroups groupEnum = (RegHardwareID.ENamedGroups)namedGroup.GroupNumber;  			Group group = match.Groups [(int)groupEnum];  			if (!group.Success)  				continue;  			switch (groupEnum) {  			case RegHardwareID.ENamedGroups.Vid:  				deviceItem.VendorID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Pid:  				deviceItem.ProductID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Rev:  				//deviceItem.Rev = group.Value;  				break;  			case RegHardwareID.ENamedGroups.MI:  				deviceItem.MI = group.Value;  				if (deviceItem.MI != string.Empty)  					deviceItem.DeviceDescription += String.Format (" (Interface #{0})"' deviceItem.mMI);  				break;  			default:  				throw new ArgumentOutOfRangeException ();  			}  		}  	}  	if (deviceItem.mVid == 0 && deviceItem.mPid == 0)  		continue;  	string sManufacturer;  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out sManufacturer' pDevInfo' ref devInfoData' SetupApi.SPDRP.MFG)) {  		sManufacturer = string.Empty;  	}  	deviceItem.Manufacturer = sManufacturer;  	string[] deviceInterfaceGuids = new string[0];  	if (SetupApi.SetupDiGetCustomDeviceProperty (pDevInfo' ref devInfoData' "DeviceInterfaceGUIDs"' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceInterfaceGuids = GetAsAutoStringArray (propBuffer' requiredSize);  	}  	if (deviceInterfaceGuids.Length > 0)  		deviceItem.DeviceInterfaceGuid = deviceInterfaceGuids [0];  	if (!deviceEnumeratorInfo.DeviceFound (deviceItem' pDevInfo' ref devInfoData))  		break;  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device description: {0}"' deviceItem.DeviceDescription);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: for (devIndex = 0; ; devIndex++) {  	if (!SetupApi.SetupDiEnumDeviceInfo (pDevInfo' devIndex' ref devInfoData)) {  		// Reached the end of the eviceInfo list.  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device enumeration complete.");  		break;  	}  	DeviceItem deviceItem = new DeviceItem ();  	// SPDRP_DRIVER seems to do a better job at detecting driverless devices than  	// SPDRP_INSTALL_STATE  	RegistryValueKind propertyType;  	int requiredSize;  	if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceItem.mDriverless = false;  		// Read all string values from the registry driver key  		IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  		if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  			int index = 0;  			int nameLength = 255;  			int dataLength = 1023;  			deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  			StringBuilder sbName = new StringBuilder (nameLength + 1);  			StringBuilder sbValue = new StringBuilder (dataLength + 1);  			RegistryValueKind regValueType;  			while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  				if (regValueType == RegistryValueKind.String)  					deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  				// Get next key/value index  				index++;  				// Reset max lengths  				nameLength = 255;  				dataLength = 1023;  			}  			SetupApi.RegCloseKey (hKey);  		}  	}  	else {  		deviceItem.mDriverless = true;  	}  	// [trobinson] patch  	uint status;  	uint pbmNumber;  	deviceItem.mIsConnected = (SetupApi.CM_Get_DevNode_Status (out status' out pbmNumber' devInfoData.DevInst' 0) != SetupApi.CR.NO_SUCH_DEVNODE);  	if (deviceItem.mIsConnected)  		deviceItem.mIsConnected = ((pbmNumber & CM_PROB_PHANTOM) != CM_PROB_PHANTOM);  	//if (deviceItem.mDriverless && !deviceItem.mIsConnected)  	//    deviceItem.mDriverless = false;  	// Find only the ones that are driverless  	if (deviceEnumeratorInfo.DriverlessOnly && !deviceItem.mDriverless) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "skipping non driverless device.");  		continue;  	}  	// Driverless devices will return an error  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "driverless device found.");  	// Eliminate USB hubs by checking the driver string  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.SERVICE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "failed getting SPDRP.SERVICE");  		deviceItem.mServiceName = String.Empty;  	}  	else {  		deviceItem.mServiceName = GetAsAutoString (propBuffer);  	}  	bool bContinue = true;  	foreach (string skipServiceName in mSkipServiceNames) {  		if (deviceItem.mServiceName.Trim ().ToLower () == skipServiceName) {  			bContinue = false;  			break;  		}  	}  	if (!bContinue && deviceEnumeratorInfo.SkipWindowsServices)  		continue;  	//if (!bContinue)  	//    continue;  	deviceItem.mIsSkipServiceName = !bContinue;  	string[] saHardwareIDs;  	// Retrieve the hardware ID  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out saHardwareIDs' pDevInfo' ref devInfoData' SetupApi.SPDRP.HARDWAREID)) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Win32Error' "failed getting SPDRP.HARDWAREID");  		continue;  	}  	if (saHardwareIDs.Length == 0) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "device does not have any hardware ids");  		continue;  	}  	for (int hwid = 0; hwid < saHardwareIDs.Length; hwid++)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "found hardware ID ({0}/{1}): {2}"' hwid + 1' saHardwareIDs.Length' saHardwareIDs [hwid]);  	// Get Device ID  	SetupApi.CR r = SetupApi.CM_Get_Device_ID (devInfoData.DevInst' propBuffer' propBuffer.Length' 0);  	if (r != SetupApi.CR.SUCCESS) {  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Error' "CM_Get_Device_ID:Failed retrieving simple path for device index: {0} HWID:{1} CR error {2}"' devIndex' saHardwareIDs [0]' r);  		continue;  	}  	deviceItem.mDeviceId = GetAsAutoString (propBuffer);  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "{0} USB device {1}: {2}"' deviceItem.mDriverless ? "Driverless" : deviceItem.mServiceName' devIndex' deviceItem.mDeviceId);  	string sDeviceDescription;  	if (SetupApi.WindowsVersion < WindowsVersionType.WINDOWS_7) {  		// On Vista and earlier' we can use SPDRP_DEVICEDESC  		bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  		if (!bContinue)  			sDeviceDescription = string.Empty;  	}  	else {  		// On Windows 7' the information we want ("Bus reported device description") is  		// accessed through DEVPKEY_Device_BusReportedDeviceDesc  		try {  			bContinue = SetupApi.SetupDiGetDeviceProperty (pDevInfo' ref devInfoData' SetupApi.DEVPKEY_Device_BusReportedDeviceDesc' out propertyType' propBuffer' propBuffer.Length' out requiredSize' 0);  		}  		catch (DllNotFoundException) {  			//if (SetupDiGetDeviceProperty == NULL)  			InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning' "Failed to locate SetupDiGetDeviceProperty() is Setupapi.dll");  			bContinue = false;  		}  		if (bContinue) {  			sDeviceDescription = GetAsAutoString (propBuffer);  		}  		else {  			// fallback to SPDRP_DEVICEDESC (USB husb still use it)  			bContinue = SetupApi.SetupDiGetDeviceRegistryProperty (out sDeviceDescription' pDevInfo' ref devInfoData' SetupApi.SPDRP.DEVICEDESC);  			if (!bContinue)  				sDeviceDescription = string.Empty;  		}  	}  	if (!bContinue)  		InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Warning | StatusType.Win32Error' "Failed reading read device description for {0}: {1}"' devIndex' deviceItem.mDeviceId);  	deviceItem.DeviceDescription = sDeviceDescription;  	deviceItem.BaseFilename = sDeviceDescription;  	MatchCollection matches = regHardwareID.Matches (saHardwareIDs [0]);  	foreach (Match match in matches) {  		foreach (NamedGroup namedGroup in RegHardwareID.NAMED_GROUPS) {  			RegHardwareID.ENamedGroups groupEnum = (RegHardwareID.ENamedGroups)namedGroup.GroupNumber;  			Group group = match.Groups [(int)groupEnum];  			if (!group.Success)  				continue;  			switch (groupEnum) {  			case RegHardwareID.ENamedGroups.Vid:  				deviceItem.VendorID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Pid:  				deviceItem.ProductID = group.Value;  				break;  			case RegHardwareID.ENamedGroups.Rev:  				//deviceItem.Rev = group.Value;  				break;  			case RegHardwareID.ENamedGroups.MI:  				deviceItem.MI = group.Value;  				if (deviceItem.MI != string.Empty)  					deviceItem.DeviceDescription += String.Format (" (Interface #{0})"' deviceItem.mMI);  				break;  			default:  				throw new ArgumentOutOfRangeException ();  			}  		}  	}  	if (deviceItem.mVid == 0 && deviceItem.mPid == 0)  		continue;  	string sManufacturer;  	if (!SetupApi.SetupDiGetDeviceRegistryProperty (out sManufacturer' pDevInfo' ref devInfoData' SetupApi.SPDRP.MFG)) {  		sManufacturer = string.Empty;  	}  	deviceItem.Manufacturer = sManufacturer;  	string[] deviceInterfaceGuids = new string[0];  	if (SetupApi.SetupDiGetCustomDeviceProperty (pDevInfo' ref devInfoData' "DeviceInterfaceGUIDs"' SetupApi.DICUSTOMDEVPROP.NONE' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  		deviceInterfaceGuids = GetAsAutoStringArray (propBuffer' requiredSize);  	}  	if (deviceInterfaceGuids.Length > 0)  		deviceItem.DeviceInterfaceGuid = deviceInterfaceGuids [0];  	if (!deviceEnumeratorInfo.DeviceFound (deviceItem' pDevInfo' ref devInfoData))  		break;  	InfWizardStatus.Log (CategoryType.EnumerateDevices' StatusType.Info' "device description: {0}"' deviceItem.DeviceDescription);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  	deviceItem.mDriverless = false;  	// Read all string values from the registry driver key  	IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  	if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  		int index = 0;  		int nameLength = 255;  		int dataLength = 1023;  		deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  		StringBuilder sbName = new StringBuilder (nameLength + 1);  		StringBuilder sbValue = new StringBuilder (dataLength + 1);  		RegistryValueKind regValueType;  		while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  			if (regValueType == RegistryValueKind.String)  				deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  			// Get next key/value index  			index++;  			// Reset max lengths  			nameLength = 255;  			dataLength = 1023;  		}  		SetupApi.RegCloseKey (hKey);  	}  }  else {  	deviceItem.mDriverless = true;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  	deviceItem.mDriverless = false;  	// Read all string values from the registry driver key  	IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  	if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  		int index = 0;  		int nameLength = 255;  		int dataLength = 1023;  		deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  		StringBuilder sbName = new StringBuilder (nameLength + 1);  		StringBuilder sbValue = new StringBuilder (dataLength + 1);  		RegistryValueKind regValueType;  		while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  			if (regValueType == RegistryValueKind.String)  				deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  			// Get next key/value index  			index++;  			// Reset max lengths  			nameLength = 255;  			dataLength = 1023;  		}  		SetupApi.RegCloseKey (hKey);  	}  }  else {  	deviceItem.mDriverless = true;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  	deviceItem.mDriverless = false;  	// Read all string values from the registry driver key  	IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  	if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  		int index = 0;  		int nameLength = 255;  		int dataLength = 1023;  		deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  		StringBuilder sbName = new StringBuilder (nameLength + 1);  		StringBuilder sbValue = new StringBuilder (dataLength + 1);  		RegistryValueKind regValueType;  		while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  			if (regValueType == RegistryValueKind.String)  				deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  			// Get next key/value index  			index++;  			// Reset max lengths  			nameLength = 255;  			dataLength = 1023;  		}  		SetupApi.RegCloseKey (hKey);  	}  }  else {  	deviceItem.mDriverless = true;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (SetupApi.SetupDiGetDeviceRegistryProperty (pDevInfo' ref devInfoData' SetupApi.SPDRP.DRIVER' out propertyType' propBuffer' propBuffer.Length' out requiredSize)) {  	deviceItem.mDriverless = false;  	// Read all string values from the registry driver key  	IntPtr hKey = SetupApi.SetupDiOpenDevRegKey (pDevInfo' ref devInfoData' 1' 0' DevKeyType.DRV' (int)RegistryKeyPermissionCheck.ReadSubTree);  	if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  		int index = 0;  		int nameLength = 255;  		int dataLength = 1023;  		deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  		StringBuilder sbName = new StringBuilder (nameLength + 1);  		StringBuilder sbValue = new StringBuilder (dataLength + 1);  		RegistryValueKind regValueType;  		while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  			if (regValueType == RegistryValueKind.String)  				deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  			// Get next key/value index  			index++;  			// Reset max lengths  			nameLength = 255;  			dataLength = 1023;  		}  		SetupApi.RegCloseKey (hKey);  	}  }  else {  	deviceItem.mDriverless = true;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  	int index = 0;  	int nameLength = 255;  	int dataLength = 1023;  	deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  	StringBuilder sbName = new StringBuilder (nameLength + 1);  	StringBuilder sbValue = new StringBuilder (dataLength + 1);  	RegistryValueKind regValueType;  	while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  		if (regValueType == RegistryValueKind.String)  			deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  		// Get next key/value index  		index++;  		// Reset max lengths  		nameLength = 255;  		dataLength = 1023;  	}  	SetupApi.RegCloseKey (hKey);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  	int index = 0;  	int nameLength = 255;  	int dataLength = 1023;  	deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  	StringBuilder sbName = new StringBuilder (nameLength + 1);  	StringBuilder sbValue = new StringBuilder (dataLength + 1);  	RegistryValueKind regValueType;  	while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  		if (regValueType == RegistryValueKind.String)  			deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  		// Get next key/value index  		index++;  		// Reset max lengths  		nameLength = 255;  		dataLength = 1023;  	}  	SetupApi.RegCloseKey (hKey);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  	int index = 0;  	int nameLength = 255;  	int dataLength = 1023;  	deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  	StringBuilder sbName = new StringBuilder (nameLength + 1);  	StringBuilder sbValue = new StringBuilder (dataLength + 1);  	RegistryValueKind regValueType;  	while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  		if (regValueType == RegistryValueKind.String)  			deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  		// Get next key/value index  		index++;  		// Reset max lengths  		nameLength = 255;  		dataLength = 1023;  	}  	SetupApi.RegCloseKey (hKey);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: if (hKey != IntPtr.Zero && hKey != new IntPtr (-1)) {  	int index = 0;  	int nameLength = 255;  	int dataLength = 1023;  	deviceItem.mDriverRegistryList = new Dictionary<string' object> ();  	StringBuilder sbName = new StringBuilder (nameLength + 1);  	StringBuilder sbValue = new StringBuilder (dataLength + 1);  	RegistryValueKind regValueType;  	while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  		if (regValueType == RegistryValueKind.String)  			deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  		// Get next key/value index  		index++;  		// Reset max lengths  		nameLength = 255;  		dataLength = 1023;  	}  	SetupApi.RegCloseKey (hKey);  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  	if (regValueType == RegistryValueKind.String)  		deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  	// Get next key/value index  	index++;  	// Reset max lengths  	nameLength = 255;  	dataLength = 1023;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: while (SetupApi.RegEnumValue (hKey' index' sbName' ref nameLength' IntPtr.Zero' out regValueType' sbValue' ref dataLength) == 0) {  	if (regValueType == RegistryValueKind.String)  		deviceItem.mDriverRegistryList.Add (sbName.ToString ()' sbValue.ToString ());  	// Get next key/value index  	index++;  	// Reset max lengths  	nameLength = 255;  	dataLength = 1023;  }  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: nameLength = 255;  
Magic Number,InfWizard.WizardClassHelpers,DeviceSelectionHelper,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DeviceSelectionHelper.cs,EnumerateDevices,The following statement contains a magic number: dataLength = 1023;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.DockPadding.Bottom = 4;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.DockPadding.Left = 8;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.DockPadding.Right = 4;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.DockPadding.Top = 6;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.Size = new Size (324' 64);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.Size = new Size (324' 64);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnlDockPadding.TabIndex = 6;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Location = new Point (8' 22);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Location = new Point (8' 22);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Size = new Size (260' 38);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Size = new Size (260' 38);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblDescription.TabIndex = 5;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Location = new Point (8' 6);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Location = new Point (8' 6);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Size = new Size (260' 16);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Size = new Size (260' 16);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: lblTitle.TabIndex = 4;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: picIcon.Location = new Point (268' 6);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: picIcon.Location = new Point (268' 6);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: picIcon.Size = new Size (52' 54);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: picIcon.Size = new Size (52' 54);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: picIcon.TabIndex = 3;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dDark.Location = new Point (0' 62);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dDark.Size = new Size (324' 1);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dDark.TabIndex = 7;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dBright.Location = new Point (0' 63);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dBright.Size = new Size (324' 1);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: pnl3dBright.TabIndex = 8;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (324' 64);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (324' 64);  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,ResizeImageAndText,The following statement contains a magic number: picIcon.Top = (Height - picIcon.Height) / 2;  
Magic Number,Gui.Wizard,Header,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Header.cs,ResizeImageAndText,The following statement contains a magic number: picIcon.Left = Width - picIcon.Width - 8;  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: picImage.Size = new Size (164' 388);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: picImage.Size = new Size (164' 388);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Location = new Point (172' 4);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Location = new Point (172' 4);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Size = new Size (304' 48);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: lblTitle.Size = new Size (304' 48);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: lblTitle.TabIndex = 7;  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (480' 388);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (480' 388);  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InfoContainer_Load,The following statement contains a magic number: lblTitle.Left = picImage.Width + 8;  
Magic Number,Gui.Wizard,InfoContainer,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoContainer.cs,InfoContainer_Load,The following statement contains a magic number: lblTitle.Width = (Width - 4) - lblTitle.Left;  
Magic Number,Gui.Wizard,InfoPage,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Location = new Point (172' 56);  
Magic Number,Gui.Wizard,InfoPage,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Location = new Point (172' 56);  
Magic Number,Gui.Wizard,InfoPage,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Size = new Size (304' 328);  
Magic Number,Gui.Wizard,InfoPage,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: lblDescription.Size = new Size (304' 328);  
Magic Number,Gui.Wizard,InfoPage,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: lblDescription.TabIndex = 8;  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' Font);  	RectangleF layout = new RectangleF ((Width - textSize.Width) / 2' (pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' Left + 8' Top + 8' Width - 17' pnlButtons.Top - 17);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtons.Location = new Point (0' 224);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtons.Size = new Size (444' 48);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtons.Size = new Size (444' 48);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point (356' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point (356' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnCancel.TabIndex = 5;  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnNext.Location = new Point (272' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnNext.Location = new Point (272' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnNext.TabIndex = 4;  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnBack.Location = new Point (196' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnBack.Location = new Point (196' 12);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: btnBack.TabIndex = 3;  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtonBright3d.Size = new Size (444' 1);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtonDark3d.Size = new Size (444' 1);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: pnlButtonDark3d.TabIndex = 2;  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (444' 272);  
Magic Number,Gui.Wizard,Wizard,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (444' 272);  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNameFromNumber,The following switch statement is missing a default case: switch (GroupNumber) {  case 1:  	return "Vid";  case 2:  	return "Pid";  case 3:  	return "Rev";  case 4:  	return "MI";  }  
Missing Default,LibUsbDotNet.Internal.UsbRegex,RegHardwareID,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\..\LibWinUsb\Internal\UsbRegex\RegHardwareID.cs,GroupNumberFromName,The following switch statement is missing a default case: switch (GroupName) {  case "Vid":  	return 1;  case "Pid":  	return 2;  case "Rev":  	return 3;  case "MI":  	return 4;  }  
Missing Default,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResources,The following switch statement is missing a default case: switch (waitRet) {  case 0:  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Info' "driver resource downloaded.");  	break;  case 1:  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "failed getting driver resource; operation cancelled.");  	break;  case WaitHandle.WaitTimeout:  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "connection timed out.");  	break;  }  
Missing Default,InfWizard,InfWizardForm,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\InfWizardForm.DrvResDownload.cs,downloadDriverResourceList,The following switch statement is missing a default case: switch (waitRet) {  case 0:  	break;  case 1:  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Warning' "get driver resource list cancelled.");  	break;  case WaitHandle.WaitTimeout:  	InfWizardStatus.Log (CategoryType.DriverDownloader' StatusType.Error' "get driver resource list connection timed out.");  	break;  }  
Missing Default,DynamicProps,DynamicTypeDescriptor,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\DynamicProps\DynamicTypeDescriptor.cs,sortedPropertyDescriptorCollection,The following switch statement is missing a default case: switch (mPropertySortType) {  case DynPropertySortTypes.Natural:  	PropertyInfo[] propertyInfos = mInstance.GetType ().GetProperties ();  	dynamicPropDescriptors = DynSortPropsByNatural.Sort (propertyInfos' dynamicPropDescriptors);  	break;  case DynPropertySortTypes.UsePropertySortAttributes:  	dynamicPropDescriptors.Sort (new DynSortPropsByAttribute ());  	break;  }  
Missing Default,TagNReplace,TagNReplaceString,C:\repos\johannes85_bloenk-software\Libraries\LibUsbDotNet\InfWizard\TagnReplace\TagNReplaceString.cs,TagNReplaceString,The following switch statement is missing a default case: switch (listCloneType) {  case eListCloneType.ByReference:  	mTagList = cloneFrom.mTagList;  	break;  case eListCloneType.ByValue:  	mTagList = new TagNReplaceList (mTagKeyComparer' cloneFrom.mTagList);  	break;  case eListCloneType.NewList:  	mTagList = new TagNReplaceList (mTagKeyComparer);  	break;  }  
