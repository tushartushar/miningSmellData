Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TwitterClient,TwitterConfig,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,TwitterConfig,The method has 5 parameters.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,ComputeScore,The length of the statement  "		ProfileImageUrl = tweet.User != null ? (tweet.User.ProfileImageUrl != null ? tweet.User.ProfileImageUrl : "(unknown)") : "(unknown)"' " is 133.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,ParseTwitterDateTime,The length of the statement  "	if (DateTimeOffset.TryParseExact (p' "ddd MMM dd HH:mm:ss yyyy"' CultureInfo.GetCultureInfo ("en-us").DateTimeFormat' DateTimeStyles.AssumeUniversal' out result)) " is 162.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,Analyze,The length of the statement  "		string url = string.Format ("http://www.sentiment140.com/api/classify?text={0}"' HttpUtility.UrlEncode (textToAnalyze' Encoding.UTF8)); " is 135.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "	//keyPhrases are specified in app.config separated by commas.  Can have no leading or trailing spaces.  Example of key phrases in app.config " is 140.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "	//	<add key="twitter_keywords" value="Microsoft' Office' Surface'Windows Phone'Windows 8'Windows Server'SQL Server'SharePoint'Bing'Skype'XBox'System Center"/><!--comma to spit multiple keywords--> " is 196.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "		//a key phrase may have multiple key words' like: Windows Phone.  If this is the case we will only assign it a subject if both words are  " is 136.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "		//included and in the correct order. For example' a tweet will match if "Windows 8" is found within the tweet but will not match if " is 131.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "		//Creates one array that breaks the tweet into individual words and one array that breaks the key phrase into individual words.  Within  " is 135.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "		//This for loop another array is created from the tweet that includes the same number of words as the keyphrase.  These are compared.  For example' " is 147.
Long Statement,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,DetermineTopc,The length of the statement  "		// KeyPhrase = "Microsoft Office" Tweet= "I Love Microsoft Office"  "Microsoft Office" will be compared to "I Love" then "Love Microsoft" and  " is 141.
Long Statement,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,ReadTweets,The length of the statement  "	var oauth_timestamp = Convert.ToInt64 ((DateTime.UtcNow - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalSeconds).ToString (); " is 141.
Long Statement,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,ReadTweets,The length of the statement  "	var baseString = string.Format ("oauth_consumer_key={0}&oauth_nonce={1}&oauth_signature_method={2}&" + "oauth_timestamp={3}&oauth_token={4}&oauth_version={5}&track={6}"' config.OAuthConsumerKey' oauth_nonce' oauth_signature_method' oauth_timestamp' config.OAuthToken' oauth_version' Uri.EscapeDataString (config.Keywords)); " is 323.
Long Statement,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,ReadTweets,The length of the statement  "	var compositeKey = string.Concat (Uri.EscapeDataString (config.OAuthConsumerSecret)' "&"' Uri.EscapeDataString (config.OAuthTokenSecret)); " is 138.
Long Statement,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,ReadTweets,The length of the statement  "	var authHeader = string.Format ("OAuth oauth_nonce=\"{0}\"' oauth_signature_method=\"{1}\"' " + "oauth_timestamp=\"{2}\"' oauth_consumer_key=\"{3}\"' " + "oauth_token=\"{4}\"' oauth_signature=\"{5}\"' " + "oauth_version=\"{6}\""' Uri.EscapeDataString (oauth_nonce)' Uri.EscapeDataString (oauth_signature_method)' Uri.EscapeDataString (oauth_timestamp)' Uri.EscapeDataString (config.OAuthConsumerKey)' Uri.EscapeDataString (config.OAuthToken)' Uri.EscapeDataString (oauth_signature)' Uri.EscapeDataString (oauth_version)); " is 521.
Long Statement,TwitterClient,Program,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Program.cs,Main,The length of the statement  "	var datum = Tweet.StreamStatuses (new TwitterConfig (oauthToken' oauthTokenSecret' oauthCustomerKey' oauthConsumerSecret' keywords)).Select (tweet => Sentiment.ComputeScore (tweet' keywords)).Select (tweet => new Payload { " is 222.
Empty Catch Block,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,StreamStatuses,The method has an empty catch block.
Empty Catch Block,TwitterClient,EventHubObserver,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\EventHubObserver.cs,EventHubObserver,The method has an empty catch block.
Empty Catch Block,TwitterClient,EventHubObserver,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\EventHubObserver.cs,OnNext,The method has an empty catch block.
Magic Number,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,Analyze,The following statement contains a magic number: try {  	string url = string.Format ("http://www.sentiment140.com/api/classify?text={0}"' HttpUtility.UrlEncode (textToAnalyze' Encoding.UTF8));  	var response = HttpWebRequest.Create (url).GetResponse ();  	using (var streamReader = new StreamReader (response.GetResponseStream ())) {  		try {  			// Read from source  			var line = streamReader.ReadLine ();  			// Parse  			var jObject = JObject.Parse (line);  			int polarity = jObject.SelectToken ("results"' true).SelectToken ("polarity"' true).Value<int> ();  			switch (polarity) {  			case 0:  				return SentimentScore.Negative;  			case 4:  				return SentimentScore.Positive;  			// 2 or others  			default:  				return SentimentScore.Neutral;  			}  		}  		catch (Exception) {  			return SentimentScore.Neutral;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Sentiment calculation FAILED with:/n{0}"' e);  	return SentimentScore.Neutral;  }  
Magic Number,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,Analyze,The following statement contains a magic number: using (var streamReader = new StreamReader (response.GetResponseStream ())) {  	try {  		// Read from source  		var line = streamReader.ReadLine ();  		// Parse  		var jObject = JObject.Parse (line);  		int polarity = jObject.SelectToken ("results"' true).SelectToken ("polarity"' true).Value<int> ();  		switch (polarity) {  		case 0:  			return SentimentScore.Negative;  		case 4:  			return SentimentScore.Positive;  		// 2 or others  		default:  			return SentimentScore.Neutral;  		}  	}  	catch (Exception) {  		return SentimentScore.Neutral;  	}  }  
Magic Number,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,Analyze,The following statement contains a magic number: try {  	// Read from source  	var line = streamReader.ReadLine ();  	// Parse  	var jObject = JObject.Parse (line);  	int polarity = jObject.SelectToken ("results"' true).SelectToken ("polarity"' true).Value<int> ();  	switch (polarity) {  	case 0:  		return SentimentScore.Negative;  	case 4:  		return SentimentScore.Positive;  	// 2 or others  	default:  		return SentimentScore.Neutral;  	}  }  catch (Exception) {  	return SentimentScore.Neutral;  }  
Magic Number,TwitterClient,Sentiment,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\Sentiment140.cs,Analyze,The following statement contains a magic number: switch (polarity) {  case 0:  	return SentimentScore.Negative;  case 4:  	return SentimentScore.Positive;  // 2 or others  default:  	return SentimentScore.Neutral;  }  
Magic Number,TwitterClient,Tweet,C:\repos\streamanalytics_samples\TwitterClient\TwitterClient\Entities\TwitterData.cs,ReadTweets,The following statement contains a magic number: if (tresponse.Wait (5000))  	return new StreamReader (tresponse.Result.GetResponseStream ());  else {  	request.Abort ();  	return StreamReader.Null;  }  
