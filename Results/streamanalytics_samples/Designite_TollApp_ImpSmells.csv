Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TollApp,EntryEvent,C:\repos\streamanalytics_samples\TollApp\TollEvent.cs,EntryEvent,The method has 7 parameters. Parameters: tollId' entryTime' licence' state' carModel' tollAmount' tag
Magic Number,TollApp,Program,C:\repos\streamanalytics_samples\TollApp\Program.cs,SendData,The following statement contains a magic number: TimerCallback timerCallback = state =>              {                  var startTime = DateTime.UtcNow;                  generator.Next(startTime' timerInterval' 5);                    foreach (var e in generator.GetEvents(startTime))                  {                      if (e is EntryEvent)                      {                          entryEventHub.Send(                             new EventData(Encoding.UTF8.GetBytes(e.Format()))                                      {                                          PartitionKey = e.TollId.ToString(CultureInfo.InvariantCulture)                                      });                      }                      else                      {                          exitEventHub.Send(                             new EventData(Encoding.UTF8.GetBytes(e.Format()))                             {                                 PartitionKey = e.TollId.ToString(CultureInfo.InvariantCulture)                             });                      }                  }                    timer.Change((int)timerInterval.TotalMilliseconds' Timeout.Infinite);              };
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,Next,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var carModel = CarModels[random.Next(CarModels.Length)];                  var entryTime = startTime + TimeSpan.FromMilliseconds(random.Next((int)interval.TotalMilliseconds));                  var exitTime = entryTime + TimeSpan.FromSeconds(random.Next(60' 160));                  var tollId = random.Next(MaxTollId);                  var state = States[random.Next(States.Length)];                  var tollAmount = GetTollAmount(carModel);                  var tag = random.Next(100000000' 999999999);                    string licence;                    // For commercial vehicle pick license number from the reference data. Use random value for others.                  if (carModel.VehicleType == 2)                  {                      licence =                          commercialVehicleRegistration[random.Next(commercialVehicleRegistration.Length)].LicensePlate;                  }                  else                  {                      licence = GetLicenceNumber();                  }                  eventBuffer.Add(entryTime' new EntryEvent(tollId' entryTime' licence' state' carModel' tollAmount' tag));                    if (tollId != TollIdWithFailedExitSensor)                  {                      eventBuffer.Add(exitTime' new ExitEvent(tollId' exitTime' licence));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,Next,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var carModel = CarModels[random.Next(CarModels.Length)];                  var entryTime = startTime + TimeSpan.FromMilliseconds(random.Next((int)interval.TotalMilliseconds));                  var exitTime = entryTime + TimeSpan.FromSeconds(random.Next(60' 160));                  var tollId = random.Next(MaxTollId);                  var state = States[random.Next(States.Length)];                  var tollAmount = GetTollAmount(carModel);                  var tag = random.Next(100000000' 999999999);                    string licence;                    // For commercial vehicle pick license number from the reference data. Use random value for others.                  if (carModel.VehicleType == 2)                  {                      licence =                          commercialVehicleRegistration[random.Next(commercialVehicleRegistration.Length)].LicensePlate;                  }                  else                  {                      licence = GetLicenceNumber();                  }                  eventBuffer.Add(entryTime' new EntryEvent(tollId' entryTime' licence' state' carModel' tollAmount' tag));                    if (tollId != TollIdWithFailedExitSensor)                  {                      eventBuffer.Add(exitTime' new ExitEvent(tollId' exitTime' licence));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,Next,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var carModel = CarModels[random.Next(CarModels.Length)];                  var entryTime = startTime + TimeSpan.FromMilliseconds(random.Next((int)interval.TotalMilliseconds));                  var exitTime = entryTime + TimeSpan.FromSeconds(random.Next(60' 160));                  var tollId = random.Next(MaxTollId);                  var state = States[random.Next(States.Length)];                  var tollAmount = GetTollAmount(carModel);                  var tag = random.Next(100000000' 999999999);                    string licence;                    // For commercial vehicle pick license number from the reference data. Use random value for others.                  if (carModel.VehicleType == 2)                  {                      licence =                          commercialVehicleRegistration[random.Next(commercialVehicleRegistration.Length)].LicensePlate;                  }                  else                  {                      licence = GetLicenceNumber();                  }                  eventBuffer.Add(entryTime' new EntryEvent(tollId' entryTime' licence' state' carModel' tollAmount' tag));                    if (tollId != TollIdWithFailedExitSensor)                  {                      eventBuffer.Add(exitTime' new ExitEvent(tollId' exitTime' licence));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,Next,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var carModel = CarModels[random.Next(CarModels.Length)];                  var entryTime = startTime + TimeSpan.FromMilliseconds(random.Next((int)interval.TotalMilliseconds));                  var exitTime = entryTime + TimeSpan.FromSeconds(random.Next(60' 160));                  var tollId = random.Next(MaxTollId);                  var state = States[random.Next(States.Length)];                  var tollAmount = GetTollAmount(carModel);                  var tag = random.Next(100000000' 999999999);                    string licence;                    // For commercial vehicle pick license number from the reference data. Use random value for others.                  if (carModel.VehicleType == 2)                  {                      licence =                          commercialVehicleRegistration[random.Next(commercialVehicleRegistration.Length)].LicensePlate;                  }                  else                  {                      licence = GetLicenceNumber();                  }                  eventBuffer.Add(entryTime' new EntryEvent(tollId' entryTime' licence' state' carModel' tollAmount' tag));                    if (tollId != TollIdWithFailedExitSensor)                  {                      eventBuffer.Add(exitTime' new ExitEvent(tollId' exitTime' licence));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,Next,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var carModel = CarModels[random.Next(CarModels.Length)];                  var entryTime = startTime + TimeSpan.FromMilliseconds(random.Next((int)interval.TotalMilliseconds));                  var exitTime = entryTime + TimeSpan.FromSeconds(random.Next(60' 160));                  var tollId = random.Next(MaxTollId);                  var state = States[random.Next(States.Length)];                  var tollAmount = GetTollAmount(carModel);                  var tag = random.Next(100000000' 999999999);                    string licence;                    // For commercial vehicle pick license number from the reference data. Use random value for others.                  if (carModel.VehicleType == 2)                  {                      licence =                          commercialVehicleRegistration[random.Next(commercialVehicleRegistration.Length)].LicensePlate;                  }                  else                  {                      licence = GetLicenceNumber();                  }                  eventBuffer.Add(entryTime' new EntryEvent(tollId' entryTime' licence' state' carModel' tollAmount' tag));                    if (tollId != TollIdWithFailedExitSensor)                  {                      eventBuffer.Add(exitTime' new ExitEvent(tollId' exitTime' licence));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetTollAmount,The following statement contains a magic number: if (model.VehicleType == 1)              {                  return 4 + random.Next(3);              }              else              {                  return 15 + random.Next(20);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetTollAmount,The following statement contains a magic number: if (model.VehicleType == 1)              {                  return 4 + random.Next(3);              }              else              {                  return 15 + random.Next(20);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetTollAmount,The following statement contains a magic number: if (model.VehicleType == 1)              {                  return 4 + random.Next(3);              }              else              {                  return 15 + random.Next(20);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetTollAmount,The following statement contains a magic number: if (model.VehicleType == 1)              {                  return 4 + random.Next(3);              }              else              {                  return 15 + random.Next(20);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetLicenceNumber,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  var ch = Convert.ToChar(Convert.ToInt32(Math.Floor((26 * random.NextDouble()) + 65)));                  builder.Append(ch);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetLicenceNumber,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  var ch = Convert.ToChar(Convert.ToInt32(Math.Floor((26 * random.NextDouble()) + 65)));                  builder.Append(ch);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetLicenceNumber,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  var ch = Convert.ToChar(Convert.ToInt32(Math.Floor((26 * random.NextDouble()) + 65)));                  builder.Append(ch);              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetLicenceNumber,The following statement contains a magic number: builder.AppendFormat(" {0}"' random.Next(1000' 10000));
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GetLicenceNumber,The following statement contains a magic number: builder.AppendFormat(" {0}"' random.Next(1000' 10000));
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GenerateReferenceData,The following statement contains a magic number: using (var file = File.CreateText(fileName))              {                  file.WriteLine(@"LicensePlate'RegistrationId'Status");                  for (int i = 0; i < 10000; i++)                  {                      file.WriteLine(                          string.Join(                          "'"'                           GetLicenceNumber()'                          random.Next(100000000' 999999999).ToString(CultureInfo.InvariantCulture)'                          random.Next(0' 2).ToString(CultureInfo.InvariantCulture)));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GenerateReferenceData,The following statement contains a magic number: using (var file = File.CreateText(fileName))              {                  file.WriteLine(@"LicensePlate'RegistrationId'Status");                  for (int i = 0; i < 10000; i++)                  {                      file.WriteLine(                          string.Join(                          "'"'                           GetLicenceNumber()'                          random.Next(100000000' 999999999).ToString(CultureInfo.InvariantCulture)'                          random.Next(0' 2).ToString(CultureInfo.InvariantCulture)));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GenerateReferenceData,The following statement contains a magic number: using (var file = File.CreateText(fileName))              {                  file.WriteLine(@"LicensePlate'RegistrationId'Status");                  for (int i = 0; i < 10000; i++)                  {                      file.WriteLine(                          string.Join(                          "'"'                           GetLicenceNumber()'                          random.Next(100000000' 999999999).ToString(CultureInfo.InvariantCulture)'                          random.Next(0' 2).ToString(CultureInfo.InvariantCulture)));                  }              }
Magic Number,TollApp,TollDataGenerator,C:\repos\streamanalytics_samples\TollApp\TollDataGenerator.cs,GenerateReferenceData,The following statement contains a magic number: using (var file = File.CreateText(fileName))              {                  file.WriteLine(@"LicensePlate'RegistrationId'Status");                  for (int i = 0; i < 10000; i++)                  {                      file.WriteLine(                          string.Join(                          "'"'                           GetLicenceNumber()'                          random.Next(100000000' 999999999).ToString(CultureInfo.InvariantCulture)'                          random.Next(0' 2).ToString(CultureInfo.InvariantCulture)));                  }              }
