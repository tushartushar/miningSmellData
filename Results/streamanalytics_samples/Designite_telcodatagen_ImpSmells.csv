Implementation smell,Namespace,Class,File,Method,Description
Long Method,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The method has 82 lines of code.
Long Method,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The method has 141 lines of code.
Complex Method,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,Cyclomatic complexity of the method is 68
Complex Method,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,Cyclomatic complexity of the method is 13
Long Parameter List,telcodatagen,GenConfig,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\GenConfig.cs,GenConfig,The method has 5 parameters.
Long Statement,telcodatagen,GenConfig,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\GenConfig.cs,ToString,The length of the statement  "	return "#Sets: " + nSets + "'#FilesDump: " + nFilesPerDump + "'#CDRPerFile: " + nCDRPerFile + "'%CallBack: " + nCallBackPercent + "' #DurationHours: " + nDurationHours; " is 168.
Long Statement,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,outputCDRRecs,The length of the statement  "	//Console.WriteLine("RecordType'SystemIdentity'FileNum'SwitchNum'CallingNum'CallingIMSI'CalledNum'CalledIMSI'Date'Time'TimeType'CallPeriod'CallingCellID'CalledCellID'ServiceType"); " is 180.
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,_init,The following statement contains a magic number: data.Add ("Transfer"' coin.Next (0' 2));  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,_init,The following statement contains a magic number: this.Transfer = coin.Next (0' 2);  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following statement contains a magic number: if (value.Length > 13) {  	int hour = Int32.Parse (value.Substring (9' 2));  	int min = Int32.Parse (value.Substring (11' 2));  	int secs = Int32.Parse (value.Substring (13' 2));  	int year = Int32.Parse (value.Substring (0' 4));  	int month = Int32.Parse (value.Substring (4' 2));  	int day = Int32.Parse (value.Substring (6' 2));  	this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length < 3)  	Usage ();  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: while (endTime.Subtract (ptTime) >= TimeSpan.Zero) {  	DateTimeOffset currentTime = ptTime;  	Console.WriteLine (String.Format ("{0:yyyyMMdd HHmmss}"' simulationTime));  	for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  		currentTime = ptTime;  		// Determine whether to generate an invalid CDR record  		double pvalue = r.NextDouble ();  		if (pvalue < 0.1)  			invalidRec = true;  		else  			invalidRec = false;  		// Determine whether there will be a callback  		pvalue = r.NextDouble ();  		if (pvalue >= config.nCallBackPercent)  			genCallback = true;  		else  			genCallback = false;  		// Determine called and calling num  		int calledIdx = r.Next (0' mobileNos.CallNos.Length);  		int callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord rec = new CDRrecord ();  		rec.setData ("FileNum"' "" + cdr);  		int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  		int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		// Find an alternate switch  		while (switchAltIdx == switchIdx) {  			switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  		}  		rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  		if (invalidRec) {  			rec.setData ("Date"' "F");  			rec.setData ("Time"' "F");  			rec.setData ("DateTime"' "F F");  		} else {  			String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			String callTime = String.Format ("{0:HHmmss}"' currentTime);  			rec.setData ("Date"' callDate);  			rec.setData ("Time"' callTime);  			rec.setData ("DateTime"' callDate + " " + callTime);  			String calledNum = mobileNos.CallNos [calledIdx];  			String callingNum = mobileNos.CallNos [callingIdx];  			rec.setData ("CalledNum"' calledNum);  			rec.setData ("CallingNum"' callingNum);  			// Sim card fraud record  			if (genCallback) {  				// For call back the A->B end has duration 0  				rec.setData ("CallPeriod"' "0");  				// need to generate another set of no  				calledIdx = callingIdx;  				callingIdx = r.Next (0' mobileNos.CallNos.Length);  				CDRrecord callbackRec = new CDRrecord ();  				callbackRec.setData ("FileNum"' "" + cdr);  				callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  				//callbackRec.setData("SwitchNum"' "" + (f + 1));  				// Pertub second   				int pertubs = r.Next (0' 30);  				callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  				callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  				callbackRec.setData ("Date"' callDate);  				callbackRec.setData ("Time"' callTime);  				callbackRec.setData ("DateTime"' callDate + " " + callTime);  				// Set it as the same calling IMSI  				callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  				calledNum = mobileNos.CallNos [calledIdx];  				callingNum = mobileNos.CallNos [callingIdx];  				callbackRec.setData ("CalledNum"' calledNum);  				callbackRec.setData ("CallingNum"' callingNum);  				// Determine duration of call  				int callPeriod = r.Next (1' 1000);  				callbackRec.setData ("CallPeriod"' "" + callPeriod);  				// Enqueue the call back rec   				callBackQ.Enqueue (callbackRec);  				cdr++;  			} else {  				int callPeriod = r.Next (1' 800);  				rec.setData ("CallPeriod"' "" + callPeriod);  			}  		}  		// send cdr rec to output  		//if (genCallback)  Console.Write("callback A->B ");  		outputCDRRecs (rec);  		if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  			CDRrecord drec;  			drec = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (drec);  			//Console.Write("callback C->A!");  			//outputCDRRecs(s' f' drec);  		}  		// Sleep for 1000ms  		System.Threading.Thread.Sleep (100);  		// get the current time after generation  		ptTime = DateTimeOffset.Now;  	}  	// cdr  	// Clear the remaining entries in the call back queue  	if (callBackQ.Count > 0) {  		// need to empty queue  		while (callBackQ.Count > 0) {  			CDRrecord dr = (CDRrecord)callBackQ.Dequeue ();  			outputCDRRecs (dr);  			//outputCDRRecs(s' f' dr);  		}  	}  	// close the file  	if (writer != null) {  		writer.Flush ();  		writer.Close ();  		writer = null;  	}  	// Advance Time  	if (timeAdvancementPerSet < 1.0)  		simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  	else  		simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: for (int cdr = 0; cdr < config.nCDRPerFile; cdr++) {  	currentTime = ptTime;  	// Determine whether to generate an invalid CDR record  	double pvalue = r.NextDouble ();  	if (pvalue < 0.1)  		invalidRec = true;  	else  		invalidRec = false;  	// Determine whether there will be a callback  	pvalue = r.NextDouble ();  	if (pvalue >= config.nCallBackPercent)  		genCallback = true;  	else  		genCallback = false;  	// Determine called and calling num  	int calledIdx = r.Next (0' mobileNos.CallNos.Length);  	int callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord rec = new CDRrecord ();  	rec.setData ("FileNum"' "" + cdr);  	int switchIdx = r.Next (0' mobileNos.switchCountries.Length);  	int switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	// Find an alternate switch  	while (switchAltIdx == switchIdx) {  		switchAltIdx = r.Next (0' mobileNos.switchCountries.Length);  	}  	rec.setData ("SwitchNum"' mobileNos.switchCountries [switchIdx]);  	if (invalidRec) {  		rec.setData ("Date"' "F");  		rec.setData ("Time"' "F");  		rec.setData ("DateTime"' "F F");  	} else {  		String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		String callTime = String.Format ("{0:HHmmss}"' currentTime);  		rec.setData ("Date"' callDate);  		rec.setData ("Time"' callTime);  		rec.setData ("DateTime"' callDate + " " + callTime);  		String calledNum = mobileNos.CallNos [calledIdx];  		String callingNum = mobileNos.CallNos [callingIdx];  		rec.setData ("CalledNum"' calledNum);  		rec.setData ("CallingNum"' callingNum);  		// Sim card fraud record  		if (genCallback) {  			// For call back the A->B end has duration 0  			rec.setData ("CallPeriod"' "0");  			// need to generate another set of no  			calledIdx = callingIdx;  			callingIdx = r.Next (0' mobileNos.CallNos.Length);  			CDRrecord callbackRec = new CDRrecord ();  			callbackRec.setData ("FileNum"' "" + cdr);  			callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  			//callbackRec.setData("SwitchNum"' "" + (f + 1));  			// Pertub second   			int pertubs = r.Next (0' 30);  			callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  			callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  			callbackRec.setData ("Date"' callDate);  			callbackRec.setData ("Time"' callTime);  			callbackRec.setData ("DateTime"' callDate + " " + callTime);  			// Set it as the same calling IMSI  			callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  			calledNum = mobileNos.CallNos [calledIdx];  			callingNum = mobileNos.CallNos [callingIdx];  			callbackRec.setData ("CalledNum"' calledNum);  			callbackRec.setData ("CallingNum"' callingNum);  			// Determine duration of call  			int callPeriod = r.Next (1' 1000);  			callbackRec.setData ("CallPeriod"' "" + callPeriod);  			// Enqueue the call back rec   			callBackQ.Enqueue (callbackRec);  			cdr++;  		} else {  			int callPeriod = r.Next (1' 800);  			rec.setData ("CallPeriod"' "" + callPeriod);  		}  	}  	// send cdr rec to output  	//if (genCallback)  Console.Write("callback A->B ");  	outputCDRRecs (rec);  	if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  		CDRrecord drec;  		drec = (CDRrecord)callBackQ.Dequeue ();  		outputCDRRecs (drec);  		//Console.Write("callback C->A!");  		//outputCDRRecs(s' f' drec);  	}  	// Sleep for 1000ms  	System.Threading.Thread.Sleep (100);  	// get the current time after generation  	ptTime = DateTimeOffset.Now;  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (pvalue < 0.1)  	invalidRec = true;  else  	invalidRec = false;  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (invalidRec) {  	rec.setData ("Date"' "F");  	rec.setData ("Time"' "F");  	rec.setData ("DateTime"' "F F");  } else {  	String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	String callTime = String.Format ("{0:HHmmss}"' currentTime);  	rec.setData ("Date"' callDate);  	rec.setData ("Time"' callTime);  	rec.setData ("DateTime"' callDate + " " + callTime);  	String calledNum = mobileNos.CallNos [calledIdx];  	String callingNum = mobileNos.CallNos [callingIdx];  	rec.setData ("CalledNum"' calledNum);  	rec.setData ("CallingNum"' callingNum);  	// Sim card fraud record  	if (genCallback) {  		// For call back the A->B end has duration 0  		rec.setData ("CallPeriod"' "0");  		// need to generate another set of no  		calledIdx = callingIdx;  		callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord callbackRec = new CDRrecord ();  		callbackRec.setData ("FileNum"' "" + cdr);  		callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  		//callbackRec.setData("SwitchNum"' "" + (f + 1));  		// Pertub second   		int pertubs = r.Next (0' 30);  		callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  		callbackRec.setData ("Date"' callDate);  		callbackRec.setData ("Time"' callTime);  		callbackRec.setData ("DateTime"' callDate + " " + callTime);  		// Set it as the same calling IMSI  		callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  		calledNum = mobileNos.CallNos [calledIdx];  		callingNum = mobileNos.CallNos [callingIdx];  		callbackRec.setData ("CalledNum"' calledNum);  		callbackRec.setData ("CallingNum"' callingNum);  		// Determine duration of call  		int callPeriod = r.Next (1' 1000);  		callbackRec.setData ("CallPeriod"' "" + callPeriod);  		// Enqueue the call back rec   		callBackQ.Enqueue (callbackRec);  		cdr++;  	} else {  		int callPeriod = r.Next (1' 800);  		rec.setData ("CallPeriod"' "" + callPeriod);  	}  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (invalidRec) {  	rec.setData ("Date"' "F");  	rec.setData ("Time"' "F");  	rec.setData ("DateTime"' "F F");  } else {  	String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	String callTime = String.Format ("{0:HHmmss}"' currentTime);  	rec.setData ("Date"' callDate);  	rec.setData ("Time"' callTime);  	rec.setData ("DateTime"' callDate + " " + callTime);  	String calledNum = mobileNos.CallNos [calledIdx];  	String callingNum = mobileNos.CallNos [callingIdx];  	rec.setData ("CalledNum"' calledNum);  	rec.setData ("CallingNum"' callingNum);  	// Sim card fraud record  	if (genCallback) {  		// For call back the A->B end has duration 0  		rec.setData ("CallPeriod"' "0");  		// need to generate another set of no  		calledIdx = callingIdx;  		callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord callbackRec = new CDRrecord ();  		callbackRec.setData ("FileNum"' "" + cdr);  		callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  		//callbackRec.setData("SwitchNum"' "" + (f + 1));  		// Pertub second   		int pertubs = r.Next (0' 30);  		callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  		callbackRec.setData ("Date"' callDate);  		callbackRec.setData ("Time"' callTime);  		callbackRec.setData ("DateTime"' callDate + " " + callTime);  		// Set it as the same calling IMSI  		callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  		calledNum = mobileNos.CallNos [calledIdx];  		callingNum = mobileNos.CallNos [callingIdx];  		callbackRec.setData ("CalledNum"' calledNum);  		callbackRec.setData ("CallingNum"' callingNum);  		// Determine duration of call  		int callPeriod = r.Next (1' 1000);  		callbackRec.setData ("CallPeriod"' "" + callPeriod);  		// Enqueue the call back rec   		callBackQ.Enqueue (callbackRec);  		cdr++;  	} else {  		int callPeriod = r.Next (1' 800);  		rec.setData ("CallPeriod"' "" + callPeriod);  	}  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (invalidRec) {  	rec.setData ("Date"' "F");  	rec.setData ("Time"' "F");  	rec.setData ("DateTime"' "F F");  } else {  	String callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	String callTime = String.Format ("{0:HHmmss}"' currentTime);  	rec.setData ("Date"' callDate);  	rec.setData ("Time"' callTime);  	rec.setData ("DateTime"' callDate + " " + callTime);  	String calledNum = mobileNos.CallNos [calledIdx];  	String callingNum = mobileNos.CallNos [callingIdx];  	rec.setData ("CalledNum"' calledNum);  	rec.setData ("CallingNum"' callingNum);  	// Sim card fraud record  	if (genCallback) {  		// For call back the A->B end has duration 0  		rec.setData ("CallPeriod"' "0");  		// need to generate another set of no  		calledIdx = callingIdx;  		callingIdx = r.Next (0' mobileNos.CallNos.Length);  		CDRrecord callbackRec = new CDRrecord ();  		callbackRec.setData ("FileNum"' "" + cdr);  		callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  		//callbackRec.setData("SwitchNum"' "" + (f + 1));  		// Pertub second   		int pertubs = r.Next (0' 30);  		callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  		callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  		callbackRec.setData ("Date"' callDate);  		callbackRec.setData ("Time"' callTime);  		callbackRec.setData ("DateTime"' callDate + " " + callTime);  		// Set it as the same calling IMSI  		callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  		calledNum = mobileNos.CallNos [calledIdx];  		callingNum = mobileNos.CallNos [callingIdx];  		callbackRec.setData ("CalledNum"' calledNum);  		callbackRec.setData ("CallingNum"' callingNum);  		// Determine duration of call  		int callPeriod = r.Next (1' 1000);  		callbackRec.setData ("CallPeriod"' "" + callPeriod);  		// Enqueue the call back rec   		callBackQ.Enqueue (callbackRec);  		cdr++;  	} else {  		int callPeriod = r.Next (1' 800);  		rec.setData ("CallPeriod"' "" + callPeriod);  	}  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (genCallback) {  	// For call back the A->B end has duration 0  	rec.setData ("CallPeriod"' "0");  	// need to generate another set of no  	calledIdx = callingIdx;  	callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord callbackRec = new CDRrecord ();  	callbackRec.setData ("FileNum"' "" + cdr);  	callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  	//callbackRec.setData("SwitchNum"' "" + (f + 1));  	// Pertub second   	int pertubs = r.Next (0' 30);  	callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  	callbackRec.setData ("Date"' callDate);  	callbackRec.setData ("Time"' callTime);  	callbackRec.setData ("DateTime"' callDate + " " + callTime);  	// Set it as the same calling IMSI  	callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  	calledNum = mobileNos.CallNos [calledIdx];  	callingNum = mobileNos.CallNos [callingIdx];  	callbackRec.setData ("CalledNum"' calledNum);  	callbackRec.setData ("CallingNum"' callingNum);  	// Determine duration of call  	int callPeriod = r.Next (1' 1000);  	callbackRec.setData ("CallPeriod"' "" + callPeriod);  	// Enqueue the call back rec   	callBackQ.Enqueue (callbackRec);  	cdr++;  } else {  	int callPeriod = r.Next (1' 800);  	rec.setData ("CallPeriod"' "" + callPeriod);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (genCallback) {  	// For call back the A->B end has duration 0  	rec.setData ("CallPeriod"' "0");  	// need to generate another set of no  	calledIdx = callingIdx;  	callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord callbackRec = new CDRrecord ();  	callbackRec.setData ("FileNum"' "" + cdr);  	callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  	//callbackRec.setData("SwitchNum"' "" + (f + 1));  	// Pertub second   	int pertubs = r.Next (0' 30);  	callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  	callbackRec.setData ("Date"' callDate);  	callbackRec.setData ("Time"' callTime);  	callbackRec.setData ("DateTime"' callDate + " " + callTime);  	// Set it as the same calling IMSI  	callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  	calledNum = mobileNos.CallNos [calledIdx];  	callingNum = mobileNos.CallNos [callingIdx];  	callbackRec.setData ("CalledNum"' calledNum);  	callbackRec.setData ("CallingNum"' callingNum);  	// Determine duration of call  	int callPeriod = r.Next (1' 1000);  	callbackRec.setData ("CallPeriod"' "" + callPeriod);  	// Enqueue the call back rec   	callBackQ.Enqueue (callbackRec);  	cdr++;  } else {  	int callPeriod = r.Next (1' 800);  	rec.setData ("CallPeriod"' "" + callPeriod);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (genCallback) {  	// For call back the A->B end has duration 0  	rec.setData ("CallPeriod"' "0");  	// need to generate another set of no  	calledIdx = callingIdx;  	callingIdx = r.Next (0' mobileNos.CallNos.Length);  	CDRrecord callbackRec = new CDRrecord ();  	callbackRec.setData ("FileNum"' "" + cdr);  	callbackRec.setData ("SwitchNum"' mobileNos.switchCountries [switchAltIdx]);  	//callbackRec.setData("SwitchNum"' "" + (f + 1));  	// Pertub second   	int pertubs = r.Next (0' 30);  	callDate = String.Format ("{0:yyyyMMdd}"' currentTime);  	callTime = String.Format ("{0:HHmmss}"' currentTime.AddMinutes (pertubs));  	callbackRec.setData ("Date"' callDate);  	callbackRec.setData ("Time"' callTime);  	callbackRec.setData ("DateTime"' callDate + " " + callTime);  	// Set it as the same calling IMSI  	callbackRec.setData ("CallingIMSI"' rec.CallingIMSI);  	calledNum = mobileNos.CallNos [calledIdx];  	callingNum = mobileNos.CallNos [callingIdx];  	callbackRec.setData ("CalledNum"' calledNum);  	callbackRec.setData ("CallingNum"' callingNum);  	// Determine duration of call  	int callPeriod = r.Next (1' 1000);  	callbackRec.setData ("CallPeriod"' "" + callPeriod);  	// Enqueue the call back rec   	callBackQ.Enqueue (callbackRec);  	cdr++;  } else {  	int callPeriod = r.Next (1' 800);  	rec.setData ("CallPeriod"' "" + callPeriod);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (callBackQ.Count > 0 && (cdr % 7 == 0)) {  	CDRrecord drec;  	drec = (CDRrecord)callBackQ.Dequeue ();  	outputCDRRecs (drec);  	//Console.Write("callback C->A!");  	//outputCDRRecs(s' f' drec);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: if (timeAdvancementPerSet < 1.0)  	simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  else  	simulationTime = simulationTime.AddHours (timeAdvancementPerSet);  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: simulationTime = simulationTime.AddMinutes (timeAdvancementPerSet * 60);  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,GenerateData,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,outputCDRRecs,The following statement contains a magic number: try {  	List<Task> tasks = new List<Task> ();  	var serializedString = JsonConvert.SerializeObject (r);  	EventData data = new EventData (Encoding.UTF8.GetBytes (serializedString)) {  		PartitionKey = r.CallingIMSI  	};  	partitionCurrent++;  	if (partitionCurrent > 8)  		partitionCurrent = 0;  	// Send the metric to Event Hub  	tasks.Add (client.SendAsync (data));  	Console.WriteLine (r);  	Task.WaitAll (tasks.ToArray ());  } catch (Exception e) {  	Console.WriteLine ("Error on send: " + e.Message);  }  
Magic Number,telcodatagen,Program,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\Program.cs,outputCDRRecs,The following statement contains a magic number: if (partitionCurrent > 8)  	partitionCurrent = 0;  
Missing Default,telcodatagen,CDRrecord,D:\newReposJune17\streamanalytics_samples\TelcoGenerator\CDRrecord.cs,setData,The following switch statement is missing a default case: switch (key) {  case "RecordType":  	this.RecordType = value;  	break;  case "SystemIdentity":  	this.SystemIdentity = value;  	break;  case "FileNum":  	this.FileNum = value;  	break;  case "SwitchNum":  	this.SwitchNum = value;  	break;  case "CallingNum":  	this.CallingNum = value;  	break;  case "CallingIMSI":  	this.CallingIMSI = value;  	break;  case "CalledNum":  	this.CalledNum = value;  	break;  case "CalledIMSI":  	this.CalledIMSI = value;  	break;  case "Date":  	this.DateS = value;  	break;  case "Time":  	break;  	this.TimeS = value;  case "TimeType":  	this.TimeType = Int32.Parse (value);  	break;  case "CallPeriod":  	this.CallPeriod = Int32.Parse (value);  	break;  case "CallingCellID":  	this.CallingCellID = value;  	break;  case "CalledCellID":  	this.CalledCellID = value;  	break;  case "ServiceType":  	this.ServiceType = value;  	break;  case "Transfer":  	this.Transfer = Int32.Parse (value);  	break;  case "IncomingTrunk":  	this.IncomingTrunk = value;  	break;  case "OutgoingTrunk":  	this.OutgoingTrunk = value;  	break;  case "MSRN":  	this.MSRN = value;  	break;  case "CalledNum2":  	this.CalledNum2 = value;  	break;  case "FCIFlag":  	this.FCIFlag = value;  	break;  case "DateTime":  	if (value.Length > 13) {  		int hour = Int32.Parse (value.Substring (9' 2));  		int min = Int32.Parse (value.Substring (11' 2));  		int secs = Int32.Parse (value.Substring (13' 2));  		int year = Int32.Parse (value.Substring (0' 4));  		int month = Int32.Parse (value.Substring (4' 2));  		int day = Int32.Parse (value.Substring (6' 2));  		this.callrecTime = new DateTime (year' month' day' hour' min' secs).ToUniversalTime ();  	}  	break;  }  
