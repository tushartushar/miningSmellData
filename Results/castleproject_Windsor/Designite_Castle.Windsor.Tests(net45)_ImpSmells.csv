Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CastleTests.Pools,ParallelAccessAwareKernel,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,AddComponent,The method has 5 parameters. Parameters: key' serviceType' classType' lifestyle' overwriteLifestyle
Long Identifier,Castle.Windsor.Tests.Facilities.Startable,StartableFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\Startable\StartableFacilityTestCase.cs,,The length of the parameter startableCreatedBeforeResolved is 30.
Long Identifier,CastleTests.Lifestyle,BoundLifestyleImplicitGraphScopingTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\BoundLifestyleImplicitGraphScopingTestCase.cs,Scoped_component_not_released_prematurely,The length of the parameter wasADisposedAtTheTimeWhenDisposingB is 35.
Long Identifier,CastleTests.Lifestyle,BoundLifestyleImplicitGraphScopingTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\BoundLifestyleImplicitGraphScopingTestCase.cs,Scoped_component_not_released_prematurely_interdependencies,The length of the parameter wasADisposedAtTheTimeWhenDisposingB is 35.
Long Statement,CastleTests,DependencyCyclesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DependencyCyclesTestCase.cs,Can_detect_and_report_cycle_via_factory_method,The length of the statement  "					"Dependency cycle has been detected when trying to resolve component 'CastleTests.Components.C'.{0}The resolution tree that resulted in the cycle is the following:{0}Component 'CastleTests.Components.C' resolved as dependency of{0}\tcomponent 'Late bound CastleTests.Components.A' resolved as dependency of{0}\tcomponent 'CastleTests.Components.B' resolved as dependency of{0}\tcomponent 'CastleTests.Components.C' which is the root component being resolved.{0}"' " is 463.
Long Statement,CastleTests,DependencyCyclesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DependencyCyclesTestCase.cs,Can_detect_and_report_cycle_where_container_has_lazy_loaders,The length of the statement  "					"Dependency cycle has been detected when trying to resolve component 'CastleTests.Components.EmptyServiceDecorator'.{0}The resolution tree that resulted in the cycle is the following:{0}Component 'CastleTests.Components.EmptyServiceDecorator' resolved as dependency of{0}	component 'CastleTests.Components.EmptyServiceDecorator' which is the root component being resolved.{0}"' " is 377.
Long Statement,CastleTests,DependencyGraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DependencyGraphTestCase.cs,CycleComponentGraphs,The length of the statement  "					"Dependency cycle has been detected when trying to resolve component 'a'.{0}The resolution tree that resulted in the cycle is the following:{0}Component 'a' resolved as dependency of{0}	component 'b' resolved as dependency of{0}	component 'a' which is the root component being resolved.{0}"' " is 291.
Long Statement,CastleTests,DependencyResolvingTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DependencyResolvingTestCase.cs,Value_types_cannot_be_used_as_components,The length of the statement  "			Assert.AreEqual("Type System.Int32 is not a class nor an interface' and those are the only values allowed."' exception.Message); " is 128.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Can_create_component_with_generic_impl_for_non_generic_services,The length of the statement  "			Container.Register(Component.For<IService>().ImplementedBy(typeof(ServiceImplGeneric<>)' new UseStringGenericStrategy())); " is 122.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Can_create_component_with_simple_double_generic_impl_for_single_generic_service_via_ImplementedBy,The length of the statement  "			Container.Register(Component.For(typeof(Generics.IRepository<>)).ImplementedBy(typeof(DoubleGenericRepository<'>)' new DuplicateGenerics())); " is 141.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Null_strategy_is_ignored,The length of the statement  "					"Requested type CastleTests.Generics.IRepository`1[CastleTests.Components.A] has 1 generic parameter(s)' whereas component implementation type Castle.Generics.DoubleGenericRepository`2[T1'T2] requires 2.{0}This means that Windsor does not have enough information to properly create that component for you.{0}You can instruct Windsor which types it should use to close this generic component by supplying an implementation of IGenericImplementationMatchingStrategy.{0}Please consult the documentation for examples of how to do that."' " is 533.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Throws_helpful_message_when_generic_matching_strategy_returns_null,The length of the statement  "					"Requested type CastleTests.Generics.IRepository`1[CastleTests.Components.A] has 1 generic parameter(s)' whereas component implementation type Castle.Generics.DoubleGenericRepository`2[T1'T2] requires 2.{0}This means that Windsor does not have enough information to properly create that component for you.{0}This is most likely a bug in the IGenericImplementationMatchingStrategy implementation this component uses (CastleTests.StubGenericImplementationMatchingStrategy).{0}Please consult the documentation for examples of how to implement it properly."' " is 554.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Throws_helpful_message_when_generic_matching_strategy_returns_too_few_types,The length of the statement  "					"Requested type Castle.MicroKernel.Tests.ClassComponents.IRepository`1[System.String] has 1 generic parameter(s)' whereas component implementation type Castle.MicroKernel.Tests.ClassComponents.DoubleRepository`2[T'T2] requires 2.{0}This means that Windsor does not have enough information to properly create that component for you.{0}This is most likely a bug in the IGenericImplementationMatchingStrategy implementation this component uses (CastleTests.StubGenericImplementationMatchingStrategy).{0}Please consult the documentation for examples of how to implement it properly."' " is 580.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Throws_helpful_message_when_generic_matching_strategy_returns_types_that_wont_work_with_the_type,The length of the statement  "				.ImplementedBy(typeof(DoubleRepository<'>)' new StubGenericImplementationMatchingStrategy(typeof(string)' typeof(IEmployee)))); " is 127.
Long Statement,CastleTests,GenericImplementationWithGreaterArityThanServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericImplementationWithGreaterArityThanServiceTestCase.cs,Throws_helpful_message_when_generic_matching_strategy_returns_types_that_wont_work_with_the_type,The length of the statement  "				@"Types System.String' CastleTests.Components.IEmployee don't satisfy generic constraints of implementation type Castle.MicroKernel.Tests.ClassComponents.DoubleRepository`2 of component 'Castle.MicroKernel.Tests.ClassComponents.DoubleRepository`2'.this is likely a bug in the IGenericImplementationMatchingStrategy used (CastleTests.StubGenericImplementationMatchingStrategy)"; " is 377.
Long Statement,CastleTests,GenericListConvenrterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericListConvenrterTestCase.cs,Can_read_component_with_dictionary_of_lists,The length of the statement  "					<dictionary keyType=""System.Int32' mscorlib"" valueType=""System.Collections.Generic.IList`1[[System.String' mscorlib]]' mscorlib""> " is 133.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,No_resolvable_constructor_open_generic_component,The length of the statement  "			Container.Register(Component.For(typeof(IoC_141.IProcessor<>)).ImplementedBy(typeof(IoC_141.DefaultProcessor<>)).Named("processor")' " is 132.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,ReleasePolicy_tracking_the_same_instance_twice_with_transient_lifestyle_and_factory_method_suggests_different_lifestyle,The length of the statement  "					"Instance CastleTests.Components.ADisposable of component Late bound CastleTests.Components.A is already being tracked.{0}" + " is 125.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,ReleasePolicy_tracking_the_same_instance_twice_with_transient_lifestyle_and_factory_method_suggests_different_lifestyle,The length of the statement  "					"The factory method providing instances of the component is reusing instances' but the lifestyle of the component is Transient which requires new instance each time.{0}" + " is 171.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,ReleasePolicy_tracking_the_same_instance_twice_with_transient_lifestyle_and_factory_method_suggests_different_lifestyle,The length of the statement  "					"In most cases it is advised for the factory method not to be handling reuse of the instances' but to chose a lifestyle that does that appropriately.{0}" + " is 155.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,ReleasePolicy_tracking_the_same_instance_twice_with_transient_lifestyle_and_factory_method_suggests_different_lifestyle,The length of the statement  "					"Alternatively' if you do not wish for Windsor to track the objects coming from the factory change your registration to '.UsingFactoryMethod(yourFactory' managedExternally: true)'"' " is 181.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,Resolving_by_name_not_found_prints_helpful_message_zero_other_options_present,The length of the statement  "					"There are no components supporting requested service '{1}'. You need to register components in order to be able to use them."' " is 127.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,When_property_setter_throws_at_resolution_time_exception_suggests_disabling_setting_the_property,The length of the statement  "			var message = string.Format("Error setting property PropertySetterThrows.CommonService in component {1}. See inner exception for more information.{0}" + " is 152.
Long Statement,CastleTests,HelpfulExceptionsOnResolveTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HelpfulExceptionsOnResolveTestCase.cs,When_property_setter_throws_at_resolution_time_exception_suggests_disabling_setting_the_property,The length of the statement  "			                            "If you don't want Windsor to set this property you can do it by either decorating it with {2} or via registration API.{0}" + " is 125.
Long Statement,CastleTests,IsDefaultTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\IsDefaultTestCase.cs,Can_make_non_first_component_default_with_filter,The length of the statement  "			                   Component.For<IEmptyService' EmptyServiceB' object>().ImplementedBy<EmptyServiceB>().IsDefault(t => t.GetTypeInfo().IsInterface)); " is 130.
Long Statement,CastleTests,IsDefaultTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\IsDefaultTestCase.cs,Later_default_overrides_earlier_one,The length of the statement  "			Container.Register(Component.For<IEmptyService>().ImplementedBy<EmptyServiceA>().IsDefault(t => t.GetTypeInfo().IsInterface)' " is 125.
Long Statement,CastleTests,IsFallbackTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\IsFallbackTestCase.cs,Can_make_first_component_default_with_filter,The length of the statement  "			Container.Register(Component.For<IEmptyService' EmptyServiceA' object>().ImplementedBy<EmptyServiceA>().IsFallback(t => t.GetTypeInfo().IsInterface)' " is 149.
Long Statement,CastleTests,IsFallbackTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\IsFallbackTestCase.cs,Does_affect_order_when_using_ResolveAll,The length of the statement  "			Container.Register(Component.For<IEmptyService>().ImplementedBy<EmptyServiceA>().IsFallback(t => t.GetTypeInfo().IsInterface)' " is 126.
Long Statement,CastleTests,LazyComponentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LazyComponentsTestCase.cs,GetMode,The length of the statement  "			return (LazyThreadSafetyMode) lazy.GetType().GetProperty("Mode"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(lazy' null); " is 134.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,Resolve_all_when_dependency_is_missing_throws_DependencyResolverException,The length of the statement  "			Assert.Throws<DependencyResolverException>(() => Kernel.ResolveAll<C>(new Arguments { { "fakeDependency"' "Stefan!" } })); " is 122.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClassAsComponentImplementation_With_LifestyleType_And_Override_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClassAsComponentImplementation_With_LifestyleType_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClassAsComponentImplementation_With_Simple_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClass_With_LifestyleType_And_Override_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClass_With_LifestyleType_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ShouldNotRegisterAbstractClass_With_Simple_Signature,The length of the statement  "					"Type Castle.MicroKernel.Tests.ClassComponents.BaseCommonComponent is abstract.{0} As such' it is not possible to instansiate it as implementation of service 'abstract'. Did you forget to proxy it?"' " is 199.
Long Statement,CastleTests,PropertiesInspectionBehaviorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\PropertiesInspectionBehaviorTestCase.cs,InvalidOption,The length of the statement  "			var expectedMessage = "Error on properties inspection. Could not convert the inspectionBehavior attribute value into an expected enum value. Value found is 'Invalid' while possible values are 'Undefined' None' All' DeclaredOnly'"; " is 230.
Long Statement,CastleTests,RegistrationWithAttributeTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RegistrationWithAttributeTestCase.cs,Can_filter_types_based_on_custom_attribute_properties,The length of the statement  "			Container.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(Component.HasAttribute<UserAttribute>(u => u.Register))); " is 125.
Long Statement,CastleTests,ResolveAllTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveAllTestCase.cs,Exception_on_generic_constraint_violation_of_dependency_is_propagated_not_ignored,The length of the statement  "					"Generic component {0} has some generic dependencies which were not successfully closed. This often happens when generic implementation has some additional generic constraints. See inner exception for more details."' " is 216.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Arguments_as_Properties,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll<IDependencyWithManyImplementations>(Arguments.FromProperties(new { Dependency = new Dependency() }))); " is 149.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_Resolve_using_Type_and_Arguments_as_Properties,The length of the statement  "			Assert.DoesNotThrow(() => Container.Resolve(typeof(Service)' Arguments.FromProperties(new { Dependency = new Dependency() }))); " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Type_and_Arguments_as_Properties,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll(typeof(IDependencyWithManyImplementations)' Arguments.FromProperties(new { Dependency = new Dependency() }))); " is 157.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Type_and_Arguments_as_Dictionary,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll(typeof(IDependencyWithManyImplementations)' new Arguments().AddNamed(dictionary))); " is 130.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_Resolve_using_Arguments_as_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Arguments_as_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Arguments_as_ReadOnlyDictionary,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll<IDependencyWithManyImplementations>(new Arguments().AddNamed(readOnlyDictionary))); " is 130.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_Resolve_using_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_Resolve_using_Type_and_Arguments_as_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Type_and_Arguments_as_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Type_and_Arguments_as_ReadOnlyDictionary,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll(typeof(IDependencyWithManyImplementations)' new Arguments().AddNamed(readOnlyDictionary))); " is 138.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_Resolve_Type_and_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_Type_and_ReadOnlyDictionary,The length of the statement  "			IReadOnlyDictionary<string' object> readOnlyDictionary = new Dictionary<string' object> { { "dependency"' new Dependency() } }; " is 127.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Arguments_as_TypedComponents,The length of the statement  "			Assert.DoesNotThrow(() => Container.ResolveAll<IDependencyWithManyImplementations>(new Arguments().AddTyped(new Dependency()))); " is 128.
Long Statement,CastleTests,ResolveArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveArgumentsTestCase.cs,Can_ResolveAll_using_Type_and_Arguments_as_TypedComponents,The length of the statement  "			Assert.DoesNotThrow(() => Container.Resolve(typeof(IDependencyWithManyImplementations)' new Arguments().AddTyped(new Dependency()))); " is 133.
Long Statement,CastleTests,TestConventionsValidationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TestConventionsValidationTestCase.cs,All_Test_Cases_should_inherit_AbstractContainerTestCase,The length of the statement  "			var missingTestCases = testCases.Where(t => typeof(AbstractContainerTestCase).GetTypeInfo().IsAssignableFrom(t) == false).ToArray(); " is 132.
Long Statement,CastleTests,TestUtils,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TestUtils.cs,AssertNoFirstChanceExceptions,The length of the statement  "					message.Append("First-chance exception ").Append(i + 1).Append(" of ").Append(firstChanceExceptions.Count).AppendLine(":"); " is 123.
Long Statement,CastleTests,TypeNameConverterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypeNameConverterTestCase.cs,Throws_helpful_exception_when_assembly_found_but_not_type,The length of the statement  "				"Could not convert string '{0}' to a type. Assembly {1} was matched' but it doesn't contain the type. Make sure that the type name was not mistyped."' " is 150.
Long Statement,CastleTests,TypeNameConverterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypeNameConverterTestCase.cs,Throws_helpful_exception_when_assembly_specified_but_not_found,The length of the statement  "				"Could not convert string '{0}' to a type. Assembly was not found. Make sure it was deployed and the name was not mistyped."' " is 125.
Long Statement,CastleTests,TypeNameConverterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypeNameConverterTestCase.cs,Throws_helpful_exception_when_only_type_specified_but_not_found,The length of the statement  "				"Could not convert string '{0}' to a type. Make sure assembly containing the type has been loaded into the process' or consider specifying assembly qualified name of the type."' " is 177.
Long Statement,Castle.Windsor.Tests,CircularDependencyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CircularDependencyTestCase.cs,ThrowsACircularDependencyException2,The length of the statement  "					"Dependency cycle has been detected when trying to resolve component 'compA'.{0}The resolution tree that resulted in the cycle is the following:{0}Component 'compA' resolved as dependency of{0}	component 'compD' resolved as dependency of{0}	component 'compC' resolved as dependency of{0}	component 'compB' resolved as dependency of{0}	component 'compA' which is the root component being resolved.{0}"' " is 401.
Long Statement,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,MissingManifestResourceConfiguration,The length of the statement  "			Assert.Throws<ConfigurationProcessingException>(() => new XmlInterpreter(source).ProcessResource(source' store' kernel)); " is 121.
Long Statement,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxyWithLifecycle,The length of the statement  "			container.Register(Component.For(typeof(ICalcService)).ImplementedBy(typeof(CalculatorServiceWithLifecycle)).Named("key")); " is 123.
Long Statement,Castle.Windsor.Tests,XmlConfigStructureTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\XmlConfigStructureTestCase.cs,Invalid_nodes_are_reported_via_exception,The length of the statement  "				@"Configuration parser encountered <aze>' but it was expecting to find <installers>' <facilities> or <components>. There might be either a typo on <aze> or you might have forgotten to nest it properly."; " is 203.
Long Statement,Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111,FACILITIES_ISSUE_111,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\FACILITIES-ISSUE-111\FACILITIES_ISSUE_111.cs,Setup,The length of the statement  "		<!--<component id=""ServiceB"" type=""StartableFacilityTest.B' StartableFacilityTest"" service=""StartableFacilityTest.IB' StartableFacilityTest"" />--> " is 152.
Long Statement,Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111,FACILITIES_ISSUE_111,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\FACILITIES-ISSUE-111\FACILITIES_ISSUE_111.cs,Setup,The length of the statement  "		<component id=""ServiceA"" type=""Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111.Components.A_Facilities_Issue_111' Castle.Windsor.Tests"" service=""Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111.Components.IA_Facilities_Issue_111' Castle.Windsor.Tests""> " is 255.
Long Statement,Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111,FACILITIES_ISSUE_111,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\FACILITIES-ISSUE-111\FACILITIES_ISSUE_111.cs,Setup,The length of the statement  "		<component id=""ServiceB"" type=""Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111.Components.B_Facilities_Issue_111' Castle.Windsor.Tests"" service=""Castle.Windsor.Tests.Bugs.FACILITIES_ISSUE_111.Components.IB_Facilities_Issue_111' Castle.Windsor.Tests"" /> " is 257.
Long Statement,Castle.Bugs,IoC_267,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\IoC-267.cs,When_attemting_to_register_component_descended_from_valuetype_should_not_compile,The length of the statement  "			var results = compiler.CompileAssemblyFromSource(new CompilerParameters(new[] { coreAssembly' windsorAssembly })' csharpCode); " is 126.
Long Statement,Castle.Bugs,IoC_267,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\IoC-267.cs,When_attemting_to_register_component_descended_from_valuetype_should_not_compile,The length of the statement  "			// The type 'int' must be a reference type in order to use it as parameter 'S' in the generic type or method 'Castle.MicroKernel.Registration.Component.For<S>()' " is 161.
Long Statement,Castle,ClassInheritanceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ClassInheritanceTestCase.cs,Can_proxy_class_service_impl_explicitly,The length of the statement  "			Container.Register(Component.For<JohnChild>().ImplementedBy<JohnChild>().LifeStyle.Transient.Interceptors<CountingInterceptor>()); " is 130.
Long Statement,Castle,ClassInheritanceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ClassInheritanceTestCase.cs,Can_proxy_class_service_with_inherited_implementation,The length of the statement  "			Container.Register(Component.For<JohnParent>().ImplementedBy<JohnChild>().LifeStyle.Transient.Interceptors<CountingInterceptor>()); " is 131.
Long Statement,Castle,ClassInheritanceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ClassInheritanceTestCase.cs,Can_proxy_multiple_class_services_and_interfaces_incl_generic_with_inherited_implementation,The length of the statement  "			Container.Register(Component.For<IGeneric<IEmployee>' JohnParent' IEmptyService' JohnGrandparent>().ImplementedBy(typeof(JohnChild)) " is 132.
Long Statement,Castle,ClassInheritanceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ClassInheritanceTestCase.cs,Can_proxy_multiple_class_services_with_inherited_implementation,The length of the statement  "			Container.Register(Component.For<JohnParent' JohnGrandparent>().ImplementedBy<JohnChild>().LifeStyle.Transient.Interceptors<CountingInterceptor>()); " is 148.
Long Statement,Castle.Windsor.Tests.Configuration2,ConfigurationInstallersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\ConfigurationInstallersTestCase.cs,Installers_by_assembly,The length of the statement  "			var container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/config_with_installers_assembly.xml")); " is 123.
Long Statement,Castle.Windsor.Tests.Configuration2,EvalSupportTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\EvalSupportTestCase.cs,AssertBaseDirectoryIsCorrectlyEvaluated,The length of the statement  "			var container = new WindsorContainer(new XmlInterpreter(ConfigHelper.ResolveConfigPath("Configuration2/eval_config.xml"))' new CustomEnv(true)); " is 144.
Long Statement,Castle.Windsor.Tests.Configuration2,SynchronizationProblemTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\SynchronizationProblemTestCase.cs,Init,The length of the statement  "			container = new WindsorContainer(new XmlInterpreter(ConfigHelper.ResolveConfigPath("Configuration2/synchtest_config.xml"))); " is 124.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,CorrectEval,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_properties.xml")); " is 121.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,MissingProperties,The length of the statement  "				container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_missing_properties.xml"))); " is 130.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,PropertiesAndDefines,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_properties_and_defines.xml")); " is 133.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,PropertiesAndDefines2,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_properties_and_defines2.xml")); " is 134.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,PropertiesAndIncludes,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_properties_and_includes.xml")); " is 134.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,PropertiesWithinProperties,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/properties_using_properties.xml")); " is 126.
Long Statement,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,SilentProperties,The length of the statement  "			container = new WindsorContainer(ConfigHelper.ResolveConfigPath("Configuration2/Properties/config_with_silent_properties.xml")); " is 128.
Long Statement,CastleTests.Config,ConfigTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigTestCase.cs,Can_split_configuration_between_multiple_component_elements,The length of the statement  "			// see http://stackoverflow.com/questions/3253975/castle-windsor-with-xml-includes-customization-problem for real life scenario " is 127.
Long Statement,CastleTests.Config,ConfigTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigTestCase.cs,Can_split_configuration_between_multiple_component_elements,The length of the statement  "			Container.Install(Configuration.FromXmlFile(ConfigHelper.ResolveConfigPath("Configuration/OneComponentInTwoPieces.xml"))); " is 122.
Long Statement,CastleTests.ContainerExtensions,GoodDependencyResolver,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ContainerExtensions\GoodDependencyResolver.cs,CanResolve,The length of the statement  "			return dependency.TargetType == typeof(IBookStore) && contextHandlerResolver.CanResolve(context' contextHandlerResolver' model' " is 127.
Long Statement,Castle.MicroKernel.Tests,DecoratorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DecoratorsTestCase.cs,Will_give_good_error_message_if_cannot_resolve_service_that_is_likely_decorated,The length of the statement  "					"Can't create component 'Castle.MicroKernel.Tests.ClassComponents.Repository1' as it has dependencies to be satisfied.{0}{0}'Castle.MicroKernel.Tests.ClassComponents.Repository1' is waiting for the following dependencies:{0}- Service 'Castle.MicroKernel.Tests.ClassComponents.IRepository' which points back to the component itself.{0}A dependency cannot be satisfied by the component itself' did you forget to make this a service override and point explicitly to a different component exposing this service?{0}{0}The following components also expose the service' but none of them can be resolved:{0}'Castle.MicroKernel.Tests.ClassComponents.DecoratedRepository2' is waiting for the following dependencies:{0}- Parameter 'name' which was not provided. Did you forget to set the dependency?{0}"' " is 793.
Long Statement,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,AssertDependencies,The length of the statement  "			Assert.AreSame(dependencies["cc"]' compb.Compc' "CompC property should be the same instnace as in the hashtable argument"); " is 123.
Long Statement,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,Missing_service_is_correctly_detected,The length of the statement  "					"Missing dependency.{0}Component compb has a dependency on Castle.MicroKernel.Tests.RuntimeParameters.CompC' which could not be resolved.{0}Make sure the dependency is correctly registered in the container as a service' or provided as inline argument."' " is 253.
Long Statement,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,WithoutParameters,The length of the statement  "					"Can't create component 'compb' as it has dependencies to be satisfied.{0}{0}'compb' is waiting for the following dependencies:{0}- Service 'Castle.MicroKernel.Tests.RuntimeParameters.CompC' which was not registered.{0}- Parameter 'myArgument' which was not provided. Did you forget to set the dependency?{0}"' " is 310.
Long Statement,Castle.MicroKernel.Tests,UnsatisfiedDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\UnsatisfiedDependenciesTestCase.cs,OverrideIsForcedDependency,The length of the statement  "					"Can't create component 'key' as it has dependencies to be satisfied.{0}{0}'key' is waiting for the following dependencies:{0}- Component 'common2' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 398.
Long Statement,Castle.MicroKernel.Tests,UnsatisfiedDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\UnsatisfiedDependenciesTestCase.cs,UnsatisfiedConfigValues,The length of the statement  "					"Can't create component 'key' as it has dependencies to be satisfied.{0}{0}'key' is waiting for the following dependencies:{0}- Parameter 'name' which was not provided. Did you forget to set the dependency?{0}- Parameter 'address' which was not provided. Did you forget to set the dependency?{0}- Parameter 'age' which was not provided. Did you forget to set the dependency?{0}"' " is 379.
Long Statement,Castle.MicroKernel.Tests,UnsatisfiedDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\UnsatisfiedDependenciesTestCase.cs,UnsatisfiedOverride,The length of the statement  "					"Can't create component 'key' as it has dependencies to be satisfied.{0}{0}'key' is waiting for the following dependencies:{0}- Component 'common2' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 398.
Long Statement,CastleTests.Facilities,FacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\FacilityTestCase.cs,Cant_have_two_instances_of_any_facility_type,The length of the statement  "				"Facility of type 'Castle.Facilities.Startable.StartableFacility' has already been registered with the container. Only one facility of a given type can exist in the container."' " is 177.
Long Statement,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Func_delegate_with_duplicated_Parameter_types_throws_exception,The length of the statement  "				"Factory delegate System.Func`3[System.String'System.String'Castle.Windsor.Tests.Facilities.TypedFactory.Delegates.Bar] has duplicated arguments of type System.String. " + " is 171.
Long Statement,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Func_delegate_with_duplicated_Parameter_types_throws_exception,The length of the statement  "				"Using generic purpose delegates with duplicated argument types is unsupported' because then it is not possible to match arguments properly. " + " is 144.
Long Statement,CastleTests.Installer,FromAssemblyInstallersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Installer\FromAssemblyInstallersTestCase.cs,Can_install_from_assembly_by_application,The length of the statement  "			Container.Install(FromAssembly.InThisApplication(GetCurrentAssembly()' new FilterAssembliesInstallerFactory(t => t.GetTypeInfo().Assembly != typeof(IWindsorInstaller).GetTypeInfo().Assembly))); " is 193.
Long Statement,CastleTests.Lifestyle,LifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\LifestyleManagerTestCase.cs,ScopeRoot,The length of the statement  "			return Property.ForKey(HandlerExtensionsUtil.ResolveExtensionsKey).Eq(new IResolveExtension[] { new CustomLifestyle_Scope() }); " is 127.
Long Statement,CastleTests.Lifestyle,ScopedLifestyleExplicitAndMultipleAppDomainsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\ScopedLifestyleExplicitAndMultipleAppDomainsTestCase.cs,CreateAnotherAppDomain,The length of the statement  "			return AppDomain.CreateDomain("Another"' null' new AppDomainSetup {ApplicationBase = AppDomain.CurrentDomain.BaseDirectory}); " is 125.
Long Statement,CastleTests.Lifestyle,BoundLifestyleAndTypedFactoriesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\ScopedLifestyleImplicitGraphScopingAndTypedFactoriesTestCase.cs,Scoped_component_via_factory_two_roots_but_factory_invoked_by_yet_another_object,The length of the statement  "			Assert.Inconclusive("Not even sure what to assert here... What a sane person might expect other than this not being supported"); " is 128.
Long Statement,Castle.Facilities.Logging.Tests,ConsoleFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ConsoleFacilityTestCase.cs,SimpleTest,The length of the statement  "			String expectedLogOutput = String.Format("[Info] '{0}' Hello world" + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 132.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,SimpleTest,The length of the statement  "			String expectedLogOutput = String.Format("[INFO ] [{0}] - Hello world" + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 135.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,SimpleTest,The length of the statement  "			smtpServer.InternalSend("rbellamy@pteradigm.com"' "jobs@castlestronghold.com"' "We're looking for a few good porgrammars."); " is 124.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,SimpleTest,The length of the statement  "			expectedLogOutput = String.Format("[DEBUG] [Castle.Facilities.Logging.Tests.Classes.SmtpServer] - Stopped" + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 171.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,ContextTest,The length of the statement  "			var expectedLogOutput = String.Format("[DEBUG] [Castle.Facilities.Logging.Tests.Classes.ComplexLoggingComponent] [Outside Inside0] [bar] [flam] - Bim' bam boom." + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 226.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,ContextTest,The length of the statement  "			var patternLayout = new PatternLayout("[%-5level] [%logger] [%properties{NDC}] [%properties{foo}] [%properties{flim}] - %message%newline"); " is 139.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedNLogFacilityTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedNLogFacilityTests.cs,SimpleTest,The length of the statement  "			smtpServer.InternalSend("rbellamy@pteradigm.com"' "jobs@castlestronghold.com"' "We're looking for a few good porgrammars."); " is 124.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedNLogFacilityTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedNLogFacilityTests.cs,SimpleTest,The length of the statement  "			expectedLogOutput = String.Format("|INFO|{0}|InternalSend rbellamy@pteradigm.com jobs@castlestronghold.com We're looking for a few good porgrammars."' typeof(SmtpServer).FullName); " is 180.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedNLogFacilityTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedNLogFacilityTests.cs,ContextTest,The length of the statement  "			String expectedLogOutput = String.Format("|DEBUG|{0}|flam|bar|Outside Inside0|Bim' bam boom."' typeof(ComplexLoggingComponent).FullName); " is 137.
Long Statement,Castle.Facilities.Logging.Tests,ExtendedNLogFacilityTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedNLogFacilityTests.cs,ContextTest,The length of the statement  "			String actualLogOutput = (NLog.LogManager.Configuration.FindTargetByName("memory1") as MemoryTarget).Logs[0].ToString(); " is 120.
Long Statement,Castle.Facilities.Logging.Tests,Log4NetFacilityLognameOverrideTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\Log4NetFacilityLognameOverrideTests.cs,OverrideTest,The length of the statement  "			String expectedLogOutput = String.Format("[INFO ] [Override.{0}] - Hello world" + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 144.
Long Statement,Castle.Facilities.Logging.Tests,Log4NetFacilityTests,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\Log4NetFacilityTests.cs,SimpleTest,The length of the statement  "			String expectedLogOutput = String.Format("[INFO ] [{0}] - Hello world" + Environment.NewLine' typeof(SimpleLoggingComponent).FullName); " is 135.
Long Statement,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,Missing_dependency_on_hook_statically_detected,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Component 'Castle.ProxyInfrastructure.ProxyNothingHook' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 434.
Long Statement,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,Missing_dependency_on_mixin_statically_detected,The length of the statement  "				"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Component '{2}' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 394.
Long Statement,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,Missing_dependency_on_selector_statically_detected,The length of the statement  "				"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Component 'Castle.Windsor.Tests.Interceptors.DummyInterceptorSelector' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 449.
Long Statement,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Missing_interceptor_by_name_throws_corrent_exception,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Component 'fooInterceptor' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 405.
Long Statement,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Missing_interceptor_by_type_throws_corrent_exception,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Component '{2}' (via override) which was not found. Did you forget to register it or misspelled the name? If the component is registered and override is via type make sure it doesn't have non-default name assigned explicitly or override the dependency via name.{0}"' " is 394.
Long Statement,CastleTests.Proxies,MixinDependencyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\MixinDependencyTestCase.cs,Bound_mixin_reused_as_implicit_and_explicit_dependency_chain,The length of the statement  "			var outerMixin = ((outerProxy as IProxyTargetAccessor).GetInterceptors()[0] as CollectInvocationsInterceptor).Invocations[0].InvocationTarget; " is 142.
Long Statement,CastleTests.Proxies,MixinDependencyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\MixinDependencyTestCase.cs,Bound_mixin_reused_as_implicit_and_explicit_dependency_chain,The length of the statement  "			var innerMixin = ((innerProxy as IProxyTargetAccessor).GetInterceptors()[0] as CollectInvocationsInterceptor).Invocations[0].InvocationTarget; " is 142.
Long Statement,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_types,The length of the statement  "					.DependsOn(Dependency.OnComponentCollection(typeof(ICollection<IEmptyService>)' typeof(EmptyServiceB)' typeof(EmptyServiceA)))); " is 128.
Long Statement,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_types_generic,The length of the statement  "					.DependsOn(Dependency.OnComponentCollection<ICollection<IEmptyService>>(typeof(EmptyServiceB)' typeof(EmptyServiceA)))); " is 120.
Long Statement,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,ServiceOverrides_works_via_DependsOn_typed_key_Named_value_on_open_generic_type,The length of the statement  "				Component.For(typeof(IGeneric<>)).ImplementedBy(typeof(GenericImpl3<>)).DependsOn(Property.ForKey<IEmptyService>().Is("B"))); " is 125.
Long Statement,CastleTests.Registration,UsingFactoryMethodTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\UsingFactoryMethodTestCase.cs,Can_properly_resolve_component_from_UsingFactoryMethod_with_kernel_with_context,The length of the statement  "			var carProvider = Kernel.Resolve<ICarProvider>(new Arguments().AddNamed("FiscalStability"' FiscalStability.MrMoneyBags)); " is 121.
Long Statement,CastleTests.Registration,UsingFactoryMethodTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\UsingFactoryMethodTestCase.cs,Factories_returning_proxies_with_no_target_are_not_supported,The length of the statement  "			Container.Register(Component.For<ICameraService>().UsingFactoryMethod(() => generator.CreateInterfaceProxyWithoutTarget<ICameraService>())); " is 140.
Long Statement,CastleTests.Registration,UsingFactoryMethodTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\UsingFactoryMethodTestCase.cs,Factories_returning_proxies_with_no_target_are_not_supported,The length of the statement  "			Assert.AreEqual(@"Can not apply commission concerns to component Late bound CastleTests.Components.ICameraService because it appears to be a target-less proxy. Currently those are not supported."' " is 196.
Long Statement,CastleTests.Registration,UsingFactoryMethodTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\UsingFactoryMethodTestCase.cs,Proxying_type_with_no_default_ctor_throws_helpful_message,The length of the statement  "				"Can not instantiate proxy of class: Castle.MicroKernel.Tests.Configuration.Components.ClassWithConstructors." + Environment.NewLine + " is 134.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,AllInterfaces_uses_all_implemented_interfaces,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(TwoInterfacesImpl)).WithService.AllInterfaces()); " is 131.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,AllInterfaces_uses_single_interface,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(CommonImpl1)).WithService.AllInterfaces()); " is 125.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,DefaultInterface_can_match_multiple_types,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(CommonSub1Impl)).WithService.DefaultInterfaces()); " is 132.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,DefaultInterface_ignores_not_matched_interfaces,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(CommonSub2Impl)).WithService.DefaultInterfaces()); " is 132.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,DefaultInterface_ignores_on_no_interface_matched,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(TwoInterfacesImpl)).WithService.DefaultInterfaces()); " is 135.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,DefaultInterface_matches_by_type_name,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(CommonImpl1)).WithService.DefaultInterfaces()); " is 129.
Long Statement,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,FirstInterface_uses_single_interface,The length of the statement  "			Kernel.Register(Classes.FromAssembly(GetCurrentAssembly()).Where(t => t == typeof(CommonImpl1)).WithService.FirstInterface()); " is 126.
Long Statement,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_WhichIsNull_ThrowsNullArgumentException,The length of the statement  "			Assert.Throws<ArgumentNullException>(() => Kernel.Register(Component.For(Type.GetType("NonExistentType' WohooAssembly")))); " is 123.
Long Statement,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_WithSameName_ThrowsException,The length of the statement  "			var expectedMessage = "Component customer could not be registered. There is already a component with that name. Did you want to modify the existing component instead? If not' make sure you specify a unique name."; " is 213.
Long Statement,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_WithImplementationAlreadyAssigned_ThrowsException,The length of the statement  "			var expectedMessage = "This component has already been assigned implementation Castle.MicroKernel.Tests.ClassComponents.CustomerImpl"; " is 134.
Long Statement,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,ArrayResolution_UnresolvableDependencyCausesResolutionFailure,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Service '{2}' which was not registered.{0}- Parameter 'str' which was not provided. Did you forget to set the dependency?{0}"' " is 254.
Long Statement,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,ArrayResolution_UnresolvableDependencyCausesResolutionFailure_ServiceConstructor,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Service '{2}' which was not registered.{0}- Service '{3}' which was not registered.{0}"' " is 216.
Long Statement,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,ArrayResolution_UnresolvableDependencyIsNotIncluded,The length of the statement  "					"Can't create component '{1}' as it has dependencies to be satisfied.{0}{0}'{1}' is waiting for the following dependencies:{0}- Service '{2}' which was not registered.{0}"' " is 172.
Long Statement,CastleTests.SubContainers,SubContainersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubContainers\SubContainersTestCase.cs,AddChildKernelToTwoParentsThrowsException,The length of the statement  "			var expectedMessage = "You can not change the kernel parent once set' use the RemoveChildKernel and AddChildKernel methods together to achieve this."; " is 150.
Long Statement,CastleTests.Windsor.Tests,GenericVarianceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\GenericVarianceTestCase.cs,ResolveAll_can_resolve_contravariant_components,The length of the statement  "			Container.Register(Component.For<IAmContravariant<EmptyBase>' IAmContravariant<EmptySub1>>().ImplementedBy<ContravariantBase>()' " is 128.
Long Statement,CastleTests.Windsor.Tests,MultiServiceGenericComponentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\MultiServiceGenericComponentsTestCase.cs,Open_generic_component_with_generic_and_non_generic_service__generic_first_resolve_by_key_Object_throws_friendly_message,The length of the statement  "					"Requested type System.Object has 0 generic parameter(s)' whereas component implementation type Castle.Generics.Repository`1[T] requires 1.{0}This means that Windsor does not have enough information to properly create that component for you.{0}You can instruct Windsor which types it should use to close this generic component by supplying an implementation of IGenericImplementationMatchingStrategy.{0}Please consult the documentation for examples of how to do that."' " is 469.
Long Statement,CastleTests.Windsor.Tests,MultiServiceGenericComponentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\MultiServiceGenericComponentsTestCase.cs,Open_generic_component_with_generic_and_non_generic_service__generic_first_resolve_by_key_non_generic_throws_friendly_message,The length of the statement  "					"Requested type Castle.Generics.IRepository has 0 generic parameter(s)' whereas component implementation type Castle.Generics.Repository`1[T] requires 1.{0}This means that Windsor does not have enough information to properly create that component for you.{0}You can instruct Windsor which types it should use to close this generic component by supplying an implementation of IGenericImplementationMatchingStrategy.{0}Please consult the documentation for examples of how to do that."' " is 483.
Long Statement,CastleTests.Windsor.Tests,OpenGenericConstructorSelectionTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\OpenGenericConstructorSelectionTestCase.cs,Resolves_using_most_greedy_constructor_when_having_open_generic_container_registrations_with_inferred_generic_parameters,The length of the statement  "			Container.Register(Component.For(typeof(IClosedGenericArrayList<ArrayList>)).ImplementedBy(typeof(ClosedGenericArrayList))); " is 124.
Magic Number,CastleTests,ContainerAndGenericsInCodeTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ContainerAndGenericsInCodeTestCase.cs,Can_intercept_open_generic_components,The following statement contains a magic number: demoRepository.Get(12);
Magic Number,CastleTests,ContainerAndGenericsInCodeTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ContainerAndGenericsInCodeTestCase.cs,Can_intercept_open_generic_components,The following statement contains a magic number: Assert.AreEqual(12' CollectInterceptedIdInterceptor.InterceptedId'  			                "invocation should have been intercepted by MyInterceptor");
Magic Number,CastleTests,CreatingContainerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CreatingContainerTestCase.cs,With_configuration_file,The following statement contains a magic number: Assert.AreEqual(2' container.Kernel.GetFacilities().Length);
Magic Number,CastleTests,CreatingContainerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CreatingContainerTestCase.cs,With_configuration_file_relative,The following statement contains a magic number: Assert.AreEqual(2' container.Kernel.GetFacilities().Length);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Converting_numbers_uses_oridinal_culture,The following statement contains a magic number: Assert.AreEqual(123.456m' result);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionInt,The following statement contains a magic number: Assert.AreEqual(100' converter.PerformConversion("100"' typeof(int)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionInt,The following statement contains a magic number: Assert.AreEqual(1234' converter.PerformConversion("1234"' typeof(int)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionList,The following statement contains a magic number: Assert.AreEqual("third"' list[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Dictionary,The following statement contains a magic number: Assert.AreEqual(40' dict[4]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Dictionary,The following statement contains a magic number: Assert.AreEqual(40' dict[4]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Dictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(2005' 12' 1)' dict[new DateTime(2000' 1' 1)]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Dictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(2005' 12' 1)' dict[new DateTime(2000' 1' 1)]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Dictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(2005' 12' 1)' dict[new DateTime(2000' 1' 1)]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,DictionaryWithDifferentValueTypes,The following statement contains a magic number: Assert.AreEqual(123' dict["intentry"]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,DictionaryWithDifferentValueTypes,The following statement contains a magic number: Assert.AreEqual(400' values[0]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericPerformConversionList,The following statement contains a magic number: Assert.AreEqual(345L' list[0]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericPerformConversionList,The following statement contains a magic number: Assert.AreEqual(3147L' list[1]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericPerformConversionList,The following statement contains a magic number: Assert.AreEqual(997L' list[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericPerformConversionList,The following statement contains a magic number: Assert.AreEqual(997L' list[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,ListOfLongGuessingType,The following statement contains a magic number: Assert.AreEqual(345L' list[0]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,ListOfLongGuessingType,The following statement contains a magic number: Assert.AreEqual(3147L' list[1]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,ListOfLongGuessingType,The following statement contains a magic number: Assert.AreEqual(997L' list[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,ListOfLongGuessingType,The following statement contains a magic number: Assert.AreEqual(997L' list[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericDictionary,The following statement contains a magic number: Assert.AreEqual(2' dict["key2"]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,GenericDictionary,The following statement contains a magic number: Assert.AreEqual(3' dict["key3"]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,Array,The following statement contains a magic number: Assert.AreEqual("third"' array[2]);
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromDays(14)' converter.PerformConversion("14"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 1' 2' 3)' converter.PerformConversion("1:2:3"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 1' 2' 3)' converter.PerformConversion("1:2:3"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 0' 0' 0' 250)' converter.PerformConversion("0:0:0.250"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(10' 20' 30' 40' 500)'  			                converter.PerformConversion("10.20:30:40.50"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(10' 20' 30' 40' 500)'  			                converter.PerformConversion("10.20:30:40.50"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(10' 20' 30' 40' 500)'  			                converter.PerformConversion("10.20:30:40.50"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(10' 20' 30' 40' 500)'  			                converter.PerformConversion("10.20:30:40.50"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultConversionManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultConversionManagerTestCase.cs,PerformConversionTimeSpan,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(10' 20' 30' 40' 500)'  			                converter.PerformConversion("10.20:30:40.50"' typeof(TimeSpan)));
Magic Number,CastleTests,DefaultDependnecyResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultDependnecyResolverTestCase.cs,ResolvingPrimitivesThroughProperties,The following statement contains a magic number: Assert.AreEqual(25' customer.Age);
Magic Number,CastleTests,DefaultValueTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultValueTestCase.cs,Uses_ctor_with_explicit_dependency_when_equally_greedy_as_default_2,The following statement contains a magic number: Container.Register(Component.For<TwoCtorsWithDefaultValue>().DependsOn(Property.ForKey("age").Eq(123)));
Magic Number,CastleTests,DefaultValueTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DefaultValueTestCase.cs,Uses_ctor_with_explicit_dependency_when_equally_greedy_as_default_2,The following statement contains a magic number: Assert.AreEqual(123' value.Age);
Magic Number,CastleTests,GenericResolutionDeadlockTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GenericResolutionDeadlockTestCase.cs,No_deadlock_upon_resolving_complex_generic_types_on_multiple_threads,The following statement contains a magic number: !t1.Join(3000)
Magic Number,CastleTests,HandlerFilterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HandlerFilterTestCase.cs,Filter_gets_all_assignable_handlers_not_exiplicitly_registered_for_given_service,The following statement contains a magic number: Assert.AreEqual(5' instances.Length);
Magic Number,CastleTests,HandlerFilterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HandlerFilterTestCase.cs,Filter_gets_open_generic_handlers_when_generic_service_requested,The following statement contains a magic number: Assert.AreEqual(2' filter.HandlersAsked.Length);
Magic Number,CastleTests,HandlerFilterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HandlerFilterTestCase.cs,HandlerFiltersPrioritizationAndOrderingIsRespected,The following statement contains a magic number: Assert.That(instances' Has.Length.EqualTo(4));
Magic Number,CastleTests,LazyComponentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LazyComponentsTestCase.cs,Can_pull_lazy_via_ResolveAll,The following statement contains a magic number: Assert.AreEqual(2' all.Length);
Magic Number,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,AdditionalParametersShouldNotBePropagatedInTheDependencyChain,The following statement contains a magic number: Assert.AreEqual(18' customer.Age);
Magic Number,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ResolveAll,The following statement contains a magic number: Assert.AreEqual(2' services.Length);
Magic Number,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ResolveAll_does_handle_multi_service_components,The following statement contains a magic number: Assert.AreEqual(2' services.Length);
Magic Number,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ResolveUsingAddionalParametersForConfigurationInsteadOfServices,The following statement contains a magic number: Assert.AreEqual(18' customer.Age);
Magic Number,CastleTests,MicroKernelTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernelTestCase.cs,ResolveViaGenerics,The following statement contains a magic number: var dictionary = new Arguments {  				{ "name"' "customer2Name" }'  				{ "address"' "customer2Address" }'  				{ "age"' 18 }  			};
Magic Number,CastleTests,OpenGenericsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\OpenGenericsTestCase.cs,Open_generic_handlers_get_included_when_generic_service_requested,The following statement contains a magic number: Assert.AreEqual(2' items.Length);
Magic Number,CastleTests,PropertiesInspectionBehaviorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\PropertiesInspectionBehaviorTestCase.cs,PropertiesInspectionTestCase,The following statement contains a magic number: Assert.AreEqual(2' comp.Prop3);
Magic Number,CastleTests,PropertiesInspectionBehaviorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\PropertiesInspectionBehaviorTestCase.cs,PropertiesInspectionTestCase,The following statement contains a magic number: Assert.AreEqual(2' comp.Prop3);
Magic Number,CastleTests,PropertyDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\PropertyDependenciesTestCase.cs,Can_opt_out_of_setting_properties_open_generic_via_enum,The following statement contains a magic number: Container.Register(Component.For(typeof(GenericImpl2<>))  				                   .DependsOn(Dependency.OnValue(typeof(int)' 5))  				                   .Properties(PropertyFilter.IgnoreAll));
Magic Number,CastleTests,PropertyDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\PropertyDependenciesTestCase.cs,Can_opt_out_of_setting_properties_open_generic_via_predicate,The following statement contains a magic number: Container.Register(Component.For(typeof(GenericImpl2<>))  				                   .DependsOn(Dependency.OnValue(typeof(int)' 5))  				                   .PropertiesIgnore(p => true));
Magic Number,CastleTests,ResolveAllTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveAllTestCase.cs,Can_resolve_more_than_single_component_for_service,The following statement contains a magic number: Assert.AreEqual(2' clocks.Length);
Magic Number,CastleTests,ResolveAllTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveAllTestCase.cs,Can_use_mutliResolve_with_generic_Specialization,The following statement contains a magic number: Assert.AreEqual(2' repositories.Length);
Magic Number,CastleTests,ResolveAllTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveAllTestCase.cs,ResolveAll_honors_order_and_kinf_of_registration,The following statement contains a magic number: Assert.IsInstanceOf<EmptyServiceB>(clocks[2]);
Magic Number,CastleTests,ResolveAllTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ResolveAllTestCase.cs,ResolveAll_honors_order_and_kinf_of_registration,The following statement contains a magic number: Assert.IsInstanceOf<EmptyServiceA>(clocks[2]);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_mix_typed_arguments_with_named,The following statement contains a magic number: var arguments = new Arguments {  				{ "arg1"' "foo" }'  				{ typeof(int)' 2 }  			};
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_mix_typed_arguments_with_named,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_named_arguments_take_precedense_over_typed,The following statement contains a magic number: var arguments = new Arguments {  				{ "arg1"' "named" }'  				{ typeof(string)' "typed" }'  				{ typeof(int)' 2 }  			};
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_named_arguments_take_precedense_over_typed,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_resolve_component_with_typed_arguments,The following statement contains a magic number: var arguments = new Arguments {  				{ typeof(string)' "foo" }'  				{ typeof(int)' 2 }  			};
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Can_resolve_component_with_typed_arguments,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_DynamicParameters,The following statement contains a magic number: Kernel.Register(Component.For<ClassWithArguments>().DynamicParameters((k' d) => d.AddTyped("typed").AddTyped(2)));
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_DynamicParameters,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_DynamicParameters_mixed,The following statement contains a magic number: var arguments = new Arguments {  				{ typeof(int)' 2 }  			};
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_DynamicParameters_mixed,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_InLine_Parameters,The following statement contains a magic number: Kernel.Register(Component.For<ClassWithArguments>()  				.DependsOn(  					Property.ForKey<string>().Eq("typed")'  					Property.ForKey<int>().Eq(2)));
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_InLine_Parameters,The following statement contains a magic number: Assert.AreEqual(2' item.Arg2);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_open_generic_ServiceOverrides_closed_service_preferred_over_open_service,The following statement contains a magic number: Kernel.Register(  				Component.For(typeof(IGeneric<>)).ImplementedBy(typeof(GenericImpl1<>)).Named("default")'  				Component.For(typeof(IGeneric<>)).ImplementedBy(typeof(GenericImpl2<>)).Named("non-default-open")  					.DependsOn(Property.ForKey("value").Eq(1))'  				Component.For(typeof(IGeneric<>)).ImplementedBy(typeof(GenericImpl2<>)).Named("non-default-int")  					.DependsOn(Property.ForKey("value").Eq(2))'  				Component.For(typeof(UsesIGeneric<>))  					.DependsOn(ServiceOverride.ForKey(typeof(IGeneric<>)).Eq("non-default-open")'  					           ServiceOverride.ForKey(typeof(IGeneric<int>)).Eq("non-default-int"))  				);
Magic Number,CastleTests,TypedParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\TypedParametersTestCase.cs,Typed_arguments_work_for_open_generic_ServiceOverrides_closed_service_preferred_over_open_service,The following statement contains a magic number: Assert.AreEqual(2' (withInt.Dependency as GenericImpl2<int>).Value);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetFacilities().Length);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetComponents().Length);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetConfigurationForChildContainers().Length);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperManifestDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetFacilities().Length);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperManifestDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetComponents().Length);
Magic Number,Castle.Windsor.Tests,ConfigXmlInterpreterTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigXmlInterpreterTestCase.cs,ProperManifestDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetConfigurationForChildContainers().Length);
Magic Number,Castle.Windsor.Tests,CustomActivatorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CustomActivatorTestCase.cs,Can_resolve_component_with_primitive_dependency_via_factory,The following statement contains a magic number: kernel.Register(  				Component.For<ClassWithPrimitiveDependency>()  					.UsingFactoryMethod(() => new ClassWithPrimitiveDependency(2)));
Magic Number,Castle.Windsor.Tests,CustomActivatorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CustomActivatorTestCase.cs,Can_resolve_component_with_primitive_dependency_via_instance,The following statement contains a magic number: kernel.Register(  				Component.For<ClassWithPrimitiveDependency>()  					.Instance(new ClassWithPrimitiveDependency(2)));
Magic Number,Castle.Windsor.Tests,ClassWithPrimitiveDependencyFactory,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CustomActivatorTestCase.cs,Create,The following statement contains a magic number: return new ClassWithPrimitiveDependency(2);
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected1 = new[] { 1' 2' 4' 3 };
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected1 = new[] { 1' 2' 4' 3 };
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected1 = new[] { 1' 2' 4' 3 };
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected2 = new[] { 4' 1' 2' 3 };
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected2 = new[] { 4' 1' 2' 3 };
Magic Number,Castle.Windsor.Tests,DisposeOrderTestFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\DisposeOrderTestFixture.cs,Dictionary_enumerates_from_oldest_to_latest,The following statement contains a magic number: var expected2 = new[] { 4' 1' 2' 3 };
Magic Number,Castle.Windsor.Tests,HandlerExtensionsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\HandlerExtensionsTestCase.cs,Can_proceed_and_inspect_returned_value,The following statement contains a magic number: Assert.AreEqual(2' collector.ResolvedItems.Count);
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxyWithLifecycle,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxyWithLifecycle,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,InterfaceProxyWithLifecycle,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_validComponent_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_validComponent_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_validComponent_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_multiple_interceptors_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(10' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_multiple_interceptors_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(10' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_multiple_interceptors_resolves_correctly,The following statement contains a magic number: Assert.AreEqual(10' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_hook_and_selector,The following statement contains a magic number: service.Sum(2' 2);
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Xml_hook_and_selector,The following statement contains a magic number: service.Sum(2' 2);
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OnBehalfOfTest,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OnBehalfOfTest,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OnBehalfOfTest,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OpenGenericInterceporIsUsedAsClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OpenGenericInterceporIsUsedAsClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,OpenGenericInterceporIsUsedAsClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClosedGenericInterceptor,The following statement contains a magic number: Assert.AreEqual(4' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxyWithAttributes,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxyWithAttributes,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ClassProxyWithAttributes,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Multithreaded,The following statement contains a magic number: const int threadCount = 10;
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,Multithreaded,The following statement contains a magic number: Thread.CurrentThread.Join(2000);
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,AutomaticallyOmitTarget,The following statement contains a magic number: Assert.AreEqual(0' calcService.Sum(1' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(6' service.Sum(3' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(6' service.Sum(3' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(6' service.Sum(3' 2));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(8' service.Sum(3' 4));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(8' service.Sum(3' 4));
Magic Number,Castle.Windsor.Tests,InterceptorsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\InterceptorsTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(8' service.Sum(3' 4));
Magic Number,Castle.Windsor.Tests,ServiceOverridesStackOverflowTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\ServiceOverridesStackOverflowTestCase.cs,Should_not_StackOverflow,The following statement contains a magic number: Assert.AreEqual(2' array.Length);
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,ConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,ConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,ConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,SmartProxyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SmartProxyTestCase.cs,InterfaceProxy,The following statement contains a magic number: Assert.AreEqual(5' service.Sum(2' 2));
Magic Number,Castle.Windsor.Tests,MultiServiceComponentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\MultiServiceComponentsTestCase.cs,Forwarding_same_service_twice_is_ignored,The following statement contains a magic number: Assert.AreEqual(2' allHandlers.Single().ComponentModel.Services.Count());
Magic Number,CastleTests.Activators,BestConstructorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Activators\BestConstructorTestCase.cs,ParametersAndServicesBestCase,The following statement contains a magic number: Assert.AreEqual(120' service.Port);
Magic Number,CastleTests.Activators,BestConstructorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Activators\BestConstructorTestCase.cs,ParametersAndServicesBestCase2,The following statement contains a magic number: Assert.AreEqual(120' service.Port);
Magic Number,CastleTests.Activators,BestConstructorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Activators\BestConstructorTestCase.cs,ParametersAndServicesBestCase2,The following statement contains a magic number: Assert.AreEqual(22' service.ScheduleInterval);
Magic Number,CastleTests.Bugs.Ioc113,IoC_113_When_resolving_initializable_disposable_and_startable_component,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\Ioc113\IoC_113.cs,Should_call_DoSomething_between_start_and_stop,The following statement contains a magic number: Assert.AreEqual(SdiComponentMethods.DoSomething' calledMethods[2]);
Magic Number,CastleTests.Bugs.Ioc113,IoC_113_When_resolving_initializable_disposable_and_startable_component,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\Ioc113\IoC_113.cs,Should_call_all_methods_once,The following statement contains a magic number: Assert.AreEqual(5' component.calledMethods.Count);
Magic Number,CastleTests.Bugs.Ioc113,IoC_113_When_resolving_initializable_disposable_and_startable_component,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\Ioc113\IoC_113.cs,Should_call_stop_before_dispose,The following statement contains a magic number: Assert.AreEqual(SdiComponentMethods.Stop' calledMethods[3]);
Magic Number,CastleTests.Bugs.Ioc113,IoC_113_When_resolving_initializable_disposable_and_startable_component,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Bugs\Ioc113\IoC_113.cs,Should_call_stop_before_dispose,The following statement contains a magic number: Assert.AreEqual(SdiComponentMethods.Dispose' calledMethods[4]);
Magic Number,Castle,CompositePatternTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\CompositePatternTestCase.cs,Can_resolve_composite_based_solely_on_conventions,The following statement contains a magic number: Assert.AreEqual(5' ((CompositeEmptyService2)obj).Inner.Length);
Magic Number,CastleTests.Components,PlasmaGunArm,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Components\PlasmaGunArm.cs,GetLength,The following statement contains a magic number: return 2.0f;
Magic Number,CastleTests.Components,ServiceFactory,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Components\ServiceFactory.cs,Create,The following statement contains a magic number: return new ServiceImplementation(12);
Magic Number,Castle.Windsor.Tests.Configuration2,ConfigWithStatementsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\ConfigWithStatementsTestCase.cs,SimpleIf,The following statement contains a magic number: Assert.AreEqual(4' store.GetComponents().Length);
Magic Number,Castle.Windsor.Tests.Configuration2,PrivateSettersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\PrivateSettersTestCase.cs,Private_setter_does_not_get_called_when_using_config,The following statement contains a magic number: Assert.AreEqual(1234' item.Port);
Magic Number,Castle.Windsor.Tests.Configuration2,SynchronizationProblemTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\SynchronizationProblemTestCase.cs,ResolveWithConfigTest,The following statement contains a magic number: const int threadCount = 50;
Magic Number,Castle.Windsor.Tests.Configuration2,SynchronizationProblemTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\SynchronizationProblemTestCase.cs,ResolveWithConfigTest,The following statement contains a magic number: Thread.CurrentThread.Join(10 * 2000);
Magic Number,Castle.Windsor.Tests.Configuration2,SynchronizationProblemTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\SynchronizationProblemTestCase.cs,ResolveWithConfigTest,The following statement contains a magic number: Thread.CurrentThread.Join(10 * 2000);
Magic Number,Castle.Windsor.Tests.Configuration2,SynchronizationProblemTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\SynchronizationProblemTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Assert.AreEqual(90' comp.Port);
Magic Number,CastleTests.Configuration2,IncludesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\IncludesTestCase.cs,AssertConfiguration,The following statement contains a magic number: Assert.AreEqual(2' store.GetFacilities().Length);
Magic Number,CastleTests.Configuration2,IncludesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\IncludesTestCase.cs,AssertConfiguration,The following statement contains a magic number: Assert.AreEqual(2' store.GetComponents().Length);
Magic Number,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,AssertConfiguration,The following statement contains a magic number: Assert.AreEqual(3' store.GetFacilities().Length' "Diff num of facilities");
Magic Number,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,AssertConfiguration,The following statement contains a magic number: Assert.AreEqual(2' store.GetComponents().Length' "Diff num of components");
Magic Number,Castle.Windsor.Tests.Configuration2.Properties,PropertiesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Configuration2\Properties\PropertiesTestCase.cs,AssertConfiguration,The following statement contains a magic number: Assert.AreEqual(3' config.Children.Count' "facility3 should have 3 children");
Magic Number,Castle.Windsor.Tests.Config,AppDomainConfigSourceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\AppDomainConfigurationStoreTestCase.cs,ProperDeserialization,The following statement contains a magic number: Assert.AreEqual(2' store.GetFacilities().Length);
Magic Number,Castle.Windsor.Tests.Config,AppDomainConfigSourceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\AppDomainConfigurationStoreTestCase.cs,ProperDeserialization,The following statement contains a magic number: Assert.AreEqual(4' store.GetComponents().Length);
Magic Number,Castle.MicroKernel.Tests.Configuration,ConfigurationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigurationTestCase.cs,DictionaryAsParameterInXml,The following statement contains a magic number: Assert.AreEqual(2' myInstance.DictionaryProperty.Count);
Magic Number,Castle.MicroKernel.Tests.Configuration,ConfigurationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigurationTestCase.cs,ConstructorWithArrayParameter,The following statement contains a magic number: Assert.AreEqual("folha"' instance.Hosts[2]);
Magic Number,Castle.MicroKernel.Tests.Configuration,ConfigurationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigurationTestCase.cs,ConstructorWithArrayParameterAndCustomType,The following statement contains a magic number: Assert.AreEqual(2' instance.Services.Length);
Magic Number,Castle.MicroKernel.Tests.Configuration,ConfigurationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Config\ConfigurationTestCase.cs,ConstructorWithListParameterAndCustomType,The following statement contains a magic number: Assert.AreEqual(2' instance.Services.Count);
Magic Number,Castle.MicroKernel.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphTestCase.cs,TopologicalSortOnComponents,The following statement contains a magic number: Assert.AreEqual(3' nodes.Length);
Magic Number,Castle.MicroKernel.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphTestCase.cs,TopologicalSortOnComponents,The following statement contains a magic number: Assert.AreEqual("a"' (vertices[2] as ComponentModel).Name);
Magic Number,Castle.MicroKernel.Tests,LazyLoadingTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LazyLoadingTestCase.cs,Loaders_are_thread_safe,The following statement contains a magic number: int[] count = { 10 };
Magic Number,Castle.MicroKernel.Tests,SlowLoader,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LazyLoadingTestCase.cs,Load,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,Missing_service_is_correctly_detected,The following statement contains a magic number: TestDelegate act = () =>  			                   Container.Resolve<CompB>(new Arguments().AddNamed("myArgument"' 123));
Magic Number,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,Parameter_takes_precedence_over_registered_service,The following statement contains a magic number: var c2 = new CompC(42);
Magic Number,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,ParametersPrecedence,The following statement contains a magic number: var deps2 = new Dictionary<string' object> { { "cc"' new CompC(12) }' { "myArgument"' "ayende" } };
Magic Number,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,WillAlwaysResolveCustomParameterFromServiceComponent,The following statement contains a magic number: Container.Register(Component.For<CompA>()'  			                   Component.For<CompB>().DependsOn(new { myArgument = "foo" })'  			                   Component.For<CompC>().DependsOn(new { test = 15 }));
Magic Number,Castle.MicroKernel.Tests,RuntimeParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\RuntimeParametersTestCase.cs,WillAlwaysResolveCustomParameterFromServiceComponent,The following statement contains a magic number: Assert.AreEqual(15' b.Compc.test);
Magic Number,Castle.MicroKernel.Tests,SubResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubResolverTestCase.cs,WillAskResolverWhenTryingToResolveDependencyAfterAnotherHandlerWasRegistered,The following statement contains a magic number: resolver.Result = 15;
Magic Number,CastleTests.Diagnostics,AllComponentsDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllComponentsDiagnosticTestCase.cs,Shows_also_components_from_parent_container,The following statement contains a magic number: Assert.AreEqual(4' handlers.Length);
Magic Number,CastleTests.Diagnostics,AllComponentsDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllComponentsDiagnosticTestCase.cs,Works_with_multi_service_components,The following statement contains a magic number: Assert.AreEqual(2' handlers[0].ComponentModel.Services.Count());
Magic Number,CastleTests.Diagnostics,AllComponentsDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllComponentsDiagnosticTestCase.cs,Works_with_multiple_handlers_for_given_type,The following statement contains a magic number: Assert.AreEqual(2' handlers.Length);
Magic Number,CastleTests.Diagnostics,AllServicesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllServicesDiagnosticTestCase.cs,Groups_components_by_exposed_service,The following statement contains a magic number: Assert.AreEqual(2' services.Count);
Magic Number,CastleTests.Diagnostics,AllServicesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllServicesDiagnosticTestCase.cs,Groups_components_by_exposed_service,The following statement contains a magic number: Assert.AreEqual(2' services[typeof(IEmptyService)].Count());
Magic Number,CastleTests.Diagnostics,AllServicesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\AllServicesDiagnosticTestCase.cs,Works_for_multi_service_components,The following statement contains a magic number: Assert.AreEqual(3' services.Count);
Magic Number,CastleTests.Diagnostics,PotentialLifestyleMismatchesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentialLifestyleMismatchesDiagnosticTestCase.cs,Can_detect_singleton_depending_on_transient_directly_and_indirectly,The following statement contains a magic number: Assert.AreEqual(3' items.Length);
Magic Number,CastleTests.Diagnostics,PotentialLifestyleMismatchesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentialLifestyleMismatchesDiagnosticTestCase.cs,Can_detect_singleton_depending_on_transient_directly_and_indirectly,The following statement contains a magic number: Assert.AreEqual(2' cbaMismatches.Length);
Magic Number,CastleTests.Diagnostics,PotentialLifestyleMismatchesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentialLifestyleMismatchesDiagnosticTestCase.cs,Can_detect_singleton_depending_on_transient_indirectly,The following statement contains a magic number: Assert.AreEqual(2' mismatches.Length);
Magic Number,CastleTests.Diagnostics,PotentialLifestyleMismatchesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentialLifestyleMismatchesDiagnosticTestCase.cs,Can_detect_singleton_depending_on_two_transients_directly_and_indirectly,The following statement contains a magic number: Assert.AreEqual(2' items.Length);
Magic Number,CastleTests.Diagnostics,PotentialLifestyleMismatchesDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentialLifestyleMismatchesDiagnosticTestCase.cs,Can_detect_singleton_depending_on_two_transients_directly_and_indirectly,The following statement contains a magic number: Assert.AreEqual(2' cbaMismatches.Length);
Magic Number,CastleTests.Diagnostics,PotentiallyMisconfiguredComponentsDiagnosticTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\PotentiallyMisconfiguredComponentsDiagnosticTestCase.cs,Has_all_components_with_missing_or_waiting_dependencies,The following statement contains a magic number: Assert.AreEqual(2' handlers.Length);
Magic Number,CastleTests.Diagnostics,ReleasePolicyTrackedObjectsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\ReleasePolicyTrackedObjectsTestCase.cs,List_tracked_alive_instances,The following statement contains a magic number: Assert.AreEqual(2' viewItem.Details.Length);
Magic Number,CastleTests.Diagnostics,ReleasePolicyTrackedObjectsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\ReleasePolicyTrackedObjectsTestCase.cs,List_tracked_alive_instances_in_subscopes,The following statement contains a magic number: Assert.AreEqual(3' values.Length);
Magic Number,CastleTests.Diagnostics,ReleasePolicyTrackedObjectsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Diagnostics\ReleasePolicyTrackedObjectsTestCase.cs,List_tracked_alive_instances_in_subscopes,The following statement contains a magic number: Assert.AreEqual(4' instances.Length);
Magic Number,Castle.Windsor.Tests.Facilities,SlowlyInitFacility,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\SlowlyInitFacility.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Can_resolve_component_depending_on_delegate_when_inline_argumens_are_provided,The following statement contains a magic number: Container.Resolve<UsesFooDelegateAndInt>(Arguments.FromProperties(new { additionalArgument = 5 }));
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Can_resolve_service_via_delegate,The following statement contains a magic number: Assert.AreEqual(2' foo.Number);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Can_resolve_two_services_depending_on_identical_delegates,The following statement contains a magic number: Container.Register(Component.For<Foo>().LifeStyle.Transient'  			                   Component.For<UsesFooDelegate>()'  			                   Component.For<UsesFooDelegateAndInt>().DependsOn(new Arguments().AddTyped(5)));
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryDelegatesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryDelegatesTestCase.cs,Can_resolve_two_services_depending_on_identical_delegates_via_interface_based_factory,The following statement contains a magic number: Container.Register(Component.For<Foo>().LifeStyle.Transient'  			                   Component.For<UsesFooDelegate>()'  			                   Component.For<UsesFooDelegateAndInt>().DependsOn(new Arguments().AddTyped(5))'  			                   Component.For<IGenericComponentsFactory>().AsFactory());
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_by_closed_generic_closed_on_arguments_type_with_custom_selector,The following statement contains a magic number: var one = factory.GetItemByWithParameter(3);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_by_closed_generic_closed_on_arguments_type_with_custom_selector,The following statement contains a magic number: Assert.AreEqual(3' ((GenericIntComponent)one).Value);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_multiple_components_at_once_with_default_selector_list,The following statement contains a magic number: Assert.AreEqual(2' all.Count);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_multiple_components_at_once_with_non_default_selector_array,The following statement contains a magic number: Assert.AreEqual(2' all.Length);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_multiple_components_at_once_with_non_default_selector_collection,The following statement contains a magic number: Assert.AreEqual(2' all.Length);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_multiple_components_at_once_with_non_default_selector_enumerable,The following statement contains a magic number: Assert.AreEqual(2' all.Length);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_Resolve_multiple_components_at_once_with_non_default_selector_list,The following statement contains a magic number: Assert.AreEqual(2' all.Count);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_resolve_open_generic_components,The following statement contains a magic number: var component = factory.CreateGeneric<GenericComponentWithIntArg<string>' int>(667);
Magic Number,CastleTests.Facilities.TypedFactory,TypedFactoryFacilityTake2TestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Facilities\TypedFactory\TypedFactoryFacilityTake2TestCase.cs,Can_resolve_open_generic_components,The following statement contains a magic number: Assert.AreEqual(667' component.Property);
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,TopologicalSortSimple,The following statement contains a magic number: Assert.AreSame( third' nodes[2] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,TopologicalSortSimple,The following statement contains a magic number: Assert.AreSame( alone' nodes[3] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( pants' nodes[2] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( shoes' nodes[3] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( watch' nodes[4] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( shirt' nodes[5] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( tie' nodes[6] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( belt' nodes[7] );
Magic Number,Castle.Core.Tests,GraphTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\GraphNodeTests.cs,ComplexDag,The following statement contains a magic number: Assert.AreSame( jacket' nodes[8] );
Magic Number,CastleTests.Installer,ConfigurationInstallerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Installer\ConfigurationInstallerTestCase.cs,Can_reference_components_from_app_config_in_component_node,The following statement contains a magic number: Assert.AreEqual(42' item.Arg2);
Magic Number,CastleTests.Installer,FromAssemblyInstallersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Installer\FromAssemblyInstallersTestCase.cs,Install_from_assembly_by_directory_with_key_as_string_installs,The following statement contains a magic number: var publicKeyToken = fullName.Substring(index + "PublicKeyToken=".Length' 16);
Magic Number,Castle.Windsor.Tests.Interceptors,ChangeResultInterceptor,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Interceptors\ChangeResultInterceptor.cs,Intercept,The following statement contains a magic number: result = ((int)result) + 10;
Magic Number,CastleTests.Interceptors,InterceptorAttributeTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Interceptors\InterceptorAttributeTestCase.cs,Can_set_interceptor_via_attribute_many,The following statement contains a magic number: Assert.AreEqual(2' GetInterceptors(calcService).Length);
Magic Number,CastleTests.Lifestyle,BoundLifestyleImplicitGraphScopingTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\BoundLifestyleImplicitGraphScopingTestCase.cs,Scoped_component_properly_scoped_when_roots_collection_is_involved,The following statement contains a magic number: Assert.AreEqual(3' a.Length);
Magic Number,CastleTests.Lifestyle,ScopedLifestyleExplicitAndMultipleThreadsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\ScopedLifestyleExplicitAndMultipleThreadsTestCase.cs,Context_is_passed_onto_the_next_thread_ThreadPool,The following statement contains a magic number: var signalled = @event.WaitOne(TimeSpan.FromSeconds(2));
Magic Number,CastleTests.Lifestyle,ScopedLifestyleExplicitAndMultipleThreadsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\ScopedLifestyleExplicitAndMultipleThreadsTestCase.cs,Context_is_passed_onto_the_next_thread_explicit,The following statement contains a magic number: var signalled = @event.WaitOne(TimeSpan.FromSeconds(2));
Magic Number,CastleTests.Lifestyle,BoundLifestyleAndTypedFactoriesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Lifestyle\ScopedLifestyleImplicitGraphScopingAndTypedFactoriesTestCase.cs,Scoped_component_via_factory_two_roots_but_factory_invoked_by_yet_another_object,The following statement contains a magic number: var anotherFoo = oneFactory(4);
Magic Number,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,SimpleTest,The following statement contains a magic number: Assert.AreEqual(memoryAppender.GetEvents().Length' 4);
Magic Number,Castle.Facilities.Logging.Tests,ExtendedLog4NetFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\ExtendedLog4NetFacilityTestCase.cs,SimpleTest,The following statement contains a magic number: patternLayout.Format(actualLogOutput' memoryAppender.GetEvents()[3]);
Magic Number,Castle.Facilities.Logging.Tests.Classes,ComplexLoggingComponent,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\LoggingFacility\Classes\ComplexLoggingComponent.cs,DoSomeContextual,The following statement contains a magic number: i < 3
Magic Number,Castle.Windsor.Tests.MicroKernel,ArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernel\ArgumentsTestCase.cs,Any_type_as_key_is_not_supported,The following statement contains a magic number: Assert.Throws<ArgumentException>(delegate { arguments.Add(123' 321); });
Magic Number,Castle.Windsor.Tests.MicroKernel,ArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernel\ArgumentsTestCase.cs,Any_type_as_key_is_not_supported,The following statement contains a magic number: Assert.Throws<ArgumentException>(delegate { arguments.Add(123' 321); });
Magic Number,Castle.Windsor.Tests.MicroKernel,ArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernel\ArgumentsTestCase.cs,Can_satisfy_nullable_property_dependency,The following statement contains a magic number: var arguments = new Arguments().AddNamed("SomeVal"' 5);
Magic Number,Castle.Windsor.Tests.MicroKernel,ArgumentsTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\MicroKernel\ArgumentsTestCase.cs,Can_satisfy_nullable_ctor_dependency,The following statement contains a magic number: var s = Container.Resolve<HasNullableDoubleConstructor>(new Arguments().AddNamed("foo"' 5d));
Magic Number,Castle.MicroKernel.Tests.Pools,MultithreadedPooledTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\MultithreadedPooledTestCase.cs,ExecuteMethodUntilSignal,The following statement contains a magic number: Thread.Sleep(1*500);
Magic Number,Castle.MicroKernel.Tests.Pools,MultithreadedPooledTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\MultithreadedPooledTestCase.cs,Multithreaded,The following statement contains a magic number: const int threadCount = 15;
Magic Number,Castle.MicroKernel.Tests.Pools,MultithreadedPooledTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\MultithreadedPooledTestCase.cs,Multithreaded,The following statement contains a magic number: Thread.CurrentThread.Join(3*1000);
Magic Number,Castle.MicroKernel.Tests.Pools,MultithreadedPooledTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\MultithreadedPooledTestCase.cs,Multithreaded,The following statement contains a magic number: Thread.CurrentThread.Join(3*1000);
Magic Number,CastleTests.Pools,PooledLifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,DisposePoolDisposesTrackedComponents,The following statement contains a magic number: container.Register(Component.For<DisposableMockObject>().LifestylePooled(1' 5));
Magic Number,CastleTests.Pools,PooledLifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,Recyclable_component_as_dependency_can_be_reused,The following statement contains a magic number: Assert.AreEqual(2' componentAgain.Dependency.RecycledCount);
Magic Number,CastleTests.Pools,PooledLifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,Recyclable_component_can_be_reused,The following statement contains a magic number: Assert.AreEqual(2' componentAgain.RecycledCount);
Magic Number,CastleTests.Pools,PooledLifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,Recyclable_component_with_on_release_action_not_released_more_than_necessary,The following statement contains a magic number: i < 10
Magic Number,CastleTests.Pools,PooledLifestyleManagerTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,Recyclable_component_with_on_release_action_not_released_more_than_necessary,The following statement contains a magic number: Assert.AreEqual(10' component.RecycledCount);
Magic Number,CastleTests.Pools,MyPoolableLifestyleManager,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,CreatePool,The following statement contains a magic number: base.CreatePool(2' 5).Dispose();
Magic Number,CastleTests.Pools,MyPoolableLifestyleManager,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Pools\PooledLifestyleManagerTestCase.cs,CreatePool,The following statement contains a magic number: base.CreatePool(2' 5).Dispose();
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple,The following statement contains a magic number: var interceptor = new ResultModifierInterceptor(5);
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple_via_nested_closure,The following statement contains a magic number: var interceptor = new ResultModifierInterceptor(5);
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple_via_nested_closure,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple_via_nested_closure,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_instance_simple_via_nested_closure,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_named_service,The following statement contains a magic number: var interceptor = new ResultModifierInterceptor(5);
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_named_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_named_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_named_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_typed_service,The following statement contains a magic number: var interceptor = new ResultModifierInterceptor(5);
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_typed_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_typed_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,can_atach_hook_as_typed_service,The following statement contains a magic number: Assert.AreEqual(4' calculator.Sum(2' 2));
Magic Number,CastleTests.Proxies,ComponentProxyRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\ComponentProxyRegistrationTestCase.cs,hook_gets_disposed_after_proxy_is_created,The following statement contains a magic number: var interceptor = new ResultModifierInterceptor(5);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_typed,The following statement contains a magic number: calc.Sum(24' 42);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_typed,The following statement contains a magic number: calc.Sum(24' 42);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_typed,The following statement contains a magic number: Assert.AreEqual(4' interceptor.InterceptedCallsCount);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_named,The following statement contains a magic number: calc.Sum(24' 42);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_named,The following statement contains a magic number: calc.Sum(24' 42);
Magic Number,CastleTests.Proxies,InterceptorDependenciesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\InterceptorDependenciesTestCase.cs,Can_depend_on_the_same_interceptor_multiple_times_named,The following statement contains a magic number: Assert.AreEqual(4' interceptor.InterceptedCallsCount);
Magic Number,CastleTests.Proxies,TypedFactoryFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\TypedFactoryFacilityTestCase.cs,TypedFactory_CreateMethodHasNoId_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' calculator.Sum(1' 2));
Magic Number,CastleTests.Proxies,TypedFactoryFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\TypedFactoryFacilityTestCase.cs,TypedFactory_CreateMethodHasNoId_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' calculator.Sum(1' 2));
Magic Number,CastleTests.Proxies,TypedFactoryFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\TypedFactoryFacilityTestCase.cs,TypedFactory_WithProxies_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' calculator.Sum(1' 2));
Magic Number,CastleTests.Proxies,TypedFactoryFacilityTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Proxies\TypedFactoryFacilityTestCase.cs,TypedFactory_WithProxies_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' calculator.Sum(1' 2));
Magic Number,CastleTests.Registration,AllTypesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\AllTypesTestCase.cs,RegisterAssemblyTypes_WithConfigurationBasedOnImplementation_RegisteredInContainer,The following statement contains a magic number: Kernel.Register(Classes.FromAssembly(GetCurrentAssembly())  				                .BasedOn<ICommon>()  				                .Configure(delegate(ComponentRegistration component)  				                {  					                component.LifeStyle.Transient  						                .Named(component.Implementation.FullName + "XYZ");  				                })  				                .ConfigureFor<CommonImpl1>(  					                component => component.DependsOn(Property.ForKey("key1").Eq(1)))  				                .ConfigureFor<CommonImpl2>(  					                component => component.DependsOn(Property.ForKey("key2").Eq(2)))  				);
Magic Number,CastleTests.Registration,AllTypesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\AllTypesTestCase.cs,RegisterTypes_WithLinq_RegisteredInContainer,The following statement contains a magic number: Assert.AreEqual(2' handlers.Length);
Magic Number,CastleTests.Registration,ComponentRegistrationByNamespaceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationByNamespaceTestCase.cs,Registreting_by_namespace_with_subnamespaces,The following statement contains a magic number: Assert.AreEqual(2' ComponentsCount());
Magic Number,CastleTests.Registration,ComponentRegistrationByNamespaceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationByNamespaceTestCase.cs,Registreting_by_namespace_with_subnamespaces_by_type_generic_short,The following statement contains a magic number: Assert.AreEqual(2' ComponentsCount());
Magic Number,CastleTests.Registration,ComponentRegistrationByNamespaceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationByNamespaceTestCase.cs,Registreting_by_namespace_with_subnamespaces_by_type_short,The following statement contains a magic number: Assert.AreEqual(2' ComponentsCount());
Magic Number,CastleTests.Registration,ComponentRegistrationByNamespaceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationByNamespaceTestCase.cs,Registreting_by_namespace_with_subnamespaces_short,The following statement contains a magic number: Assert.AreEqual(2' ComponentsCount());
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_configuration_parameters_from_appSettings_inline,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,can_register_value_from_a_resource_file_with_type,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn(Dependency.OnResource<Resources>("arg1"' "SomeResource")'  				                              Dependency.OnValue("arg2"' 2)));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,can_register_value_from_a_resource_file_with_resourceManager,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn(Dependency.OnResource("arg1"' Resources.ResourceManager' "SomeResource")'  				                              Dependency.OnValue("arg2"' 2)));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_configuration_parameters_from_dynamic_parameters_inline,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn((k' d) => d.AddProperties(new { arg1 = "a string"' arg2 = 42 })));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_configuration_parameters_from_dynamic_parameters_inline,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_configuration_parameters_inline,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_named_inline_dependency,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn(  					                   Dependency.OnValue("arg1"' "a string")'  					                   Dependency.OnValue("arg2"' 42)));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_named_inline_dependency,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_named_via_names,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_named_via_types,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_names,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_names_generic,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_types,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_service_override_collection_typed_via_types_generic,The following statement contains a magic number: Assert.AreEqual(2' obj.Services.Count);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_typed_inline_dependency,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn(  					                   Dependency.OnValue(typeof(string)' "a string")'  					                   Dependency.OnValue(typeof(int)' 42)));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_typed_inline_dependency,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_typed_inline_dependency_generic,The following statement contains a magic number: Container.Register(Component.For<ClassWithArguments>()  				                   .DependsOn(  					                   Dependency.OnValue<string>("a string")'  					                   Dependency.OnValue<int>(42)));
Magic Number,CastleTests.Registration,DependsOnTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DependsOnTestCase.cs,Can_register_typed_inline_dependency_generic,The following statement contains a magic number: Assert.AreEqual(42' obj.Arg2);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ArrayServiceOverrides_WorksFine,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Length);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_GenericListServiceOverrides_WorksFine,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_DependencyOnComponent_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(Dependency.OnComponent("customer"' "customer1"))  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_DependencyOnComponent_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(Dependency.OnComponent("customer"' "customer1"))  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_DependencyOnComponent_WorksFine,The following statement contains a magic number: Assert.AreEqual(customer.CustomerBase.Age' 45);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_UsingAnonymousType,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(  						ServiceOverride.ForKey("customer").Eq("customer1"))  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_UsingAnonymousType,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(  						ServiceOverride.ForKey("customer").Eq("customer1"))  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_UsingAnonymousType,The following statement contains a magic number: Assert.AreEqual(customer.CustomerBase.Age' 45);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(  						ServiceOverride.ForKey("customer").Eq("customer1")  					)  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer1")  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)'  				Component.For<CustomerChain1>()  					.Named("customer2")  					.DependsOn(  						Property.ForKey("Name").Eq("Bigfoot")'  						Property.ForKey("Address").Eq("Forest")'  						Property.ForKey("Age").Eq(100)  					)  					.DependsOn(  						ServiceOverride.ForKey("customer").Eq("customer1")  					)  				);
Magic Number,CastleTests.Registration,ServiceOverridesTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ServiceOverridesTestCase.cs,AddComponent_ServiceOverrides_WorksFine,The following statement contains a magic number: Assert.AreEqual(customer.CustomerBase.Age' 45);
Magic Number,CastleTests.Registration,UsingFactoryMethodTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\UsingFactoryMethodTestCase.cs,Can_register_more_than_one_with_factory_method,The following statement contains a magic number: Assert.DoesNotThrow(  				() => Kernel.Register(  					Component.For<ClassWithPrimitiveDependency>()  						.UsingFactoryMethod(() => new ClassWithPrimitiveDependency(2))'  					Component.For<ClassWithServiceDependency>()  						.UsingFactoryMethod(() => new ClassWithServiceDependency(null))));
Magic Number,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,AllInterfaces_uses_all_implemented_interfaces,The following statement contains a magic number: Assert.AreEqual(2' services.Length);
Magic Number,CastleTests.Registration,WithServiceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\WithServiceTestCase.cs,Can_cumulate_services,The following statement contains a magic number: Assert.AreEqual(3' services.Length);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_Instance_UsesInstanceWithParameters,The following statement contains a magic number: var customer = new CustomerImpl2("ernst"' "delft"' 29);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_WithPooledWithSizeLifestyle_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer")  					.ImplementedBy<CustomerImpl>()  					.LifeStyle.PooledWithSize(5' 10)  				);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_WithPooledWithSizeLifestyle_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.Named("customer")  					.ImplementedBy<CustomerImpl>()  					.LifeStyle.PooledWithSize(5' 10)  				);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependencies_WorksFine,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.ImplementedBy<CustomerImpl>()  					.DependsOn(  						Property.ForKey("Name").Eq("Caption Hook")'  						Property.ForKey("Address").Eq("Fairyland")'  						Property.ForKey("Age").Eq(45)  					)  				);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependencies_WorksFine,The following statement contains a magic number: Assert.AreEqual(customer.Age' 45);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependencies_UsingAnonymousType,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.ImplementedBy<CustomerImpl>()  					.DependsOn(Property.ForKey("Name").Eq("Caption Hook")'  					           Property.ForKey("Address").Eq("Fairyland")'  					           Property.ForKey("Age").Eq(45)));
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependencies_UsingAnonymousType,The following statement contains a magic number: Assert.AreEqual(customer.Age' 45);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependenciesDictionary_WorksFine,The following statement contains a magic number: customDependencies["Age"] = 45;
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_CustomDependenciesDictionary_WorksFine,The following statement contains a magic number: Assert.AreEqual(customer.Age' 45);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_ArrayConfigurationParameters_WorksFine,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Length);
Magic Number,Castle.MicroKernel.Tests.Registration,ComponentRegistrationTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\ComponentRegistrationTestCase.cs,AddComponent_ListConfigurationParameters_WorksFine,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Arguments_are_case_insensitive_when_using_anonymous_object,The following statement contains a magic number: Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2).AddNamed("arg1"' "foo"));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_dynamically_override_services,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.ImplementedBy<CustomerImpl>()  					.Named("defaultCustomer")'  				Component.For<ICustomer>().ImplementedBy<CustomerImpl2>()  					.Named("otherCustomer")  					.DependsOn(  						Parameter.ForKey("name").Eq("foo")' // static parameters' resolved at registration time  						Parameter.ForKey("address").Eq("bar st 13")'  						Parameter.ForKey("age").Eq("5"))'  				Component.For<CommonImplWithDependency>()  					.LifeStyle.Transient  					.DynamicParameters((k' d) => // dynamic parameters  					{  						var randomNumber = 2;  						if (randomNumber == 2)  						{  							d["customer"] = k.Resolve<ICustomer>("otherCustomer");  						}  					}));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_dynamically_override_services,The following statement contains a magic number: Kernel.Register(  				Component.For<ICustomer>()  					.ImplementedBy<CustomerImpl>()  					.Named("defaultCustomer")'  				Component.For<ICustomer>().ImplementedBy<CustomerImpl2>()  					.Named("otherCustomer")  					.DependsOn(  						Parameter.ForKey("name").Eq("foo")' // static parameters' resolved at registration time  						Parameter.ForKey("address").Eq("bar st 13")'  						Parameter.ForKey("age").Eq("5"))'  				Component.For<CommonImplWithDependency>()  					.LifeStyle.Transient  					.DynamicParameters((k' d) => // dynamic parameters  					{  						var randomNumber = 2;  						if (randomNumber == 2)  						{  							d["customer"] = k.Resolve<ICustomer>("otherCustomer");  						}  					}));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_mix_registration_and_call_site_parameters,The following statement contains a magic number: var component = Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_mix_registration_and_call_site_parameters,The following statement contains a magic number: Assert.AreEqual(2' component.Arg2);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_release_components_with_dynamic_parameters,The following statement contains a magic number: var component = Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_release_components_with_dynamic_parameters,The following statement contains a magic number: Assert.AreEqual(2' component.Arg2);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_release_components_with_dynamic_parameters,The following statement contains a magic number: Assert.AreEqual(2' releaseCalled);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Can_release_generics_with_dynamic_parameters,The following statement contains a magic number: Assert.AreEqual(2' releaseCalled);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_handle_multiple_calls,The following statement contains a magic number: var arg2 = 5;
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_handle_multiple_calls,The following statement contains a magic number: var component = Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2).AddNamed("arg1"' "foo"));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_have_access_to_parameters_passed_from_call_site,The following statement contains a magic number: var component = Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2).AddNamed("arg1"' "foo"));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_have_access_to_parameters_passed_from_call_site,The following statement contains a magic number: Assert.AreEqual(2' arg2);
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_override_parameters_passed_from_call_site,The following statement contains a magic number: var arg2 = 5;
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_override_parameters_passed_from_call_site,The following statement contains a magic number: var component = Kernel.Resolve<ClassWithArguments>(new Arguments().AddNamed("arg2"' 2).AddNamed("arg1"' "foo"));
Magic Number,Castle.MicroKernel.Tests.Registration,DynamicParametersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Registration\DynamicParametersTestCase.cs,Should_resolve_component_when_no_parameters_passed_from_call_site,The following statement contains a magic number: var arg2 = 5;
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,Composite_service_can_be_resolved_without_triggering_circular_dependency_detection_fuse,The following statement contains a magic number: Assert.AreEqual(5' composite.Inner.Length);
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,Composite_service_can_be_resolved_without_triggering_circular_dependency_detection_fuse_composite_registered_first,The following statement contains a magic number: Assert.AreEqual(4' composite.Inner.Length);
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,DependencyOnArrayOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' comp.Services.Length);
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,DependencyOnArrayOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' comp.Services.Length);
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,DependencyOn_ref_ArrayOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' comp.Services.Length);
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,InjectAll,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(3));
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,InjectFooAndBarOnly_WithArrayResolver,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,CastleTests.SpecializedResolvers,ArrayResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ArrayResolverTestCase.cs,InjectFooAndBarOnly_WithoutArrayResolver,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,Composite_service_can_be_resolved_without_triggering_circular_dependency_detection_fuse,The following statement contains a magic number: Assert.AreEqual(5' composite.Inner.Length);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,Composite_service_can_be_resolved_without_triggering_circular_dependency_detection_fuse_composite_registered_first,The following statement contains a magic number: Assert.AreEqual(4' composite.Inner.Length);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnArrayOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Length);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOn_Readonly_collection_OfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOn_Readonly_list_OfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnArrayOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Length);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnCollectionOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnCollectionOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnEnumerableOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count());
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnEnumerableOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count());
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnListOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOnListOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,DependencyOn_ref_ArrayOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' component.Services.Length);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,Honors_collection_override_all_components_in,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(3));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,Honors_collection_override_some_components_in,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,CollectionResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\CollectionResolverTestCase.cs,Honors_collection_override_some_components_in_no_resolver,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,ListResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ListResolverTestCase.cs,DependencyOnListOfServices_OnConstructor,The following statement contains a magic number: Assert.AreEqual(2' comp.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,ListResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ListResolverTestCase.cs,DependencyOnListOfServices_OnProperty,The following statement contains a magic number: Assert.AreEqual(2' comp.Services.Count);
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,ListResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ListResolverTestCase.cs,Honors_collection_override_all_components_in,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(3));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,ListResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ListResolverTestCase.cs,Honors_collection_override_some_components_in,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,Castle.MicroKernel.Tests.SpecializedResolvers,ListResolverTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SpecializedResolvers\ListResolverTestCase.cs,Honors_collection_override_some_components_in_no_resolver,The following statement contains a magic number: Assert.That(dependencies' Has.Count.EqualTo(2));
Magic Number,CastleTests.SubContainers,SubContainersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubContainers\SubContainersTestCase.cs,RemoveChildKernelCleansUp,The following statement contains a magic number: Assert.AreEqual(2' eventCollector.Events.Count);
Magic Number,CastleTests.SubContainers,SubContainersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubContainers\SubContainersTestCase.cs,RemovingChildKernelUnsubscribesFromParentEvents,The following statement contains a magic number: Assert.AreEqual(4' eventCollector.Events.Count);
Magic Number,CastleTests.SubContainers,SubContainersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubContainers\SubContainersTestCase.cs,RemovingChildKernelUnsubscribesFromParentEvents,The following statement contains a magic number: Assert.AreEqual(EventsCollector.Added' eventCollector.Events[2]);
Magic Number,CastleTests.SubContainers,SubContainersTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\SubContainers\SubContainersTestCase.cs,RemovingChildKernelUnsubscribesFromParentEvents,The following statement contains a magic number: Assert.AreEqual(EventsCollector.Removed' eventCollector.Events[3]);
Magic Number,CastleTests.Windsor.Tests,GenericVarianceTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\Windsor.Tests\GenericVarianceTestCase.cs,ResolveAll_can_resolve_contravariant_components,The following statement contains a magic number: Assert.AreEqual(2' convariantOfDerived.Length);
Magic Number,Castle.Windsor.Tests.XmlProcessor,XmlProcessorTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Windsor.Tests\XmlProcessor\XmlProcessorTestCase.cs,RunTests,The following statement contains a magic number: var resultFileName = fileName.Substring(0' fileName.Length - 4) + "Result.xml";
