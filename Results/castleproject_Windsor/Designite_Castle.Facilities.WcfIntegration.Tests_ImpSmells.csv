Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyServiceScopedBehaviors,The length of the parameter unitOfWorkIsInitialized_DuringCall is 34.
Long Identifier,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyServiceScopedBehaviorsToDefaultEndpoint,The length of the parameter unitOfWorkIsInitialized_DuringCall is 34.
Long Identifier,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyInstanceBehaviors,The length of the parameter unitOfWorkIsInitialized_DuringCall is 34.
Long Identifier,Castle.Facilities.WcfIntegration.Tests,WcfServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\WcfServiceFixture.cs,WillApplyEndPointBehaviors,The length of the parameter unitOfWorkIsInitialized_DuringCall is 34.
Long Statement,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillGetFriendlyErrorWhenFactoryIsNotAvailable,The length of the statement  "			var expectedMessage = "The IWcfClientFactory is only available with the TypedFactoryFacility.  Did you forget to register that facility? Also make sure that TypedFactoryFacility was registred before WcfFacility."; " is 213.
Long Statement,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillGetFriendlyErrorWhenFactoryIsNotAvailable_because_TypedFactoryFacility_was_registered_after_WCFFacility,The length of the statement  "			var expectedMessage = "The IWcfClientFactory is only available with the TypedFactoryFacility.  Did you forget to register that facility? Also make sure that TypedFactoryFacility was registred before WcfFacility."; " is 213.
Long Statement,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostWithAspNetCompatibility,The length of the statement  "				var aspNetCompat = captureServiceHost.ServiceHost.Description.Behaviors.Find<AspNetCompatibilityRequirementsAttribute>(); " is 121.
Long Statement,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanPubishMEXEndpointsUsingCustomAddress,The length of the statement  "				var tcpMextClient = new MetadataExchangeClient(new EndpointAddress("net.tcp://localhost/Operations/tellMeAboutYourSelf")); " is 122.
Long Statement,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanPubishMEXEndpointsWithoutBaseAddressesUsingCustomAddress,The length of the statement  "				var tcpMextClient = new MetadataExchangeClient(new EndpointAddress("net.tcp://localhost/Operations/tellMeAboutYourSelf")); " is 122.
Empty Catch Block,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanGiveFriendlyErrorMessageForUunresolvedServiceDependenciesIfOpenEagerly,The method has an empty catch block.
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,TestInitialize,The following statement contains a magic number: windsorContainer = new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(WcfClient.ForChannels(  					new DefaultClientModel()  					{  						Endpoint = WcfEndpoint.ForContract<IOperations>()  							.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  							.At("net.tcp://localhost/Operations")  					})'  					Component.For<IServiceBehavior>()  						.Instance(new ServiceDebugBehavior()  						{  							IncludeExceptionDetailInFaults = true  						})'  					Component.For<NetDataContractFormatBehavior>()  						.Attribute("scope").Eq(WcfExtensionScope.Explicit)'  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations")'  							WcfEndpoint.ForContract<IOperationsEx>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations/Ex")  								)  						)'  					Component.For<IAmUsingWindsor>().ImplementedBy<UsingWindsor>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel()  						)  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,TestInitialize,The following statement contains a magic number: windsorContainer = new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(WcfClient.ForChannels(  					new DefaultClientModel()  					{  						Endpoint = WcfEndpoint.ForContract<IOperations>()  							.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  							.At("net.tcp://localhost/Operations")  					})'  					Component.For<IServiceBehavior>()  						.Instance(new ServiceDebugBehavior()  						{  							IncludeExceptionDetailInFaults = true  						})'  					Component.For<NetDataContractFormatBehavior>()  						.Attribute("scope").Eq(WcfExtensionScope.Explicit)'  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations")'  							WcfEndpoint.ForContract<IOperationsEx>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations/Ex")  								)  						)'  					Component.For<IAmUsingWindsor>().ImplementedBy<UsingWindsor>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel()  						)  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientInterfaceAssociatedWithChannel,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCloseChannelWhenTransientClientReleased,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientInterfaceWithOutAndRefArguments,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructorAsRefAndOut(ref refValue' out outValue));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientInterfaceWithOutAndRefArguments,The following statement contains a magic number: Assert.AreEqual(42' refValue);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientInterfaceWithOutAndRefArguments,The following statement contains a magic number: Assert.AreEqual(42' outValue);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveMixedInClientInterfaceAssociatedWithChannel,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingDefaultBinding,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingSuppliedModel,The following statement contains a magic number: Assert.AreEqual(28' client1.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingSuppliedModel,The following statement contains a magic number: Assert.AreEqual(28' client2.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingSuppliedEndpoint,The following statement contains a magic number: Assert.AreEqual(28' tracker.AssertStillReferencedAndDo(client1 => client1.GetValueFromConstructor()));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingSuppliedEndpoint,The following statement contains a magic number: Assert.AreEqual(28' client2.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanLazilyResolveClientAssociatedWithChannelUsingSuppliedModel,The following statement contains a magic number: Assert.AreEqual(28' client1.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanLazilyResolveClientAssociatedWithChannelUsingSuppliedModel,The following statement contains a magic number: Assert.AreEqual(28' client2.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanLazilyResolveClientAssociatedWithChannelUsingSuppliedEndpoint,The following statement contains a magic number: Assert.AreEqual(28' tracker.AssertStillReferencedAndDo(client1 => client1.GetValueFromConstructor()));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanLazilyResolveClientAssociatedWithChannelUsingSuppliedEndpoint,The following statement contains a magic number: Assert.AreEqual(28' client2.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingFactoryWithConfiguration,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingFactoryWithModel,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingFactoryWithEndpoint,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingFactoryWithUri,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelFromConfiguration,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientWhenListedInTheFacility,The following statement contains a magic number: Assert.AreEqual(42' component.Operations.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingRelativeAddress,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelUsingViaAddress,The following statement contains a magic number: Assert.AreEqual(22' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanRecoverFromCommunicationException,The following statement contains a magic number: Func<IWindsorContainer> createLocalContainer = () =>  				new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1")'  							WcfEndpoint.ForContract<IOperationsEx>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1/Ex")  								)  						)  					);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanRecoverFromCommunicationExceptionOnEndpoint,The following statement contains a magic number: Func<IWindsorContainer> createLocalContainer = () =>  				new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1")'  							WcfEndpoint.ForContract<IOperationsEx>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1/Ex")  								)  						)  					);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanRecoverFromCommunicationExceptionAsynchronously,The following statement contains a magic number: Func<IWindsorContainer> createLocalContainer = () =>  				new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1")'  							WcfEndpoint.ForContract<IOperationsEx>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1/Ex")  								)  						)  					);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanResolveClientAssociatedWithChannelFromXmlConfiguration,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanUseOperationContextWithClient,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponses,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponses,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingCustomFormat,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingCustomFormat,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingGlobalFormatter,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingGlobalFormatter,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingGlobalFormatter,The following statement contains a magic number: (++i % 2) == 0
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingFormatExtension,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingFormatExtension,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingFormatExtension,The following statement contains a magic number: (++i % 2) == 0
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingExplicitFormatter,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingExplicitFormatter,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCaptureRequestsAndResponsesUsingExplicitFormatter,The following statement contains a magic number: (++i % 2) == 0
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanAddMessageHeader,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanAddMessageHeader,The following statement contains a magic number: (++i % 2) == 0
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanModifyRequestAndResponseBody,The following statement contains a magic number: Assert.AreEqual(100' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillUseSameXmlDocumentForConsecutiveModifications,The following statement contains a magic number: windsorContainer.Register(  				Component.For<MessageLifecycleBehavior>()'  				Component.For<IOperations>()  					.Named("operations")  					.AsWcfClient(new DefaultClientModel()  					{  						Endpoint = WcfEndpoint  							.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  							.At("net.tcp://localhost/Operations")  							.AddExtensions(start' new ReplaceOperationsResult("100").ExecuteAt(1)'  										   new ReplaceOperationsResult("200").ExecuteAt(2)'  										   end)  					})  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillUseSameXmlDocumentForConsecutiveModifications,The following statement contains a magic number: Assert.AreEqual(200' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanModifyRequestAndResponseBodyAndAddHeaders,The following statement contains a magic number: Assert.AreEqual(100' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanModifyRequestAndResponseBodyAndAddHeaders,The following statement contains a magic number: (++i % 2) == 0
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCreateNewXmlDocumentForNormalActions,The following statement contains a magic number: windsorContainer.Register(  				Component.For<MessageLifecycleBehavior>()'  				Component.For<IOperations>()  					.Named("operations")  					.AsWcfClient(new DefaultClientModel()  					{  						Endpoint = WcfEndpoint  							.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  							.At("net.tcp://localhost/Operations")  							.AddExtensions(start' new ReplaceOperationsResult("100").ExecuteAt(1)'  										   new ReplaceOperationsResult("200").ExecuteAt(2)'  										   new AddOperationsHeader("MyHeader"' "Hello")'  										   end)  					})  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCreateNewXmlDocumentForNormalActions,The following statement contains a magic number: Assert.AreEqual(200' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanProxyChannelFactoriesForAsyncSupport,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' call.End());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallBaseInterfaceAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' call.End());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyWithExplicitInterface,The following statement contains a magic number: Assert.AreEqual(42' client.EndGetValueFromConstructor(call));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyUsingStandardAsyncPattern,The following statement contains a magic number: Assert.AreEqual(42' client.EndWcfCall<int>(result));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsWithRefArgumentsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' call.End(out refValue));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsWithRefArgumentsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' refValue);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsWithOutAndRefArgumentsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' call.End(out refValue' out outValue));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsWithOutAndRefArgumentsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' refValue);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsWithOutAndRefArgumentsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' outValue);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyUsingServiceEndpoint,The following statement contains a magic number: Assert.AreEqual(42' call.End());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCallBackWhenAsynchronousOperationCompletes,The following statement contains a magic number: var result = client.BeginWcfCall(p => p.GetValueFromConstructor()'  				call => Assert.AreEqual(42' call.End())' null);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCallBackWhenAsynchronousOperationCompletes,The following statement contains a magic number: result.AsyncWaitHandle.WaitOne(5000);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCallBackResultWhenAsynchronousOperationCompletes,The following statement contains a magic number: var result = client.BeginWcfCall(p => p.GetValueFromConstructor()'  					(IAsyncResult ar) => Assert.AreEqual(22' client.EndWcfCall<int>(ar))' null);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillCallBackResultWhenAsynchronousOperationCompletes,The following statement contains a magic number: Assert.True(result.AsyncWaitHandle.WaitOne(5000));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyOnAsyncService,The following statement contains a magic number: var result = client.BeginWcfCall(p => p.GetValueFromConstructor()'  					(IAsyncResult ar) => Assert.AreEqual(22' client.EndWcfCall<int>(ar))' null);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyOnAsyncService,The following statement contains a magic number: Assert.True(result.AsyncWaitHandle.WaitOne(5000));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyWithExplicitAsyncPattern,The following statement contains a magic number: var result = client.BeginWcfCall(p => p.GetValueFromConstructor()'  				(IAsyncResult ar) => Assert.AreEqual(42' client.EndWcfCall<int>(ar))' null);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanCallChannelOperationsAsynchronouslyWithExplicitAsyncPattern,The following statement contains a magic number: Assert.True(result.AsyncWaitHandle.WaitOne(5000));
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillApplyCustomInterceptorsWhenCallingMethodsAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' call.End());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,ThrowsEndPointNotFoundException,The following statement contains a magic number: Func<IWindsorContainer> createLocalContainer = () =>  				new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(  					Component.For<Operations>()  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.ForContract<IOperations>()  								.BoundTo(new NetTcpBinding { PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations1"))  						)  					);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointAndInferBinding,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointFromMetadata,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointFromMetadataWithPreference,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillNotDiscoverServiceEndpointIfScopesDontMatch,The following statement contains a magic number: Assert.Throws<EndpointNotFoundException>(() =>  					{  						var client = clientContainer.Resolve<IOperations>();  						Assert.AreEqual(28' client.GetValueFromConstructor());  					});
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointAndInferBindingWithScope,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointAndInferBindingWithEndpointScope,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointAndInferBindingWithCombindedScopes,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointFromMetadataWithScope,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanAddAdditionalDiscoveryMetadata,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,CanDiscoverServiceEndpointInManagedMode,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\WcfClientFixture.cs,WillNotThrowUponClientContainerDisposalIfServerDies,The following statement contains a magic number: Assert.AreEqual(28' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,Inventory,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Components\Inventory.cs,Quantity,The following statement contains a magic number: writer.Write(10);
Magic Number,Castle.Facilities.WcfIntegration.Tests,Operations,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Components\Operations.cs,GetValueFromConstructorAsRef,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Castle.Facilities.WcfIntegration.Tests,Operations,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Components\Operations.cs,GetValueFromConstructorAsRefAndOut,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ConfigFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\ConfigFixture.cs,Can_use_component_based_solely_on_standard_wcf_config,The following statement contains a magic number: container.Register(  				Component.For<IServiceBehavior>()  					.Instance(new ServiceDebugBehavior()  					{  						IncludeExceptionDetailInFaults = true  					})'  				Component.For<NetDataContractFormatBehavior>()  					.Attribute("scope").Eq(WcfExtensionScope.Explicit)'  				Component.For<IAmUsingWindsor>().ImplementedBy<UsingWindsor>()  					.DependsOn(new { number = 42 })  					.AsWcfService(new DefaultServiceModel()  					)  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ConfigFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\ConfigFixture.cs,Can_use_component_based_solely_on_standard_wcf_config,The following statement contains a magic number: Assert.AreEqual(42' valueFromWindsorConfig);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ConfigFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\ConfigFixture.cs,Can_call_asynchronousely_component_based_solely_on_standard_wcf_config,The following statement contains a magic number: container.Register(  				Component.For<IServiceBehavior>()  					.Instance(new ServiceDebugBehavior()  					{  						IncludeExceptionDetailInFaults = true  					})'  				Component.For<NetDataContractFormatBehavior>()  					.Attribute("scope").Eq(WcfExtensionScope.Explicit)'  				Component.For<IAmUsingWindsor>().ImplementedBy<UsingWindsor>()  					.DependsOn(new { number = 42 })  					.AsWcfService(new DefaultServiceModel()  					)  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ConfigFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\ConfigFixture.cs,Can_call_asynchronousely_component_based_solely_on_standard_wcf_config,The following statement contains a magic number: Assert.AreEqual(42' valueFromWindsorConfig);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ContractLoadBalancePolicyFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\ContractLoadBalancePolicyFactoryTestCase.cs,WillCreatePolicyPerContract,The following statement contains a magic number: Assert.AreEqual(2' policies.Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,FirstAvailablePolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\FirstAvailablePolicyTestCase.cs,WillChooseFirst,The following statement contains a magic number: var endpoints = CreateEndpoints(2);
Magic Number,Castle.Facilities.WcfIntegration.Tests,FirstAvailablePolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\FirstAvailablePolicyTestCase.cs,WillShiftNextTargetDownIfNecessary,The following statement contains a magic number: CreateEndpoints(4);
Magic Number,Castle.Facilities.WcfIntegration.Tests,FirstAvailablePolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\FirstAvailablePolicyTestCase.cs,CanCollectTargets,The following statement contains a magic number: var endpoints = CreateEndpoints(4);
Magic Number,Castle.Facilities.WcfIntegration.Tests,RoundRobinPolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\RoundRobinPolicyTestCase.cs,WillRoundRobin,The following statement contains a magic number: var endpoints = CreateEndpoints(2);
Magic Number,Castle.Facilities.WcfIntegration.Tests,RoundRobinPolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\RoundRobinPolicyTestCase.cs,WillShiftNextTargetDownIfNecessary,The following statement contains a magic number: CreateEndpoints(4);
Magic Number,Castle.Facilities.WcfIntegration.Tests,RoundRobinPolicyTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\RoundRobinPolicyTestCase.cs,CanCollectTargets,The following statement contains a magic number: var endpoints = CreateEndpoints(4);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ScopeLoadBalancePolicyFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Discovery\LoadBalance\ScopeLoadBalancePolicyFactoryTestCase.cs,WillCreatePolicyPerScope,The following statement contains a magic number: Assert.AreEqual(2' policies.Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfOperationLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs,Dependencies_should_be_reused_among_services_within_call,The following statement contains a magic number: Assert.AreEqual(2' ServiceWithDependencies.Dependencies.Count);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfOperationLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs,Dependencies_should_not_reused_among_between_calls,The following statement contains a magic number: Assert.AreEqual(4' ServiceWithDependencies.Dependencies.Count);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfOperationLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs,Dependencies_should_not_reused_among_between_calls,The following statement contains a magic number: var one2 = ServiceWithDependencies.Dependencies[2] as IOne;
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfSessionLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs,Services_should_be_reused_among_calls_within_session,The following statement contains a magic number: Assert.AreEqual(2' invocations.Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfSessionLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs,Services_should_not_be_shared_between_two_subsequent_sessions,The following statement contains a magic number: Assert.AreEqual(6' ServiceWithSession.InstanceCount);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfSessionLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs,Services_should_not_be_shared_between_two_subsequent_sessions,The following statement contains a magic number: Assert.AreEqual(2' invocations.Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfSessionLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs,Services_should_not_be_shared_between_two_concurrent_sessions,The following statement contains a magic number: Assert.AreEqual(6' ServiceWithSession.InstanceCount);
Magic Number,Castle.Facilities.WcfIntegration.Tests,PerWcfSessionLifestyleTestCase,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs,Services_should_not_be_shared_between_two_concurrent_sessions,The following statement contains a magic number: Assert.AreEqual(2' invocations.Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFactoryFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFactoryFixture.cs,CanCallHostedService,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHost,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostPerCallAndOpenHost,The following statement contains a magic number: new System.Threading.Thread(() =>  					{  						int refValue = 0' outValue;  						Assert.AreEqual(42' client.GetValueFromConstructorAsRefAndOut(ref refValue' out outValue));  						//var result = client.BeginGetValueFromConstructorAsRefAndOut(ref refValue' null' null);  						//Assert.AreEqual(42' client.EndGetValueFromConstructorAsRefAndOut(ref refValue' out outValue' result));  					}).Start();
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostPerCallAndOpenHost,The following statement contains a magic number: i < 10
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostUsingDefaultBinding,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostFromConfiguration,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostWithMultipleEndpoints,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostWithRelativeEndpoints,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostWithListenAddress,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostFromXmlConfiguration,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromWindsorConfig());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostAndOpenHostWithMultipleServiceModels,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyServiceScopedBehaviorsToMultipleEndpoints,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyExplcitScopedKeyBehaviors,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,WillApplyExplcitScopedServiceBehaviors,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCaptureRequestsAndResponsesAtEndpointLevel,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCaptureRequestsAndResponsesAtEndpointLevel,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCaptureRequestsAndResponsesAtServiceLevel,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCaptureRequestsAndResponsesAtServiceLevel,The following statement contains a magic number: Assert.AreEqual(4' memoryAppender.GetEvents().Length);
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanModifyRequestsAndResponses,The following statement contains a magic number: Assert.AreEqual(100' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanGiveFriendlyErrorMessageForUunresolvedServiceDependenciesIfOpenEagerly,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,ServiceHostFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\ServiceHostFixture.cs,CanCreateServiceHostWithAspNetCompatibility,The following statement contains a magic number: Assert.AreEqual(42' client.GetValueFromConstructor());
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\WcfServiceFixture.cs,TestInitialize,The following statement contains a magic number: windsorContainer = new WindsorContainer()  				.AddFacility<WcfFacility>(f => f.CloseTimeout = TimeSpan.Zero)  				.Register(  					Component.For<ServiceHostListener>()'  					Component.For<LoggingInterceptor>()'  					Component.For<CallCountServiceBehavior>()'  					Component.For<UnitOfworkEndPointBehavior>()'  					Component.For<NetDataContractFormatBehavior>()'  					Component.For<IOperations>().ImplementedBy<Operations>()  						.Named("Operations")  						.Interceptors(InterceptorReference.ForType<LoggingInterceptor>()).Anywhere  						.DependsOn(new { number = 42 })  						.AsWcfService(new DefaultServiceModel().AddEndpoints(  							WcfEndpoint.BoundTo(new NetTcpBinding{PortSharingEnabled = true })  								.At("net.tcp://localhost/Operations")  								)  						)  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests,WcfServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\WcfServiceFixture.cs,CanCallServiceAndGetValueFromWindsorConfig,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,TestInitialize,The following statement contains a magic number: parameters.Add("number"' 42);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCreateDuplexProxyAndHandleCallback,The following statement contains a magic number: proxy.DoSomething(21);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCreateDuplexProxyAndHandleCallback,The following statement contains a magic number: Assert.AreEqual(42' callbackService.ValueFromTheOtherSide);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCallDuplexChannelAsynchronously,The following statement contains a magic number: proxy.BeginWcfCall(p => p.DoSomething(21)).End();
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCallDuplexChannelAsynchronously,The following statement contains a magic number: Assert.AreEqual(42' callbackService.ValueFromTheOtherSide);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCreateDuplexProxyAndHandleCallbackAsynchronously,The following statement contains a magic number: proxy.DoSomethingElse(21);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Duplex,DuplexClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Duplex\DuplexClientFixture.cs,CanCreateDuplexProxyAndHandleCallbackAsynchronously,The following statement contains a magic number: Assert.AreEqual(84' callbackService.ValueFromTheOtherSide);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,TestInitialize,The following statement contains a magic number: windsorContainer = new WindsorContainer()  				.AddFacility<WcfFacility>()  				.Register(Component.For<ICalculator>()  				                   .ImplementedBy<Calculator>()  				                   .DependsOn(new { number = 42 })  				                   .AsWcfService(new RestServiceModel("http://localhost:27198/UsingWindsor.svc"))  				);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanCallRestServiceAsynchronously,The following statement contains a magic number: var call = calculator.BeginWcfCall(p => p.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanCallRestServiceAsynchronously,The following statement contains a magic number: var call = calculator.BeginWcfCall(p => p.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanCallRestServiceAsynchronously,The following statement contains a magic number: Assert.AreEqual(21' call.End());
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanCallRestfulHostedService,The following statement contains a magic number: Assert.AreEqual(126' factory.CreateChannel().MultiplyValueFromWindsorConfig(3));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanCallRestfulHostedService,The following statement contains a magic number: Assert.AreEqual(126' factory.CreateChannel().MultiplyValueFromWindsorConfig(3));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveExplicitClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(75' calculator.Subtract(100' 25));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveExplicitClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(75' calculator.Subtract(100' 25));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestClientFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Client\Rest\RestClientFixture.cs,CanResolveExplicitClientAssociatedWithWebChannel,The following statement contains a magic number: Assert.AreEqual(75' calculator.Subtract(100' 25));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithBaseAddress,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithBaseAddress,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithBaseAddress,The following statement contains a magic number: Assert.AreEqual(21' calculator.Multiply(3' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithEndpoint,The following statement contains a magic number: Assert.AreEqual(8' calculator.Divide(56' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithEndpoint,The following statement contains a magic number: Assert.AreEqual(8' calculator.Divide(56' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithEndpoint,The following statement contains a magic number: Assert.AreEqual(8' calculator.Divide(56' 7));
Magic Number,Castle.Facilities.WcfIntegration.Tests.Rest,RestServiceFixture,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Service\Rest\RestServiceFixture.cs,CanCreateRestServiceWithoutInterfaceAndOpenHost,The following statement contains a magic number: Assert.AreEqual(10' reader.ReadInt32());
Magic Number,Castle.Facilities.WcfIntegration.Tests.Components,ServiceWithCallback,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Components\Callback.cs,DoSomething,The following statement contains a magic number: callbackService.Callback(value * 2);
Magic Number,Castle.Facilities.WcfIntegration.Tests.Components,ServiceWithCallback,D:\research\architectureSmells\repos\castleproject_Windsor\src\Castle.Facilities.WcfIntegration.Tests\Components\Callback.cs,DoSomethingElse,The following statement contains a magic number: callbackService.BeginWcfCall(p => p.Callback(value * 4));
