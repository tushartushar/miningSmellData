Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Format,Cyclomatic complexity of the method is 16
Complex Method,Amazon.WebServices.MechanicalTurk,ReflectionCache,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionCache.cs,SetPropertyPathValue,Cyclomatic complexity of the method is 11
Complex Method,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,EnsureQuestionIsWrappedAndValid,Cyclomatic complexity of the method is 9
Complex Method,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,Cyclomatic complexity of the method is 18
Complex Method,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,SendRequest,Cyclomatic complexity of the method is 11
Complex Method,Amazon.WebServices.MechanicalTurk,MTurkConfig,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkConfig.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,PreProcessOptionalRequestProperties,Cyclomatic complexity of the method is 15
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 13 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 13 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 13 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 13 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 14 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,RegisterHITType,The method has 7 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetReviewableHITs,The method has 6 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetAssignmentsForHIT,The method has 7 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetHITs,The method has 5 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateQualificationType,The method has 10 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetQualificationRequests,The method has 5 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,SearchQualificationTypes,The method has 7 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,UpdateQualificationType,The method has 9 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 6 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The method has 5 parameters.
Long Parameter List,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,UpdateHIT,The method has 5 parameters.
Long Statement,Amazon.WebServices.MechanicalTurk.Advanced,LeakyBucketRequestThrottler,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\LeakyBucketRequestThrottler.cs,ToString,The length of the statement  "	return string.Format ("LeakyBucketRequestThrottler for '{2}' (Burst: {0}' Rate {1})"' this.capacity' this.ratePerSecond' this.endpoint); " is 136.
Long Statement,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The length of the statement  "	Dictionary<string' List<List<KeyValuePair<string' string>>>> arrayValues = new Dictionary<string' List<List<KeyValuePair<string' string>>>> (); " is 143.
Long Statement,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Format,The length of the statement  "						if (pi.PropertyType.Equals (typeof(string)) || pi.PropertyType.IsPrimitive || pi.PropertyType.IsEnum || pi.PropertyType.IsValueType) { " is 134.
Long Statement,Amazon.WebServices.MechanicalTurk.Advanced,TraceLogger,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\TraceLogger.cs,LogMessage,The length of the statement  "	Trace.WriteLine (string.Format ("[{0}_{1}] {2:yyyy-MM-ddTHH:mm:ss.fffZ} {3}"' AppDomain.CurrentDomain.FriendlyName' System.Threading.Thread.CurrentThread.GetHashCode ()' DateTime.Now' string.Format (format' args))' level); " is 222.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionCache,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionCache.cs,GetPropertyPath,The length of the statement  "						throw new InvalidOperationException (string.Format ("Cannot resolve property resolvedPath '{0}'. No such property: {1}"' propertyPath' parts [i])); " is 147.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionCache,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionCache.cs,SetPropertyPathValue,The length of the statement  "					throw new InvalidOperationException (string.Format ("Cannot execute property resolvedPath '{0}'. No default constructor found for type '{1}'"' propertyPath' curType.FullName)); " is 176.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionCache,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionCache.cs,SetPropertyPathValue,The length of the statement  "				throw new InvalidOperationException (string.Format ("Cannot execute property resolvedPath '{0}'. Property '{1}' is neither class nor value type"' propertyPath' pi.Name)); " is 170.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionCache,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionCache.cs,SetPropertyPathValue,The length of the statement  "						MTurkLog.Warn ("No type conversion/parser found for {0}. Defaulting to {1} ({2})"' pi.Name' newValueForProperty' newValueForProperty.GetType ().Name); " is 150.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The length of the statement  "	return CreateHIT (hitTypeId' title' description' keywords' QuestionUtil.SerializeQuestionForm (question)' reward' assignmentDurationInSeconds' autoApprovalDelayInSeconds' lifetimeInSeconds' maxAssignments' requesterAnnotation' qualificationRequirements' responseGroup); " is 269.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The length of the statement  "	return CreateHIT (hitTypeId' title' description' keywords' QuestionUtil.SerializeExternalQuestion (externalQuestion)' reward' assignmentDurationInSeconds' autoApprovalDelayInSeconds' lifetimeInSeconds' maxAssignments' requesterAnnotation' qualificationRequirements' responseGroup); " is 281.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The length of the statement  "	return CreateHIT (hitTypeId' title' description' keywords' QuestionUtil.SerializeHTMLQuestion (question)' reward' assignmentDurationInSeconds' autoApprovalDelayInSeconds' lifetimeInSeconds' maxAssignments' requesterAnnotation' qualificationRequirements' responseGroup); " is 269.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The length of the statement  "	return CreateHIT (newHit.HITTypeId' newHit.Title' newHit.Description' newHit.Keywords' newHit.Question' newHit.Reward != null ? newHit.Reward.Amount : (decimal?)null' newHit.AssignmentDurationInSecondsSpecified ? newHit.AssignmentDurationInSeconds : (long?)null' newHit.AutoApprovalDelayInSecondsSpecified ? newHit.AutoApprovalDelayInSeconds : (long?)null' newHit.ExpirationSpecified ? (long)(newHit.Expiration - DateTime.Now).TotalSeconds : 0' newHit.MaxAssignmentsSpecified ? newHit.MaxAssignments : (int?)null' newHit.RequesterAnnotation' newHit.QualificationRequirement != null ? new List<QualificationRequirement> (newHit.QualificationRequirement) : null' null); " is 667.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetQualificationsForQualificationType,The length of the statement  "	GetQualificationsForQualificationTypeResult result = GetQualificationsForQualificationType (qualificationTypeId' QualificationStatus.Granted' pageNum' null); " is 157.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetQualificationRequests,The length of the statement  "	GetQualificationRequestsResult result = GetQualificationRequests (qualificationTypeId' null' GetQualificationRequestsSortProperty.SubmitTime' null' null); " is 154.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetQualificationRequests,The length of the statement  "	return (result.QualificationRequest == null) ? new List<QualificationRequest> () : new List<QualificationRequest> (result.QualificationRequest); " is 144.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetReviewableHITs,The length of the statement  "	GetReviewableHITsResult result = GetReviewableHITs (hitTypeId' ReviewableHITStatus.Reviewable' null' GetReviewableHITsSortProperty.Enumeration' pageNum' null); " is 159.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetHITs,The length of the statement  "	SearchHITsResult result = GetHITs (null' SearchHITsSortProperty.Enumeration' pageNum' null' getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null); " is 154.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,UpdateHIT,The length of the statement  "	string newHITTypeId = RegisterHITType (title' description' DefaultAutoApprovalDelayInSeconds' DefaultAssignmentDurationInSeconds' reward' keywords' null); " is 154.
Long Statement,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,GetFormatter,The length of the statement  "		throw new InvalidOperationException ("Not implemented. Persisting objects to file currently is only supported for XML and property files"); " is 139.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,EnsureQuestionIsWrappedAndValid,The length of the statement  "		if ((!string.IsNullOrEmpty (ret)) && (ret [0] != '<') && (ret.IndexOf ("</QuestionForm>") == -1) && (ret.IndexOf ("</ExternalQuestion>") == -1)) { " is 146.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,GetResult,The length of the statement  "		throw new ServiceException ("AWS.MechanicalTurk.Version"' "It appears you are running an old API version and attempt to invoke a new service operation"' ex); " is 157.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,The length of the statement  "			if ("AWS.MechanicalTurk.NoMoreWorkableHITsInGroupException|AWS.MechanicalTurk.NoHITsAvailableInGroupException|AWS.MechanicalTurk.NoHITsAvailableForIterator".IndexOf (code) != -1) { " is 180.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,The length of the statement  "			if ("AWS.MechanicalTurk.QualificationDoesNotExist|AWS.MechanicalTurk.QualificationRequestDoesNotExist|AWS.MechanicalTurk.QualificationTypeDoesNotExist|AWS.MechanicalTurk.AssignmentDoesNotExist|AWS.MechanicalTurk.HITDoesNotExist".IndexOf (code) != -1) { " is 252.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,The length of the statement  "			if ("AWS.MechanicalTurk.InvalidHITState|AWS.MechanicalTurk.InvalidQualificationTypeState|AWS.MechanicalTurk.InvalidQualificationState|AWS.MechanicalTurk.InvalidQualificationRequestState|AWS.MechanicalTurk.InvalidAssignmentState|AWS.MechanicalTurk.HITAlreadyPassedReview".IndexOf (code) != -1) { " is 294.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,The length of the statement  "			if ("AWS.MechanicalTurk.AssignmentAlreadyExists|AWS.MechanicalTurk.QualificationTypeAlreadyExists|AWS.MechanicalTurk.QualificationAlreadyExists".IndexOf (code) != -1) { " is 168.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,ProcessErrors,The length of the statement  "			if ("AWS.MechanicalTurk.QualificationTypeRetryDelayNotElapsed|AWS.MechanicalTurk.QualificationTypeDoesNotAllowRetake".IndexOf (code) != -1) { " is 141.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The length of the statement  "						throw new ServiceException ("AWS.MechanicalTurk.InvalidUrl"' "Could not send request to endpoint. Check endpoint URL " + Config.ServiceEndpoint' lastEx); " is 153.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The length of the statement  "					if (httpResponse.StatusCode == HttpStatusCode.InternalServerError || httpResponse.StatusCode == HttpStatusCode.ServiceUnavailable) { " is 132.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,GetQualificationsForQualificationType,The length of the statement  "	GetQualificationsForQualificationTypeResponse response = (GetQualificationsForQualificationTypeResponse)(this.SendRequest (request)); " is 133.
Long Statement,Amazon.WebServices.MechanicalTurk,MTurkConfig,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkConfig.cs,ToString,The length of the statement  "	return string.Format ("Url: {0}' AWS Info: {1}' Proxy: {2}"' this.ServiceEndpoint' this.AccessKeyId.GetHashCode ()' this.Proxy != null); " is 136.
Long Statement,Amazon.WebServices.MechanicalTurk,HMACSigner,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\HMACSigner.cs,GetAwsDateStamp,The length of the statement  "	DateTime ret = new DateTime (now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc); " is 128.
Long Statement,Amazon.WebServices.MechanicalTurk,HMACSigner,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\HMACSigner.cs,GetAwsSignature,The length of the statement  "	string dataToSign = awsService + operation + timeStamp.ToString (TIMESTAMP_FORMAT' System.Globalization.CultureInfo.InvariantCulture); " is 134.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,GetCachedCtor,The length of the statement  "				Type envType = itemType.Assembly.GetType (itemType.FullName.Substring (0' itemType.FullName.Length - REQUEST_POSTFIX.Length)' true); " is 132.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,GetCachedOptionalProperties,The length of the statement  "					if (pi.Name.EndsWith ("Specified") && pi.GetCustomAttributes (typeof(System.Xml.Serialization.XmlIgnoreAttribute)' false) != null) { " is 132.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,GetCachedPageSize,The length of the statement  "					string defaultValue = MTurkConfig.CurrentInstance.GetConfig ("MechanicalTurk.Defaults.PageSize." + itemType.Name' MTurkConfig.CurrentInstance.GetConfig ("MechanicalTurk.Defaults.PageSize"' null)); " is 196.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,PreProcessOptionalRequestProperties,The length of the statement  "										requiresSpecSet = !(Decimal.Parse (valRef.ToString ()' System.Globalization.CultureInfo.InvariantCulture.NumberFormat).Equals (Decimal.Zero)); " is 142.
Long Statement,Amazon.WebServices.MechanicalTurk,ReflectionUtil,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\ReflectionUtil.cs,PreProcessOptionalRequestProperties,The length of the statement  "									MTurkLog.Warn ("Cannot preprocess optional property {0} for type {1} (No handler for property type {2})."' piRef.Name' itemType.FullName' propTypeRef.FullName); " is 160.
Complex Conditional,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Format,The conditional expression  "pi.PropertyType.Equals (typeof(string)) || pi.PropertyType.IsPrimitive || pi.PropertyType.IsEnum || pi.PropertyType.IsValueType"  is complex.
Complex Conditional,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,UpdateHIT,The conditional expression  "title == null || description == null || keywords == null || reward == null"  is complex.
Complex Conditional,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,EnsureQuestionIsWrappedAndValid,The conditional expression  "(!string.IsNullOrEmpty (ret)) && (ret [0] != '<') && (ret.IndexOf ("</QuestionForm>") == -1) && (ret.IndexOf ("</ExternalQuestion>") == -1)"  is complex.
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,LeakyBucketRequestThrottler,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\LeakyBucketRequestThrottler.cs,LeakyBucketRequestThrottler,The following statement contains a magic number: timerRefill = new Timer (new TimerCallback (OnRefill)' null' 1000' 1000);  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,LeakyBucketRequestThrottler,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\LeakyBucketRequestThrottler.cs,LeakyBucketRequestThrottler,The following statement contains a magic number: timerRefill = new Timer (new TimerCallback (OnRefill)' null' 1000' 1000);  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: while (curLine != null) {  	curLine = curLine.Trim ();  	if (!string.IsNullOrEmpty (curLine) && curLine [0] != COMMENT_CHAR) {  		idxSeparator = curLine.IndexOf (SEPARATOR_CHAR);  		if (idxSeparator != -1) {  			key = curLine.Substring (0' idxSeparator);  			val = curLine.Substring (idxSeparator + 1);  			// check if the key is indexed/array  			idxIndex1 = key.IndexOf (INDEX_START_CHAR);  			if (idxIndex1 == -1) {  				singleValues.Add (new KeyValuePair<string' string> (key' val));  			}  			else {  				idxIndex2 = key.IndexOf (INDEX_END_CHAR);  				if (idxIndex2 < idxIndex1) {  					throw new InvalidDataException ("Cannot read index for property: " + key);  				}  				else {  					keyIndex = key.Substring (idxIndex1 + 1' idxIndex2 - idxIndex1 - 1);  					if (int.TryParse (keyIndex' out curIndex)) {  						keyIndexBase = key.Substring (0' idxIndex1);  						keyIndexProp = key.Substring (idxIndex2 + 2);  						if (!arrayValues.ContainsKey (keyIndexBase)) {  							arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  						}  						curArrayList = arrayValues [keyIndexBase];  						if (curArrayList == null || curArrayList.Count <= curIndex) {  							curArrayList.Add (new List<KeyValuePair<string' string>> ());  						}  						curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  					}  					else {  						throw new InvalidDataException ("Not a valid indexed property: " + key);  					}  				}  			}  		}  	}  	curLine = reader.ReadLine ();  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (curLine) && curLine [0] != COMMENT_CHAR) {  	idxSeparator = curLine.IndexOf (SEPARATOR_CHAR);  	if (idxSeparator != -1) {  		key = curLine.Substring (0' idxSeparator);  		val = curLine.Substring (idxSeparator + 1);  		// check if the key is indexed/array  		idxIndex1 = key.IndexOf (INDEX_START_CHAR);  		if (idxIndex1 == -1) {  			singleValues.Add (new KeyValuePair<string' string> (key' val));  		}  		else {  			idxIndex2 = key.IndexOf (INDEX_END_CHAR);  			if (idxIndex2 < idxIndex1) {  				throw new InvalidDataException ("Cannot read index for property: " + key);  			}  			else {  				keyIndex = key.Substring (idxIndex1 + 1' idxIndex2 - idxIndex1 - 1);  				if (int.TryParse (keyIndex' out curIndex)) {  					keyIndexBase = key.Substring (0' idxIndex1);  					keyIndexProp = key.Substring (idxIndex2 + 2);  					if (!arrayValues.ContainsKey (keyIndexBase)) {  						arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  					}  					curArrayList = arrayValues [keyIndexBase];  					if (curArrayList == null || curArrayList.Count <= curIndex) {  						curArrayList.Add (new List<KeyValuePair<string' string>> ());  					}  					curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  				}  				else {  					throw new InvalidDataException ("Not a valid indexed property: " + key);  				}  			}  		}  	}  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: if (idxSeparator != -1) {  	key = curLine.Substring (0' idxSeparator);  	val = curLine.Substring (idxSeparator + 1);  	// check if the key is indexed/array  	idxIndex1 = key.IndexOf (INDEX_START_CHAR);  	if (idxIndex1 == -1) {  		singleValues.Add (new KeyValuePair<string' string> (key' val));  	}  	else {  		idxIndex2 = key.IndexOf (INDEX_END_CHAR);  		if (idxIndex2 < idxIndex1) {  			throw new InvalidDataException ("Cannot read index for property: " + key);  		}  		else {  			keyIndex = key.Substring (idxIndex1 + 1' idxIndex2 - idxIndex1 - 1);  			if (int.TryParse (keyIndex' out curIndex)) {  				keyIndexBase = key.Substring (0' idxIndex1);  				keyIndexProp = key.Substring (idxIndex2 + 2);  				if (!arrayValues.ContainsKey (keyIndexBase)) {  					arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  				}  				curArrayList = arrayValues [keyIndexBase];  				if (curArrayList == null || curArrayList.Count <= curIndex) {  					curArrayList.Add (new List<KeyValuePair<string' string>> ());  				}  				curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  			}  			else {  				throw new InvalidDataException ("Not a valid indexed property: " + key);  			}  		}  	}  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: if (idxIndex1 == -1) {  	singleValues.Add (new KeyValuePair<string' string> (key' val));  }  else {  	idxIndex2 = key.IndexOf (INDEX_END_CHAR);  	if (idxIndex2 < idxIndex1) {  		throw new InvalidDataException ("Cannot read index for property: " + key);  	}  	else {  		keyIndex = key.Substring (idxIndex1 + 1' idxIndex2 - idxIndex1 - 1);  		if (int.TryParse (keyIndex' out curIndex)) {  			keyIndexBase = key.Substring (0' idxIndex1);  			keyIndexProp = key.Substring (idxIndex2 + 2);  			if (!arrayValues.ContainsKey (keyIndexBase)) {  				arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  			}  			curArrayList = arrayValues [keyIndexBase];  			if (curArrayList == null || curArrayList.Count <= curIndex) {  				curArrayList.Add (new List<KeyValuePair<string' string>> ());  			}  			curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  		}  		else {  			throw new InvalidDataException ("Not a valid indexed property: " + key);  		}  	}  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: if (idxIndex2 < idxIndex1) {  	throw new InvalidDataException ("Cannot read index for property: " + key);  }  else {  	keyIndex = key.Substring (idxIndex1 + 1' idxIndex2 - idxIndex1 - 1);  	if (int.TryParse (keyIndex' out curIndex)) {  		keyIndexBase = key.Substring (0' idxIndex1);  		keyIndexProp = key.Substring (idxIndex2 + 2);  		if (!arrayValues.ContainsKey (keyIndexBase)) {  			arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  		}  		curArrayList = arrayValues [keyIndexBase];  		if (curArrayList == null || curArrayList.Count <= curIndex) {  			curArrayList.Add (new List<KeyValuePair<string' string>> ());  		}  		curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  	}  	else {  		throw new InvalidDataException ("Not a valid indexed property: " + key);  	}  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: if (int.TryParse (keyIndex' out curIndex)) {  	keyIndexBase = key.Substring (0' idxIndex1);  	keyIndexProp = key.Substring (idxIndex2 + 2);  	if (!arrayValues.ContainsKey (keyIndexBase)) {  		arrayValues [keyIndexBase] = new List<List<KeyValuePair<string' string>>> ();  	}  	curArrayList = arrayValues [keyIndexBase];  	if (curArrayList == null || curArrayList.Count <= curIndex) {  		curArrayList.Add (new List<KeyValuePair<string' string>> ());  	}  	curArrayList [curIndex].Add (new KeyValuePair<string' string> (keyIndexProp' val));  }  else {  	throw new InvalidDataException ("Not a valid indexed property: " + key);  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,PropertyFormatter,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\PropertyFormatter.cs,Parse,The following statement contains a magic number: keyIndexProp = key.Substring (idxIndex2 + 2);  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,MTurkLog,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\MTurkLog.cs,Info,The following statement contains a magic number: if (Level <= 2) {  	_logger.Info (format' args);  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,MTurkLog,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\MTurkLog.cs,Warn,The following statement contains a magic number: if (Level <= 3) {  	_logger.Warn (format' args);  }  
Magic Number,Amazon.WebServices.MechanicalTurk.Advanced,MTurkLog,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Advanced\MTurkLog.cs,Error,The following statement contains a magic number: if (Level <= 4) {  	_logger.Error (format' args);  }  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: req.LifetimeInSeconds = (lifetimeInSeconds <= 30) ? DefaultLifeTimeInSeconds : lifetimeInSeconds;  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: req.LifetimeInSeconds = (lifetimeInSeconds <= 30) ? DefaultLifeTimeInSeconds : lifetimeInSeconds;  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,SimpleClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\SimpleClient.cs,CreateHIT,The following statement contains a magic number: return CreateHIT (null' // HITTypeId  title' description' null' // Keywords  question' reward' (long)60 * 60' // assignmentDurationInSeconds' 1 hour  (long)60 * 60 * 24 * 15' // autoApprovalDelayInSeconds' 15 days  (long)60 * 60 * 24 * 3' // lifetimeInSeconds' 3 days  maxAssignments' null' //requesterAnnotation  null' // qualificationRequirements  getFullResponse ? MTurkConstants.ResponseGroupFullHIT : null);  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The following statement contains a magic number: do {  	// sign the envelope (=resign on retry)  	DateTime now = HMACSigner.GetAwsDateStamp ();  	ReflectionUtil.SetPropertyValue ("AWSAccessKeyId"' envelope' Config.AccessKeyId);  	ReflectionUtil.SetPropertyValue ("Timestamp"' envelope' now);  	ReflectionUtil.SetPropertyValue ("Signature"' envelope' Config.Signer.GetAwsSignature (envelope.GetType ().Name' now));  	soapEx = null;  	httpResponse = null;  	try {  		return _protocol.DoTransport (envelope' envelope.GetType ().Name);  	}  	catch (System.Reflection.TargetInvocationException invocationEx) {  		lastEx = invocationEx.InnerException;  		soapEx = lastEx as SoapException;  		bool retry = false;  		if (soapEx == null) {  			// check for timeout  			WebException webEx = lastEx as WebException;  			if (webEx != null && webEx.Status == WebExceptionStatus.Timeout) {  				// retry on timeout  				MTurkLog.Info ("Request timed out");  				retry = true;  			}  			else {  				// invalid service endpoint is null reference exception  				if (lastEx is NullReferenceException) {  					throw new ServiceException ("AWS.MechanicalTurk.InvalidUrl"' "Could not send request to endpoint. Check endpoint URL " + Config.ServiceEndpoint' lastEx);  				}  				// raise inner exception (cannot be retried)  				throw lastEx;  			}  		}  		else {  			httpResponse = _protocol.CurrentWebResponse;  			if (httpResponse == null) {  				throw new ServiceException ("AWS.MechanicalTurk.NoResponse"' "No HTTP response received for request");  			}  			else {  				if (httpResponse.StatusCode == HttpStatusCode.InternalServerError || httpResponse.StatusCode == HttpStatusCode.ServiceUnavailable) {  					// retry due to AWS service throttling  					MTurkLog.Info ("Received HTTP error {0} ({1})"' httpResponse.StatusCode' httpResponse.StatusDescription);  					retry = true;  				}  			}  		}  		if (retry) {  			// retry due to AWS service throttling or http timeout  			MTurkLog.Debug ("Retrying request in {0} msecs."' retryDelayInMilliseconds);  			System.Threading.Thread.Sleep (retryDelayInMilliseconds);  			retryDelayInMilliseconds = retryDelayInMilliseconds * 2;  		}  	}  }  while (retryDelayInMilliseconds <= Config.MaxRetryDelay);  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The following statement contains a magic number: try {  	return _protocol.DoTransport (envelope' envelope.GetType ().Name);  }  catch (System.Reflection.TargetInvocationException invocationEx) {  	lastEx = invocationEx.InnerException;  	soapEx = lastEx as SoapException;  	bool retry = false;  	if (soapEx == null) {  		// check for timeout  		WebException webEx = lastEx as WebException;  		if (webEx != null && webEx.Status == WebExceptionStatus.Timeout) {  			// retry on timeout  			MTurkLog.Info ("Request timed out");  			retry = true;  		}  		else {  			// invalid service endpoint is null reference exception  			if (lastEx is NullReferenceException) {  				throw new ServiceException ("AWS.MechanicalTurk.InvalidUrl"' "Could not send request to endpoint. Check endpoint URL " + Config.ServiceEndpoint' lastEx);  			}  			// raise inner exception (cannot be retried)  			throw lastEx;  		}  	}  	else {  		httpResponse = _protocol.CurrentWebResponse;  		if (httpResponse == null) {  			throw new ServiceException ("AWS.MechanicalTurk.NoResponse"' "No HTTP response received for request");  		}  		else {  			if (httpResponse.StatusCode == HttpStatusCode.InternalServerError || httpResponse.StatusCode == HttpStatusCode.ServiceUnavailable) {  				// retry due to AWS service throttling  				MTurkLog.Info ("Received HTTP error {0} ({1})"' httpResponse.StatusCode' httpResponse.StatusDescription);  				retry = true;  			}  		}  	}  	if (retry) {  		// retry due to AWS service throttling or http timeout  		MTurkLog.Debug ("Retrying request in {0} msecs."' retryDelayInMilliseconds);  		System.Threading.Thread.Sleep (retryDelayInMilliseconds);  		retryDelayInMilliseconds = retryDelayInMilliseconds * 2;  	}  }  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The following statement contains a magic number: if (retry) {  	// retry due to AWS service throttling or http timeout  	MTurkLog.Debug ("Retrying request in {0} msecs."' retryDelayInMilliseconds);  	System.Threading.Thread.Sleep (retryDelayInMilliseconds);  	retryDelayInMilliseconds = retryDelayInMilliseconds * 2;  }  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,AttemptSend,The following statement contains a magic number: retryDelayInMilliseconds = retryDelayInMilliseconds * 2;  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,SendRequest,The following statement contains a magic number: try {  	// set config for current thread  	MTurkConfig.CurrentInstance = Config;  	// envelope holding the common request parameters  	object envelope = null;  	// if the request item (or an array of them) is passed' then we need to  	// wrap them in a request envelope holding the common properties. Otherwise  	// the envelope itself was passed and we simply need to set the reference to it.  	if (req.GetType ().IsArray || req.GetType ().Name.EndsWith ("Request")) {  		envelope = ReflectionUtil.CreateRequestEnvelope (req);  	}  	else {  		envelope = req;  	}  	// throttle request if necessary  	if (_throttler != null) {  		_throttler.StartRequest ();  	}  	// set common properties  	object request = ReflectionUtil.GetPropertyValue ("Request"' envelope);  	// set list properties (pagenumber/size) automatically (if not explicitly set)  	ReflectionUtil.SetPagingProperties (request);  	// preprocess optional parameters so we don't   	// need to set the "xxxSpecified" properties explicitly  	ReflectionUtil.PreProcessOptionalRequestProperties (request);  	// send the request (with retry attempts)  	ret = AttemptSend (envelope' envelope.GetType ().Name' 1000);  	// we got a response' parse if there are any errors  	if (ret == null) {  		throw new ServiceException ("AWS.MechanicalTurk.Unkown"' "Empty result' unknown error.");  	}  	MTurkLog.Debug ("Received response {0}"' ret.GetType ().Name);  	// check if any errors are included in the response (adapted from Java SDK)              	OperationRequest opsReq = ReflectionUtil.GetPropertyValue ("OperationRequest"' ret) as OperationRequest;  	if (opsReq == null) {  		throw new ServiceException ("AWS.MechanicalTurk.Unkown"' "Empty operation request");  	}  	ErrorsError[] errors = opsReq.Errors;  	// AWS.* scoped errors (like auth failures)  	if (errors == null) {  		// check for MTurk specific errors by reflecting the result Property (ie "response->result[]->Request->Errors")  		object[] resultObject = GetResult (ret);  		// examine if any of the results have errors  		for (int i = 0; i < resultObject.Length; i++) {  			Request resultRequest = ReflectionUtil.GetPropertyValue ("Request"' resultObject [i]) as Request;  			if (req != null && resultRequest.Errors != null) {  				errors = resultRequest.Errors;  				break;  			}  		}  	}  	// if errors were found' parse them and raise them as exceptions  	if (errors != null) {  		ProcessErrors (errors' ret' opsReq);  	}  }  catch (Exception ex) {  	// log and rethrow;  	MTurkLog.Error ("{0}: {1}{2}{3}"' ex.GetType ().Name' ex.Message' Environment.NewLine' ex.StackTrace);  	throw;  }  finally {  	MTurkConfig.CurrentInstance = null;  }  
Magic Number,Amazon.WebServices.MechanicalTurk,MTurkClient,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\MTurkClient.cs,SendRequest,The following statement contains a magic number: ret = AttemptSend (envelope' envelope.GetType ().Name' 1000);  
Magic Number,Amazon.WebServices.MechanicalTurk,HMACSigner,C:\repos\xinmyname_dotnet-aws-mturk\Source\Amazon.WebServices.MechanicalTurk\Misc\HMACSigner.cs,GetAwsDateStamp,The following statement contains a magic number: if (ret.Millisecond % 10 == 0) {  	ret = ret.AddMilliseconds (1);  }  
