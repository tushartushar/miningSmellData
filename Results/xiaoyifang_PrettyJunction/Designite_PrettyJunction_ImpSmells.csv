Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Complex Method,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,GetLines,Cyclomatic complexity of the method is 8
Complex Method,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,GetLineEnd,Cyclomatic complexity of the method is 11
Long Parameter List,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,CreateFile,The method has 7 parameters.
Long Parameter List,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,GetOptionParts,The method has 5 parameters.
Long Statement,PrettyJunction,JunctionManager,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionManager.cs,CreateJunction,The length of the statement  "		WriteError ("[source]:{1}'[target]:{2}'[error]:{0}'[stack trace]:{3}"' ex.Message' junctionPoint' target' ex.StackTrace); " is 121.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The length of the statement  "			bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_SET_REPARSE_POINT' inBuffer' targetDirBytes.Length + 20' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero); " is 172.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Delete,The length of the statement  "			bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_DELETE_REPARSE_POINT' inBuffer' 8' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero); " is 150.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,InternalGetTarget,The length of the statement  "		bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_GET_REPARSE_POINT' IntPtr.Zero' 0' outBuffer' outBufferSize' out bytesReturned' IntPtr.Zero); " is 160.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,InternalGetTarget,The length of the statement  "		REPARSE_DATA_BUFFER reparseDataBuffer = (REPARSE_DATA_BUFFER)Marshal.PtrToStructure (outBuffer' typeof(REPARSE_DATA_BUFFER)); " is 125.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,InternalGetTarget,The length of the statement  "		string targetDir = Encoding.Unicode.GetString (reparseDataBuffer.PathBuffer' reparseDataBuffer.SubstituteNameOffset' reparseDataBuffer.SubstituteNameLength); " is 157.
Long Statement,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,OpenReparsePoint,The length of the statement  "	SafeFileHandle reparsePointHandle = new SafeFileHandle (CreateFile (reparsePoint' accessMode' EFileShare.Read | EFileShare.Write | EFileShare.Delete' IntPtr.Zero' ECreationDisposition.OpenExisting' EFileAttributes.BackupSemantics | EFileAttributes.OpenReparsePoint' IntPtr.Zero)' true); " is 286.
Long Statement,NDesk.Options,OptionValueCollection,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' typeof(T).Name' c.OptionName)' c.OptionName' e); " is 192.
Long Statement,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' StringSplitOptions.None) : new string[] { " is 137.
Long Statement,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,NDesk.Options,Option,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,PrettyJunction,JunctionManager,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionManager.cs,ProcessLine,The following statement contains a magic number: if (parts.Length != 2) {  	WriteError ("line format error:{0}"' line);  	return;  }  
Magic Number,PrettyJunction,JunctionManager,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionManager.cs,ProcessVariable,The following statement contains a magic number: if (parts.Length != 2) {  	WriteError ("line format error:{0}"' line);  	return;  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: using (SafeFileHandle handle = OpenReparsePoint (junctionPoint' EFileAccess.GenericWrite)) {  	byte[] targetDirBytes = Encoding.Unicode.GetBytes (NonInterpretedPathPrefix + Path.GetFullPath (targetDir));  	REPARSE_DATA_BUFFER reparseDataBuffer = new REPARSE_DATA_BUFFER ();  	reparseDataBuffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;  	reparseDataBuffer.ReparseDataLength = (ushort)(targetDirBytes.Length + 12);  	reparseDataBuffer.SubstituteNameOffset = 0;  	reparseDataBuffer.SubstituteNameLength = (ushort)targetDirBytes.Length;  	reparseDataBuffer.PrintNameOffset = (ushort)(targetDirBytes.Length + 2);  	reparseDataBuffer.PrintNameLength = 0;  	reparseDataBuffer.PathBuffer = new byte[0x3ff0];  	Array.Copy (targetDirBytes' reparseDataBuffer.PathBuffer' targetDirBytes.Length);  	int inBufferSize = Marshal.SizeOf (reparseDataBuffer);  	IntPtr inBuffer = Marshal.AllocHGlobal (inBufferSize);  	try {  		Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  		int bytesReturned;  		bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_SET_REPARSE_POINT' inBuffer' targetDirBytes.Length + 20' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  		if (!result) {  			Console.WriteLine ("junction point={0}'target dir={1}"' junctionPoint' targetDir);  			ThrowLastWin32Error ("Unable to create junction point.");  		}  	}  	finally {  		Marshal.FreeHGlobal (inBuffer);  	}  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: using (SafeFileHandle handle = OpenReparsePoint (junctionPoint' EFileAccess.GenericWrite)) {  	byte[] targetDirBytes = Encoding.Unicode.GetBytes (NonInterpretedPathPrefix + Path.GetFullPath (targetDir));  	REPARSE_DATA_BUFFER reparseDataBuffer = new REPARSE_DATA_BUFFER ();  	reparseDataBuffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;  	reparseDataBuffer.ReparseDataLength = (ushort)(targetDirBytes.Length + 12);  	reparseDataBuffer.SubstituteNameOffset = 0;  	reparseDataBuffer.SubstituteNameLength = (ushort)targetDirBytes.Length;  	reparseDataBuffer.PrintNameOffset = (ushort)(targetDirBytes.Length + 2);  	reparseDataBuffer.PrintNameLength = 0;  	reparseDataBuffer.PathBuffer = new byte[0x3ff0];  	Array.Copy (targetDirBytes' reparseDataBuffer.PathBuffer' targetDirBytes.Length);  	int inBufferSize = Marshal.SizeOf (reparseDataBuffer);  	IntPtr inBuffer = Marshal.AllocHGlobal (inBufferSize);  	try {  		Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  		int bytesReturned;  		bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_SET_REPARSE_POINT' inBuffer' targetDirBytes.Length + 20' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  		if (!result) {  			Console.WriteLine ("junction point={0}'target dir={1}"' junctionPoint' targetDir);  			ThrowLastWin32Error ("Unable to create junction point.");  		}  	}  	finally {  		Marshal.FreeHGlobal (inBuffer);  	}  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: using (SafeFileHandle handle = OpenReparsePoint (junctionPoint' EFileAccess.GenericWrite)) {  	byte[] targetDirBytes = Encoding.Unicode.GetBytes (NonInterpretedPathPrefix + Path.GetFullPath (targetDir));  	REPARSE_DATA_BUFFER reparseDataBuffer = new REPARSE_DATA_BUFFER ();  	reparseDataBuffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;  	reparseDataBuffer.ReparseDataLength = (ushort)(targetDirBytes.Length + 12);  	reparseDataBuffer.SubstituteNameOffset = 0;  	reparseDataBuffer.SubstituteNameLength = (ushort)targetDirBytes.Length;  	reparseDataBuffer.PrintNameOffset = (ushort)(targetDirBytes.Length + 2);  	reparseDataBuffer.PrintNameLength = 0;  	reparseDataBuffer.PathBuffer = new byte[0x3ff0];  	Array.Copy (targetDirBytes' reparseDataBuffer.PathBuffer' targetDirBytes.Length);  	int inBufferSize = Marshal.SizeOf (reparseDataBuffer);  	IntPtr inBuffer = Marshal.AllocHGlobal (inBufferSize);  	try {  		Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  		int bytesReturned;  		bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_SET_REPARSE_POINT' inBuffer' targetDirBytes.Length + 20' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  		if (!result) {  			Console.WriteLine ("junction point={0}'target dir={1}"' junctionPoint' targetDir);  			ThrowLastWin32Error ("Unable to create junction point.");  		}  	}  	finally {  		Marshal.FreeHGlobal (inBuffer);  	}  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: reparseDataBuffer.ReparseDataLength = (ushort)(targetDirBytes.Length + 12);  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: reparseDataBuffer.PrintNameOffset = (ushort)(targetDirBytes.Length + 2);  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Create,The following statement contains a magic number: try {  	Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  	int bytesReturned;  	bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_SET_REPARSE_POINT' inBuffer' targetDirBytes.Length + 20' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  	if (!result) {  		Console.WriteLine ("junction point={0}'target dir={1}"' junctionPoint' targetDir);  		ThrowLastWin32Error ("Unable to create junction point.");  	}  }  finally {  	Marshal.FreeHGlobal (inBuffer);  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Delete,The following statement contains a magic number: using (SafeFileHandle handle = OpenReparsePoint (junctionPoint' EFileAccess.GenericWrite)) {  	REPARSE_DATA_BUFFER reparseDataBuffer = new REPARSE_DATA_BUFFER ();  	reparseDataBuffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;  	reparseDataBuffer.ReparseDataLength = 0;  	reparseDataBuffer.PathBuffer = new byte[0x3ff0];  	int inBufferSize = Marshal.SizeOf (reparseDataBuffer);  	IntPtr inBuffer = Marshal.AllocHGlobal (inBufferSize);  	try {  		Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  		int bytesReturned;  		bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_DELETE_REPARSE_POINT' inBuffer' 8' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  		if (!result)  			ThrowLastWin32Error ("Unable to delete junction point.");  	}  	finally {  		Marshal.FreeHGlobal (inBuffer);  	}  	try {  		Directory.Delete (junctionPoint);  	}  	catch (IOException ex) {  		throw new IOException ("Unable to delete junction point."' ex);  	}  }  
Magic Number,PrettyJunction,JunctionPoint,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\JunctionPoint.cs,Delete,The following statement contains a magic number: try {  	Marshal.StructureToPtr (reparseDataBuffer' inBuffer' false);  	int bytesReturned;  	bool result = DeviceIoControl (handle.DangerousGetHandle ()' FSCTL_DELETE_REPARSE_POINT' inBuffer' 8' IntPtr.Zero' 0' out bytesReturned' IntPtr.Zero);  	if (!result)  		ThrowLastWin32Error ("Unable to delete junction point.");  }  finally {  	Marshal.FreeHGlobal (inBuffer);  }  
Magic Number,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	List<string> lines = GetLines (localizer (GetDescription (p.Description)));  	o.WriteLine (lines [0]);  	string prefix = new string (' '' OptionWidth + 2);  	for (int i = 1; i < lines.Count; ++i) {  		o.Write (prefix);  		o.WriteLine (lines [i]);  	}  }  
Missing Default,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
Missing Default,NDesk.Options,OptionSet,C:\repos\xiaoyifang_PrettyJunction\PrettyJunction\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  case ' ':  case '\t':  case '\v':  case '-':  case ''':  case '.':  case ';':  	sep = i;  	break;  case '\n':  	return i;  }  
