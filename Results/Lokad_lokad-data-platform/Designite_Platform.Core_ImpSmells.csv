Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLine,LongOptionParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,OptionGroupParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,CommandLineParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,DoParseArguments,Cyclomatic complexity of the method is 8
Long Statement,CommandLine,OptionInfo,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,SetValueScalar,The length of the statement  "				_property.SetValue (options' Convert.ChangeType (value' _property.PropertyType' Thread.CurrentThread.CurrentCulture)' null); " is 124.
Long Statement,CommandLine,CommandLineOptionsBase,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,GetPairs,The length of the statement  "	var attribs = GetType ().GetProperties ().SelectMany (p => p.GetCustomAttributes (true).OfType<OptionAttribute> ().Select (o => new { " is 133.
Magic Number,Platform,EventStoreId,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\EventStoreId.cs,IsValid,The following statement contains a magic number: if (length < 3)  	return Rule.ShouldHave3CharsOrMore;  
Magic Number,Platform,EventStoreId,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\EventStoreId.cs,IsValid,The following statement contains a magic number: if (length > 48)  	return Rule.ShouldHave48CharsOrLess;  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,FormatEvil,The following statement contains a magic number: MaxScale = (long)Math.Pow (1024' ByteOrders.Length - 1);  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: foreach (var order in ByteOrders) {  	if (sizeInBytes > max) {  		var divide = Decimal.Divide (sizeInBytes' max);  		if (divide >= 100) {  			return String.Format ("{0:##} {1}"' divide' order);  		}  		if (divide >= 10) {  			return String.Format ("{0:##.#} {1}"' divide' order);  		}  		return String.Format ("{0:##.##} {1}"' divide' order);  	}  	max /= 1024;  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: foreach (var order in ByteOrders) {  	if (sizeInBytes > max) {  		var divide = Decimal.Divide (sizeInBytes' max);  		if (divide >= 100) {  			return String.Format ("{0:##} {1}"' divide' order);  		}  		if (divide >= 10) {  			return String.Format ("{0:##.#} {1}"' divide' order);  		}  		return String.Format ("{0:##.##} {1}"' divide' order);  	}  	max /= 1024;  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: foreach (var order in ByteOrders) {  	if (sizeInBytes > max) {  		var divide = Decimal.Divide (sizeInBytes' max);  		if (divide >= 100) {  			return String.Format ("{0:##} {1}"' divide' order);  		}  		if (divide >= 10) {  			return String.Format ("{0:##.#} {1}"' divide' order);  		}  		return String.Format ("{0:##.##} {1}"' divide' order);  	}  	max /= 1024;  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: if (sizeInBytes > max) {  	var divide = Decimal.Divide (sizeInBytes' max);  	if (divide >= 100) {  		return String.Format ("{0:##} {1}"' divide' order);  	}  	if (divide >= 10) {  		return String.Format ("{0:##.#} {1}"' divide' order);  	}  	return String.Format ("{0:##.##} {1}"' divide' order);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: if (sizeInBytes > max) {  	var divide = Decimal.Divide (sizeInBytes' max);  	if (divide >= 100) {  		return String.Format ("{0:##} {1}"' divide' order);  	}  	if (divide >= 10) {  		return String.Format ("{0:##.#} {1}"' divide' order);  	}  	return String.Format ("{0:##.##} {1}"' divide' order);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: if (divide >= 100) {  	return String.Format ("{0:##} {1}"' divide' order);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: if (divide >= 10) {  	return String.Format ("{0:##.#} {1}"' divide' order);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,SizeInBytes,The following statement contains a magic number: max /= 1024;  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: if (maxRadix > 9)  	maxRadix = 9;  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: if (maxRadix > 9)  	maxRadix = 9;  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: maxRadix = 9;  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: switch (maxRadix) {  case 3:  	return string.Format ("{0} K"' (int)normalizedValue);  case 6:  	return string.Format ("{0} M"' (int)normalizedValue);  case 9:  	return string.Format ("{0} B"' (int)normalizedValue);  default:  	return string.Format ("{0}"' (int)value);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: switch (maxRadix) {  case 3:  	return string.Format ("{0} K"' (int)normalizedValue);  case 6:  	return string.Format ("{0} M"' (int)normalizedValue);  case 9:  	return string.Format ("{0} B"' (int)normalizedValue);  default:  	return string.Format ("{0}"' (int)value);  }  
Magic Number,Platform,FormatEvil,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\FormatEvil.cs,ToHumanReadable,The following statement contains a magic number: switch (maxRadix) {  case 3:  	return string.Format ("{0} K"' (int)normalizedValue);  case 6:  	return string.Format ("{0} M"' (int)normalizedValue);  case 9:  	return string.Format ("{0} B"' (int)normalizedValue);  default:  	return string.Format ("{0}"' (int)value);  }  
Magic Number,Platform,PlatformClient,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\PlatformClient.cs,FileActionPolicy,The following statement contains a magic number: if (exceptions.Count >= 4)  	return true;  
Magic Number,Platform,PlatformClient,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\PlatformClient.cs,FileActionPolicy,The following statement contains a magic number: Thread.Sleep (200 * exceptions.Count);  
Magic Number,Platform,PlatformClient,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\PlatformClient.cs,AzureActionPolicy,The following statement contains a magic number: if (exceptions.Count >= 4)  	return true;  
Magic Number,Platform,PlatformClient,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\PlatformClient.cs,AzureActionPolicy,The following statement contains a magic number: Thread.Sleep (200 * exceptions.Count);  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,AzureEventStoreChunk,The following statement contains a magic number: _pageWriter = new PageWriter (512' WriteProc);  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: using (var bufferMemory = new MemoryStream ())  	using (var bufferWriter = new BinaryWriter (bufferMemory)) {  		foreach (var record in eventData) {  			var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  			if (bufferMemory.Position + newSizeEstimate >= limit) {  				bufferWriter.Flush ();  				_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  				_pageWriter.Flush ();  				writtenBytes += bufferMemory.Position;  				bufferMemory.Seek (0' SeekOrigin.Begin);  			}  			bufferWriter.Write (streamId);  			bufferWriter.Write ((int)record.Length);  			bufferWriter.Write (record);  			writtenEvents += 1;  		}  		bufferWriter.Flush ();  		_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  		_pageWriter.Flush ();  		writtenBytes += bufferMemory.Position;  	}  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: using (var bufferMemory = new MemoryStream ())  	using (var bufferWriter = new BinaryWriter (bufferMemory)) {  		foreach (var record in eventData) {  			var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  			if (bufferMemory.Position + newSizeEstimate >= limit) {  				bufferWriter.Flush ();  				_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  				_pageWriter.Flush ();  				writtenBytes += bufferMemory.Position;  				bufferMemory.Seek (0' SeekOrigin.Begin);  			}  			bufferWriter.Write (streamId);  			bufferWriter.Write ((int)record.Length);  			bufferWriter.Write (record);  			writtenEvents += 1;  		}  		bufferWriter.Flush ();  		_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  		_pageWriter.Flush ();  		writtenBytes += bufferMemory.Position;  	}  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: using (var bufferWriter = new BinaryWriter (bufferMemory)) {  	foreach (var record in eventData) {  		var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  		if (bufferMemory.Position + newSizeEstimate >= limit) {  			bufferWriter.Flush ();  			_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  			_pageWriter.Flush ();  			writtenBytes += bufferMemory.Position;  			bufferMemory.Seek (0' SeekOrigin.Begin);  		}  		bufferWriter.Write (streamId);  		bufferWriter.Write ((int)record.Length);  		bufferWriter.Write (record);  		writtenEvents += 1;  	}  	bufferWriter.Flush ();  	_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  	_pageWriter.Flush ();  	writtenBytes += bufferMemory.Position;  }  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: using (var bufferWriter = new BinaryWriter (bufferMemory)) {  	foreach (var record in eventData) {  		var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  		if (bufferMemory.Position + newSizeEstimate >= limit) {  			bufferWriter.Flush ();  			_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  			_pageWriter.Flush ();  			writtenBytes += bufferMemory.Position;  			bufferMemory.Seek (0' SeekOrigin.Begin);  		}  		bufferWriter.Write (streamId);  		bufferWriter.Write ((int)record.Length);  		bufferWriter.Write (record);  		writtenEvents += 1;  	}  	bufferWriter.Flush ();  	_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  	_pageWriter.Flush ();  	writtenBytes += bufferMemory.Position;  }  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: foreach (var record in eventData) {  	var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  	if (bufferMemory.Position + newSizeEstimate >= limit) {  		bufferWriter.Flush ();  		_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  		_pageWriter.Flush ();  		writtenBytes += bufferMemory.Position;  		bufferMemory.Seek (0' SeekOrigin.Begin);  	}  	bufferWriter.Write (streamId);  	bufferWriter.Write ((int)record.Length);  	bufferWriter.Write (record);  	writtenEvents += 1;  }  
Magic Number,Platform.StreamStorage.Azure,AzureEventStoreChunk,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStoreChunk.cs,Append,The following statement contains a magic number: foreach (var record in eventData) {  	var newSizeEstimate = 4 + Encoding.UTF8.GetByteCount (streamId) + 4 + record.Length;  	if (bufferMemory.Position + newSizeEstimate >= limit) {  		bufferWriter.Flush ();  		_pageWriter.Write (bufferMemory.ToArray ()' 0' bufferMemory.Position);  		_pageWriter.Flush ();  		writtenBytes += bufferMemory.Position;  		bufferMemory.Seek (0' SeekOrigin.Begin);  	}  	bufferWriter.Write (streamId);  	bufferWriter.Write ((int)record.Length);  	bufferWriter.Write (record);  	writtenEvents += 1;  }  
Magic Number,Platform.StreamStorage.File,FileEventPointer,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\File\FileEventPointer.cs,OpenOrCreateForReading,The following statement contains a magic number: if (stream.Length == 0)  	stream.SetLength (8);  
Magic Number,Platform.StreamStorage.File,FileEventPointer,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\File\FileEventPointer.cs,OpenOrCreateForReading,The following statement contains a magic number: stream.SetLength (8);  
Magic Number,Platform.StreamStorage.File,FileEventPointer,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\File\FileEventPointer.cs,OpenOrCreateForWriting,The following statement contains a magic number: if (stream.Length == 0)  	stream.SetLength (8);  
Magic Number,Platform.StreamStorage.File,FileEventPointer,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\File\FileEventPointer.cs,OpenOrCreateForWriting,The following statement contains a magic number: stream.SetLength (8);  
Magic Number,CommandLine,LongOptionParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,Parse,The following statement contains a magic number: if (!option.IsBoolean) {  	if (parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue (argumentEnumerator.Next)))  		return ParserState.Failure;  	if (parts.Length == 2) {  		if (!option.IsArray) {  			valueSetting = option.SetValue (parts [1]' options);  			if (!valueSetting)  				this.DefineOptionThatViolatesFormat (option);  			return ArgumentParser.BooleanToParserState (valueSetting);  		}  		ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  		var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  		items.Insert (0' parts [1]);  		valueSetting = option.SetValue (items' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting);  	} else {  		if (!option.IsArray) {  			valueSetting = option.SetValue (argumentEnumerator.Next' options);  			if (!valueSetting)  				this.DefineOptionThatViolatesFormat (option);  			return ArgumentParser.BooleanToParserState (valueSetting' true);  		}  		ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  		var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  		valueSetting = option.SetValue (items' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		//return ArgumentParser.BooleanToParserState(valueSetting' true);  		return ArgumentParser.BooleanToParserState (valueSetting);  	}  }  
Magic Number,CommandLine,LongOptionParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,Parse,The following statement contains a magic number: if (parts.Length == 2) {  	if (!option.IsArray) {  		valueSetting = option.SetValue (parts [1]' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting);  	}  	ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  	var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  	items.Insert (0' parts [1]);  	valueSetting = option.SetValue (items' options);  	if (!valueSetting)  		this.DefineOptionThatViolatesFormat (option);  	return ArgumentParser.BooleanToParserState (valueSetting);  } else {  	if (!option.IsArray) {  		valueSetting = option.SetValue (argumentEnumerator.Next' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting' true);  	}  	ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  	var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  	valueSetting = option.SetValue (items' options);  	if (!valueSetting)  		this.DefineOptionThatViolatesFormat (option);  	//return ArgumentParser.BooleanToParserState(valueSetting' true);  	return ArgumentParser.BooleanToParserState (valueSetting);  }  
Magic Number,CommandLine,LongOptionParser,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)  	return ParserState.Failure;  
Magic Number,CommandLine,OptionMap,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\CommandLine.cs,OptionMap,The following statement contains a magic number: _map = new Dictionary<string' OptionInfo> (capacity * 2' comparer);  
Missing Default,Platform.StreamStorage.Azure,AzureEventStore,F:\newReposMay17\Lokad_lokad-data-platform\Platform.Core\StreamStorage\Azure\AzureEventStore.cs,Exists,The following switch statement is missing a default case: switch (e.ErrorCode) {  case StorageErrorCode.ContainerNotFound:  case StorageErrorCode.ResourceNotFound:  	return false;  }  
