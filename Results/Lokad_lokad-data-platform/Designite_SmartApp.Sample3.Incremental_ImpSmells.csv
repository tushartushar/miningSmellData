Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,TagProjection,Cyclomatic complexity of the method is 8
Complex Method,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,CommentProjection,Cyclomatic complexity of the method is 8
Complex Method,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,Cyclomatic complexity of the method is 8
Long Statement,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,Main,The length of the statement  "		Task.Factory.StartNew (() => TagProjection (store' views)' TaskCreationOptions.LongRunning | TaskCreationOptions.PreferFairness)' " is 129.
Long Statement,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,Main,The length of the statement  "		Task.Factory.StartNew (() => CommentProjection (store' views)' TaskCreationOptions.LongRunning | TaskCreationOptions.PreferFairness)' " is 133.
Long Statement,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,Main,The length of the statement  "		Task.Factory.StartNew (() => UserCommentsPerDayDistributionProjection (store' views)' TaskCreationOptions.LongRunning | TaskCreationOptions.PreferFairness) " is 155.
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,TagProjection,The following statement contains a magic number: while (true) {  	var nextOffcet = processingInfo.NextOffsetInBytes;  	processingInfo.LastOffsetInBytes = processingInfo.NextOffsetInBytes;  	processingInfo.DateProcessingUtc = DateTime.UtcNow;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffcet)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		var post = Post.TryGetFromBinary (dataRecord.EventData);  		if (post == null)  			continue;  		foreach (var tag in post.Tags) {  			if (data.Distribution.ContainsKey (tag))  				data.Distribution [tag]++;  			else  				data.Distribution [tag] = 1;  		}  		processingInfo.EventsProcessed += 1;  		emptyData = false;  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' TagsDistributionView.FileName);  			views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' TagsDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next post offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,TagProjection,The following statement contains a magic number: while (true) {  	var nextOffcet = processingInfo.NextOffsetInBytes;  	processingInfo.LastOffsetInBytes = processingInfo.NextOffsetInBytes;  	processingInfo.DateProcessingUtc = DateTime.UtcNow;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffcet)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		var post = Post.TryGetFromBinary (dataRecord.EventData);  		if (post == null)  			continue;  		foreach (var tag in post.Tags) {  			if (data.Distribution.ContainsKey (tag))  				data.Distribution [tag]++;  			else  				data.Distribution [tag] = 1;  		}  		processingInfo.EventsProcessed += 1;  		emptyData = false;  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' TagsDistributionView.FileName);  			views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' TagsDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next post offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,TagProjection,The following statement contains a magic number: if (emptyData) {  	views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  	Thread.Sleep (1000);  } else {  	try {  		views.WriteAsJson (data' TagsDistributionView.FileName);  		views.WriteAsJson (processingInfo' TagsDistributionView.FileName + ".info");  	} catch (Exception ex) {  		Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' TagsDistributionView.FileName' ex.Message);  	}  	Console.WriteLine ("Next post offset: {0}"' processingInfo.NextOffsetInBytes);  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,TagProjection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,CommentProjection,The following statement contains a magic number: while (true) {  	var nextOffset = processingInfo.NextOffsetInBytes;  	processingInfo.LastOffsetInBytes = processingInfo.NextOffsetInBytes;  	processingInfo.DateProcessingUtc = DateTime.UtcNow;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffset)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		processingInfo.EventsProcessed += 1;  		var user = User.TryGetFromBinary (dataRecord.EventData);  		if (user != null) {  			data.Users [user.Id] = user;  			emptyData = false;  			continue;  		}  		var comment = Comment.TryGetFromBinary (dataRecord.EventData);  		if (comment != null) {  			if (data.Distribution.ContainsKey (comment.UserId))  				data.Distribution [comment.UserId] += 1;  			else  				data.Distribution [comment.UserId] = 1;  			emptyData = false;  		}  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' CommentDistributionView.FileName);  			views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' CommentDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next comment offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,CommentProjection,The following statement contains a magic number: while (true) {  	var nextOffset = processingInfo.NextOffsetInBytes;  	processingInfo.LastOffsetInBytes = processingInfo.NextOffsetInBytes;  	processingInfo.DateProcessingUtc = DateTime.UtcNow;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffset)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		processingInfo.EventsProcessed += 1;  		var user = User.TryGetFromBinary (dataRecord.EventData);  		if (user != null) {  			data.Users [user.Id] = user;  			emptyData = false;  			continue;  		}  		var comment = Comment.TryGetFromBinary (dataRecord.EventData);  		if (comment != null) {  			if (data.Distribution.ContainsKey (comment.UserId))  				data.Distribution [comment.UserId] += 1;  			else  				data.Distribution [comment.UserId] = 1;  			emptyData = false;  		}  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' CommentDistributionView.FileName);  			views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' CommentDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next comment offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,CommentProjection,The following statement contains a magic number: if (emptyData) {  	views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  	Thread.Sleep (1000);  } else {  	try {  		views.WriteAsJson (data' CommentDistributionView.FileName);  		views.WriteAsJson (processingInfo' CommentDistributionView.FileName + ".info");  	} catch (Exception ex) {  		Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' CommentDistributionView.FileName' ex.Message);  	}  	Console.WriteLine ("Next comment offset: {0}"' processingInfo.NextOffsetInBytes);  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,CommentProjection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: while (true) {  	var nextOffcet = processingInfo.NextOffsetInBytes;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffcet)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		var user = User.TryGetFromBinary (dataRecord.EventData);  		if (user != null) {  			data.Users [user.Id] = user;  			emptyData = false;  			continue;  		}  		var comment = Comment.TryGetFromBinary (dataRecord.EventData);  		if (comment != null) {  			if (!data.Distribution.ContainsKey (comment.UserId)) {  				data.Distribution.Add (comment.UserId' new long[7]);  			}  			var dayOfWeek = (int)comment.CreationDate.Date.DayOfWeek;  			data.Distribution [comment.UserId] [dayOfWeek]++;  			processingInfo.EventsProcessed += 1;  			emptyData = false;  		}  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' UserCommentsDistributionView.FileName);  			views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' UserCommentsDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next user offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: while (true) {  	var nextOffcet = processingInfo.NextOffsetInBytes;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffcet)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		var user = User.TryGetFromBinary (dataRecord.EventData);  		if (user != null) {  			data.Users [user.Id] = user;  			emptyData = false;  			continue;  		}  		var comment = Comment.TryGetFromBinary (dataRecord.EventData);  		if (comment != null) {  			if (!data.Distribution.ContainsKey (comment.UserId)) {  				data.Distribution.Add (comment.UserId' new long[7]);  			}  			var dayOfWeek = (int)comment.CreationDate.Date.DayOfWeek;  			data.Distribution [comment.UserId] [dayOfWeek]++;  			processingInfo.EventsProcessed += 1;  			emptyData = false;  		}  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' UserCommentsDistributionView.FileName);  			views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' UserCommentsDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next user offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: while (true) {  	var nextOffcet = processingInfo.NextOffsetInBytes;  	var records = store.ReadAllEvents (new EventStoreOffset (nextOffcet)' 10000);  	var emptyData = true;  	foreach (var dataRecord in records) {  		processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  		var user = User.TryGetFromBinary (dataRecord.EventData);  		if (user != null) {  			data.Users [user.Id] = user;  			emptyData = false;  			continue;  		}  		var comment = Comment.TryGetFromBinary (dataRecord.EventData);  		if (comment != null) {  			if (!data.Distribution.ContainsKey (comment.UserId)) {  				data.Distribution.Add (comment.UserId' new long[7]);  			}  			var dayOfWeek = (int)comment.CreationDate.Date.DayOfWeek;  			data.Distribution [comment.UserId] [dayOfWeek]++;  			processingInfo.EventsProcessed += 1;  			emptyData = false;  		}  	}  	if (emptyData) {  		views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		Thread.Sleep (1000);  	} else {  		try {  			views.WriteAsJson (data' UserCommentsDistributionView.FileName);  			views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  		} catch (Exception ex) {  			Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' UserCommentsDistributionView.FileName' ex.Message);  		}  		Console.WriteLine ("Next user offset: {0}"' processingInfo.NextOffsetInBytes);  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: foreach (var dataRecord in records) {  	processingInfo.NextOffsetInBytes = dataRecord.Next.OffsetInBytes;  	var user = User.TryGetFromBinary (dataRecord.EventData);  	if (user != null) {  		data.Users [user.Id] = user;  		emptyData = false;  		continue;  	}  	var comment = Comment.TryGetFromBinary (dataRecord.EventData);  	if (comment != null) {  		if (!data.Distribution.ContainsKey (comment.UserId)) {  			data.Distribution.Add (comment.UserId' new long[7]);  		}  		var dayOfWeek = (int)comment.CreationDate.Date.DayOfWeek;  		data.Distribution [comment.UserId] [dayOfWeek]++;  		processingInfo.EventsProcessed += 1;  		emptyData = false;  	}  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: if (comment != null) {  	if (!data.Distribution.ContainsKey (comment.UserId)) {  		data.Distribution.Add (comment.UserId' new long[7]);  	}  	var dayOfWeek = (int)comment.CreationDate.Date.DayOfWeek;  	data.Distribution [comment.UserId] [dayOfWeek]++;  	processingInfo.EventsProcessed += 1;  	emptyData = false;  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: if (!data.Distribution.ContainsKey (comment.UserId)) {  	data.Distribution.Add (comment.UserId' new long[7]);  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: data.Distribution.Add (comment.UserId' new long[7]);  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: if (emptyData) {  	views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  	Thread.Sleep (1000);  } else {  	try {  		views.WriteAsJson (data' UserCommentsDistributionView.FileName);  		views.WriteAsJson (processingInfo' UserCommentsDistributionView.FileName + ".info");  	} catch (Exception ex) {  		Console.WriteLine ("Exception on writing view - {0}\r\n{1}"' UserCommentsDistributionView.FileName' ex.Message);  	}  	Console.WriteLine ("Next user offset: {0}"' processingInfo.NextOffsetInBytes);  }  
Magic Number,SmartApp.Sample3.Continuous,Program,F:\newReposMay17\Lokad_lokad-data-platform\SmartApp.Sample3.Continuous\Program.cs,UserCommentsPerDayDistributionProjection,The following statement contains a magic number: Thread.Sleep (1000);  
