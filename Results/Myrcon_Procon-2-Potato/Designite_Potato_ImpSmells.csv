Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                    PackageInstalling = (sender' packageId' version) => Console.WriteLine(@"Installing {0} version {1}.."' packageId' version)' " is 123.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                    PackageUninstalling = (sender' packageId' version) => Console.WriteLine(@"Uninstalling {0} version {1}.."' packageId' version)' " is 127.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                    PackageUninstalled = (sender' packageId' version) => Console.WriteLine(@"Uninstalled {0} version {1}.."' packageId' version)' " is 125.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                SignalEnd = (controller' message' seconds) => Console.WriteLine(@"Signal: {0} completed in {1} seconds"' message.Name' seconds)' " is 128.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                SignalParameterError = (controller' list) => Console.WriteLine(@"Missing or valid parameters: {0}"' String.Join("' "' list))' " is 125.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                    Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024); " is 122.
Long Statement,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The length of the statement  "                    Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024); " is 134.
Magic Number,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The following statement contains a magic number: ServiceController service = new ServiceController {                  Arguments = new List<String>(args)'                  Settings = new ServiceSettings(new List<String>(args))'                  Packages = {                      BeforeRepositoryInitialize = () => Console.WriteLine(@"Initializing package repository..")'                      BeforeSourcePackageFetch = () => Console.WriteLine(@"Checking source repositories..")'                      BeforeLocalPackageFetch = () => Console.WriteLine(@"Checking local repository..")'                      PackageInstalling = (sender' packageId' version) => Console.WriteLine(@"Installing {0} version {1}.."' packageId' version)'                      PackageInstalled = (sender' packageId' version) => Console.WriteLine(@"Installed {0} version {1}"' packageId' version)'                      PackageUninstalling = (sender' packageId' version) => Console.WriteLine(@"Uninstalling {0} version {1}.."' packageId' version)'                      PackageUninstalled = (sender' packageId' version) => Console.WriteLine(@"Uninstalled {0} version {1}.."' packageId' version)'                      PackageMissing = packageId => Console.WriteLine(@"Couldn't find package {0}."' packageId)'                      PackageActionCanceled = packageId => Console.WriteLine(@"Package {0} is up to date."' packageId)'                      RepositoryException = (hint' exception) => {                          if (exception is UnauthorizedAccessException) {                              Console.WriteLine(@"Unable to access path {0}"' Defines.PackagesDirectory);                              Console.WriteLine(@"Ensure all applications and open folders using the packages folder are closed and try again.");                          }                            ServiceControllerHelpers.LogUnhandledException(hint' exception);                      }                  }'                  SignalBegin = (controller' message) => Console.WriteLine(@"Signal: {0}"' message.Name)'                  SignalEnd = (controller' message' seconds) => Console.WriteLine(@"Signal: {0} completed in {1} seconds"' message.Name' seconds)'                  SignalParameterError = (controller' list) => Console.WriteLine(@"Missing or valid parameters: {0}"' String.Join("' "' list))'                  SignalStatistics = (controller' domain) => {                      Console.WriteLine(@"Service Controller");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' AppDomain.CurrentDomain.MonitoringTotalProcessorTime);                        Console.WriteLine("");                        Console.WriteLine(@"Service Domain");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' domain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' domain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' domain.MonitoringTotalProcessorTime);                  }'                  SignalHelp = controller => Console.WriteLine(Resources.ConsoleHelp)'                  WriteServiceConfigBegin = controller => Console.Write(@"Writing config.. ")'                  WriteServiceConfigEnd = controller => Console.WriteLine(@"Complete")'                  DisposeServiceBegin = controller => Console.Write(@"Disposing service.. ")'                  DisposeServiceEnd = controller => Console.WriteLine(@"Complete")'                  UnloadServiceBegin = controller => Console.Write(@"Unloading service domain.. ")'                  UnloadServiceEnd = controller => Console.WriteLine(@"Complete")'                  Observer = {                      StatusChange = (observer' type) => Console.WriteLine(@"Status: {0}"' type.ToString())                  }              };
Magic Number,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The following statement contains a magic number: ServiceController service = new ServiceController {                  Arguments = new List<String>(args)'                  Settings = new ServiceSettings(new List<String>(args))'                  Packages = {                      BeforeRepositoryInitialize = () => Console.WriteLine(@"Initializing package repository..")'                      BeforeSourcePackageFetch = () => Console.WriteLine(@"Checking source repositories..")'                      BeforeLocalPackageFetch = () => Console.WriteLine(@"Checking local repository..")'                      PackageInstalling = (sender' packageId' version) => Console.WriteLine(@"Installing {0} version {1}.."' packageId' version)'                      PackageInstalled = (sender' packageId' version) => Console.WriteLine(@"Installed {0} version {1}"' packageId' version)'                      PackageUninstalling = (sender' packageId' version) => Console.WriteLine(@"Uninstalling {0} version {1}.."' packageId' version)'                      PackageUninstalled = (sender' packageId' version) => Console.WriteLine(@"Uninstalled {0} version {1}.."' packageId' version)'                      PackageMissing = packageId => Console.WriteLine(@"Couldn't find package {0}."' packageId)'                      PackageActionCanceled = packageId => Console.WriteLine(@"Package {0} is up to date."' packageId)'                      RepositoryException = (hint' exception) => {                          if (exception is UnauthorizedAccessException) {                              Console.WriteLine(@"Unable to access path {0}"' Defines.PackagesDirectory);                              Console.WriteLine(@"Ensure all applications and open folders using the packages folder are closed and try again.");                          }                            ServiceControllerHelpers.LogUnhandledException(hint' exception);                      }                  }'                  SignalBegin = (controller' message) => Console.WriteLine(@"Signal: {0}"' message.Name)'                  SignalEnd = (controller' message' seconds) => Console.WriteLine(@"Signal: {0} completed in {1} seconds"' message.Name' seconds)'                  SignalParameterError = (controller' list) => Console.WriteLine(@"Missing or valid parameters: {0}"' String.Join("' "' list))'                  SignalStatistics = (controller' domain) => {                      Console.WriteLine(@"Service Controller");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' AppDomain.CurrentDomain.MonitoringTotalProcessorTime);                        Console.WriteLine("");                        Console.WriteLine(@"Service Domain");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' domain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' domain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' domain.MonitoringTotalProcessorTime);                  }'                  SignalHelp = controller => Console.WriteLine(Resources.ConsoleHelp)'                  WriteServiceConfigBegin = controller => Console.Write(@"Writing config.. ")'                  WriteServiceConfigEnd = controller => Console.WriteLine(@"Complete")'                  DisposeServiceBegin = controller => Console.Write(@"Disposing service.. ")'                  DisposeServiceEnd = controller => Console.WriteLine(@"Complete")'                  UnloadServiceBegin = controller => Console.Write(@"Unloading service domain.. ")'                  UnloadServiceEnd = controller => Console.WriteLine(@"Complete")'                  Observer = {                      StatusChange = (observer' type) => Console.WriteLine(@"Status: {0}"' type.ToString())                  }              };
Magic Number,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The following statement contains a magic number: ServiceController service = new ServiceController {                  Arguments = new List<String>(args)'                  Settings = new ServiceSettings(new List<String>(args))'                  Packages = {                      BeforeRepositoryInitialize = () => Console.WriteLine(@"Initializing package repository..")'                      BeforeSourcePackageFetch = () => Console.WriteLine(@"Checking source repositories..")'                      BeforeLocalPackageFetch = () => Console.WriteLine(@"Checking local repository..")'                      PackageInstalling = (sender' packageId' version) => Console.WriteLine(@"Installing {0} version {1}.."' packageId' version)'                      PackageInstalled = (sender' packageId' version) => Console.WriteLine(@"Installed {0} version {1}"' packageId' version)'                      PackageUninstalling = (sender' packageId' version) => Console.WriteLine(@"Uninstalling {0} version {1}.."' packageId' version)'                      PackageUninstalled = (sender' packageId' version) => Console.WriteLine(@"Uninstalled {0} version {1}.."' packageId' version)'                      PackageMissing = packageId => Console.WriteLine(@"Couldn't find package {0}."' packageId)'                      PackageActionCanceled = packageId => Console.WriteLine(@"Package {0} is up to date."' packageId)'                      RepositoryException = (hint' exception) => {                          if (exception is UnauthorizedAccessException) {                              Console.WriteLine(@"Unable to access path {0}"' Defines.PackagesDirectory);                              Console.WriteLine(@"Ensure all applications and open folders using the packages folder are closed and try again.");                          }                            ServiceControllerHelpers.LogUnhandledException(hint' exception);                      }                  }'                  SignalBegin = (controller' message) => Console.WriteLine(@"Signal: {0}"' message.Name)'                  SignalEnd = (controller' message' seconds) => Console.WriteLine(@"Signal: {0} completed in {1} seconds"' message.Name' seconds)'                  SignalParameterError = (controller' list) => Console.WriteLine(@"Missing or valid parameters: {0}"' String.Join("' "' list))'                  SignalStatistics = (controller' domain) => {                      Console.WriteLine(@"Service Controller");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' AppDomain.CurrentDomain.MonitoringTotalProcessorTime);                        Console.WriteLine("");                        Console.WriteLine(@"Service Domain");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' domain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' domain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' domain.MonitoringTotalProcessorTime);                  }'                  SignalHelp = controller => Console.WriteLine(Resources.ConsoleHelp)'                  WriteServiceConfigBegin = controller => Console.Write(@"Writing config.. ")'                  WriteServiceConfigEnd = controller => Console.WriteLine(@"Complete")'                  DisposeServiceBegin = controller => Console.Write(@"Disposing service.. ")'                  DisposeServiceEnd = controller => Console.WriteLine(@"Complete")'                  UnloadServiceBegin = controller => Console.Write(@"Unloading service domain.. ")'                  UnloadServiceEnd = controller => Console.WriteLine(@"Complete")'                  Observer = {                      StatusChange = (observer' type) => Console.WriteLine(@"Status: {0}"' type.ToString())                  }              };
Magic Number,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The following statement contains a magic number: ServiceController service = new ServiceController {                  Arguments = new List<String>(args)'                  Settings = new ServiceSettings(new List<String>(args))'                  Packages = {                      BeforeRepositoryInitialize = () => Console.WriteLine(@"Initializing package repository..")'                      BeforeSourcePackageFetch = () => Console.WriteLine(@"Checking source repositories..")'                      BeforeLocalPackageFetch = () => Console.WriteLine(@"Checking local repository..")'                      PackageInstalling = (sender' packageId' version) => Console.WriteLine(@"Installing {0} version {1}.."' packageId' version)'                      PackageInstalled = (sender' packageId' version) => Console.WriteLine(@"Installed {0} version {1}"' packageId' version)'                      PackageUninstalling = (sender' packageId' version) => Console.WriteLine(@"Uninstalling {0} version {1}.."' packageId' version)'                      PackageUninstalled = (sender' packageId' version) => Console.WriteLine(@"Uninstalled {0} version {1}.."' packageId' version)'                      PackageMissing = packageId => Console.WriteLine(@"Couldn't find package {0}."' packageId)'                      PackageActionCanceled = packageId => Console.WriteLine(@"Package {0} is up to date."' packageId)'                      RepositoryException = (hint' exception) => {                          if (exception is UnauthorizedAccessException) {                              Console.WriteLine(@"Unable to access path {0}"' Defines.PackagesDirectory);                              Console.WriteLine(@"Ensure all applications and open folders using the packages folder are closed and try again.");                          }                            ServiceControllerHelpers.LogUnhandledException(hint' exception);                      }                  }'                  SignalBegin = (controller' message) => Console.WriteLine(@"Signal: {0}"' message.Name)'                  SignalEnd = (controller' message' seconds) => Console.WriteLine(@"Signal: {0} completed in {1} seconds"' message.Name' seconds)'                  SignalParameterError = (controller' list) => Console.WriteLine(@"Missing or valid parameters: {0}"' String.Join("' "' list))'                  SignalStatistics = (controller' domain) => {                      Console.WriteLine(@"Service Controller");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' AppDomain.CurrentDomain.MonitoringTotalProcessorTime);                        Console.WriteLine("");                        Console.WriteLine(@"Service Domain");                      Console.WriteLine(@"+--------------------------------------------------------+");                      Console.WriteLine(@"MonitoringSurvivedMemorySize: {0:N0} K"' domain.MonitoringSurvivedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalAllocatedMemorySize: {0:N0} K"' domain.MonitoringTotalAllocatedMemorySize / 1024);                      Console.WriteLine(@"MonitoringTotalProcessorTime: {0}"' domain.MonitoringTotalProcessorTime);                  }'                  SignalHelp = controller => Console.WriteLine(Resources.ConsoleHelp)'                  WriteServiceConfigBegin = controller => Console.Write(@"Writing config.. ")'                  WriteServiceConfigEnd = controller => Console.WriteLine(@"Complete")'                  DisposeServiceBegin = controller => Console.Write(@"Disposing service.. ")'                  DisposeServiceEnd = controller => Console.WriteLine(@"Complete")'                  UnloadServiceBegin = controller => Console.Write(@"Unloading service domain.. ")'                  UnloadServiceEnd = controller => Console.WriteLine(@"Complete")'                  Observer = {                      StatusChange = (observer' type) => Console.WriteLine(@"Status: {0}"' type.ToString())                  }              };
Magic Number,Potato,Program,C:\repos\Myrcon_Procon-2-Potato\src\Potato\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
