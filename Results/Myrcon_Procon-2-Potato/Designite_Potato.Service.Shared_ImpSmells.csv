Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,,The length of the parameter TypePotatoCorePotatoController is 30.
Long Identifier,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,,The length of the parameter CertificatesDirectoryCommandServerPfx is 37.
Long Identifier,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,,The length of the parameter PackagesDefaultSourceRepositoryUri is 34.
Long Identifier,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,,The length of the parameter DefaultWriteServiceConfigTimeout is 32.
Long Statement,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,SearchPaths,The length of the statement  "            return paths.Where(path => File.Exists(Path.Combine(path' file)) == true).Select(path => Path.Combine(path' file)).ToList(); " is 124.
Long Statement,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,PackageVersionDirectory,The length of the statement  "            return Directory.GetDirectories(path' String.Format("{0}*"' packageId)' SearchOption.TopDirectoryOnly).OrderByDescending(directory => { " is 135.
Long Statement,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,PackageContainingPath,The length of the statement  "            while (directory != null && directory.Parent != null && Defines.PackagesDirectory.FullName != directory.Parent.FullName && Defines.BaseDirectory.FullName != directory.FullName) { " is 178.
Long Statement,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,Polling_Tick,The length of the statement  "                if (pollingTimeoutEvent.WaitOne(this.Settings.ServicePollingTimeout) == false || this.SignalMessage(message) == false) { " is 120.
Long Statement,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,SignalMessage,The length of the statement  "                    else if (String.Compare(message.Name' "statistics"' StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(message.Name' "stats"' StringComparison.OrdinalIgnoreCase) == 0) { " is 177.
Long Statement,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,Start,The length of the statement  "                    this.ServiceLoaderProxy = (IServiceLoaderProxy)this.ServiceDomain.CreateInstanceAndUnwrap(this.ServiceLoaderProxyType.Assembly.FullName' this.ServiceLoaderProxyType.FullName); " is 175.
Long Statement,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,WriteServiceConfig,The length of the statement  "                    ServiceControllerHelpers.LogUnhandledException("ServiceController.WriteServiceConfig"' new Exception("Timeout waiting for service to write config.")); " is 150.
Long Statement,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,DisposeService,The length of the statement  "                    ServiceControllerHelpers.LogUnhandledException("ServiceController.DisposeService"' new Exception("Timeout waiting for service to dispose.")); " is 141.
Long Statement,Potato.Service.Shared,ServiceControllerHelpers,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceControllerHelpers.cs,LogUnhandledException,The length of the statement  "            File.WriteAllLines(Path.Combine(Defines.ErrorsLogsDirectory.FullName' DateTime.UtcNow.ToString("yyyy-MM-ddTHH-mm-ss-fffffff"))' lines); " is 135.
Long Statement,Potato.Service.Shared,ServiceSettings,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceSettings.cs,ParseArguments,The length of the statement  "                this.ServicePollingTimeout = (int)ArgumentHelper.ParseNumeric(arguments["servicepollingtimeout"]' this.ServicePollingTimeout); " is 126.
Long Statement,Potato.Service.Shared.Packages,ServicePackageManager,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Packages\ServicePackageManager.cs,MergePackage,The length of the statement  "                var manager = new PackageManager(this.GetCachedSourceRepository(uri)' new DefaultPackagePathResolver(this.LocalRepository.Source)' new PhysicalFileSystem(this.LocalRepository.Source)' this.LocalRepository); " is 206.
Long Statement,Potato.Service.Shared.Packages,ServicePackageManager,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Packages\ServicePackageManager.cs,MergePackage,The length of the statement  "                var latest = manager.SourceRepository.GetPackages().Where(package => package.Id == packageId && package.IsLatestVersion == true).ToList(); " is 138.
Long Statement,Potato.Service.Shared.Packages,ServicePackageManager,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Packages\ServicePackageManager.cs,UninstallPackage,The length of the statement  "                var manager = new PackageManager(this.LocalRepository' new DefaultPackagePathResolver(this.LocalRepository.Source)' new PhysicalFileSystem(this.LocalRepository.Source)' this.LocalRepository); " is 191.
Complex Conditional,Potato.Service.Shared,Defines,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\Defines.cs,PackageContainingPath,The conditional expression  "directory != null && directory.Parent != null && Defines.PackagesDirectory.FullName != directory.Parent.FullName && Defines.BaseDirectory.FullName != directory.FullName"  is complex.
Magic Number,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,ServiceController,The following statement contains a magic number: this.Polling = new Timer(Polling_Tick' this' TimeSpan.FromSeconds(10)' TimeSpan.FromSeconds(10));
Magic Number,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,ServiceController,The following statement contains a magic number: this.Polling = new Timer(Polling_Tick' this' TimeSpan.FromSeconds(10)' TimeSpan.FromSeconds(10));
Magic Number,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,ServiceController,The following statement contains a magic number: this.WriteConfig = new Timer(WriteConfig_Tick' this' TimeSpan.FromMinutes(10)' TimeSpan.FromMinutes(10));
Magic Number,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,ServiceController,The following statement contains a magic number: this.WriteConfig = new Timer(WriteConfig_Tick' this' TimeSpan.FromMinutes(10)' TimeSpan.FromMinutes(10));
Magic Number,Potato.Service.Shared,ServiceController,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceController.cs,SignalMessage,The following statement contains a magic number: if (message != null) {                  // Record the current time for statistics output.                  DateTime begin = DateTime.Now;                    // Ignore "nop" messages                  if (String.Compare(message.Name' "nop"' StringComparison.OrdinalIgnoreCase) != 0) {                      this.OnSignalBegin(message);                        if (String.Compare(message.Name' "start"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.Start();                      }                      else if (String.Compare(message.Name' "stop"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.Stop();                      }                      else if (String.Compare(message.Name' "restart"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.Restart();                      }                      else if (String.Compare(message.Name' "merge"' StringComparison.OrdinalIgnoreCase) == 0) {                          if (message.Arguments.ContainsKey("uri") == true && message.Arguments.ContainsKey("packageid") == true) {                              this.MergePackage(message.Arguments["uri"]' message.Arguments["packageid"]);                          }                          else {                              this.OnSignalParameterError(new List<String>() {                                  "uri"'                                  "packageId"                              });                          }                      }                      else if (String.Compare(message.Name' "uninstall"' StringComparison.OrdinalIgnoreCase) == 0) {                          if (message.Arguments.ContainsKey("packageid") == true) {                              this.UninstallPackage(message.Arguments["packageid"]);                          }                          else {                              this.OnSignalParameterError(new List<String>() {                                  "packageId"                              });                          }                      }                      else if (String.Compare(message.Name' "statistics"' StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(message.Name' "stats"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.OnStatistics();                      }                      else if (String.Compare(message.Name' "help"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.OnHelp();                      }                      else if (String.Compare(message.Name' "result"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.OnResult(message);                      }                      else if (String.Compare(message.Name' "write"' StringComparison.OrdinalIgnoreCase) == 0) {                          this.WriteServiceConfig();                      }                      else {                          processed = false;                      }                        this.OnSignalEnd(message' (DateTime.Now - begin).TotalMilliseconds / 1000);                  }                  // else do nothing for nop messages' the message was to do nothing.                    message.Dispose();              }              else {                  processed = false;              }
Magic Number,Potato.Service.Shared,ServiceObserver,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceObserver.cs,ServiceObserver,The following statement contains a magic number: this.PanicTask = new Timer(PanicTask_Tick' this' TimeSpan.FromMilliseconds(0)' TimeSpan.FromMinutes(20));
Magic Number,Potato.Service.Shared,ServiceObserver,C:\repos\Myrcon_Procon-2-Potato\src\Potato.Service.Shared\ServiceObserver.cs,PanicTask_Tick,The following statement contains a magic number: if (downtime.HasValue == true && downtime.Value > TimeSpan.FromMinutes(15) && handler != null) {                  // Time to panic.                  handler();              }
