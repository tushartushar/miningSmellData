Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BulletMLLib,BulletPattern,C:\repos\eatfrog_bulletmllib4unity\BulletPattern.cs,ParseXML,Cyclomatic complexity of the method is 9
Complex Method,BulletMLLib,BulletMLNode,C:\repos\eatfrog_bulletmllib4unity\Nodes\BulletMLNode.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,BulletMLLib,NodeFactory,C:\repos\eatfrog_bulletmllib4unity\Nodes\NodeFactory.cs,CreateNode,Cyclomatic complexity of the method is 42
Complex Method,BulletMLLib,AccelTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\AccelTask.cs,SetupTask,Cyclomatic complexity of the method is 19
Complex Method,BulletMLLib,ActionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ActionTask.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,BulletMLLib,BulletMLTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\BulletMLTask.cs,ParseChildNode,Cyclomatic complexity of the method is 32
Complex Method,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,GetDirection,Cyclomatic complexity of the method is 14
Complex Method,BulletMLLib,FireTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\FireTask.cs,ParseChildNode,Cyclomatic complexity of the method is 10
Complex Method,BulletMLLib,FireTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\FireTask.cs,SetupTask,Cyclomatic complexity of the method is 22
Long Statement,BulletMLLib,BulletPattern,C:\repos\eatfrog_bulletmllib4unity\BulletPattern.cs,ParseXML,The length of the statement  "				UnityEngine.Debug.Log ("Error reading \"" + "\": XML root node needs to be \"bulletml\"' found \"" + strElementName + "\" instead"); " is 132.
Long Statement,BulletMLLib,BulletPattern,C:\repos\eatfrog_bulletmllib4unity\BulletPattern.cs,ParseXML,The length of the statement  "				throw new Exception ("Error reading \"" + "\": XML root node needs to be \"bulletml\"' found \"" + strElementName + "\" instead"); " is 130.
Long Statement,BulletMLLib,BulletPattern,C:\repos\eatfrog_bulletmllib4unity\BulletPattern.cs,MyValidationEventHandler,The length of the statement  "	throw new XmlSchemaException ("Error validating bulletml document: " + args.Message' args.Exception' args.Exception.LineNumber' args.Exception.LinePosition); " is 157.
Empty Catch Block,BulletMLLib,BulletPattern,C:\repos\eatfrog_bulletmllib4unity\BulletPattern.cs,ParseXML,The method has an empty catch block.
Magic Number,BulletMLLib,Emitter,C:\repos\eatfrog_bulletmllib4unity\Emitter.cs,InitTopNode,The following statement contains a magic number: if (topNode != null) {  	//initialize with the top node we found!  	_rootBullet.InitNode (topNode);  	bValidBullet = true;  	_rootBullet.BulletSpawned ();  }  else {  	//ok there is no 'top' node' so that means we have a list of 'top#' nodes  	for (int i = 1; i < 10; i++) {  		topNode = rootNode.FindLabelNode ("top" + i' NodeName.Action);  		if (topNode != null) {  			if (!bValidBullet) {  				//Use this bullet!  				_rootBullet.InitNode (topNode);  				bValidBullet = true;  				_rootBullet.BulletSpawned ();  			}  			else {  				//Create a new bullet  				Bullet b = _bulletManager.CreateBullet (this);  				//set the position to this dude's position  				b.X = _rootBullet.X;  				b.Y = _rootBullet.Y;  				//initialize with the node we found  				b.InitNode (topNode);  				b.BulletSpawned ();  			}  		}  	}  }  
Magic Number,BulletMLLib,Emitter,C:\repos\eatfrog_bulletmllib4unity\Emitter.cs,InitTopNode,The following statement contains a magic number: for (int i = 1; i < 10; i++) {  	topNode = rootNode.FindLabelNode ("top" + i' NodeName.Action);  	if (topNode != null) {  		if (!bValidBullet) {  			//Use this bullet!  			_rootBullet.InitNode (topNode);  			bValidBullet = true;  			_rootBullet.BulletSpawned ();  		}  		else {  			//Create a new bullet  			Bullet b = _bulletManager.CreateBullet (this);  			//set the position to this dude's position  			b.X = _rootBullet.X;  			b.Y = _rootBullet.Y;  			//initialize with the node we found  			b.InitNode (topNode);  			b.BulletSpawned ();  		}  	}  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,SetupTask,The following statement contains a magic number: if (Math.Abs (Duration) < 0.01) {  	Duration = 1.0f;  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: if (ret > 2 * Math.PI) {  	ret -= (float)(2 * Math.PI);  }  else if (ret < 0) {  	ret += (float)(2 * Math.PI);  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: if (ret > 2 * Math.PI) {  	ret -= (float)(2 * Math.PI);  }  else if (ret < 0) {  	ret += (float)(2 * Math.PI);  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: if (ret > 2 * Math.PI) {  	ret -= (float)(2 * Math.PI);  }  else if (ret < 0) {  	ret += (float)(2 * Math.PI);  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: ret -= (float)(2 * Math.PI);  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: if (ret < 0) {  	ret += (float)(2 * Math.PI);  }  
Magic Number,BulletMLLib,ChangeDirectionTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeDirectionTask.cs,WrapAngle,The following statement contains a magic number: ret += (float)(2 * Math.PI);  
Magic Number,BulletMLLib,ChangeSpeedTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\ChangeSpeedTask.cs,SetupTask,The following statement contains a magic number: if (Math.Abs (Duration) < 0.01) {  	Duration = 1.0f;  }  
Missing Default,BulletMLLib,BulletMLNode,C:\repos\eatfrog_bulletmllib4unity\Nodes\BulletMLNode.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "type":  	NodeType = StringToType (value);  	break;  case "label":  	Label = value;  	//label is just a text value  	break;  case "name":  	PatternName = value;  	break;  }  
Missing Default,BulletMLLib,BulletMLTask,C:\repos\eatfrog_bulletmllib4unity\Tasks\BulletMLTask.cs,ParseChildNode,The following switch statement is missing a default case: switch (childNode.Name) {  case NodeName.Repeat:  	{  		//create a placeholder bulletmltask for the repeat node  		RepeatTask repeatTask = new RepeatTask (childNode' this);  		//parse the child nodes into the repeat task  		repeatTask.ParseTasks (bullet);  		//store the task  		ChildTasks.Add (repeatTask);  	}  	break;  case NodeName.Action:  	{  		//convert the node to an ActionNode  		ActionNode myActionNode = childNode as ActionNode;  		//create the action task  		ActionTask actionTask = new ActionTask (myActionNode' this);  		//parse the children of the action node into the task  		actionTask.ParseTasks (bullet);  		//store the task  		ChildTasks.Add (actionTask);  	}  	break;  case NodeName.ActionRef:  	{  		//convert the node to an ActionNode  		ActionRefNode myActionNode = childNode as ActionRefNode;  		//create the action task  		ActionTask actionTask = new ActionTask (myActionNode' this);  		//add the params to the action task  		foreach (BulletMLNode node in childNode.ChildNodes) {  			actionTask.ParamList.Add (node.GetValue (this));  		}  		//parse the children of the action node into the task  		actionTask.ParseTasks (bullet);  		//store the task  		ChildTasks.Add (actionTask);  	}  	break;  case NodeName.ChangeSpeed:  	{  		ChildTasks.Add (new ChangeSpeedTask (childNode as BulletNode' this));  	}  	break;  case NodeName.ChangeDirection:  	{  		ChildTasks.Add (new ChangeDirectionTask (childNode as BulletNode' this));  	}  	break;  case NodeName.Fire:  	{  		//convert the node to a fire node  		FireNode myFireNode = childNode as FireNode;  		//create the fire task  		FireTask fireTask = new FireTask (myFireNode' this);  		//parse the children of the fire node into the task  		fireTask.ParseTasks (bullet);  		//store the task  		ChildTasks.Add (fireTask);  	}  	break;  case NodeName.FireRef:  	{  		//convert the node to a fireref node  		FireRefNode myFireNode = childNode as FireRefNode;  		//create the fire task  		FireTask fireTask = new FireTask (myFireNode.ReferencedFireNode' this);  		//add the params to the fire task  		for (int i = 0; i < childNode.ChildNodes.Count; i++) {  			fireTask.ParamList.Add (childNode.ChildNodes [i].GetValue (this));  		}  		//parse the children of the action node into the task  		fireTask.ParseTasks (bullet);  		//store the task  		ChildTasks.Add (fireTask);  	}  	break;  case NodeName.Wait:  	{  		ChildTasks.Add (new WaitTask (childNode as BulletNode' this));  	}  	break;  case NodeName.Vanish:  	{  		ChildTasks.Add (new VanishTask (childNode as BulletNode' this));  	}  	break;  case NodeName.Accel:  	{  		ChildTasks.Add (new AccelTask (childNode as BulletNode' this));  	}  	break;  }  
