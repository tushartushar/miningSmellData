Implementation smell,Namespace,Class,File,Method,Description
Long Method,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The method has 201 lines of code.
Complex Method,RaidarGadget,RaidStatusMap,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,GetStatusString,Cyclomatic complexity of the method is 14
Complex Method,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,Cyclomatic complexity of the method is 21
Complex Method,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,UpdateNasStatus,Cyclomatic complexity of the method is 21
Complex Method,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,Cyclomatic complexity of the method is 12
Long Statement,RaidarGadget,CircularLogBuffer,C:\repos\TheGarf_RaidarGadget\CircularLogBuffer.cs,Add,The length of the statement  "	string nowString = String.Format ("[{0}-{1:D2}-{2:D2} {3:D2}:{4:D2}:{5:D2}.{6:D3}]"' now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 166.
Long Statement,RaidarGadget,CircularLogBuffer,C:\repos\TheGarf_RaidarGadget\CircularLogBuffer.cs,Add,The length of the statement  "	string exceptionMessage = string.Format ("Exception: " + exception.GetType () + " Message: " + exception.Message + "\n" + exception.StackTrace); " is 144.
Long Statement,RaidarGadget,CircularLogBuffer,C:\repos\TheGarf_RaidarGadget\CircularLogBuffer.cs,GetNowString,The length of the statement  "	string nowString = String.Format ("{0}{1:D2}{2:D2}{3:D2}{4:D2}{5:D2}{6:D3}"' now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 158.
Long Statement,RaidarGadget,RaidarSnmp,C:\repos\TheGarf_RaidarGadget\RaidarSnmp.cs,ReceiveTask,The length of the statement  "					RaidarGadget.App.Current.Dispatcher.BeginInvoke (NasConnectionLost' this' new MessageEventArgs (ex.SocketErrorCode.ToString ())); " is 129.
Long Statement,RaidarGadget,App,C:\repos\TheGarf_RaidarGadget\App.xaml.cs,Application_DispatcherUnhandledException,The length of the statement  "	stringBuilder.AppendFormat ("An unhandled Exception occured on thread ID = " + e.Dispatcher.Thread.ManagedThreadId + "\n" + "{0}\n"' e.Exception.Message); " is 154.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The length of the statement  "	stringAnimation.KeyFrames.Add (new DiscreteStringKeyFrame (StringResources.String_Searching + ".  "' KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (0)))); " is 156.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The length of the statement  "	stringAnimation.KeyFrames.Add (new DiscreteStringKeyFrame (StringResources.String_Searching + ".. "' KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (500)))); " is 158.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The length of the statement  "	stringAnimation.KeyFrames.Add (new DiscreteStringKeyFrame (StringResources.String_Searching + "..."' KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (1000)))); " is 159.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,UpdateNasStatus,The length of the statement  "				txtFan += raidInfo.Fans [i].FanType + " " + raidInfo.Fans [i].FanSpeed + StringResources.String_rpm + " " + raidInfo.Fans [i].Status; " is 133.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,UpdateNasStatus,The length of the statement  "				txtTemp += raidInfo.Temperatures [i].Index + " " + raidInfo.Temperatures [i].TempCelcius + StringResources.String_Celsius + " " + raidInfo.Temperatures [i].Status; " is 163.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetNasInfo,The length of the statement  "	SetToolTip (infoLabel' StringResources.String_MacAddress + raidInfo.MacAdress.ToUpper () + "\n" + StringResources.String_Firmware + raidInfo.SoftwareName + " v" + raidInfo.SoftwareVersion); " is 189.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetUpsInfo,The length of the statement  "		SetToolTip (upsLabel' StringResources.String_UPS + "\n" + raidInfo.Ups.Description + "\n" + StringResources.String_UPS_Battery + raidInfo.Ups.Charge + "%' " + raidInfo.Ups.TimeLeft + "\n" + RaidStatusMap.GetStatusString (raidInfo.Ups.Status' raidInfo.Ups)); " is 257.
Long Statement,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetVolumeStatus,The length of the statement  "		string volumeInfoTooltipString = StringResources.String_Volume + volume.RaidLevel + "' " + volume.RaidStatus + "\n" + volume.GbUsed + StringResources.String_Gb_used_of + volume.GbTotal + StringResources.String_Gb; " is 213.
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (outerArr.Length < 5) {  	throw new InvalidOperationException ("Invalid data format");  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: ip = outerArr [2];  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: foreach (string propertyString in propertyArray) {  	int id;  	string type = string.Empty;  	string property = string.Empty;  	id = 0;  	string[] splitStrings = propertyRegEx.Split (propertyString);  	if (splitStrings.Length >= 5) {  		type = splitStrings [2];  		id = Int32.Parse (splitStrings [3]);  		property = splitStrings [4];  		switch (type) {  		case "temp": {  			//temp = new RaidTemperature(property);  			RaidTemperature temp = new RaidTemperature (property' id);  			temps.Add (temp);  			break;  		}  		case "fan": {  			//fan = new RaidFan(property);  			RaidFan fan = new RaidFan (property' id);  			fans.Add (fan);  			break;  		}  		case "ups": {  			ups = new RaidUPS (property);  			break;  		}  		case "volume": {  			RaidVolume volume = new RaidVolume (property' id);  			volumes.Add (volume);  			break;  		}  		case "disk": {  			RaidDisk disk = new RaidDisk (property' id);  			disks.Add (disk);  			break;  		}  		case "model": {  			Match match = modelRegEx.Match (property);  			model = "Unknown ReadyNAS model";  			if (match.Groups.Count >= 2) {  				model = match.Groups [1].Value;  			}  			break;  		}  		default: {  			// just ignore  			break;  		}  		}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: foreach (string propertyString in propertyArray) {  	int id;  	string type = string.Empty;  	string property = string.Empty;  	id = 0;  	string[] splitStrings = propertyRegEx.Split (propertyString);  	if (splitStrings.Length >= 5) {  		type = splitStrings [2];  		id = Int32.Parse (splitStrings [3]);  		property = splitStrings [4];  		switch (type) {  		case "temp": {  			//temp = new RaidTemperature(property);  			RaidTemperature temp = new RaidTemperature (property' id);  			temps.Add (temp);  			break;  		}  		case "fan": {  			//fan = new RaidFan(property);  			RaidFan fan = new RaidFan (property' id);  			fans.Add (fan);  			break;  		}  		case "ups": {  			ups = new RaidUPS (property);  			break;  		}  		case "volume": {  			RaidVolume volume = new RaidVolume (property' id);  			volumes.Add (volume);  			break;  		}  		case "disk": {  			RaidDisk disk = new RaidDisk (property' id);  			disks.Add (disk);  			break;  		}  		case "model": {  			Match match = modelRegEx.Match (property);  			model = "Unknown ReadyNAS model";  			if (match.Groups.Count >= 2) {  				model = match.Groups [1].Value;  			}  			break;  		}  		default: {  			// just ignore  			break;  		}  		}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: foreach (string propertyString in propertyArray) {  	int id;  	string type = string.Empty;  	string property = string.Empty;  	id = 0;  	string[] splitStrings = propertyRegEx.Split (propertyString);  	if (splitStrings.Length >= 5) {  		type = splitStrings [2];  		id = Int32.Parse (splitStrings [3]);  		property = splitStrings [4];  		switch (type) {  		case "temp": {  			//temp = new RaidTemperature(property);  			RaidTemperature temp = new RaidTemperature (property' id);  			temps.Add (temp);  			break;  		}  		case "fan": {  			//fan = new RaidFan(property);  			RaidFan fan = new RaidFan (property' id);  			fans.Add (fan);  			break;  		}  		case "ups": {  			ups = new RaidUPS (property);  			break;  		}  		case "volume": {  			RaidVolume volume = new RaidVolume (property' id);  			volumes.Add (volume);  			break;  		}  		case "disk": {  			RaidDisk disk = new RaidDisk (property' id);  			disks.Add (disk);  			break;  		}  		case "model": {  			Match match = modelRegEx.Match (property);  			model = "Unknown ReadyNAS model";  			if (match.Groups.Count >= 2) {  				model = match.Groups [1].Value;  			}  			break;  		}  		default: {  			// just ignore  			break;  		}  		}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: foreach (string propertyString in propertyArray) {  	int id;  	string type = string.Empty;  	string property = string.Empty;  	id = 0;  	string[] splitStrings = propertyRegEx.Split (propertyString);  	if (splitStrings.Length >= 5) {  		type = splitStrings [2];  		id = Int32.Parse (splitStrings [3]);  		property = splitStrings [4];  		switch (type) {  		case "temp": {  			//temp = new RaidTemperature(property);  			RaidTemperature temp = new RaidTemperature (property' id);  			temps.Add (temp);  			break;  		}  		case "fan": {  			//fan = new RaidFan(property);  			RaidFan fan = new RaidFan (property' id);  			fans.Add (fan);  			break;  		}  		case "ups": {  			ups = new RaidUPS (property);  			break;  		}  		case "volume": {  			RaidVolume volume = new RaidVolume (property' id);  			volumes.Add (volume);  			break;  		}  		case "disk": {  			RaidDisk disk = new RaidDisk (property' id);  			disks.Add (disk);  			break;  		}  		case "model": {  			Match match = modelRegEx.Match (property);  			model = "Unknown ReadyNAS model";  			if (match.Groups.Count >= 2) {  				model = match.Groups [1].Value;  			}  			break;  		}  		default: {  			// just ignore  			break;  		}  		}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: foreach (string propertyString in propertyArray) {  	int id;  	string type = string.Empty;  	string property = string.Empty;  	id = 0;  	string[] splitStrings = propertyRegEx.Split (propertyString);  	if (splitStrings.Length >= 5) {  		type = splitStrings [2];  		id = Int32.Parse (splitStrings [3]);  		property = splitStrings [4];  		switch (type) {  		case "temp": {  			//temp = new RaidTemperature(property);  			RaidTemperature temp = new RaidTemperature (property' id);  			temps.Add (temp);  			break;  		}  		case "fan": {  			//fan = new RaidFan(property);  			RaidFan fan = new RaidFan (property' id);  			fans.Add (fan);  			break;  		}  		case "ups": {  			ups = new RaidUPS (property);  			break;  		}  		case "volume": {  			RaidVolume volume = new RaidVolume (property' id);  			volumes.Add (volume);  			break;  		}  		case "disk": {  			RaidDisk disk = new RaidDisk (property' id);  			disks.Add (disk);  			break;  		}  		case "model": {  			Match match = modelRegEx.Match (property);  			model = "Unknown ReadyNAS model";  			if (match.Groups.Count >= 2) {  				model = match.Groups [1].Value;  			}  			break;  		}  		default: {  			// just ignore  			break;  		}  		}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (splitStrings.Length >= 5) {  	type = splitStrings [2];  	id = Int32.Parse (splitStrings [3]);  	property = splitStrings [4];  	switch (type) {  	case "temp": {  		//temp = new RaidTemperature(property);  		RaidTemperature temp = new RaidTemperature (property' id);  		temps.Add (temp);  		break;  	}  	case "fan": {  		//fan = new RaidFan(property);  		RaidFan fan = new RaidFan (property' id);  		fans.Add (fan);  		break;  	}  	case "ups": {  		ups = new RaidUPS (property);  		break;  	}  	case "volume": {  		RaidVolume volume = new RaidVolume (property' id);  		volumes.Add (volume);  		break;  	}  	case "disk": {  		RaidDisk disk = new RaidDisk (property' id);  		disks.Add (disk);  		break;  	}  	case "model": {  		Match match = modelRegEx.Match (property);  		model = "Unknown ReadyNAS model";  		if (match.Groups.Count >= 2) {  			model = match.Groups [1].Value;  		}  		break;  	}  	default: {  		// just ignore  		break;  	}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (splitStrings.Length >= 5) {  	type = splitStrings [2];  	id = Int32.Parse (splitStrings [3]);  	property = splitStrings [4];  	switch (type) {  	case "temp": {  		//temp = new RaidTemperature(property);  		RaidTemperature temp = new RaidTemperature (property' id);  		temps.Add (temp);  		break;  	}  	case "fan": {  		//fan = new RaidFan(property);  		RaidFan fan = new RaidFan (property' id);  		fans.Add (fan);  		break;  	}  	case "ups": {  		ups = new RaidUPS (property);  		break;  	}  	case "volume": {  		RaidVolume volume = new RaidVolume (property' id);  		volumes.Add (volume);  		break;  	}  	case "disk": {  		RaidDisk disk = new RaidDisk (property' id);  		disks.Add (disk);  		break;  	}  	case "model": {  		Match match = modelRegEx.Match (property);  		model = "Unknown ReadyNAS model";  		if (match.Groups.Count >= 2) {  			model = match.Groups [1].Value;  		}  		break;  	}  	default: {  		// just ignore  		break;  	}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (splitStrings.Length >= 5) {  	type = splitStrings [2];  	id = Int32.Parse (splitStrings [3]);  	property = splitStrings [4];  	switch (type) {  	case "temp": {  		//temp = new RaidTemperature(property);  		RaidTemperature temp = new RaidTemperature (property' id);  		temps.Add (temp);  		break;  	}  	case "fan": {  		//fan = new RaidFan(property);  		RaidFan fan = new RaidFan (property' id);  		fans.Add (fan);  		break;  	}  	case "ups": {  		ups = new RaidUPS (property);  		break;  	}  	case "volume": {  		RaidVolume volume = new RaidVolume (property' id);  		volumes.Add (volume);  		break;  	}  	case "disk": {  		RaidDisk disk = new RaidDisk (property' id);  		disks.Add (disk);  		break;  	}  	case "model": {  		Match match = modelRegEx.Match (property);  		model = "Unknown ReadyNAS model";  		if (match.Groups.Count >= 2) {  			model = match.Groups [1].Value;  		}  		break;  	}  	default: {  		// just ignore  		break;  	}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (splitStrings.Length >= 5) {  	type = splitStrings [2];  	id = Int32.Parse (splitStrings [3]);  	property = splitStrings [4];  	switch (type) {  	case "temp": {  		//temp = new RaidTemperature(property);  		RaidTemperature temp = new RaidTemperature (property' id);  		temps.Add (temp);  		break;  	}  	case "fan": {  		//fan = new RaidFan(property);  		RaidFan fan = new RaidFan (property' id);  		fans.Add (fan);  		break;  	}  	case "ups": {  		ups = new RaidUPS (property);  		break;  	}  	case "volume": {  		RaidVolume volume = new RaidVolume (property' id);  		volumes.Add (volume);  		break;  	}  	case "disk": {  		RaidDisk disk = new RaidDisk (property' id);  		disks.Add (disk);  		break;  	}  	case "model": {  		Match match = modelRegEx.Match (property);  		model = "Unknown ReadyNAS model";  		if (match.Groups.Count >= 2) {  			model = match.Groups [1].Value;  		}  		break;  	}  	default: {  		// just ignore  		break;  	}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (splitStrings.Length >= 5) {  	type = splitStrings [2];  	id = Int32.Parse (splitStrings [3]);  	property = splitStrings [4];  	switch (type) {  	case "temp": {  		//temp = new RaidTemperature(property);  		RaidTemperature temp = new RaidTemperature (property' id);  		temps.Add (temp);  		break;  	}  	case "fan": {  		//fan = new RaidFan(property);  		RaidFan fan = new RaidFan (property' id);  		fans.Add (fan);  		break;  	}  	case "ups": {  		ups = new RaidUPS (property);  		break;  	}  	case "volume": {  		RaidVolume volume = new RaidVolume (property' id);  		volumes.Add (volume);  		break;  	}  	case "disk": {  		RaidDisk disk = new RaidDisk (property' id);  		disks.Add (disk);  		break;  	}  	case "model": {  		Match match = modelRegEx.Match (property);  		model = "Unknown ReadyNAS model";  		if (match.Groups.Count >= 2) {  			model = match.Groups [1].Value;  		}  		break;  	}  	default: {  		// just ignore  		break;  	}  	}  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: type = splitStrings [2];  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: id = Int32.Parse (splitStrings [3]);  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: property = splitStrings [4];  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: switch (type) {  case "temp": {  	//temp = new RaidTemperature(property);  	RaidTemperature temp = new RaidTemperature (property' id);  	temps.Add (temp);  	break;  }  case "fan": {  	//fan = new RaidFan(property);  	RaidFan fan = new RaidFan (property' id);  	fans.Add (fan);  	break;  }  case "ups": {  	ups = new RaidUPS (property);  	break;  }  case "volume": {  	RaidVolume volume = new RaidVolume (property' id);  	volumes.Add (volume);  	break;  }  case "disk": {  	RaidDisk disk = new RaidDisk (property' id);  	disks.Add (disk);  	break;  }  case "model": {  	Match match = modelRegEx.Match (property);  	model = "Unknown ReadyNAS model";  	if (match.Groups.Count >= 2) {  		model = match.Groups [1].Value;  	}  	break;  }  default: {  	// just ignore  	break;  }  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (match.Groups.Count >= 2) {  	model = match.Groups [1].Value;  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: versionUnparsed = outerArr [4];  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (patternMatch.Groups.Count >= 2) {  	software = patternMatch.Groups [1].Value;  }  else {  	software = "Unknown NAS firmware";  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: if (patternMatch.Groups.Count >= 2) {  	version = patternMatch.Groups [1].Value;  }  else {  	version = "Unknown version";  }  
Magic Number,RaidarGadget,RaidInfo,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,Parse,The following statement contains a magic number: this.bootFlag = outerArr [5];  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: if (match.Groups.Count == 8) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	// Parse with a '.' for decimal point by using a US culture object  	CultureInfo usCulture = new CultureInfo ("en-US");  	tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  	tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  	minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  	maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  	minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  	maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: tempCelcius = float.Parse (match.Groups [2].Value' NumberStyles.Float' usCulture);  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: tempFahrenheit = float.Parse (match.Groups [3].Value' NumberStyles.Float' usCulture);  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: minExpectedCelcius = Int32.Parse (match.Groups [4].Value);  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: maxExpectedCelcius = Int32.Parse (match.Groups [5].Value);  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: minExpectedFahrenheit = Int32.Parse (match.Groups [6].Value);  
Magic Number,RaidarGadget,RaidTemperature,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidTemperature,The following statement contains a magic number: maxExpectedFahrenheit = Int32.Parse (match.Groups [7].Value);  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	fanSpeed = match.Groups [2].Value;  	if (match.Groups.Count == 4) {  		if (match.Groups [3].Success) {  			fanType = match.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	fanSpeed = match.Groups [2].Value;  	if (match.Groups.Count == 4) {  		if (match.Groups [3].Success) {  			fanType = match.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	fanSpeed = match.Groups [2].Value;  	if (match.Groups.Count == 4) {  		if (match.Groups [3].Success) {  			fanType = match.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	fanSpeed = match.Groups [2].Value;  	if (match.Groups.Count == 4) {  		if (match.Groups [3].Success) {  			fanType = match.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	fanSpeed = match.Groups [2].Value;  	if (match.Groups.Count == 4) {  		if (match.Groups [3].Success) {  			fanType = match.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: fanSpeed = match.Groups [2].Value;  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count == 4) {  	if (match.Groups [3].Success) {  		fanType = match.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count == 4) {  	if (match.Groups [3].Success) {  		fanType = match.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups.Count == 4) {  	if (match.Groups [3].Success) {  		fanType = match.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups [3].Success) {  	fanType = match.Groups [3].Value;  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: if (match.Groups [3].Success) {  	fanType = match.Groups [3].Value;  }  
Magic Number,RaidarGadget,RaidFan,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidFan,The following statement contains a magic number: fanType = match.Groups [3].Value;  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	if (status != RaidarGadget.Status.not_present) {  		Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  		if (descrMatch.Groups.Count >= 4) {  			description = descrMatch.Groups [1].Value;  			charge = descrMatch.Groups [2].Value;  			timeLeft = descrMatch.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	if (status != RaidarGadget.Status.not_present) {  		Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  		if (descrMatch.Groups.Count >= 4) {  			description = descrMatch.Groups [1].Value;  			charge = descrMatch.Groups [2].Value;  			timeLeft = descrMatch.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	if (status != RaidarGadget.Status.not_present) {  		Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  		if (descrMatch.Groups.Count >= 4) {  			description = descrMatch.Groups [1].Value;  			charge = descrMatch.Groups [2].Value;  			timeLeft = descrMatch.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	if (status != RaidarGadget.Status.not_present) {  		Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  		if (descrMatch.Groups.Count >= 4) {  			description = descrMatch.Groups [1].Value;  			charge = descrMatch.Groups [2].Value;  			timeLeft = descrMatch.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (match.Groups.Count >= 3) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	if (status != RaidarGadget.Status.not_present) {  		Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  		if (descrMatch.Groups.Count >= 4) {  			description = descrMatch.Groups [1].Value;  			charge = descrMatch.Groups [2].Value;  			timeLeft = descrMatch.Groups [3].Value;  		}  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (status != RaidarGadget.Status.not_present) {  	Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  	if (descrMatch.Groups.Count >= 4) {  		description = descrMatch.Groups [1].Value;  		charge = descrMatch.Groups [2].Value;  		timeLeft = descrMatch.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (status != RaidarGadget.Status.not_present) {  	Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  	if (descrMatch.Groups.Count >= 4) {  		description = descrMatch.Groups [1].Value;  		charge = descrMatch.Groups [2].Value;  		timeLeft = descrMatch.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (status != RaidarGadget.Status.not_present) {  	Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  	if (descrMatch.Groups.Count >= 4) {  		description = descrMatch.Groups [1].Value;  		charge = descrMatch.Groups [2].Value;  		timeLeft = descrMatch.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (status != RaidarGadget.Status.not_present) {  	Match descrMatch = upsDescrRegEx.Match (match.Groups [2].Value);  	if (descrMatch.Groups.Count >= 4) {  		description = descrMatch.Groups [1].Value;  		charge = descrMatch.Groups [2].Value;  		timeLeft = descrMatch.Groups [3].Value;  	}  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (descrMatch.Groups.Count >= 4) {  	description = descrMatch.Groups [1].Value;  	charge = descrMatch.Groups [2].Value;  	timeLeft = descrMatch.Groups [3].Value;  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (descrMatch.Groups.Count >= 4) {  	description = descrMatch.Groups [1].Value;  	charge = descrMatch.Groups [2].Value;  	timeLeft = descrMatch.Groups [3].Value;  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: if (descrMatch.Groups.Count >= 4) {  	description = descrMatch.Groups [1].Value;  	charge = descrMatch.Groups [2].Value;  	timeLeft = descrMatch.Groups [3].Value;  }  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: charge = descrMatch.Groups [2].Value;  
Magic Number,RaidarGadget,RaidUPS,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidUPS,The following statement contains a magic number: timeLeft = descrMatch.Groups [3].Value;  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	name = match.Groups [2].Value;  	raidLevel = match.Groups [3].Value;  	raidStatus = match.Groups [4].Value;  	gbUsed = Int32.Parse (match.Groups [5].Value);  	gbTotal = Int32.Parse (match.Groups [7].Value);  }  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: name = match.Groups [2].Value;  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: raidLevel = match.Groups [3].Value;  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: raidStatus = match.Groups [4].Value;  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: gbUsed = Int32.Parse (match.Groups [5].Value);  
Magic Number,RaidarGadget,RaidVolume,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidVolume,The following statement contains a magic number: gbTotal = Int32.Parse (match.Groups [7].Value);  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 6) {  	string statusString = match.Groups [1].Value;  	if (!Status.TryParse (statusString' out status)) {  		status = Status.unknown;  	}  	diskChannel = match.Groups [2].Value;  	// review; use REGEX to break this string into parts Make' Model' Capacity and Capacity Units  	diskType = match.Groups [3].Value;  	tempCelcius = Int32.Parse (match.Groups [4].Value);  	tempFahrenheit = Int32.Parse (match.Groups [5].Value);  	if (match.Groups.Count >= 7) {  		diskState = match.Groups [6].Value;  	}  	else {  		diskState = "Active";  	}  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: diskChannel = match.Groups [2].Value;  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: diskType = match.Groups [3].Value;  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: tempCelcius = Int32.Parse (match.Groups [4].Value);  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: tempFahrenheit = Int32.Parse (match.Groups [5].Value);  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	diskState = match.Groups [6].Value;  }  else {  	diskState = "Active";  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: if (match.Groups.Count >= 7) {  	diskState = match.Groups [6].Value;  }  else {  	diskState = "Active";  }  
Magic Number,RaidarGadget,RaidDisk,C:\repos\TheGarf_RaidarGadget\RaidInfo.cs,RaidDisk,The following statement contains a magic number: diskState = match.Groups [6].Value;  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The following statement contains a magic number: stringAnimation.Duration = new Duration (TimeSpan.FromMilliseconds (1500));  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The following statement contains a magic number: stringAnimation.KeyFrames.Add (new DiscreteStringKeyFrame (StringResources.String_Searching + ".. "' KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (500))));  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,StartSearchAnimation,The following statement contains a magic number: stringAnimation.KeyFrames.Add (new DiscreteStringKeyFrame (StringResources.String_Searching + "..."' KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (1000))));  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,The following statement contains a magic number: if (temperature != null) {  	// Set label values  	minTempLabel.Content = temperature.MinExpectedCelcius + StringResources.String_Celsius;  	maxTempLabel.Content = temperature.MaxExpectedCelcius + StringResources.String_Celsius;  	curTempLabel.Content = temperature.TempCelcius + StringResources.String_Celsius;  	// Tooltip and alert status  	SetToolTip (curTempLabel' RaidStatusMap.GetStatusString (temperature.Status' temperature));  	//SetToolTip(minTempLabel' RaidStatusMap.GetStatusString(  	//    raidInfo.Temperature.Status' raidInfo.Temperature));  	//SetToolTip(maxTempLabel' RaidStatusMap.GetStatusString(  	//    raidInfo.Temperature.Status' raidInfo.Temperature));  	SetToolTip (thermometerPath' RaidStatusMap.GetStatusString (temperature.Status' temperature));  	SetToolTip (levelPath' RaidStatusMap.GetStatusString (temperature.Status' temperature));  	if (temperature.Status == Status.ok) {  		curTempLabel.Foreground = defaultBrush;  	}  	else {  		curTempLabel.Foreground = alertBrush;  	}  	// Calculate new Y value for thermometer mercury  	float tempRange = temperature.MaxExpectedCelcius - temperature.MinExpectedCelcius;  	float tempFractional = temperature.TempCelcius / tempRange;  	float newTemperatureY = 50f - (25f * tempFractional);  	// Calculate the thermometer mercury color  	levelPath.Fill = new SolidColorBrush (Colors.DarkGray);  	if (temperature.TempCelcius <= temperature.MinExpectedCelcius) {  		levelPath.Fill = new SolidColorBrush (Colors.Blue);  	}  	else if (temperature.TempCelcius >= temperature.MaxExpectedCelcius) {  		levelPath.Fill = new SolidColorBrush (Colors.Red);  	}  	// Clip temperature bounds to avoid drawing errors  	if (newTemperatureY < 25f) {  		newTemperatureY = 25f;  	}  	else if (newTemperatureY > 50f) {  		newTemperatureY = 50f;  	}  	// Draw new mercury level  	PathGeometry geometry = levelPath.Data as PathGeometry;  	if (geometry != null) {  		if (Math.Abs (newTemperatureY - oldTemperatureY) >= float.Epsilon) {  			foreach (PathFigure figure in geometry.Figures) {  				for (int i = 0; i < 2; i++) {  					LineSegment lineSegment = figure.Segments [i] as LineSegment;  					if (lineSegment != null) {  						lineSegment.Point = new Point (lineSegment.Point.X' newTemperatureY);  					}  				}  			}  			oldTemperatureY = newTemperatureY;  		}  	}  }  else {  	// No temperature Sensor; so no value to display  	SetToolTip (curTempLabel' StringResources.String_Unknown_Temperature);  	SetToolTip (thermometerPath' StringResources.String_Unknown_Temperature);  	SetToolTip (levelPath' StringResources.String_Unknown_Temperature);  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,The following statement contains a magic number: if (geometry != null) {  	if (Math.Abs (newTemperatureY - oldTemperatureY) >= float.Epsilon) {  		foreach (PathFigure figure in geometry.Figures) {  			for (int i = 0; i < 2; i++) {  				LineSegment lineSegment = figure.Segments [i] as LineSegment;  				if (lineSegment != null) {  					lineSegment.Point = new Point (lineSegment.Point.X' newTemperatureY);  				}  			}  		}  		oldTemperatureY = newTemperatureY;  	}  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,The following statement contains a magic number: if (Math.Abs (newTemperatureY - oldTemperatureY) >= float.Epsilon) {  	foreach (PathFigure figure in geometry.Figures) {  		for (int i = 0; i < 2; i++) {  			LineSegment lineSegment = figure.Segments [i] as LineSegment;  			if (lineSegment != null) {  				lineSegment.Point = new Point (lineSegment.Point.X' newTemperatureY);  			}  		}  	}  	oldTemperatureY = newTemperatureY;  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,The following statement contains a magic number: foreach (PathFigure figure in geometry.Figures) {  	for (int i = 0; i < 2; i++) {  		LineSegment lineSegment = figure.Segments [i] as LineSegment;  		if (lineSegment != null) {  			lineSegment.Point = new Point (lineSegment.Point.X' newTemperatureY);  		}  	}  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetTemperatureInfo,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	LineSegment lineSegment = figure.Segments [i] as LineSegment;  	if (lineSegment != null) {  		lineSegment.Point = new Point (lineSegment.Point.X' newTemperatureY);  	}  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetToolTip,The following statement contains a magic number: if (!String.IsNullOrEmpty (text)) {  	ToolTip toolTip = new ToolTip ();  	toolTip.FontSize = 10;  	toolTip.ClipToBounds = false;  	toolTip.Content = text;  	element.ToolTip = toolTip;  }  else {  	element.ToolTip = null;  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetToolTip,The following statement contains a magic number: toolTip.FontSize = 10;  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetLedStatus,The following statement contains a magic number: if (status == Status.ok) {  	led.Background = new SolidColorBrush (Colors.Lime);  	led.BorderBrush = new SolidColorBrush (Colors.LimeGreen);  }  else if (status == Status.warn || status == Status.resync) {  	led.Background = new SolidColorBrush (Colors.Orange);  	led.BorderBrush = new SolidColorBrush (Colors.DarkOrange);  }  else if (status == Status.nas_connection_lost) {  	led.Background = new SolidColorBrush (Colors.DarkGreen);  	led.BorderBrush = new SolidColorBrush (Color.FromArgb (255' 0' 0x4B' 0));  }  else {  	led.Background = new SolidColorBrush (Colors.Red);  	led.BorderBrush = new SolidColorBrush (Colors.DarkRed);  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetLedStatus,The following statement contains a magic number: if (status == Status.warn || status == Status.resync) {  	led.Background = new SolidColorBrush (Colors.Orange);  	led.BorderBrush = new SolidColorBrush (Colors.DarkOrange);  }  else if (status == Status.nas_connection_lost) {  	led.Background = new SolidColorBrush (Colors.DarkGreen);  	led.BorderBrush = new SolidColorBrush (Color.FromArgb (255' 0' 0x4B' 0));  }  else {  	led.Background = new SolidColorBrush (Colors.Red);  	led.BorderBrush = new SolidColorBrush (Colors.DarkRed);  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetLedStatus,The following statement contains a magic number: if (status == Status.nas_connection_lost) {  	led.Background = new SolidColorBrush (Colors.DarkGreen);  	led.BorderBrush = new SolidColorBrush (Color.FromArgb (255' 0' 0x4B' 0));  }  else {  	led.Background = new SolidColorBrush (Colors.Red);  	led.BorderBrush = new SolidColorBrush (Colors.DarkRed);  }  
Magic Number,RaidarGadget,RaidarGadgetPage,C:\repos\TheGarf_RaidarGadget\RaidarGadgetPage.xaml.cs,SetLedStatus,The following statement contains a magic number: led.BorderBrush = new SolidColorBrush (Color.FromArgb (255' 0' 0x4B' 0));  
