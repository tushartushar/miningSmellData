Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,fn_GetChangedData,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,fn_ExportGridtoFile,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Connect_Click,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,Cyclomatic complexity of the method is 13
Complex Method,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_cdctable_Click,Cyclomatic complexity of the method is 9
Complex Method,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_EnableCDCOnTable,Cyclomatic complexity of the method is 12
Complex Method,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_ExportToDB,Cyclomatic complexity of the method is 8
Complex Method,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,Cyclomatic complexity of the method is 13
Long Parameter List,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The method has 6 parameters.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The length of the statement  "		if (radioButton_alldata.Checked == false && radioButton_netdata.Checked == false && radioButton_Timewise.Checked == false) { " is 124.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,fn_GetChangedData,The length of the statement  "		result = cdcobj.fn_GetChangeData (ChangeDataType' Databasename' tablename' comboBox_capturedinstances.Text' dateTimePicker_FromDataTime.Value' dateTimePicker_ToDateTime.Value); " is 176.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,fn_GetChangedData,The length of the statement  "			updatecount = result.AsEnumerable ().Count (row => row.Field<string> ("Operation") == "UPDATE AFTER" || row.Field<string> ("Operation") == "UPDATE BEFORE"); " is 156.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,MorphBinaryColumns,The length of the statement  "		var targetNames = table.Columns.Cast<DataColumn> ().Where (col => col.DataType.Equals (typeof(byte[]))).Select (col => col.ColumnName).ToList (); " is 145.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_InitialSync_Click,The length of the statement  "		int _recordcount = obj.fn_ExportToDB (srctable' desttable' comboBox_Database.Text.ToString ()' "false"' Databasename' comboBox_Database.Text); " is 142.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		//    obj.fn_Updatemetatables(Settings1.Default.Server.ToString()' textBox_Server.Text' Databasename' comboBox_Database.Text' tablename' desttable' comboBox_capturedinstances.Text' textBox_User.Text' Crypto.Crypto.Encrypt(textBox_password.Text' true)); " is 252.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		SQLAgentJob _sajob = new SQLAgentJob (Settings1.Default.Server' Settings1.Default.User' Crypto.Crypto.Encrypt (Settings1.Default.Password' true)' Settings1.Default.AuthenticationType); " is 184.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		_obj.fn_Updatemetatables (Settings1.Default.Server.ToString ()' textBox_Server.Text' Databasename' comboBox_Database.Text' tablename' desttable' comboBox_capturedinstances.Text' textBox_User.Text' Crypto.Crypto.Encrypt (textBox_password.Text' true)); " is 250.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		_obj.fn_setsqljobid (_sqljobid' comboBox_capturedinstances.Text' Databasename' tablename' desttable' comboBox_Database.Text' textBox_Server.Text); " is 146.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		string _cmd = Directory.GetCurrentDirectory () + "//" + "SQLCDCIDLoader.exe " + _sqljobid + " " + Settings1.Default.Server + " " + userid + " " + password; " is 155.
Long Statement,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_scheduleIDL_Click,The length of the statement  "		MessageBox.Show (_sqljobname + " created on " + Settings1.Default.Server + ". Schedule accordingly from SQL Server Agent."' "SQLCDCApp"); " is 137.
Long Statement,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The length of the statement  "			msgoutput = MessageBox.Show ("Enable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString (); " is 121.
Long Statement,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The length of the statement  "			msgoutput = MessageBox.Show ("Disable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString (); " is 122.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_ConnecttoSQL,The length of the statement  "			_ConnectionString = "Initial Catalog=master;Data Source=" + Settings1.Default.Server + ";user id=" + Settings1.Default.User + ";password=" + Settings1.Default.Password; " is 168.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetDatabases,The length of the statement  "		SqlCommand SQLGetDatabases = new SqlCommand ("Select name'is_cdc_enabled from sys.databases where database_id>4 and state_desc='Online' order by is_cdc_enabled desc "' _Sqlcon); " is 177.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The length of the statement  "			string Qrygettables = "Select '" + db + "''[schemaname]=ss.name'st.name'is_tracked_by_cdc from sys.Tables st  " + "join sys.schemas ss on st.schema_id=ss.schema_id order by name"; " is 179.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_EnableCDCOnTable,The length of the statement  "			QryEnableCdcOnTable = "EXECUTE sys.sp_cdc_enable_table @source_schema = '" + cdcobj.source_schema + "' ' @source_name = '" + cdcobj.source_name + "''"; " is 151.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_EnableCDCOnTable,The length of the statement  "			QryEnableCdcOnTable = "EXECUTE sys.sp_cdc_disable_table @source_schema = '" + cdcobj.source_schema + "' ' @source_name = '" + cdcobj.source_name + "'"; " is 151.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_CaptureInstance,The length of the statement  "			string Qry = "Select capture_instance from cdc.change_tables where source_object_id=object_id('" + cdcobj.source_schema + "." + cdcobj.source_name + "')"; " is 154.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The length of the statement  "		_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" + " is 241.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The length of the statement  "		"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); "; " is 355.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The length of the statement  "			_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" + " is 241.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The length of the statement  "			"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); "; " is 355.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The length of the statement  "		_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')"; " is 619.
Long Statement,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The length of the statement  "	return SQLGetType (schemaRow ["DataType"]' int.Parse (schemaRow ["ColumnSize"].ToString ())' int.Parse (schemaRow ["NumericPrecision"].ToString ())' int.Parse (schemaRow ["NumericScale"].ToString ())); " is 201.
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,CDCData_Load,The following statement contains a magic number: try {  	SQLCDCApp scdc = new SQLCDCApp ();  	Databasename = _lst [_lst.Count - 1];  	tablename = _lst [_lst.Count - 2];  	_lst.RemoveAt (_lst.Count - 1);  	_lst.RemoveAt (_lst.Count - 1);  	dateTimePicker_FromDataTime.CustomFormat = "MM/dd/yyyy hh:mm:ss tt";  	dateTimePicker_FromDataTime.Format = DateTimePickerFormat.Custom;  	dateTimePicker_ToDateTime.CustomFormat = "MM/dd/yyyy hh:mm:ss tt";  	dateTimePicker_ToDateTime.Format = DateTimePickerFormat.Custom;  	comboBox_capturedinstances.DataSource = _lst;  	comboBox_Authentication.Text = comboBox_Authentication.Items [0].ToString ();  }  catch (Exception ex) {  	MessageBox.Show (ex.Message' "SQLCDCApp Error!!!");  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,CDCData_Load,The following statement contains a magic number: tablename = _lst [_lst.Count - 2];  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: try {  	Cursor.Current = Cursors.WaitCursor;  	if (radioButton_alldata.Checked == false && radioButton_netdata.Checked == false && radioButton_Timewise.Checked == false) {  		MessageBox.Show ("Please select an option!!!"' "SQLCDCApp Info !!!");  		return;  	}  	if (radioButton_alldata.Checked == true) {  		ChangeDataType = 1;  		fn_GetChangedData (ChangeDataType);  		return;  	}  	if (radioButton_netdata.Checked == true) {  		ChangeDataType = 2;  		fn_GetChangedData (ChangeDataType);  		return;  	}  	if (radioButton_Timewise.Checked == true) {  		if (dateTimePicker_FromDataTime.Value > DateTime.Now) {  			MessageBox.Show ("From date time can't be greater than current date."' "SQLCDCApp Info !!!");  			dateTimePicker_FromDataTime.Focus ();  			return;  		}  		if (dateTimePicker_FromDataTime.Value > dateTimePicker_ToDateTime.Value) {  			MessageBox.Show ("From date time can't be greater than to date."' "SQLCDCApp Info !!!");  			dateTimePicker_FromDataTime.Focus ();  			return;  		}  		ChangeDataType = 3;  		fn_GetChangedData (ChangeDataType);  		Cursor.Current = Cursors.Arrow;  		return;  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message' "SQLCDCApp Error !!!");  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: try {  	Cursor.Current = Cursors.WaitCursor;  	if (radioButton_alldata.Checked == false && radioButton_netdata.Checked == false && radioButton_Timewise.Checked == false) {  		MessageBox.Show ("Please select an option!!!"' "SQLCDCApp Info !!!");  		return;  	}  	if (radioButton_alldata.Checked == true) {  		ChangeDataType = 1;  		fn_GetChangedData (ChangeDataType);  		return;  	}  	if (radioButton_netdata.Checked == true) {  		ChangeDataType = 2;  		fn_GetChangedData (ChangeDataType);  		return;  	}  	if (radioButton_Timewise.Checked == true) {  		if (dateTimePicker_FromDataTime.Value > DateTime.Now) {  			MessageBox.Show ("From date time can't be greater than current date."' "SQLCDCApp Info !!!");  			dateTimePicker_FromDataTime.Focus ();  			return;  		}  		if (dateTimePicker_FromDataTime.Value > dateTimePicker_ToDateTime.Value) {  			MessageBox.Show ("From date time can't be greater than to date."' "SQLCDCApp Info !!!");  			dateTimePicker_FromDataTime.Focus ();  			return;  		}  		ChangeDataType = 3;  		fn_GetChangedData (ChangeDataType);  		Cursor.Current = Cursors.Arrow;  		return;  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message' "SQLCDCApp Error !!!");  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: if (radioButton_netdata.Checked == true) {  	ChangeDataType = 2;  	fn_GetChangedData (ChangeDataType);  	return;  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: ChangeDataType = 2;  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: if (radioButton_Timewise.Checked == true) {  	if (dateTimePicker_FromDataTime.Value > DateTime.Now) {  		MessageBox.Show ("From date time can't be greater than current date."' "SQLCDCApp Info !!!");  		dateTimePicker_FromDataTime.Focus ();  		return;  	}  	if (dateTimePicker_FromDataTime.Value > dateTimePicker_ToDateTime.Value) {  		MessageBox.Show ("From date time can't be greater than to date."' "SQLCDCApp Info !!!");  		dateTimePicker_FromDataTime.Focus ();  		return;  	}  	ChangeDataType = 3;  	fn_GetChangedData (ChangeDataType);  	Cursor.Current = Cursors.Arrow;  	return;  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,button_Getdata_Click,The following statement contains a magic number: ChangeDataType = 3;  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,comboBox_Database_SelectedIndexChanged,The following statement contains a magic number: try {  	SQLCDCApp obj = new SQLCDCApp ();  	List<string> dblist = new List<string> ();  	comboBox_Tables.Items.Clear ();  	dblist.Add (comboBox_Database.Text.ToString ());  	DataSet dstables = obj.fn_GetTables (dblist' "Destination");  	DataTable dt = dstables.Tables [0];  	if (dt.Rows.Count == 0) {  		comboBox_Tables.Items.Insert (0' "Create New");  		return;  	}  	foreach (DataRow rw in dt.Rows) {  		comboBox_Tables.Items.Add (rw [1] + "." + rw [2]);  		//comboBox_Tables.Items.Add(item.schema + "." + item.name);  	}  	comboBox_Tables.Items.Insert (0' "Create New");  	comboBox_Tables.Text = comboBox_Tables.Items [1].ToString ();  }  catch (Exception) {  	throw;  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,comboBox_Database_SelectedIndexChanged,The following statement contains a magic number: foreach (DataRow rw in dt.Rows) {  	comboBox_Tables.Items.Add (rw [1] + "." + rw [2]);  	//comboBox_Tables.Items.Add(item.schema + "." + item.name);  }  
Magic Number,SQLCDCApp,CDCData,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\CDCData.cs,comboBox_Database_SelectedIndexChanged,The following statement contains a magic number: comboBox_Tables.Items.Add (rw [1] + "." + rw [2]);  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (textBox_Server.Text)) {  		MessageBox.Show ("Server name can't be blank"' "SQLCDCApp Error");  	}  	if (comboBox_Authentication.SelectedIndex == 1) {  		if (string.IsNullOrEmpty (textBox_User.Text)) {  			MessageBox.Show ("User can't be blank"' "SQLCDCApp Error");  		}  		if (string.IsNullOrEmpty (textBox_password.Text)) {  			MessageBox.Show ("Password can't be blank"' "SQLCDCApp Error");  		}  	}  	_listdatabases = obj.fn_GetDatabases ();  	dataGridView_Databases.DataSource = _listdatabases;  	if (dataGridView_Databases.ColumnCount < 3) {  		DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  		cb.Frozen = true;  		cb.Name = "Select";  		cb.Width = 40;  		dataGridView_Databases.Columns.Insert (0' cb);  		cb.TrueValue = 1;  		cb.FalseValue = 0;  	}  	dataGridView_Databases.Columns [1].ReadOnly = true;  	dataGridView_Databases.Columns [2].ReadOnly = true;  }  catch (Exception ex) {  	throw;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (textBox_Server.Text)) {  		MessageBox.Show ("Server name can't be blank"' "SQLCDCApp Error");  	}  	if (comboBox_Authentication.SelectedIndex == 1) {  		if (string.IsNullOrEmpty (textBox_User.Text)) {  			MessageBox.Show ("User can't be blank"' "SQLCDCApp Error");  		}  		if (string.IsNullOrEmpty (textBox_password.Text)) {  			MessageBox.Show ("Password can't be blank"' "SQLCDCApp Error");  		}  	}  	_listdatabases = obj.fn_GetDatabases ();  	dataGridView_Databases.DataSource = _listdatabases;  	if (dataGridView_Databases.ColumnCount < 3) {  		DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  		cb.Frozen = true;  		cb.Name = "Select";  		cb.Width = 40;  		dataGridView_Databases.Columns.Insert (0' cb);  		cb.TrueValue = 1;  		cb.FalseValue = 0;  	}  	dataGridView_Databases.Columns [1].ReadOnly = true;  	dataGridView_Databases.Columns [2].ReadOnly = true;  }  catch (Exception ex) {  	throw;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (textBox_Server.Text)) {  		MessageBox.Show ("Server name can't be blank"' "SQLCDCApp Error");  	}  	if (comboBox_Authentication.SelectedIndex == 1) {  		if (string.IsNullOrEmpty (textBox_User.Text)) {  			MessageBox.Show ("User can't be blank"' "SQLCDCApp Error");  		}  		if (string.IsNullOrEmpty (textBox_password.Text)) {  			MessageBox.Show ("Password can't be blank"' "SQLCDCApp Error");  		}  	}  	_listdatabases = obj.fn_GetDatabases ();  	dataGridView_Databases.DataSource = _listdatabases;  	if (dataGridView_Databases.ColumnCount < 3) {  		DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  		cb.Frozen = true;  		cb.Name = "Select";  		cb.Width = 40;  		dataGridView_Databases.Columns.Insert (0' cb);  		cb.TrueValue = 1;  		cb.FalseValue = 0;  	}  	dataGridView_Databases.Columns [1].ReadOnly = true;  	dataGridView_Databases.Columns [2].ReadOnly = true;  }  catch (Exception ex) {  	throw;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: if (dataGridView_Databases.ColumnCount < 3) {  	DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  	cb.Frozen = true;  	cb.Name = "Select";  	cb.Width = 40;  	dataGridView_Databases.Columns.Insert (0' cb);  	cb.TrueValue = 1;  	cb.FalseValue = 0;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: if (dataGridView_Databases.ColumnCount < 3) {  	DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  	cb.Frozen = true;  	cb.Name = "Select";  	cb.Width = 40;  	dataGridView_Databases.Columns.Insert (0' cb);  	cb.TrueValue = 1;  	cb.FalseValue = 0;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: cb.Width = 40;  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListDatabases,The following statement contains a magic number: dataGridView_Databases.Columns [2].ReadOnly = true;  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dataGridView_Databases.Rows) {  		if (Convert.ToBoolean (row.Cells [0].Value) == true) {  			rows_with_checked_column.Add (row);  		}  	}  	if (rows_with_checked_column.Count == 0) {  		returnmsg = "Please select a database.";  		return returnmsg;  	}  	bool output = false;  	if (Enable) {  		foreach (DataGridViewRow dgvr in rows_with_checked_column) {  			if (dgvr.Cells [2].Value.ToString () == "False") {  				lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  			}  		}  		msgoutput = MessageBox.Show ("Enable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  		if (msgoutput == "Yes") {  			output = obj.fn_ConfigureCDC (lstdbcdc' true);  			returnmsg = "CDC Enabled on selected Databases!!!";  		}  	}  	else {  		foreach (DataGridViewRow dgvr in rows_with_checked_column) {  			if (dgvr.Cells [2].Value.ToString () == "True") {  				lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  			}  		}  		msgoutput = MessageBox.Show ("Disable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  		if (msgoutput == "Yes") {  			output = obj.fn_ConfigureCDC (lstdbcdc' false);  			returnmsg = "CDC Disabled on selected Databases!!!";  		}  	}  	if (output == true) {  		fn_ListDatabases ();  	}  	return returnmsg;  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dataGridView_Databases.Rows) {  		if (Convert.ToBoolean (row.Cells [0].Value) == true) {  			rows_with_checked_column.Add (row);  		}  	}  	if (rows_with_checked_column.Count == 0) {  		returnmsg = "Please select a database.";  		return returnmsg;  	}  	bool output = false;  	if (Enable) {  		foreach (DataGridViewRow dgvr in rows_with_checked_column) {  			if (dgvr.Cells [2].Value.ToString () == "False") {  				lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  			}  		}  		msgoutput = MessageBox.Show ("Enable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  		if (msgoutput == "Yes") {  			output = obj.fn_ConfigureCDC (lstdbcdc' true);  			returnmsg = "CDC Enabled on selected Databases!!!";  		}  	}  	else {  		foreach (DataGridViewRow dgvr in rows_with_checked_column) {  			if (dgvr.Cells [2].Value.ToString () == "True") {  				lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  			}  		}  		msgoutput = MessageBox.Show ("Disable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  		if (msgoutput == "Yes") {  			output = obj.fn_ConfigureCDC (lstdbcdc' false);  			returnmsg = "CDC Disabled on selected Databases!!!";  		}  	}  	if (output == true) {  		fn_ListDatabases ();  	}  	return returnmsg;  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: if (Enable) {  	foreach (DataGridViewRow dgvr in rows_with_checked_column) {  		if (dgvr.Cells [2].Value.ToString () == "False") {  			lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  		}  	}  	msgoutput = MessageBox.Show ("Enable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  	if (msgoutput == "Yes") {  		output = obj.fn_ConfigureCDC (lstdbcdc' true);  		returnmsg = "CDC Enabled on selected Databases!!!";  	}  }  else {  	foreach (DataGridViewRow dgvr in rows_with_checked_column) {  		if (dgvr.Cells [2].Value.ToString () == "True") {  			lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  		}  	}  	msgoutput = MessageBox.Show ("Disable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  	if (msgoutput == "Yes") {  		output = obj.fn_ConfigureCDC (lstdbcdc' false);  		returnmsg = "CDC Disabled on selected Databases!!!";  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: if (Enable) {  	foreach (DataGridViewRow dgvr in rows_with_checked_column) {  		if (dgvr.Cells [2].Value.ToString () == "False") {  			lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  		}  	}  	msgoutput = MessageBox.Show ("Enable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  	if (msgoutput == "Yes") {  		output = obj.fn_ConfigureCDC (lstdbcdc' true);  		returnmsg = "CDC Enabled on selected Databases!!!";  	}  }  else {  	foreach (DataGridViewRow dgvr in rows_with_checked_column) {  		if (dgvr.Cells [2].Value.ToString () == "True") {  			lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  		}  	}  	msgoutput = MessageBox.Show ("Disable CDC on selected databases?"' "SQLCDCAPP Info"' MessageBoxButtons.YesNo).ToString ();  	if (msgoutput == "Yes") {  		output = obj.fn_ConfigureCDC (lstdbcdc' false);  		returnmsg = "CDC Disabled on selected Databases!!!";  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	if (dgvr.Cells [2].Value.ToString () == "False") {  		lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: if (dgvr.Cells [2].Value.ToString () == "False") {  	lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	if (dgvr.Cells [2].Value.ToString () == "True") {  		lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ConfigureCDC,The following statement contains a magic number: if (dgvr.Cells [2].Value.ToString () == "True") {  	lstdbcdc.Add (dgvr.Cells [1].Value.ToString ());  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListTables,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	if (dgvr.Cells [2].Value.ToString () == "True") {  		dblist.Add (dgvr.Cells [1].Value.ToString ());  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListTables,The following statement contains a magic number: if (dgvr.Cells [2].Value.ToString () == "True") {  	dblist.Add (dgvr.Cells [1].Value.ToString ());  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListTables,The following statement contains a magic number: if (dataGridView_tables.ColumnCount < 5) {  	DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  	cb.Frozen = true;  	cb.Name = "Select";  	cb.Width = 40;  	dataGridView_tables.Columns.Insert (0' cb);  	cb.TrueValue = 1;  	cb.FalseValue = 0;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListTables,The following statement contains a magic number: if (dataGridView_tables.ColumnCount < 5) {  	DataGridViewCheckBoxColumn cb = new DataGridViewCheckBoxColumn ();  	cb.Frozen = true;  	cb.Name = "Select";  	cb.Width = 40;  	dataGridView_tables.Columns.Insert (0' cb);  	cb.TrueValue = 1;  	cb.FalseValue = 0;  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_ListTables,The following statement contains a magic number: cb.Width = 40;  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_cdctable_Click,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	// if(dgvr.Cells[4].Value.ToString()=="False")  	//  {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	cdcobj.role_name = textBox_rolename.Text.Trim ();  	;  	cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  	cdcobj.index_name = textBox_indexname.Text.Trim ();  	cdcobj.captured_column_list = textBox_capturedcollist.Text.Trim ();  	cdcobj.filegroup_name = textBox_filegroupname.Text.Trim ();  	if (checkBox_netchanges.Checked == true) {  		cdcobj.supports_net_changes = 1;  	}  	if (checkBox_netchanges.Checked == false) {  		cdcobj.supports_net_changes = 0;  	}  	if (checkBox_allowpartitionswitch.Checked == true) {  		cdcobj.allow_partition_switch = 1;  	}  	if (checkBox_allowpartitionswitch.Checked == false) {  		cdcobj.allow_partition_switch = 0;  	}  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_cdctable_Click,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	// if(dgvr.Cells[4].Value.ToString()=="False")  	//  {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	cdcobj.role_name = textBox_rolename.Text.Trim ();  	;  	cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  	cdcobj.index_name = textBox_indexname.Text.Trim ();  	cdcobj.captured_column_list = textBox_capturedcollist.Text.Trim ();  	cdcobj.filegroup_name = textBox_filegroupname.Text.Trim ();  	if (checkBox_netchanges.Checked == true) {  		cdcobj.supports_net_changes = 1;  	}  	if (checkBox_netchanges.Checked == false) {  		cdcobj.supports_net_changes = 0;  	}  	if (checkBox_allowpartitionswitch.Checked == true) {  		cdcobj.allow_partition_switch = 1;  	}  	if (checkBox_allowpartitionswitch.Checked == false) {  		cdcobj.allow_partition_switch = 0;  	}  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_cdctable_Click,The following statement contains a magic number: cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_cdctable_Click,The following statement contains a magic number: cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	//cdcobj.capture_instance = textBox_captureinstance.Text.Trim();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,button_Disablecdctable_Click,The following statement contains a magic number: cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: foreach (DataGridViewRow dgvr in rows_with_checked_column) {  	CDC cdcobj = new CDC ();  	if (dgvr.Cells [4].Value.ToString () == "True") {  		cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  		cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  		cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  		cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  		cdclist.Add (cdcobj);  	}  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: if (dgvr.Cells [4].Value.ToString () == "True") {  	cdcobj.Databasename = dgvr.Cells [1].Value.ToString ().Trim ();  	cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  	cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  	cdcobj.capture_instance = textBox_captureinstance.Text.Trim ();  	cdclist.Add (cdcobj);  }  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: cdcobj.source_schema = dgvr.Cells [2].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,Form1,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\Form1.cs,fn_getselectedtables,The following statement contains a magic number: cdcobj.source_name = dgvr.Cells [3].Value.ToString ().Trim ();  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: try {  	if (_Sqlcon.State.ToString () == "Closed") {  		_Sqlcon.Open ();  	}  	foreach (string db in Dblist) {  		_Sqlcon.ChangeDatabase (db);  		string Qrygettables = "Select '" + db + "''[schemaname]=ss.name'st.name'is_tracked_by_cdc from sys.Tables st  " + "join sys.schemas ss on st.schema_id=ss.schema_id order by name";  		SqlCommand SQLGetDatabases = new SqlCommand (Qrygettables' _Sqlcon);  		Datareader = SQLGetDatabases.ExecuteReader ();  		while (Datareader.Read ()) {  			Tables _tb = new Tables ();  			_tb.Databasename = Datareader [0].ToString ();  			_tb.schema = Datareader [1].ToString ();  			_tb.name = Datareader [2].ToString ();  			_tb.is_tracked_by_cdc = Datareader [3].ToString ();  			_listtables.Add (_tb);  		}  		Datareader.Close ();  	}  	return _listtables;  }  catch (Exception ex) {  	throw ex;  }  finally {  	_Sqlcon.Close ();  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: try {  	if (_Sqlcon.State.ToString () == "Closed") {  		_Sqlcon.Open ();  	}  	foreach (string db in Dblist) {  		_Sqlcon.ChangeDatabase (db);  		string Qrygettables = "Select '" + db + "''[schemaname]=ss.name'st.name'is_tracked_by_cdc from sys.Tables st  " + "join sys.schemas ss on st.schema_id=ss.schema_id order by name";  		SqlCommand SQLGetDatabases = new SqlCommand (Qrygettables' _Sqlcon);  		Datareader = SQLGetDatabases.ExecuteReader ();  		while (Datareader.Read ()) {  			Tables _tb = new Tables ();  			_tb.Databasename = Datareader [0].ToString ();  			_tb.schema = Datareader [1].ToString ();  			_tb.name = Datareader [2].ToString ();  			_tb.is_tracked_by_cdc = Datareader [3].ToString ();  			_listtables.Add (_tb);  		}  		Datareader.Close ();  	}  	return _listtables;  }  catch (Exception ex) {  	throw ex;  }  finally {  	_Sqlcon.Close ();  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: foreach (string db in Dblist) {  	_Sqlcon.ChangeDatabase (db);  	string Qrygettables = "Select '" + db + "''[schemaname]=ss.name'st.name'is_tracked_by_cdc from sys.Tables st  " + "join sys.schemas ss on st.schema_id=ss.schema_id order by name";  	SqlCommand SQLGetDatabases = new SqlCommand (Qrygettables' _Sqlcon);  	Datareader = SQLGetDatabases.ExecuteReader ();  	while (Datareader.Read ()) {  		Tables _tb = new Tables ();  		_tb.Databasename = Datareader [0].ToString ();  		_tb.schema = Datareader [1].ToString ();  		_tb.name = Datareader [2].ToString ();  		_tb.is_tracked_by_cdc = Datareader [3].ToString ();  		_listtables.Add (_tb);  	}  	Datareader.Close ();  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: foreach (string db in Dblist) {  	_Sqlcon.ChangeDatabase (db);  	string Qrygettables = "Select '" + db + "''[schemaname]=ss.name'st.name'is_tracked_by_cdc from sys.Tables st  " + "join sys.schemas ss on st.schema_id=ss.schema_id order by name";  	SqlCommand SQLGetDatabases = new SqlCommand (Qrygettables' _Sqlcon);  	Datareader = SQLGetDatabases.ExecuteReader ();  	while (Datareader.Read ()) {  		Tables _tb = new Tables ();  		_tb.Databasename = Datareader [0].ToString ();  		_tb.schema = Datareader [1].ToString ();  		_tb.name = Datareader [2].ToString ();  		_tb.is_tracked_by_cdc = Datareader [3].ToString ();  		_listtables.Add (_tb);  	}  	Datareader.Close ();  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: while (Datareader.Read ()) {  	Tables _tb = new Tables ();  	_tb.Databasename = Datareader [0].ToString ();  	_tb.schema = Datareader [1].ToString ();  	_tb.name = Datareader [2].ToString ();  	_tb.is_tracked_by_cdc = Datareader [3].ToString ();  	_listtables.Add (_tb);  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: while (Datareader.Read ()) {  	Tables _tb = new Tables ();  	_tb.Databasename = Datareader [0].ToString ();  	_tb.schema = Datareader [1].ToString ();  	_tb.name = Datareader [2].ToString ();  	_tb.is_tracked_by_cdc = Datareader [3].ToString ();  	_listtables.Add (_tb);  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: _tb.name = Datareader [2].ToString ();  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetTables,The following statement contains a magic number: _tb.is_tracked_by_cdc = Datareader [3].ToString ();  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The following statement contains a magic number: if (ChangeDataType == 1) {  	// get all data  	_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  	"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  }  else if (ChangeDataType == 2) {  	// check if it's enabled for net changes  	Int32 supports_net_changes = -1;  	string _sqlqry = "select supports_net_changes from cdc.change_tables where capture_instance='" + captureinstance + "'";  	DataTable dt = fn_ExecuteReader (_sqlqry' Databasename);  	for (int i = 0; i < dt.Rows.Count; i++) {  		supports_net_changes = Convert.ToInt32 (dt.Rows [i] ["supports_net_changes"]);  	}  	if (supports_net_changes == 0) {  		DataColumn col = new DataColumn ("Message");  		col.DefaultValue = msg;  		DataRow drow = result.NewRow ();  		result.Columns.Add (col);  		result.Rows.Add (drow);  	}  	else if (supports_net_changes > 0) {  		_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  		"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  	}  }  else if (ChangeDataType == 3) {  	_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')";  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The following statement contains a magic number: if (ChangeDataType == 1) {  	// get all data  	_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  	"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  }  else if (ChangeDataType == 2) {  	// check if it's enabled for net changes  	Int32 supports_net_changes = -1;  	string _sqlqry = "select supports_net_changes from cdc.change_tables where capture_instance='" + captureinstance + "'";  	DataTable dt = fn_ExecuteReader (_sqlqry' Databasename);  	for (int i = 0; i < dt.Rows.Count; i++) {  		supports_net_changes = Convert.ToInt32 (dt.Rows [i] ["supports_net_changes"]);  	}  	if (supports_net_changes == 0) {  		DataColumn col = new DataColumn ("Message");  		col.DefaultValue = msg;  		DataRow drow = result.NewRow ();  		result.Columns.Add (col);  		result.Rows.Add (drow);  	}  	else if (supports_net_changes > 0) {  		_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  		"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  	}  }  else if (ChangeDataType == 3) {  	_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')";  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The following statement contains a magic number: if (ChangeDataType == 2) {  	// check if it's enabled for net changes  	Int32 supports_net_changes = -1;  	string _sqlqry = "select supports_net_changes from cdc.change_tables where capture_instance='" + captureinstance + "'";  	DataTable dt = fn_ExecuteReader (_sqlqry' Databasename);  	for (int i = 0; i < dt.Rows.Count; i++) {  		supports_net_changes = Convert.ToInt32 (dt.Rows [i] ["supports_net_changes"]);  	}  	if (supports_net_changes == 0) {  		DataColumn col = new DataColumn ("Message");  		col.DefaultValue = msg;  		DataRow drow = result.NewRow ();  		result.Columns.Add (col);  		result.Rows.Add (drow);  	}  	else if (supports_net_changes > 0) {  		_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  		"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  	}  }  else if (ChangeDataType == 3) {  	_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')";  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The following statement contains a magic number: if (ChangeDataType == 2) {  	// check if it's enabled for net changes  	Int32 supports_net_changes = -1;  	string _sqlqry = "select supports_net_changes from cdc.change_tables where capture_instance='" + captureinstance + "'";  	DataTable dt = fn_ExecuteReader (_sqlqry' Databasename);  	for (int i = 0; i < dt.Rows.Count; i++) {  		supports_net_changes = Convert.ToInt32 (dt.Rows [i] ["supports_net_changes"]);  	}  	if (supports_net_changes == 0) {  		DataColumn col = new DataColumn ("Message");  		col.DefaultValue = msg;  		DataRow drow = result.NewRow ();  		result.Columns.Add (col);  		result.Rows.Add (drow);  	}  	else if (supports_net_changes > 0) {  		_Qrygetalldata = "Declare @start_lsn binary(10)' " + "@end_lsn binary(10)' " + "@capture_instance varchar(100) " + //  "Select @capture_instance=capture_instance from cdc.change_tables where source_object_id=object_id('" + tablename + "')" +  		"Set @start_lsn=sys.fn_cdc_get_min_lsn('" + captureinstance + "')" + "set @end_lsn = sys.fn_cdc_get_max_lsn(); " + "select *' CASE __$Operation When 1 THEN 'DELETE' WHEN  2 THEN 'INSERT' WHEN 3 THEN 'UPDATE BEFORE'  " + "WHEN 4 THEN 'UPDATE AFTER'  END AS Operation " + "from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all'); ";  	}  }  else if (ChangeDataType == 3) {  	_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')";  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,fn_GetChangeData,The following statement contains a magic number: if (ChangeDataType == 3) {  	_Qrygetalldata = "DECLARE @begin_time datetime' @end_time datetime' @start_lsn binary(10)' @end_lsn binary(10); " + "SET @begin_time = '" + starttime + "'" + "SET @end_time ='" + endtime + "'" + "SELECT @start_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than'' @begin_time);" + "SELECT @end_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal'' @end_time);" + "select *' CASE __$Operation When 1 THEN 'DELETE'" + "WHEN  2 THEN 'INSERT'" + "WHEN 3 THEN 'UPDATE BEFORE'" + "WHEN 4 THEN 'UPDATE AFTER' END AS Operation" + " from [cdc].[fn_cdc_get_all_changes_" + tablename + "](@start_lsn'@end_lsn''all')";  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: switch (type.ToString ()) {  case "System.String":  	return "VARCHAR(" + ((columnSize == -1) ? "255" : (columnSize > 8000) ? "MAX" : columnSize.ToString ()) + ")";  case "System.Decimal":  	if (numericScale > 0)  		return "REAL";  	else if (numericPrecision > 10)  		return "BIGINT";  	else  		return "INT";  case "System.Double":  case "System.Single":  	return "REAL";  case "System.Int64":  	return "BIGINT";  case "System.Int16":  case "System.Int32":  	return "INT";  case "System.DateTime":  	return "DATETIME";  case "System.Boolean":  	return "BIT";  case "System.Byte":  	return "TINYINT";  case "System.Guid":  	return "UNIQUEIDENTIFIER";  default:  	throw new Exception (type.ToString () + " not implemented.");  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: switch (type.ToString ()) {  case "System.String":  	return "VARCHAR(" + ((columnSize == -1) ? "255" : (columnSize > 8000) ? "MAX" : columnSize.ToString ()) + ")";  case "System.Decimal":  	if (numericScale > 0)  		return "REAL";  	else if (numericPrecision > 10)  		return "BIGINT";  	else  		return "INT";  case "System.Double":  case "System.Single":  	return "REAL";  case "System.Int64":  	return "BIGINT";  case "System.Int16":  case "System.Int32":  	return "INT";  case "System.DateTime":  	return "DATETIME";  case "System.Boolean":  	return "BIT";  case "System.Byte":  	return "TINYINT";  case "System.Guid":  	return "UNIQUEIDENTIFIER";  default:  	throw new Exception (type.ToString () + " not implemented.");  }  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: return "VARCHAR(" + ((columnSize == -1) ? "255" : (columnSize > 8000) ? "MAX" : columnSize.ToString ()) + ")";  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: if (numericScale > 0)  	return "REAL";  else if (numericPrecision > 10)  	return "BIGINT";  else  	return "INT";  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: if (numericPrecision > 10)  	return "BIGINT";  else  	return "INT";  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: return SQLGetType (column.DataType' column.MaxLength' 10' 2);  
Magic Number,SQLCDCApp,SQLCDCApp,C:\repos\ahmadosama_SQLCDCApp\SQLCDCApp\SQLCDCApp.cs,SQLGetType,The following statement contains a magic number: return SQLGetType (column.DataType' column.MaxLength' 10' 2);  
