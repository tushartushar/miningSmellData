Implementation smell,Namespace,Class,File,Method,Description
Long Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The method has 206 lines of code.
Long Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The method has 103 lines of code.
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,Cyclomatic complexity of the method is 43
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,Cyclomatic complexity of the method is 21
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintControl,Cyclomatic complexity of the method is 12
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGrid,Cyclomatic complexity of the method is 17
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCurve,Cyclomatic complexity of the method is 12
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,Cyclomatic complexity of the method is 13
Complex Method,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,Cyclomatic complexity of the method is 15
Complex Method,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,tb1_ButtonClick,Cyclomatic complexity of the method is 9
Complex Method,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,Cyclomatic complexity of the method is 8
Complex Method,GraphLib,PrintPreviewForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrintPreviewForm.cs,AutoScaleDocument,Cyclomatic complexity of the method is 9
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintControl,The method has 6 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawBackground,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The method has 5 parameters.
Long Parameter List,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphBox,The method has 5 parameters.
Long Parameter List,PrecisionTimer,Timer,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrecisionTimer.cs,timeSetEvent,The method has 5 parameters.
Long Parameter List,PrecisionTimer,Timer,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrecisionTimer.cs,TimerPeriodicEventCallback,The method has 5 parameters.
Long Parameter List,PrecisionTimer,Timer,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrecisionTimer.cs,TimerOneShotEventCallback,The method has 5 parameters.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The length of the statement  "				DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight); " is 132.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The length of the statement  "				DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight); " is 123.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The length of the statement  "                        DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);" is 131.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawBackground,The length of the statement  "		using (LinearGradientBrush lb1 = new LinearGradientBrush (new Point ((int)0' (int)0)' new Point ((int)0' (int)(CurHeight))' BgndColorTop' BgndColorBot)) { " is 154.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGrid,The length of the statement  "						g.DrawLine (minorGridPen' new Point ((int)(x + CurrOffX - 0.5f)' (int)(CurOffY))' new Point ((int)(x + CurrOffX - 0.5f)' (int)(CurOffY + source.CurGraphHeight))); " is 162.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGrid,The length of the statement  "				g.DrawLine (p2' new Point ((int)CurrOffX' (int)(CurOffY + y0 + 0.5f))' new Point ((int)(CurrOffX + source.CurGraphWidth + 0.5f)' (int)(CurOffY + y0 + 0.5f))); " is 158.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGrid,The length of the statement  "						g.DrawLine (minorGridPen' new Point ((int)CurrOffX' (int)(CurOffY + y + 0.5f))' new Point ((int)(CurrOffX + source.CurGraphWidth + 0.5f)' (int)(0.5f + CurOffY + y))); " is 166.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGrid,The length of the statement  "						g.DrawLine (minorGridPen' new Point ((int)CurrOffX' (int)(CurOffY + y + 0.5f))' new Point ((int)(CurrOffX + source.CurGraphWidth + 0.5f)' (int)(0.5f + CurOffY + y))); " is 166.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The length of the statement  "			g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2)); " is 134.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The length of the statement  "								g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight); " is 157.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The length of the statement  "								g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset)); " is 160.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The length of the statement  "								g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset)); " is 176.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The length of the statement  "				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2))); " is 122.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The length of the statement  "						g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2))); " is 122.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The length of the statement  "						g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2))); " is 122.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphBox,The length of the statement  "		g.DrawLine (p2' new Point ((int)(offset_x + 0.5f)' (int)(offset_y + 0.5f))' new Point ((int)(offset_x + w - 0.5f)' (int)(offset_y + 0.5f))); " is 140.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphBox,The length of the statement  "		g.DrawLine (p2' new Point ((int)(offset_x + w - 0.5f)' (int)(offset_y + 0.5f))' new Point ((int)(offset_x + w - 0.5f)' (int)(offset_y + h + 0.5f))); " is 148.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphBox,The length of the statement  "		g.DrawLine (p2' new Point ((int)(offset_x + w - 0.5f)' (int)(offset_y + h + 0.5f))' new Point ((int)(offset_x + 0.5f)' (int)(offset_y + h + 0.5f))); " is 148.
Long Statement,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphBox,The length of the statement  "		g.DrawLine (p2' new Point ((int)(offset_x + 0.5f)' (int)(offset_y + h + 0.5f))' new Point ((int)(offset_x + 0.5f)' (int)(offset_y + 0.5f))); " is 140.
Empty Catch Block,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateControl,The method has an empty catch block.
Empty Catch Block,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdatePlayback,The method has an empty catch block.
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeight;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	if (source.yFlip) {  		DX = XD1 - XD0;  	}  	else {  		DX = XD1 - XD0;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		CurXD0 = source.XMin - source.XAutoScaleOffset;  		CurXD1 = source.XMax + source.XAutoScaleOffset;  		DX = CurXD1 - CurXD0;  	}  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  				source.CurGraphHeight -= Diff;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  				source.CurGraphHeight -= Diff;  				source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  			if (ActiveSources > 1) {  				if (layout == LayoutMode.TILES_VER) {  					// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  					int CurIdxY = CurGraphIdx % VertTileCount;  					int CurIdxX = CurGraphIdx / VertTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  				else {  					int CurIdxX = CurGraphIdx % HorTileCount;  					int CurIdxY = CurGraphIdx / HorTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  			}  			else {  				// one active source  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + pad_left + yLabelAreaWidth;  			}  		}  		else if (layout == LayoutMode.VERTICAL_ARRANGED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else if (layout == LayoutMode.STACKED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else {  			CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  			curOffY = OFFY + pad_top;  		}  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox) {  			float w = source.CurGraphWidth;  			float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  			DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (layout == LayoutMode.NORMAL) {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  			if (CurGraphIdx == 0) {  				DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			}  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  		}  		else {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeight;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	if (source.yFlip) {  		DX = XD1 - XD0;  	}  	else {  		DX = XD1 - XD0;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		CurXD0 = source.XMin - source.XAutoScaleOffset;  		CurXD1 = source.XMax + source.XAutoScaleOffset;  		DX = CurXD1 - CurXD0;  	}  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  				source.CurGraphHeight -= Diff;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  				source.CurGraphHeight -= Diff;  				source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  			if (ActiveSources > 1) {  				if (layout == LayoutMode.TILES_VER) {  					// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  					int CurIdxY = CurGraphIdx % VertTileCount;  					int CurIdxX = CurGraphIdx / VertTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  				else {  					int CurIdxX = CurGraphIdx % HorTileCount;  					int CurIdxY = CurGraphIdx / HorTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  			}  			else {  				// one active source  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + pad_left + yLabelAreaWidth;  			}  		}  		else if (layout == LayoutMode.VERTICAL_ARRANGED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else if (layout == LayoutMode.STACKED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else {  			CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  			curOffY = OFFY + pad_top;  		}  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox) {  			float w = source.CurGraphWidth;  			float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  			DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (layout == LayoutMode.NORMAL) {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  			if (CurGraphIdx == 0) {  				DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			}  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  		}  		else {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeight;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	if (source.yFlip) {  		DX = XD1 - XD0;  	}  	else {  		DX = XD1 - XD0;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		CurXD0 = source.XMin - source.XAutoScaleOffset;  		CurXD1 = source.XMax + source.XAutoScaleOffset;  		DX = CurXD1 - CurXD0;  	}  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  				source.CurGraphHeight -= Diff;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  				source.CurGraphHeight -= Diff;  				source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  			if (ActiveSources > 1) {  				if (layout == LayoutMode.TILES_VER) {  					// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  					int CurIdxY = CurGraphIdx % VertTileCount;  					int CurIdxX = CurGraphIdx / VertTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  				else {  					int CurIdxX = CurGraphIdx % HorTileCount;  					int CurIdxY = CurGraphIdx / HorTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  			}  			else {  				// one active source  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + pad_left + yLabelAreaWidth;  			}  		}  		else if (layout == LayoutMode.VERTICAL_ARRANGED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else if (layout == LayoutMode.STACKED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else {  			CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  			curOffY = OFFY + pad_top;  		}  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox) {  			float w = source.CurGraphWidth;  			float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  			DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (layout == LayoutMode.NORMAL) {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  			if (CurGraphIdx == 0) {  				DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			}  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  		}  		else {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeight;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	if (source.yFlip) {  		DX = XD1 - XD0;  	}  	else {  		DX = XD1 - XD0;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		CurXD0 = source.XMin - source.XAutoScaleOffset;  		CurXD1 = source.XMax + source.XAutoScaleOffset;  		DX = CurXD1 - CurXD0;  	}  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  				source.CurGraphHeight -= Diff;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  			if (ActiveSources > 1) {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  				float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  				source.CurGraphHeight -= Diff;  				source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  			}  			else {  				source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			}  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  			source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  			if (ActiveSources > 1) {  				if (layout == LayoutMode.TILES_VER) {  					// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  					int CurIdxY = CurGraphIdx % VertTileCount;  					int CurIdxX = CurGraphIdx / VertTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  				else {  					int CurIdxX = CurGraphIdx % HorTileCount;  					int CurIdxY = CurGraphIdx / HorTileCount;  					curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  					CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  				}  			}  			else {  				// one active source  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + pad_left + yLabelAreaWidth;  			}  		}  		else if (layout == LayoutMode.VERTICAL_ARRANGED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else if (layout == LayoutMode.STACKED) {  			if (ActiveSources > 1) {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			else {  				curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  			}  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  		else {  			CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  			curOffY = OFFY + pad_top;  		}  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox) {  			float w = source.CurGraphWidth;  			float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  			DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (layout == LayoutMode.NORMAL) {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  			if (CurGraphIdx == 0) {  				DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			}  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  		}  		else {  			DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  			DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  			source.CurGraphHeight -= Diff;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  			source.CurGraphHeight -= Diff;  			source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else {  		source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  		if (ActiveSources > 1) {  			if (layout == LayoutMode.TILES_VER) {  				// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  				int CurIdxY = CurGraphIdx % VertTileCount;  				int CurIdxX = CurGraphIdx / VertTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  			else {  				int CurIdxX = CurGraphIdx % HorTileCount;  				int CurIdxY = CurGraphIdx / HorTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  		}  		else {  			// one active source  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  	}  	else if (layout == LayoutMode.VERTICAL_ARRANGED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else if (layout == LayoutMode.STACKED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else {  		CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  		curOffY = OFFY + pad_top;  	}  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox) {  		float w = source.CurGraphWidth;  		float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  		DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (layout == LayoutMode.NORMAL) {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  		if (CurGraphIdx == 0) {  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  	}  	else {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	}  	CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  			source.CurGraphHeight -= Diff;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  			source.CurGraphHeight -= Diff;  			source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else {  		source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  		if (ActiveSources > 1) {  			if (layout == LayoutMode.TILES_VER) {  				// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  				int CurIdxY = CurGraphIdx % VertTileCount;  				int CurIdxX = CurGraphIdx / VertTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  			else {  				int CurIdxX = CurGraphIdx % HorTileCount;  				int CurIdxY = CurGraphIdx / HorTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  		}  		else {  			// one active source  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  	}  	else if (layout == LayoutMode.VERTICAL_ARRANGED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else if (layout == LayoutMode.STACKED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else {  		CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  		curOffY = OFFY + pad_top;  	}  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox) {  		float w = source.CurGraphWidth;  		float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  		DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (layout == LayoutMode.NORMAL) {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  		if (CurGraphIdx == 0) {  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  	}  	else {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	}  	CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  			source.CurGraphHeight -= Diff;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  			source.CurGraphHeight -= Diff;  			source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else {  		source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  		if (ActiveSources > 1) {  			if (layout == LayoutMode.TILES_VER) {  				// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  				int CurIdxY = CurGraphIdx % VertTileCount;  				int CurIdxX = CurGraphIdx / VertTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  			else {  				int CurIdxX = CurGraphIdx % HorTileCount;  				int CurIdxY = CurGraphIdx / HorTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  		}  		else {  			// one active source  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  	}  	else if (layout == LayoutMode.VERTICAL_ARRANGED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else if (layout == LayoutMode.STACKED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else {  		CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  		curOffY = OFFY + pad_top;  	}  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox) {  		float w = source.CurGraphWidth;  		float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  		DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (layout == LayoutMode.NORMAL) {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  		if (CurGraphIdx == 0) {  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  	}  	else {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	}  	CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (layout == LayoutMode.VERTICAL_ARRANGED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / ActiveSources;  			source.CurGraphHeight -= Diff;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if (layout == LayoutMode.STACKED && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / ActiveSources - GraphCaptionLineHeight;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR) && ActiveSources >= 1) {  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) / VertTileCount - GraphCaptionLineHeight;  			float Diff = ((ActiveSources - 1) * pad_inter) / VertTileCount;  			source.CurGraphHeight -= Diff;  			source.CurGraphWidth = (float)(CurWidth - pad_left - pad_right) / HorTileCount - yLabelAreaWidth;  		}  		else {  			source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		}  	}  	else {  		source.CurGraphHeight = (float)(CurHeight - pad_top - pad_bot) - GraphCaptionLineHeight;  		source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth * ActiveSources - pad_right;  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if ((layout == LayoutMode.TILES_VER || layout == LayoutMode.TILES_HOR)) {  		if (ActiveSources > 1) {  			if (layout == LayoutMode.TILES_VER) {  				// TODO: calc curOffX and CurrOffY for CurGraphIdx!!  				int CurIdxY = CurGraphIdx % VertTileCount;  				int CurIdxX = CurGraphIdx / VertTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  			else {  				int CurIdxX = CurGraphIdx % HorTileCount;  				int CurIdxY = CurGraphIdx / HorTileCount;  				curOffY = OFFY + pad_top + CurIdxY * (source.CurGraphHeight + GraphCaptionLineHeight);  				CurOffX = OFFX + yLabelAreaWidth + pad_left + CurIdxX * (yLabelAreaWidth + source.CurGraphWidth);  			}  		}  		else {  			// one active source  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  			CurOffX = OFFX + pad_left + yLabelAreaWidth;  		}  	}  	else if (layout == LayoutMode.VERTICAL_ARRANGED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight + pad_inter);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight + GraphCaptionLineHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else if (layout == LayoutMode.STACKED) {  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  	}  	else {  		CurOffX = OFFX + pad_left + yLabelAreaWidth * ActiveSources;  		curOffY = OFFY + pad_top;  	}  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox) {  		float w = source.CurGraphWidth;  		float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  		DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (layout == LayoutMode.NORMAL) {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  		if (CurGraphIdx == 0) {  			DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		}  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  	}  	else {  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	}  	CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (hasBoundingBox) {  	float w = source.CurGraphWidth;  	float h = source.CurGraphHeight + GraphCaptionLineHeight / 2;  	DrawGraphBox (CurGraphics' CurOffX' curOffY' w' h);  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: if (layout == LayoutMode.NORMAL) {  	DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  	if (CurGraphIdx == 0) {  		DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	}  	DrawYLabels (CurGraphics' source' marker_pos' CurOffX + yLabelAreaWidth * (CurGraphIdx - ActiveSources + 1)' curOffY);  }  else {  	DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX' curOffY);  	DrawXLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintGraphs,The following statement contains a magic number: DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' curOffY);  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeigth;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	DX = XD1 - XD0;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		DX = source.Samples [source.Samples.Length - 1].x;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  		}  		else {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  			DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		if (CurGraphIdx == ActiveSources - 1) {  			DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  		}  		/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeigth;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	DX = XD1 - XD0;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		DX = source.Samples [source.Samples.Length - 1].x;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  		}  		else {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  			DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		if (CurGraphIdx == ActiveSources - 1) {  			DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  		}  		/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: foreach (DataSource source in sources) {  	source.Cur_YD0 = source.YD0;  	source.Cur_YD1 = source.YD1;  	source.CurGraphHeight = CurHeigth;  	source.CurGraphWidth = CurWidth - pad_left - yLabelAreaWidth - pad_right;  	DX = XD1 - XD0;  	if (source.AutoScaleX && source.Samples.Length > 0) {  		DX = source.Samples [source.Samples.Length - 1].x;  	}  	CurXD0 = XD0;  	CurXD1 = XD1;  	if (source.Active) {  		if (source.AutoScaleY == true) {  			int idx_start = -1;  			int idx_stop = -1;  			float ymin = 0.0f;  			float ymax = 0.0f;  			float ymin_range = 0;  			float ymax_range = 0;  			int DownSample = source.Downsampling;  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			for (int i = 0; i < data.Length - 1; i += DownSample) {  				float x = data [i].x * mult_x + coff_x;  				if (data [i].y > ymax)  					ymax = data [i].y;  				if (data [i].y < ymin)  					ymin = data [i].y;  				if (x > 0 && x < (source.CurGraphWidth)) {  					if (idx_start == -1)  						idx_start = i;  					idx_stop = i;  					if (data [i].y > ymax_range)  						ymax_range = data [i].y;  					if (data [i].y < ymin_range)  						ymin_range = data [i].y;  				}  			}  			if (idx_start >= 0 && idx_stop >= 0) {  				float data_range = ymax - ymin;  				// this is range in the data  				float delta_range = ymax_range - ymin_range;  				// this is the visible data range -> might be smaller  				source.Cur_YD0 = ymin_range;  				source.Cur_YD1 = ymax_range;  			}  		}  		if (ActiveSources > 1) {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  		}  		else {  			source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  		}  		if (source.yFlip) {  			source.DY = source.Cur_YD0 - source.Cur_YD1;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		else {  			source.DY = source.Cur_YD1 - source.Cur_YD0;  			if (DX != 0 && source.DY != 0) {  				source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  				off_X = -CurXD0 * source.CurGraphWidth / DX;  			}  		}  		if (ActiveSources > 1) {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		else {  			curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  		}  		CurOffX = OFFX + pad_left + yLabelAreaWidth;  		DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  			DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  		}  		List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  		DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  		DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  		if (CurGraphIdx == ActiveSources - 1) {  			DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  		}  		/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (ActiveSources > 1) {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  	}  	else {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if (ActiveSources > 1) {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	else {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	CurOffX = OFFX + pad_left + yLabelAreaWidth;  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  		DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  	DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	if (CurGraphIdx == ActiveSources - 1) {  		DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  	}  	/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (ActiveSources > 1) {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  	}  	else {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if (ActiveSources > 1) {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	else {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	CurOffX = OFFX + pad_left + yLabelAreaWidth;  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  		DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  	DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	if (CurGraphIdx == ActiveSources - 1) {  		DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  	}  	/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: if (source.Active) {  	if (source.AutoScaleY == true) {  		int idx_start = -1;  		int idx_stop = -1;  		float ymin = 0.0f;  		float ymax = 0.0f;  		float ymin_range = 0;  		float ymax_range = 0;  		int DownSample = source.Downsampling;  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		for (int i = 0; i < data.Length - 1; i += DownSample) {  			float x = data [i].x * mult_x + coff_x;  			if (data [i].y > ymax)  				ymax = data [i].y;  			if (data [i].y < ymin)  				ymin = data [i].y;  			if (x > 0 && x < (source.CurGraphWidth)) {  				if (idx_start == -1)  					idx_start = i;  				idx_stop = i;  				if (data [i].y > ymax_range)  					ymax_range = data [i].y;  				if (data [i].y < ymin_range)  					ymin_range = data [i].y;  			}  		}  		if (idx_start >= 0 && idx_stop >= 0) {  			float data_range = ymax - ymin;  			// this is range in the data  			float delta_range = ymax_range - ymin_range;  			// this is the visible data range -> might be smaller  			source.Cur_YD0 = ymin_range;  			source.Cur_YD1 = ymax_range;  		}  	}  	if (ActiveSources > 1) {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot) / ActiveSources;  	}  	else {  		source.CurGraphHeight = (float)(CurHeigth - GraphCaptionLineHeight - pad_top - pad_bot);  	}  	if (source.yFlip) {  		source.DY = source.Cur_YD0 - source.Cur_YD1;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD1 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	else {  		source.DY = source.Cur_YD1 - source.Cur_YD0;  		if (DX != 0 && source.DY != 0) {  			source.off_Y = -source.Cur_YD0 * source.CurGraphHeight / source.DY;  			off_X = -CurXD0 * source.CurGraphWidth / DX;  		}  	}  	if (ActiveSources > 1) {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	else {  		curOffY = OFFY + pad_top + CurGraphIdx * (source.CurGraphHeight);  	}  	CurOffX = OFFX + pad_left + yLabelAreaWidth;  	DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	if (hasBoundingBox && CurGraphIdx == ActiveSources - 1) {  		DrawGraphBox (CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);  	}  	List<int> marker_pos = DrawGraphCurve (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  	DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  	DrawYLabels (CurGraphics' source' marker_pos' CurOffX' curOffY);  	if (CurGraphIdx == ActiveSources - 1) {  		DrawXLabels (CurGraphics' source' marker_pos' pad_left' Height - pad_top - GraphCaptionLineHeight - source.CurGraphHeight);  	}  	/*                     if (hasBoundingBox && CurGraphIdx == ActiveSources - 1)                     {                         DrawGraphBox(CurGraphics' pad_left + yLabelAreaWidth' pad_top' source.CurGraphWidth' CurHeigth - pad_top - GraphCaptionLineHeight);                     }                      * */CurGraphIdx++;  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: DrawGrid (CurGraphics' source' CurOffX' curOffY + GraphCaptionLineHeight / 2);  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintStackedGraphs,The following statement contains a magic number: DrawGraphCaption (CurGraphics' source' marker_pos' CurOffX + CurGraphIdx * (10 + yLabelAreaWidth)' pad_top);  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: using (Brush brush = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: using (Brush brush = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawGraphCaption,The following statement contains a magic number: g.DrawString (source.Name' legendFont' brush' new PointF (offset_x + graphCaptionOffset.X + 12' offset_y + graphCaptionOffset.Y + 2));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Brush brush = new SolidBrush (XLabColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		if (DX != 0 && source.DY != 0) {  			if (source.Samples != null && source.Samples.Length > 1) {  				cPoint[] data = source.Samples;  				float mult_y = source.CurGraphHeight / source.DY;  				float mult_x = source.CurGraphWidth / DX;  				float coff_x = off_X - starting_idx * mult_x;  				if (source.AutoScaleX) {  					coff_x = off_X;  					// avoid dragging in x-autoscale mode  				}  				foreach (int i in marker_pos) {  					int xi = (int)(data [i].x);  					if (xi % grid_distance_x == 0) {  						float x = data [i].x * mult_x + coff_x;  						String value = "" + data [i].x;  						if (source.OnRenderXAxisLabel != null) {  							value = source.OnRenderXAxisLabel (source' i);  						}  						/// TODO: find out how to calculate this offset. Must be padding + something else  						float unknownOffset = -14;  						// -14;  						if (MoveMinorGrid == false) {  							g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  						else {  							SizeF dim = g.MeasureString (value' legendFont);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Brush brush = new SolidBrush (XLabColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		if (DX != 0 && source.DY != 0) {  			if (source.Samples != null && source.Samples.Length > 1) {  				cPoint[] data = source.Samples;  				float mult_y = source.CurGraphHeight / source.DY;  				float mult_x = source.CurGraphWidth / DX;  				float coff_x = off_X - starting_idx * mult_x;  				if (source.AutoScaleX) {  					coff_x = off_X;  					// avoid dragging in x-autoscale mode  				}  				foreach (int i in marker_pos) {  					int xi = (int)(data [i].x);  					if (xi % grid_distance_x == 0) {  						float x = data [i].x * mult_x + coff_x;  						String value = "" + data [i].x;  						if (source.OnRenderXAxisLabel != null) {  							value = source.OnRenderXAxisLabel (source' i);  						}  						/// TODO: find out how to calculate this offset. Must be padding + something else  						float unknownOffset = -14;  						// -14;  						if (MoveMinorGrid == false) {  							g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  						else {  							SizeF dim = g.MeasureString (value' legendFont);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Brush brush = new SolidBrush (XLabColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		if (DX != 0 && source.DY != 0) {  			if (source.Samples != null && source.Samples.Length > 1) {  				cPoint[] data = source.Samples;  				float mult_y = source.CurGraphHeight / source.DY;  				float mult_x = source.CurGraphWidth / DX;  				float coff_x = off_X - starting_idx * mult_x;  				if (source.AutoScaleX) {  					coff_x = off_X;  					// avoid dragging in x-autoscale mode  				}  				foreach (int i in marker_pos) {  					int xi = (int)(data [i].x);  					if (xi % grid_distance_x == 0) {  						float x = data [i].x * mult_x + coff_x;  						String value = "" + data [i].x;  						if (source.OnRenderXAxisLabel != null) {  							value = source.OnRenderXAxisLabel (source' i);  						}  						/// TODO: find out how to calculate this offset. Must be padding + something else  						float unknownOffset = -14;  						// -14;  						if (MoveMinorGrid == false) {  							g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  						else {  							SizeF dim = g.MeasureString (value' legendFont);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Brush brush = new SolidBrush (XLabColor)) {  	using (Pen pen = new Pen (brush)) {  		pen.DashPattern = MajorGridPattern;  		if (DX != 0 && source.DY != 0) {  			if (source.Samples != null && source.Samples.Length > 1) {  				cPoint[] data = source.Samples;  				float mult_y = source.CurGraphHeight / source.DY;  				float mult_x = source.CurGraphWidth / DX;  				float coff_x = off_X - starting_idx * mult_x;  				if (source.AutoScaleX) {  					coff_x = off_X;  					// avoid dragging in x-autoscale mode  				}  				foreach (int i in marker_pos) {  					int xi = (int)(data [i].x);  					if (xi % grid_distance_x == 0) {  						float x = data [i].x * mult_x + coff_x;  						String value = "" + data [i].x;  						if (source.OnRenderXAxisLabel != null) {  							value = source.OnRenderXAxisLabel (source' i);  						}  						/// TODO: find out how to calculate this offset. Must be padding + something else  						float unknownOffset = -14;  						// -14;  						if (MoveMinorGrid == false) {  							g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  						else {  							SizeF dim = g.MeasureString (value' legendFont);  							g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  						}  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	if (DX != 0 && source.DY != 0) {  		if (source.Samples != null && source.Samples.Length > 1) {  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			foreach (int i in marker_pos) {  				int xi = (int)(data [i].x);  				if (xi % grid_distance_x == 0) {  					float x = data [i].x * mult_x + coff_x;  					String value = "" + data [i].x;  					if (source.OnRenderXAxisLabel != null) {  						value = source.OnRenderXAxisLabel (source' i);  					}  					/// TODO: find out how to calculate this offset. Must be padding + something else  					float unknownOffset = -14;  					// -14;  					if (MoveMinorGrid == false) {  						g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  					else {  						SizeF dim = g.MeasureString (value' legendFont);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	if (DX != 0 && source.DY != 0) {  		if (source.Samples != null && source.Samples.Length > 1) {  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			foreach (int i in marker_pos) {  				int xi = (int)(data [i].x);  				if (xi % grid_distance_x == 0) {  					float x = data [i].x * mult_x + coff_x;  					String value = "" + data [i].x;  					if (source.OnRenderXAxisLabel != null) {  						value = source.OnRenderXAxisLabel (source' i);  					}  					/// TODO: find out how to calculate this offset. Must be padding + something else  					float unknownOffset = -14;  					// -14;  					if (MoveMinorGrid == false) {  						g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  					else {  						SizeF dim = g.MeasureString (value' legendFont);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	if (DX != 0 && source.DY != 0) {  		if (source.Samples != null && source.Samples.Length > 1) {  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			foreach (int i in marker_pos) {  				int xi = (int)(data [i].x);  				if (xi % grid_distance_x == 0) {  					float x = data [i].x * mult_x + coff_x;  					String value = "" + data [i].x;  					if (source.OnRenderXAxisLabel != null) {  						value = source.OnRenderXAxisLabel (source' i);  					}  					/// TODO: find out how to calculate this offset. Must be padding + something else  					float unknownOffset = -14;  					// -14;  					if (MoveMinorGrid == false) {  						g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  					else {  						SizeF dim = g.MeasureString (value' legendFont);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: using (Pen pen = new Pen (brush)) {  	pen.DashPattern = MajorGridPattern;  	if (DX != 0 && source.DY != 0) {  		if (source.Samples != null && source.Samples.Length > 1) {  			cPoint[] data = source.Samples;  			float mult_y = source.CurGraphHeight / source.DY;  			float mult_x = source.CurGraphWidth / DX;  			float coff_x = off_X - starting_idx * mult_x;  			if (source.AutoScaleX) {  				coff_x = off_X;  				// avoid dragging in x-autoscale mode  			}  			foreach (int i in marker_pos) {  				int xi = (int)(data [i].x);  				if (xi % grid_distance_x == 0) {  					float x = data [i].x * mult_x + coff_x;  					String value = "" + data [i].x;  					if (source.OnRenderXAxisLabel != null) {  						value = source.OnRenderXAxisLabel (source' i);  					}  					/// TODO: find out how to calculate this offset. Must be padding + something else  					float unknownOffset = -14;  					// -14;  					if (MoveMinorGrid == false) {  						g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  					else {  						SizeF dim = g.MeasureString (value' legendFont);  						g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  					}  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (DX != 0 && source.DY != 0) {  	if (source.Samples != null && source.Samples.Length > 1) {  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		foreach (int i in marker_pos) {  			int xi = (int)(data [i].x);  			if (xi % grid_distance_x == 0) {  				float x = data [i].x * mult_x + coff_x;  				String value = "" + data [i].x;  				if (source.OnRenderXAxisLabel != null) {  					value = source.OnRenderXAxisLabel (source' i);  				}  				/// TODO: find out how to calculate this offset. Must be padding + something else  				float unknownOffset = -14;  				// -14;  				if (MoveMinorGrid == false) {  					g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  				else {  					SizeF dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (DX != 0 && source.DY != 0) {  	if (source.Samples != null && source.Samples.Length > 1) {  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		foreach (int i in marker_pos) {  			int xi = (int)(data [i].x);  			if (xi % grid_distance_x == 0) {  				float x = data [i].x * mult_x + coff_x;  				String value = "" + data [i].x;  				if (source.OnRenderXAxisLabel != null) {  					value = source.OnRenderXAxisLabel (source' i);  				}  				/// TODO: find out how to calculate this offset. Must be padding + something else  				float unknownOffset = -14;  				// -14;  				if (MoveMinorGrid == false) {  					g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  				else {  					SizeF dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (DX != 0 && source.DY != 0) {  	if (source.Samples != null && source.Samples.Length > 1) {  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		foreach (int i in marker_pos) {  			int xi = (int)(data [i].x);  			if (xi % grid_distance_x == 0) {  				float x = data [i].x * mult_x + coff_x;  				String value = "" + data [i].x;  				if (source.OnRenderXAxisLabel != null) {  					value = source.OnRenderXAxisLabel (source' i);  				}  				/// TODO: find out how to calculate this offset. Must be padding + something else  				float unknownOffset = -14;  				// -14;  				if (MoveMinorGrid == false) {  					g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  				else {  					SizeF dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (DX != 0 && source.DY != 0) {  	if (source.Samples != null && source.Samples.Length > 1) {  		cPoint[] data = source.Samples;  		float mult_y = source.CurGraphHeight / source.DY;  		float mult_x = source.CurGraphWidth / DX;  		float coff_x = off_X - starting_idx * mult_x;  		if (source.AutoScaleX) {  			coff_x = off_X;  			// avoid dragging in x-autoscale mode  		}  		foreach (int i in marker_pos) {  			int xi = (int)(data [i].x);  			if (xi % grid_distance_x == 0) {  				float x = data [i].x * mult_x + coff_x;  				String value = "" + data [i].x;  				if (source.OnRenderXAxisLabel != null) {  					value = source.OnRenderXAxisLabel (source' i);  				}  				/// TODO: find out how to calculate this offset. Must be padding + something else  				float unknownOffset = -14;  				// -14;  				if (MoveMinorGrid == false) {  					g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  				else {  					SizeF dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (source.Samples != null && source.Samples.Length > 1) {  	cPoint[] data = source.Samples;  	float mult_y = source.CurGraphHeight / source.DY;  	float mult_x = source.CurGraphWidth / DX;  	float coff_x = off_X - starting_idx * mult_x;  	if (source.AutoScaleX) {  		coff_x = off_X;  		// avoid dragging in x-autoscale mode  	}  	foreach (int i in marker_pos) {  		int xi = (int)(data [i].x);  		if (xi % grid_distance_x == 0) {  			float x = data [i].x * mult_x + coff_x;  			String value = "" + data [i].x;  			if (source.OnRenderXAxisLabel != null) {  				value = source.OnRenderXAxisLabel (source' i);  			}  			/// TODO: find out how to calculate this offset. Must be padding + something else  			float unknownOffset = -14;  			// -14;  			if (MoveMinorGrid == false) {  				g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  			else {  				SizeF dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (source.Samples != null && source.Samples.Length > 1) {  	cPoint[] data = source.Samples;  	float mult_y = source.CurGraphHeight / source.DY;  	float mult_x = source.CurGraphWidth / DX;  	float coff_x = off_X - starting_idx * mult_x;  	if (source.AutoScaleX) {  		coff_x = off_X;  		// avoid dragging in x-autoscale mode  	}  	foreach (int i in marker_pos) {  		int xi = (int)(data [i].x);  		if (xi % grid_distance_x == 0) {  			float x = data [i].x * mult_x + coff_x;  			String value = "" + data [i].x;  			if (source.OnRenderXAxisLabel != null) {  				value = source.OnRenderXAxisLabel (source' i);  			}  			/// TODO: find out how to calculate this offset. Must be padding + something else  			float unknownOffset = -14;  			// -14;  			if (MoveMinorGrid == false) {  				g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  			else {  				SizeF dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (source.Samples != null && source.Samples.Length > 1) {  	cPoint[] data = source.Samples;  	float mult_y = source.CurGraphHeight / source.DY;  	float mult_x = source.CurGraphWidth / DX;  	float coff_x = off_X - starting_idx * mult_x;  	if (source.AutoScaleX) {  		coff_x = off_X;  		// avoid dragging in x-autoscale mode  	}  	foreach (int i in marker_pos) {  		int xi = (int)(data [i].x);  		if (xi % grid_distance_x == 0) {  			float x = data [i].x * mult_x + coff_x;  			String value = "" + data [i].x;  			if (source.OnRenderXAxisLabel != null) {  				value = source.OnRenderXAxisLabel (source' i);  			}  			/// TODO: find out how to calculate this offset. Must be padding + something else  			float unknownOffset = -14;  			// -14;  			if (MoveMinorGrid == false) {  				g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  			else {  				SizeF dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (source.Samples != null && source.Samples.Length > 1) {  	cPoint[] data = source.Samples;  	float mult_y = source.CurGraphHeight / source.DY;  	float mult_x = source.CurGraphWidth / DX;  	float coff_x = off_X - starting_idx * mult_x;  	if (source.AutoScaleX) {  		coff_x = off_X;  		// avoid dragging in x-autoscale mode  	}  	foreach (int i in marker_pos) {  		int xi = (int)(data [i].x);  		if (xi % grid_distance_x == 0) {  			float x = data [i].x * mult_x + coff_x;  			String value = "" + data [i].x;  			if (source.OnRenderXAxisLabel != null) {  				value = source.OnRenderXAxisLabel (source' i);  			}  			/// TODO: find out how to calculate this offset. Must be padding + something else  			float unknownOffset = -14;  			// -14;  			if (MoveMinorGrid == false) {  				g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  			else {  				SizeF dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: foreach (int i in marker_pos) {  	int xi = (int)(data [i].x);  	if (xi % grid_distance_x == 0) {  		float x = data [i].x * mult_x + coff_x;  		String value = "" + data [i].x;  		if (source.OnRenderXAxisLabel != null) {  			value = source.OnRenderXAxisLabel (source' i);  		}  		/// TODO: find out how to calculate this offset. Must be padding + something else  		float unknownOffset = -14;  		// -14;  		if (MoveMinorGrid == false) {  			g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  		else {  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: foreach (int i in marker_pos) {  	int xi = (int)(data [i].x);  	if (xi % grid_distance_x == 0) {  		float x = data [i].x * mult_x + coff_x;  		String value = "" + data [i].x;  		if (source.OnRenderXAxisLabel != null) {  			value = source.OnRenderXAxisLabel (source' i);  		}  		/// TODO: find out how to calculate this offset. Must be padding + something else  		float unknownOffset = -14;  		// -14;  		if (MoveMinorGrid == false) {  			g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  		else {  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: foreach (int i in marker_pos) {  	int xi = (int)(data [i].x);  	if (xi % grid_distance_x == 0) {  		float x = data [i].x * mult_x + coff_x;  		String value = "" + data [i].x;  		if (source.OnRenderXAxisLabel != null) {  			value = source.OnRenderXAxisLabel (source' i);  		}  		/// TODO: find out how to calculate this offset. Must be padding + something else  		float unknownOffset = -14;  		// -14;  		if (MoveMinorGrid == false) {  			g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  		else {  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: foreach (int i in marker_pos) {  	int xi = (int)(data [i].x);  	if (xi % grid_distance_x == 0) {  		float x = data [i].x * mult_x + coff_x;  		String value = "" + data [i].x;  		if (source.OnRenderXAxisLabel != null) {  			value = source.OnRenderXAxisLabel (source' i);  		}  		/// TODO: find out how to calculate this offset. Must be padding + something else  		float unknownOffset = -14;  		// -14;  		if (MoveMinorGrid == false) {  			g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  		else {  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (xi % grid_distance_x == 0) {  	float x = data [i].x * mult_x + coff_x;  	String value = "" + data [i].x;  	if (source.OnRenderXAxisLabel != null) {  		value = source.OnRenderXAxisLabel (source' i);  	}  	/// TODO: find out how to calculate this offset. Must be padding + something else  	float unknownOffset = -14;  	// -14;  	if (MoveMinorGrid == false) {  		g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  	else {  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (xi % grid_distance_x == 0) {  	float x = data [i].x * mult_x + coff_x;  	String value = "" + data [i].x;  	if (source.OnRenderXAxisLabel != null) {  		value = source.OnRenderXAxisLabel (source' i);  	}  	/// TODO: find out how to calculate this offset. Must be padding + something else  	float unknownOffset = -14;  	// -14;  	if (MoveMinorGrid == false) {  		g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  	else {  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (xi % grid_distance_x == 0) {  	float x = data [i].x * mult_x + coff_x;  	String value = "" + data [i].x;  	if (source.OnRenderXAxisLabel != null) {  		value = source.OnRenderXAxisLabel (source' i);  	}  	/// TODO: find out how to calculate this offset. Must be padding + something else  	float unknownOffset = -14;  	// -14;  	if (MoveMinorGrid == false) {  		g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  	else {  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (xi % grid_distance_x == 0) {  	float x = data [i].x * mult_x + coff_x;  	String value = "" + data [i].x;  	if (source.OnRenderXAxisLabel != null) {  		value = source.OnRenderXAxisLabel (source' i);  	}  	/// TODO: find out how to calculate this offset. Must be padding + something else  	float unknownOffset = -14;  	// -14;  	if (MoveMinorGrid == false) {  		g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  	else {  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (MoveMinorGrid == false) {  	g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  else {  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (MoveMinorGrid == false) {  	g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  else {  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: if (MoveMinorGrid == false) {  	g.DrawLine (pen' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight + unknownOffset' x' offset_y + GraphCaptionLineHeight + source.CurGraphHeight);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  else {  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawXLabels,The following statement contains a magic number: g.DrawString (value' legendFont' brush' new PointF ((int)(0.5f + x + offset_x + 4 - dim.Width / 2)' GraphCaptionLineHeight + offset_y + source.CurGraphHeight + unknownOffset));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Brush b = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (b)) {  		pen.DashPattern = new float[] {  			2'  			2  		};  		// draw labels for horizontal lines  		if (source.DY != 0) {  			float Idx = 0;  			float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  			String value = "" + Idx;  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  			float GridDistY = source.grid_distance_y;  			if (source.AutoScaleY) {  				// calculate a matching grid distance                              				GridDistY = -Utilities.MostSignificantDigit (source.DY);  				if (GridDistY == 0) {  					GridDistY = source.grid_distance_y;  				}  			}  			for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  				if (Idx != 0) {  					float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  				}  			}  			for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  				if (Idx != 0) {  					float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Brush b = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (b)) {  		pen.DashPattern = new float[] {  			2'  			2  		};  		// draw labels for horizontal lines  		if (source.DY != 0) {  			float Idx = 0;  			float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  			String value = "" + Idx;  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  			float GridDistY = source.grid_distance_y;  			if (source.AutoScaleY) {  				// calculate a matching grid distance                              				GridDistY = -Utilities.MostSignificantDigit (source.DY);  				if (GridDistY == 0) {  					GridDistY = source.grid_distance_y;  				}  			}  			for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  				if (Idx != 0) {  					float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  				}  			}  			for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  				if (Idx != 0) {  					float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Brush b = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (b)) {  		pen.DashPattern = new float[] {  			2'  			2  		};  		// draw labels for horizontal lines  		if (source.DY != 0) {  			float Idx = 0;  			float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  			String value = "" + Idx;  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  			float GridDistY = source.grid_distance_y;  			if (source.AutoScaleY) {  				// calculate a matching grid distance                              				GridDistY = -Utilities.MostSignificantDigit (source.DY);  				if (GridDistY == 0) {  					GridDistY = source.grid_distance_y;  				}  			}  			for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  				if (Idx != 0) {  					float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  				}  			}  			for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  				if (Idx != 0) {  					float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Brush b = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (b)) {  		pen.DashPattern = new float[] {  			2'  			2  		};  		// draw labels for horizontal lines  		if (source.DY != 0) {  			float Idx = 0;  			float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  			String value = "" + Idx;  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  			float GridDistY = source.grid_distance_y;  			if (source.AutoScaleY) {  				// calculate a matching grid distance                              				GridDistY = -Utilities.MostSignificantDigit (source.DY);  				if (GridDistY == 0) {  					GridDistY = source.grid_distance_y;  				}  			}  			for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  				if (Idx != 0) {  					float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  				}  			}  			for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  				if (Idx != 0) {  					float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Brush b = new SolidBrush (source.GraphColor)) {  	using (Pen pen = new Pen (b)) {  		pen.DashPattern = new float[] {  			2'  			2  		};  		// draw labels for horizontal lines  		if (source.DY != 0) {  			float Idx = 0;  			float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  			String value = "" + Idx;  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			SizeF dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  			float GridDistY = source.grid_distance_y;  			if (source.AutoScaleY) {  				// calculate a matching grid distance                              				GridDistY = -Utilities.MostSignificantDigit (source.DY);  				if (GridDistY == 0) {  					GridDistY = source.grid_distance_y;  				}  			}  			for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  				if (Idx != 0) {  					float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  				}  			}  			for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  				if (Idx != 0) {  					float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  					value = "" + (Idx);  					if (source.OnRenderYAxisLabel != null) {  						value = source.OnRenderYAxisLabel (source' Idx);  					}  					dim = g.MeasureString (value' legendFont);  					g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  				}  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Pen pen = new Pen (b)) {  	pen.DashPattern = new float[] {  		2'  		2  	};  	// draw labels for horizontal lines  	if (source.DY != 0) {  		float Idx = 0;  		float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  		String value = "" + Idx;  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  		float GridDistY = source.grid_distance_y;  		if (source.AutoScaleY) {  			// calculate a matching grid distance                              			GridDistY = -Utilities.MostSignificantDigit (source.DY);  			if (GridDistY == 0) {  				GridDistY = source.grid_distance_y;  			}  		}  		for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  			if (Idx != 0) {  				float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  			}  		}  		for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  			if (Idx != 0) {  				float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Pen pen = new Pen (b)) {  	pen.DashPattern = new float[] {  		2'  		2  	};  	// draw labels for horizontal lines  	if (source.DY != 0) {  		float Idx = 0;  		float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  		String value = "" + Idx;  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  		float GridDistY = source.grid_distance_y;  		if (source.AutoScaleY) {  			// calculate a matching grid distance                              			GridDistY = -Utilities.MostSignificantDigit (source.DY);  			if (GridDistY == 0) {  				GridDistY = source.grid_distance_y;  			}  		}  		for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  			if (Idx != 0) {  				float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  			}  		}  		for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  			if (Idx != 0) {  				float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Pen pen = new Pen (b)) {  	pen.DashPattern = new float[] {  		2'  		2  	};  	// draw labels for horizontal lines  	if (source.DY != 0) {  		float Idx = 0;  		float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  		String value = "" + Idx;  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  		float GridDistY = source.grid_distance_y;  		if (source.AutoScaleY) {  			// calculate a matching grid distance                              			GridDistY = -Utilities.MostSignificantDigit (source.DY);  			if (GridDistY == 0) {  				GridDistY = source.grid_distance_y;  			}  		}  		for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  			if (Idx != 0) {  				float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  			}  		}  		for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  			if (Idx != 0) {  				float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Pen pen = new Pen (b)) {  	pen.DashPattern = new float[] {  		2'  		2  	};  	// draw labels for horizontal lines  	if (source.DY != 0) {  		float Idx = 0;  		float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  		String value = "" + Idx;  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  		float GridDistY = source.grid_distance_y;  		if (source.AutoScaleY) {  			// calculate a matching grid distance                              			GridDistY = -Utilities.MostSignificantDigit (source.DY);  			if (GridDistY == 0) {  				GridDistY = source.grid_distance_y;  			}  		}  		for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  			if (Idx != 0) {  				float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  			}  		}  		for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  			if (Idx != 0) {  				float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: using (Pen pen = new Pen (b)) {  	pen.DashPattern = new float[] {  		2'  		2  	};  	// draw labels for horizontal lines  	if (source.DY != 0) {  		float Idx = 0;  		float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  		String value = "" + Idx;  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		SizeF dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  		float GridDistY = source.grid_distance_y;  		if (source.AutoScaleY) {  			// calculate a matching grid distance                              			GridDistY = -Utilities.MostSignificantDigit (source.DY);  			if (GridDistY == 0) {  				GridDistY = source.grid_distance_y;  			}  		}  		for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  			if (Idx != 0) {  				float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  			}  		}  		for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  			if (Idx != 0) {  				float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  				value = "" + (Idx);  				if (source.OnRenderYAxisLabel != null) {  					value = source.OnRenderYAxisLabel (source' Idx);  				}  				dim = g.MeasureString (value' legendFont);  				g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  			}  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: pen.DashPattern = new float[] {  	2'  	2  };  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: pen.DashPattern = new float[] {  	2'  	2  };  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: if (source.DY != 0) {  	float Idx = 0;  	float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  	String value = "" + Idx;  	if (source.OnRenderYAxisLabel != null) {  		value = source.OnRenderYAxisLabel (source' Idx);  	}  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  	float GridDistY = source.grid_distance_y;  	if (source.AutoScaleY) {  		// calculate a matching grid distance                              		GridDistY = -Utilities.MostSignificantDigit (source.DY);  		if (GridDistY == 0) {  			GridDistY = source.grid_distance_y;  		}  	}  	for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  		if (Idx != 0) {  			float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  		}  	}  	for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  		if (Idx != 0) {  			float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: if (source.DY != 0) {  	float Idx = 0;  	float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  	String value = "" + Idx;  	if (source.OnRenderYAxisLabel != null) {  		value = source.OnRenderYAxisLabel (source' Idx);  	}  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  	float GridDistY = source.grid_distance_y;  	if (source.AutoScaleY) {  		// calculate a matching grid distance                              		GridDistY = -Utilities.MostSignificantDigit (source.DY);  		if (GridDistY == 0) {  			GridDistY = source.grid_distance_y;  		}  	}  	for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  		if (Idx != 0) {  			float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  		}  	}  	for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  		if (Idx != 0) {  			float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: if (source.DY != 0) {  	float Idx = 0;  	float y0 = (float)(source.grid_off_y * source.CurGraphHeight / source.DY + source.off_Y);  	String value = "" + Idx;  	if (source.OnRenderYAxisLabel != null) {  		value = source.OnRenderYAxisLabel (source' Idx);  	}  	SizeF dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  	float GridDistY = source.grid_distance_y;  	if (source.AutoScaleY) {  		// calculate a matching grid distance                              		GridDistY = -Utilities.MostSignificantDigit (source.DY);  		if (GridDistY == 0) {  			GridDistY = source.grid_distance_y;  		}  	}  	for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  		if (Idx != 0) {  			float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  		}  	}  	for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  		if (Idx != 0) {  			float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  			value = "" + (Idx);  			if (source.OnRenderYAxisLabel != null) {  				value = source.OnRenderYAxisLabel (source' Idx);  			}  			dim = g.MeasureString (value' legendFont);  			g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  		}  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y0 + 0.5f + dim.Height / 2)));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: for (Idx = (source.grid_off_y); Idx > (source.Cur_YD0); Idx -= GridDistY) {  	if (Idx != 0) {  		float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  		value = "" + (Idx);  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: if (Idx != 0) {  	float y1 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  	value = "" + (Idx);  	if (source.OnRenderYAxisLabel != null) {  		value = source.OnRenderYAxisLabel (source' Idx);  	}  	dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y1 + 0.5f + dim.Height / 2)));  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: for (Idx = (source.grid_off_y); Idx < (source.Cur_YD1); Idx += GridDistY) {  	if (Idx != 0) {  		float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  		value = "" + (Idx);  		if (source.OnRenderYAxisLabel != null) {  			value = source.OnRenderYAxisLabel (source' Idx);  		}  		dim = g.MeasureString (value' legendFont);  		g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  	}  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: if (Idx != 0) {  	float y2 = (float)((Idx) * source.CurGraphHeight) / source.DY + source.off_Y;  	value = "" + (Idx);  	if (source.OnRenderYAxisLabel != null) {  		value = source.OnRenderYAxisLabel (source' Idx);  	}  	dim = g.MeasureString (value' legendFont);  	g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  }  
Magic Number,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,DrawYLabels,The following statement contains a magic number: g.DrawString (value' legendFont' b' new PointF ((int)offset_x - dim.Width' (int)(offset_y + y2 + 0.5f + dim.Height / 2)));  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,PlotterDisplayEx,The following statement contains a magic number: mTimer.Period = 50;  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,Start,The following statement contains a magic number: if (isRunning == false && paused == false) {  	gPane.starting_idx = 0;  	paused = false;  	isRunning = true;  	// mTimer.Start();                  	tb1.Buttons [0].ImageIndex = 2;  }  else {  	if (paused == false) {  		//mTimer.Stop();  		paused = true;  	}  	else {  		// mTimer.Start();  		paused = false;  	}  	if (paused) {  		tb1.Buttons [0].ImageIndex = 0;  	}  	else {  		tb1.Buttons [0].ImageIndex = 2;  	}  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,Start,The following statement contains a magic number: if (isRunning == false && paused == false) {  	gPane.starting_idx = 0;  	paused = false;  	isRunning = true;  	// mTimer.Start();                  	tb1.Buttons [0].ImageIndex = 2;  }  else {  	if (paused == false) {  		//mTimer.Stop();  		paused = true;  	}  	else {  		// mTimer.Start();  		paused = false;  	}  	if (paused) {  		tb1.Buttons [0].ImageIndex = 0;  	}  	else {  		tb1.Buttons [0].ImageIndex = 2;  	}  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,Start,The following statement contains a magic number: tb1.Buttons [0].ImageIndex = 2;  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,Start,The following statement contains a magic number: if (paused) {  	tb1.Buttons [0].ImageIndex = 0;  }  else {  	tb1.Buttons [0].ImageIndex = 2;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,Start,The following statement contains a magic number: tb1.Buttons [0].ImageIndex = 2;  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (InvokeRequired) {  	Invoke (new MethodInvoker (UpdateScrollBar));  }  else {  	if (gPane.Sources.Count > 0) {  		if (gPane.starting_idx > gPane.Sources [0].Length) {  			hScrollBar1.Value = 10000;  		}  		else if (gPane.starting_idx >= 0) {  			hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  		}  		else {  			hScrollBar1.Value = 0;  		}  	}  	else {  		hScrollBar1.Value = 0;  	}  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (InvokeRequired) {  	Invoke (new MethodInvoker (UpdateScrollBar));  }  else {  	if (gPane.Sources.Count > 0) {  		if (gPane.starting_idx > gPane.Sources [0].Length) {  			hScrollBar1.Value = 10000;  		}  		else if (gPane.starting_idx >= 0) {  			hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  		}  		else {  			hScrollBar1.Value = 0;  		}  	}  	else {  		hScrollBar1.Value = 0;  	}  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (gPane.Sources.Count > 0) {  	if (gPane.starting_idx > gPane.Sources [0].Length) {  		hScrollBar1.Value = 10000;  	}  	else if (gPane.starting_idx >= 0) {  		hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  	}  	else {  		hScrollBar1.Value = 0;  	}  }  else {  	hScrollBar1.Value = 0;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (gPane.Sources.Count > 0) {  	if (gPane.starting_idx > gPane.Sources [0].Length) {  		hScrollBar1.Value = 10000;  	}  	else if (gPane.starting_idx >= 0) {  		hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  	}  	else {  		hScrollBar1.Value = 0;  	}  }  else {  	hScrollBar1.Value = 0;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (gPane.starting_idx > gPane.Sources [0].Length) {  	hScrollBar1.Value = 10000;  }  else if (gPane.starting_idx >= 0) {  	hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  }  else {  	hScrollBar1.Value = 0;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (gPane.starting_idx > gPane.Sources [0].Length) {  	hScrollBar1.Value = 10000;  }  else if (gPane.starting_idx >= 0) {  	hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  }  else {  	hScrollBar1.Value = 0;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: hScrollBar1.Value = 10000;  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: if (gPane.starting_idx >= 0) {  	hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  }  else {  	hScrollBar1.Value = 0;  }  
Magic Number,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,UpdateScrollBar,The following statement contains a magic number: hScrollBar1.Value = 10000 * (int)gPane.starting_idx / gPane.Sources [0].Length;  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (this.Visible == true) {  	selectetGraphIndex = -1;  	gB_SelectedGraph.Visible = false;  	if (gpane != null) {  		UpdateAllCheckedState ();  		if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  			cb_Layout.SelectedIndex = 0;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  			cb_Layout.SelectedIndex = 1;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  			cb_Layout.SelectedIndex = 2;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  			cb_Layout.SelectedIndex = 3;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  			cb_Layout.SelectedIndex = 4;  		}  		bt_bg_col_top.BackColor = gpane.BgndColorTop;  		bt_bg_col_bot.BackColor = gpane.BgndColorBot;  		bt_MajorGridColor.BackColor = gpane.MajorGridColor;  		bt_MinorGridColor.BackColor = gpane.MinorGridColor;  	}  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (this.Visible == true) {  	selectetGraphIndex = -1;  	gB_SelectedGraph.Visible = false;  	if (gpane != null) {  		UpdateAllCheckedState ();  		if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  			cb_Layout.SelectedIndex = 0;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  			cb_Layout.SelectedIndex = 1;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  			cb_Layout.SelectedIndex = 2;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  			cb_Layout.SelectedIndex = 3;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  			cb_Layout.SelectedIndex = 4;  		}  		bt_bg_col_top.BackColor = gpane.BgndColorTop;  		bt_bg_col_bot.BackColor = gpane.BgndColorBot;  		bt_MajorGridColor.BackColor = gpane.MajorGridColor;  		bt_MinorGridColor.BackColor = gpane.MinorGridColor;  	}  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (this.Visible == true) {  	selectetGraphIndex = -1;  	gB_SelectedGraph.Visible = false;  	if (gpane != null) {  		UpdateAllCheckedState ();  		if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  			cb_Layout.SelectedIndex = 0;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  			cb_Layout.SelectedIndex = 1;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  			cb_Layout.SelectedIndex = 2;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  			cb_Layout.SelectedIndex = 3;  		}  		else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  			cb_Layout.SelectedIndex = 4;  		}  		bt_bg_col_top.BackColor = gpane.BgndColorTop;  		bt_bg_col_bot.BackColor = gpane.BgndColorBot;  		bt_MajorGridColor.BackColor = gpane.MajorGridColor;  		bt_MinorGridColor.BackColor = gpane.MinorGridColor;  	}  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane != null) {  	UpdateAllCheckedState ();  	if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  		cb_Layout.SelectedIndex = 0;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  		cb_Layout.SelectedIndex = 1;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  		cb_Layout.SelectedIndex = 2;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  		cb_Layout.SelectedIndex = 3;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  		cb_Layout.SelectedIndex = 4;  	}  	bt_bg_col_top.BackColor = gpane.BgndColorTop;  	bt_bg_col_bot.BackColor = gpane.BgndColorBot;  	bt_MajorGridColor.BackColor = gpane.MajorGridColor;  	bt_MinorGridColor.BackColor = gpane.MinorGridColor;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane != null) {  	UpdateAllCheckedState ();  	if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  		cb_Layout.SelectedIndex = 0;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  		cb_Layout.SelectedIndex = 1;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  		cb_Layout.SelectedIndex = 2;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  		cb_Layout.SelectedIndex = 3;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  		cb_Layout.SelectedIndex = 4;  	}  	bt_bg_col_top.BackColor = gpane.BgndColorTop;  	bt_bg_col_bot.BackColor = gpane.BgndColorBot;  	bt_MajorGridColor.BackColor = gpane.MajorGridColor;  	bt_MinorGridColor.BackColor = gpane.MinorGridColor;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane != null) {  	UpdateAllCheckedState ();  	if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  		cb_Layout.SelectedIndex = 0;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  		cb_Layout.SelectedIndex = 1;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  		cb_Layout.SelectedIndex = 2;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  		cb_Layout.SelectedIndex = 3;  	}  	else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  		cb_Layout.SelectedIndex = 4;  	}  	bt_bg_col_top.BackColor = gpane.BgndColorTop;  	bt_bg_col_bot.BackColor = gpane.BgndColorBot;  	bt_MajorGridColor.BackColor = gpane.MajorGridColor;  	bt_MinorGridColor.BackColor = gpane.MinorGridColor;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  	cb_Layout.SelectedIndex = 0;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  	cb_Layout.SelectedIndex = 0;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.NORMAL) {  	cb_Layout.SelectedIndex = 0;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.STACKED) {  	cb_Layout.SelectedIndex = 1;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_HOR) {  	cb_Layout.SelectedIndex = 2;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: cb_Layout.SelectedIndex = 2;  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.TILES_VER) {  	cb_Layout.SelectedIndex = 3;  }  else if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: cb_Layout.SelectedIndex = 3;  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: if (gpane.layout == PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED) {  	cb_Layout.SelectedIndex = 4;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,OnVisibleChanged,The following statement contains a magic number: cb_Layout.SelectedIndex = 4;  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: if (cb_Layout.SelectedIndex == 2) {  	gpane.layout = PlotterGraphPaneEx.LayoutMode.TILES_VER;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: if (cb_Layout.SelectedIndex == 3) {  	gpane.layout = PlotterGraphPaneEx.LayoutMode.TILES_HOR;  }  
Magic Number,GraphLib,PlotterGraphSelectCurvesForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPropertiesForm.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: if (cb_Layout.SelectedIndex == 4) {  	gpane.layout = PlotterGraphPaneEx.LayoutMode.VERTICAL_ARRANGED;  }  
Magic Number,GraphLib,PrintPreviewForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrintPreviewForm.cs,AutoZoomPreview,The following statement contains a magic number: while (zoom > 0.1f) {  	double CurW = PaperWidth * zoom;  	double CurH = PaperHeight * zoom;  	if (splitContainer1.Panel1.Width < (CurW + 10) || splitContainer1.Panel1.Height < (CurH + 10)) {  		zoom -= step;  	}  	else {  		break;  	}  }  
Magic Number,GraphLib,PrintPreviewForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrintPreviewForm.cs,AutoZoomPreview,The following statement contains a magic number: while (zoom > 0.1f) {  	double CurW = PaperWidth * zoom;  	double CurH = PaperHeight * zoom;  	if (splitContainer1.Panel1.Width < (CurW + 10) || splitContainer1.Panel1.Height < (CurH + 10)) {  		zoom -= step;  	}  	else {  		break;  	}  }  
Magic Number,GraphLib,PrintPreviewForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrintPreviewForm.cs,AutoZoomPreview,The following statement contains a magic number: if (splitContainer1.Panel1.Width < (CurW + 10) || splitContainer1.Panel1.Height < (CurH + 10)) {  	zoom -= step;  }  else {  	break;  }  
Magic Number,GraphLib,PrintPreviewForm,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PrintPreviewForm.cs,AutoZoomPreview,The following statement contains a magic number: if (splitContainer1.Panel1.Width < (CurW + 10) || splitContainer1.Panel1.Height < (CurH + 10)) {  	zoom -= step;  }  else {  	break;  }  
Magic Number,GraphLib,Utilities,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\Utils.cs,MostSignificantDigit,The following statement contains a magic number: if (val_abs > 1) {  	while (n < val_abs) {  		n *= 10.0f;  	}  	return (float)((int)(sig * n / 10));  }  else// n <= 1   {  	while (n > val_abs) {  		n /= 10.0f;  	}  	return sig * n;  }  
Magic Number,GraphLib,Utilities,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\Utils.cs,MostSignificantDigit,The following statement contains a magic number: return (float)((int)(sig * n / 10));  
Missing Default,GraphLib,PlotterGraphPaneEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphPaneEx.cs,PaintControl,The following switch statement is missing a default case: switch (layout) {  case LayoutMode.NORMAL:  case LayoutMode.TILES_HOR:  case LayoutMode.TILES_VER:  case LayoutMode.VERTICAL_ARRANGED:  	PaintGraphs (CurGraphics' CurWidth' CurHeight' OffX' OffY);  	break;  case LayoutMode.STACKED:  	PaintStackedGraphs (CurGraphics' CurWidth' CurHeight' OffX' OffY);  	break;  }  
Missing Default,GraphLib,PlotterDisplayEx,C:\repos\BowenZhuang_MyoProject\Source\pd-myo2\GraphLib\PlotterGraphEx.cs,tb1_ButtonClick,The following switch statement is missing a default case: switch (e.Button.Tag.ToString ().ToLower ()) {  case "play":  	Start ();  	break;  case "stop":  	Stop ();  	break;  case "print":  	// // todo implement print preview  	ShowPrintPreview ();  	break;  }  
