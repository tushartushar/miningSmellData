Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,uFluent,DocumentType,C:\repos\dev-mag_uFluent\uFluent\DocumentType.cs,AddProperty,The method has 7 parameters. Parameters: alias' name' dataTypeName' tabName' mandatory' description' validationRegex
Long Parameter List,uFluent.Extensions.MultiNodeTreePicker.Models,MultiNodeTreePickerPreValues,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\Models\MultiNodeTreePickerPreValues.cs,MultiNodeTreePickerPreValues,The method has 7 parameters. Parameters: nodeType' startNodeId' startNodeXPathFilter' allowedDocTypes' minSelectedNodes' maxSelectedNodes' showEditButton
Long Identifier,uFluent.Consts,PropertyEditor,C:\repos\dev-mag_uFluent\uFluent\Consts\PropertyEditor.cs,,The length of the parameter DropdownlistMultiplePublishKeys is 31.
Long Statement,uFluent,DataType,C:\repos\dev-mag_uFluent\uFluent\DataType.cs,SetControlId,The length of the statement  "            property.SetValue(DataTypeDefinition' new Guid(propertyEditor)' BindingFlags.NonPublic | BindingFlags.Instance' null' null' null); " is 130.
Long Statement,uFluent,DataType,C:\repos\dev-mag_uFluent\uFluent\DataType.cs,Delete,The length of the statement  "            var dataTypeDefinition = DataTypeService.GetAllDataTypeDefinitions().FirstOrDefault(x => x.Name == DataTypeDefinition.Name); " is 124.
Long Statement,uFluent,DocumentType,C:\repos\dev-mag_uFluent\uFluent\DocumentType.cs,SetPropertyDataType,The length of the statement  "            var propertyType = UmbracoContentType.PropertyTypes.SingleOrDefault(x => x.Alias.Equals(alias' StringComparison.OrdinalIgnoreCase)); " is 132.
Long Statement,uFluent,DocumentType,C:\repos\dev-mag_uFluent\uFluent\DocumentType.cs,GetDataTypeDefinition,The length of the statement  "            return DataTypeService.GetAllDataTypeDefinitions().Single(x => x.Name.Equals(dataTypeName' StringComparison.InvariantCultureIgnoreCase)); " is 137.
Long Statement,uFluent,DocumentType,C:\repos\dev-mag_uFluent\uFluent\DocumentType.cs,CreateTab,The length of the statement  "                throw new InvalidOperationException(string.Format("DocumentType `{0}` already contains tab `{1}`"' UmbracoContentType.Name' tabName)); " is 134.
Long Statement,uFluent,DocumentType,C:\repos\dev-mag_uFluent\uFluent\DocumentType.cs,AddAllowedChildNodeType,The length of the statement  "                Log.DebugFormat("{0} is already an allowed content type of {1}"' documentType.UmbracoContentType.Alias' UmbracoContentType.Alias); " is 130.
Long Statement,uFluent.Persistence,FluentMacroService,C:\repos\dev-mag_uFluent\uFluent\Persistence\FluentMacroService.cs,Get,The length of the statement  "            var existing = UmbracoUtils.UmbracoDatabase.SingleOrDefault<MacroDto>("WHERE macroAlias = @alias"' new { alias = alias }); " is 122.
Long Statement,uFluent.Persistence,FluentMacroService,C:\repos\dev-mag_uFluent\uFluent\Persistence\FluentMacroService.cs,Create,The length of the statement  "            var existing = UmbracoUtils.UmbracoDatabase.SingleOrDefault<MacroDto>("WHERE macroAlias = @alias"' new { alias = alias }); " is 122.
Long Statement,uFluent.Utils.XPathFilters,DocTypeListXPath,C:\repos\dev-mag_uFluent\uFluent\Utils\XPathFilters\DocTypeListXPath.cs,Add,The length of the statement  "                        throw new FluentException("Cannot add an empty doc type to XPath Filter list.  The document type alias MUST be specified."); " is 124.
Long Statement,uFluent.Utils.XPathFilters,DocTypeListXPath,C:\repos\dev-mag_uFluent\uFluent\Utils\XPathFilters\DocTypeListXPath.cs,Remove,The length of the statement  "                        throw new FluentException("Cannot remove an empty doc type from XPath Filter list.  The document type alias MUST be specified."); " is 129.
Magic Number,uFluent.Dto,XPathDropDownListPreValueDto,C:\repos\dev-mag_uFluent\uFluent\Dto\XPathDropDownListPreValueDto.cs,CreateForXPath,The following statement contains a magic number: return new XPathDropDownListPreValueDto              {                  Type = "C66BA18E-EAF3-4CFF-8A22-41B16D66A972"'                  XPath = xpath'                  UseId = true'                  UmbracoObjectType = 3              };
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,SetMultiNodeTreePickerPreValues,The following statement contains a magic number: dataType.AddPreValue(multiNodeTreePickerPreValues.StartNode.ToJsonString()' 1' "startNode")                  .AddPreValue(multiNodeTreePickerPreValues.AllowedDocTypes' 2' "filter")                  .AddPreValue(multiNodeTreePickerPreValues.MinSelectedNodes.ToString()' 3' "minNumber")                  .AddPreValue(multiNodeTreePickerPreValues.MaxSelectedNodes.ToString()' 4' "maxNumber")                  .AddPreValue(multiNodeTreePickerPreValues.ShowEditButton ? "1" : "0"' 5' "showEditButton");
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,SetMultiNodeTreePickerPreValues,The following statement contains a magic number: dataType.AddPreValue(multiNodeTreePickerPreValues.StartNode.ToJsonString()' 1' "startNode")                  .AddPreValue(multiNodeTreePickerPreValues.AllowedDocTypes' 2' "filter")                  .AddPreValue(multiNodeTreePickerPreValues.MinSelectedNodes.ToString()' 3' "minNumber")                  .AddPreValue(multiNodeTreePickerPreValues.MaxSelectedNodes.ToString()' 4' "maxNumber")                  .AddPreValue(multiNodeTreePickerPreValues.ShowEditButton ? "1" : "0"' 5' "showEditButton");
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,SetMultiNodeTreePickerPreValues,The following statement contains a magic number: dataType.AddPreValue(multiNodeTreePickerPreValues.StartNode.ToJsonString()' 1' "startNode")                  .AddPreValue(multiNodeTreePickerPreValues.AllowedDocTypes' 2' "filter")                  .AddPreValue(multiNodeTreePickerPreValues.MinSelectedNodes.ToString()' 3' "minNumber")                  .AddPreValue(multiNodeTreePickerPreValues.MaxSelectedNodes.ToString()' 4' "maxNumber")                  .AddPreValue(multiNodeTreePickerPreValues.ShowEditButton ? "1" : "0"' 5' "showEditButton");
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,SetMultiNodeTreePickerPreValues,The following statement contains a magic number: dataType.AddPreValue(multiNodeTreePickerPreValues.StartNode.ToJsonString()' 1' "startNode")                  .AddPreValue(multiNodeTreePickerPreValues.AllowedDocTypes' 2' "filter")                  .AddPreValue(multiNodeTreePickerPreValues.MinSelectedNodes.ToString()' 3' "minNumber")                  .AddPreValue(multiNodeTreePickerPreValues.MaxSelectedNodes.ToString()' 4' "maxNumber")                  .AddPreValue(multiNodeTreePickerPreValues.ShowEditButton ? "1" : "0"' 5' "showEditButton");
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,GetMultiNodeTreePickerPreValues,The following statement contains a magic number: try              {                  var preValues = dataType.GetDataTypePreValues().ToArray();                    var multiNodePreValues = new MultiNodeTreePickerPreValues();                    var startNodeJson = (StartNodeJson) JsonConvert.DeserializeObject(preValues[0]' typeof (StartNodeJson));                    multiNodePreValues.StartNode = startNodeJson.ToStartNode();                  multiNodePreValues.AllowedDocTypes = preValues[1];                  multiNodePreValues.MinSelectedNodes = string.IsNullOrEmpty(preValues[2]) ? (int?) null : int.Parse(preValues[2]);                  multiNodePreValues.MaxSelectedNodes = string.IsNullOrEmpty(preValues[3]) ? (int?) null : int.Parse(preValues[3]);                  multiNodePreValues.ShowEditButton = preValues[4] == "1";                    return multiNodePreValues;              }              catch (Exception ex)              {                  throw new FluentException("Unable to parse pre values for the multinode tree picker: " + ex.Message);              }
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,GetMultiNodeTreePickerPreValues,The following statement contains a magic number: try              {                  var preValues = dataType.GetDataTypePreValues().ToArray();                    var multiNodePreValues = new MultiNodeTreePickerPreValues();                    var startNodeJson = (StartNodeJson) JsonConvert.DeserializeObject(preValues[0]' typeof (StartNodeJson));                    multiNodePreValues.StartNode = startNodeJson.ToStartNode();                  multiNodePreValues.AllowedDocTypes = preValues[1];                  multiNodePreValues.MinSelectedNodes = string.IsNullOrEmpty(preValues[2]) ? (int?) null : int.Parse(preValues[2]);                  multiNodePreValues.MaxSelectedNodes = string.IsNullOrEmpty(preValues[3]) ? (int?) null : int.Parse(preValues[3]);                  multiNodePreValues.ShowEditButton = preValues[4] == "1";                    return multiNodePreValues;              }              catch (Exception ex)              {                  throw new FluentException("Unable to parse pre values for the multinode tree picker: " + ex.Message);              }
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,GetMultiNodeTreePickerPreValues,The following statement contains a magic number: try              {                  var preValues = dataType.GetDataTypePreValues().ToArray();                    var multiNodePreValues = new MultiNodeTreePickerPreValues();                    var startNodeJson = (StartNodeJson) JsonConvert.DeserializeObject(preValues[0]' typeof (StartNodeJson));                    multiNodePreValues.StartNode = startNodeJson.ToStartNode();                  multiNodePreValues.AllowedDocTypes = preValues[1];                  multiNodePreValues.MinSelectedNodes = string.IsNullOrEmpty(preValues[2]) ? (int?) null : int.Parse(preValues[2]);                  multiNodePreValues.MaxSelectedNodes = string.IsNullOrEmpty(preValues[3]) ? (int?) null : int.Parse(preValues[3]);                  multiNodePreValues.ShowEditButton = preValues[4] == "1";                    return multiNodePreValues;              }              catch (Exception ex)              {                  throw new FluentException("Unable to parse pre values for the multinode tree picker: " + ex.Message);              }
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,GetMultiNodeTreePickerPreValues,The following statement contains a magic number: try              {                  var preValues = dataType.GetDataTypePreValues().ToArray();                    var multiNodePreValues = new MultiNodeTreePickerPreValues();                    var startNodeJson = (StartNodeJson) JsonConvert.DeserializeObject(preValues[0]' typeof (StartNodeJson));                    multiNodePreValues.StartNode = startNodeJson.ToStartNode();                  multiNodePreValues.AllowedDocTypes = preValues[1];                  multiNodePreValues.MinSelectedNodes = string.IsNullOrEmpty(preValues[2]) ? (int?) null : int.Parse(preValues[2]);                  multiNodePreValues.MaxSelectedNodes = string.IsNullOrEmpty(preValues[3]) ? (int?) null : int.Parse(preValues[3]);                  multiNodePreValues.ShowEditButton = preValues[4] == "1";                    return multiNodePreValues;              }              catch (Exception ex)              {                  throw new FluentException("Unable to parse pre values for the multinode tree picker: " + ex.Message);              }
Magic Number,uFluent.Extensions.MultiNodeTreePicker,MultiNodeTreePickerExtensions,C:\repos\dev-mag_uFluent\uFluent\Extensions\MultiNodeTreePicker\MultiNodeTreePickerExtensions.cs,GetMultiNodeTreePickerPreValues,The following statement contains a magic number: try              {                  var preValues = dataType.GetDataTypePreValues().ToArray();                    var multiNodePreValues = new MultiNodeTreePickerPreValues();                    var startNodeJson = (StartNodeJson) JsonConvert.DeserializeObject(preValues[0]' typeof (StartNodeJson));                    multiNodePreValues.StartNode = startNodeJson.ToStartNode();                  multiNodePreValues.AllowedDocTypes = preValues[1];                  multiNodePreValues.MinSelectedNodes = string.IsNullOrEmpty(preValues[2]) ? (int?) null : int.Parse(preValues[2]);                  multiNodePreValues.MaxSelectedNodes = string.IsNullOrEmpty(preValues[3]) ? (int?) null : int.Parse(preValues[3]);                  multiNodePreValues.ShowEditButton = preValues[4] == "1";                    return multiNodePreValues;              }              catch (Exception ex)              {                  throw new FluentException("Unable to parse pre values for the multinode tree picker: " + ex.Message);              }
