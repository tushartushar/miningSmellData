Implementation smell,Namespace,Class,File,Method,Description
Long Method,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,GetCodedTokenTypes,The method has 100 lines of code.
Long Method,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,GetTableDescription,The method has 545 lines of code.
Complex Method,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,Cyclomatic complexity of the method is 21
Complex Method,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,Cyclomatic complexity of the method is 25
Complex Method,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,Cyclomatic complexity of the method is 15
Complex Method,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,GetCodedTokenTypes,Cyclomatic complexity of the method is 15
Complex Method,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,GetTableDescription,Cyclomatic complexity of the method is 185
Complex Method,AlphaOmega.Debug.NTDirectory.Resources,ResourceDialog,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceDialog.cs,GetDialogTemplate,Cyclomatic complexity of the method is 10
Complex Method,AlphaOmega.Debug.NTDirectory.Resources,ResourceMessageTable,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceMessageTable.cs,GetMessageBlockEntries,Cyclomatic complexity of the method is 9
Complex Method,AlphaOmega.Debug.NTDirectory.Resources,ResourceVersion,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceVersion.cs,GetVersionTable,Cyclomatic complexity of the method is 9
Complex Method,AlphaOmega.Debug.NTDirectory,DelayImportModule,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\DelayImportModule.cs,GetIntAddress,Cyclomatic complexity of the method is 10
Complex Method,AlphaOmega.Debug.NTDirectory,Resource,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resource.cs,GetResources,Cyclomatic complexity of the method is 8
Long Parameter List,AlphaOmega.Debug.NTDirectory.Resources,DialogButtonTemplate,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\Dialog\DialogButtonTemplate.cs,DialogButtonTemplate,The method has 5 parameters.
Long Parameter List,AlphaOmega.Debug.NTDirectory.Resources,DialogEditTemplate,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\Dialog\DialogEditTemplate.cs,DialogEditTemplate,The method has 5 parameters.
Long Parameter List,AlphaOmega.Debug.NTDirectory.Resources,DialogItemTemplate,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\Dialog\DialogItemTemplate.cs,DialogItemTemplate,The method has 5 parameters.
Long Parameter List,AlphaOmega.Debug.NTDirectory.Resources,DialogItemTemplate,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\Dialog\DialogItemTemplate.cs,CreateDialogItem,The method has 5 parameters.
Long Statement,AlphaOmega.Debug,LookupLoader,C:\repos\DKorablin_PEReader\PEReader\ImageLoader\LookupLoader.cs,Dispose,The length of the statement  "	File.WriteAllText (LookupLoader.GetFileUniqueName (this.Source' ".log"' 0)' String.Join (String.Empty' Array.ConvertAll (_map' delegate (Byte b) { " is 146.
Long Statement,AlphaOmega.Debug,Win32Loader,C:\repos\DKorablin_PEReader\PEReader\ImageLoader\Win32Loader.cs,FromFile,The length of the statement  "	IntPtr hModule = NativeMethods.LoadLibraryEx (filePath' IntPtr.Zero' NativeMethods.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES); " is 129.
Long Statement,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The length of the statement  "		UInt32 position = base.Directory.VirtualAddress + MetaData.SizeOfCor20Metadata1 + meta.Value.Length + MetaData.SizeOfCor20MetaData2; " is 132.
Long Statement,AlphaOmega.Debug.CorDirectory.Meta,MetaCellPointer,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\CellPointer\MetaCellPointer.cs,GetTargetRowsIt,The length of the statement  "		UInt32? nextIndex = base.Cell.Table.RowsCount == rowIndex + 1 ? (UInt32?)null : ((MetaCellPointer)base.Cell.Table [rowIndex + 1] [base.Cell.Column].Value).RowIndex; " is 164.
Long Statement,AlphaOmega.Debug.CorDirectory.Meta,MethodBody,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MethodBody.cs,GetSections,The length of the statement  "	if ((this.Header.Format & Cor.CorILMethod.FatFormat) == Cor.CorILMethod.FatFormat && (this.Header.Format & Cor.CorILMethod.MoreSects) == Cor.CorILMethod.MoreSects) { " is 165.
Long Statement,AlphaOmega.Debug.CorDirectory.Meta,MethodBody,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MethodBody.cs,GetSections,The length of the statement  "			Cor.CorILMethodExceptionSmall[] small = new Cor.CorILMethodExceptionSmall[section.IsFatFormat ? 0 : section.ClauseNumber]; " is 122.
Long Statement,AlphaOmega.Debug.NTDirectory.Resources,ResourceDialog,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceDialog.cs,GetDialogTemplate,The length of the statement  "						padding += sizeof(UInt32) - align;//Выравнивание по 4 байта. При этом' даже если выравнивания нет' то 4 байта всё равно надо прибавить*/} " is 137.
Long Statement,AlphaOmega.Debug.NTDirectory.Resources,ResourceMenu,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceMenu.cs,GetMenu,The length of the statement  "			//TODO: bResInfo в 16 битных приложениях занимает не WORD' а BYTE. Если найдётся реальный пример' придётся полностью делать динамичесую структуру. " is 146.
Long Statement,AlphaOmega.Debug.NTDirectory.Resources,ResourceMessageTable,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceMessageTable.cs,GetMessageBlockEntries,The length of the statement  "		WinNT.Resource.MESSAGE_RESOURCE_ENTRY entry = reader.BytesToStructure<WinNT.Resource.MESSAGE_RESOURCE_ENTRY> (ref padding); " is 123.
Long Statement,AlphaOmega.Debug.NTDirectory,NTSection,C:\repos\DKorablin_PEReader\PEReader\SectionHeader.cs,GetData,The length of the statement  "	UInt32 size = this.Header.VirtualSize > this.Header.SizeOfRawData ? this.Header.SizeOfRawData : this.Header.VirtualSize; " is 120.
Long Statement,AlphaOmega.Debug.NTDirectory,DelayImport,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\DelayImport.cs,GetEnumerator,The length of the statement  "		//Значение чисто абстрактное' т.к. Delphi пишет в последнюю структуру одни нули. А в count указывает левое значение (только Delphi). " is 132.
Long Statement,AlphaOmega.Debug.NTDirectory,ExceptionTable,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ExceptionTable.cs,GetEnumerator,The length of the statement  "		if (base.Parent.Header.Is64Bit && base.Parent.Header.HeaderNT64.FileHeader.Machine == WinNT.IMAGE_FILE_MACHINE.AMD64 || !base.Parent.Header.Is64Bit && base.Parent.Header.HeaderNT32.FileHeader.Machine == WinNT.IMAGE_FILE_MACHINE.AMD64) { " is 236.
Long Statement,AlphaOmega.Debug.NTDirectory,Export,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Export.cs,GetExportFunctions,The length of the statement  "	//(SomeExportedFunctionInTheDll)Marshal.GetDelegateForFunctionPointer((IntPtr)address' typeof(SomeExportedFunctionInTheDll)); " is 125.
Long Statement,AlphaOmega.Debug.NTDirectory,Import,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Import.cs,GetEnumerator,The length of the statement  "			descriptor = this.Parent.Header.PtrToStructure<WinNT.IMAGE_IMPORT_DESCRIPTOR> (base.Directory.VirtualAddress + (Import.SizeOfHeader * count)); " is 142.
Long Statement,AlphaOmega.Debug.NTDirectory,ResourceDirectory,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ResourceDirectory.cs,GetData,The length of the statement  "	//TODO: Не внедрён VS_VERSIONINFO. Вся информация тут: http://msdn.microsoft.com/en-us/library/ms647001%28v=vs.85%29.aspx " is 121.
Long Statement,AlphaOmega.Debug.NTDirectory,ResourceDirectory,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ResourceDirectory.cs,GetData,The length of the statement  "	//TODO: Не внедрён RT_ICON. Вся информация тут http://www.codeproject.com/Articles/30644/Replacing-ICON-resources-in-EXE-and-DLL-files " is 134.
Long Statement,AlphaOmega.Debug.NTDirectory,ResourceDirectory,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ResourceDirectory.cs,GetEnumerator,The length of the statement  "			UInt32 padding = this.Root.Directory.VirtualAddress + directorySize + this.DirectoryEntry.DirectoryAddress + (size * loop); " is 123.
Long Statement,AlphaOmega.Debug.NTDirectory,ResourceDirectory,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ResourceDirectory.cs,GetEnumerator,The length of the statement  "			WinNT.Resource.IMAGE_RESOURCE_DIRECTORY_ENTRY result = this.Root.Parent.Header.PtrToStructure<WinNT.Resource.IMAGE_RESOURCE_DIRECTORY_ENTRY> (padding); " is 151.
Long Statement,AlphaOmega.Debug.NTDirectory,Resource,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resource.cs,GetEnumerator,The length of the statement  "			WinNT.Resource.IMAGE_RESOURCE_DIRECTORY_ENTRY entry = base.Parent.Header.PtrToStructure<WinNT.Resource.IMAGE_RESOURCE_DIRECTORY_ENTRY> (padding); " is 145.
Complex Conditional,AlphaOmega.Debug.NTDirectory,ExceptionTable,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\ExceptionTable.cs,GetEnumerator,The conditional expression  "base.Parent.Header.Is64Bit && base.Parent.Header.HeaderNT64.FileHeader.Machine == WinNT.IMAGE_FILE_MACHINE.AMD64 || !base.Parent.Header.Is64Bit && base.Parent.Header.HeaderNT32.FileHeader.Machine == WinNT.IMAGE_FILE_MACHINE.AMD64"  is complex.
Complex Conditional,AlphaOmega.Debug.NTDirectory,ResourceBase,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceBase.cs,ResourceBase,The conditional expression  "directory.DataEntry == null || directory.Parent == null || directory.Parent.Parent == null || directory.Parent.Parent.DirectoryEntry.NameType != type"  is complex.
Magic Number,AlphaOmega.Debug,NativeMethods,C:\repos\DKorablin_PEReader\PEReader\NativeMethods.cs,HiWord,The following statement contains a magic number: return (UInt16)((value & 0xFFFF0000) >> 16);  
Magic Number,AlphaOmega.Debug,NativeMethods,C:\repos\DKorablin_PEReader\PEReader\NativeMethods.cs,HiByte,The following statement contains a magic number: return ((Byte)(((Int16)(value) >> 8) & 0xFF));  
Magic Number,AlphaOmega.Debug,NativeMethods,C:\repos\DKorablin_PEReader\PEReader\NativeMethods.cs,MakeDword,The following statement contains a magic number: return (low + (high << 16));  
Magic Number,AlphaOmega.Debug,NativeMethods,C:\repos\DKorablin_PEReader\PEReader\NativeMethods.cs,AlignToInt,The following statement contains a magic number: return (UInt32)((padding + 3) & ~3);  
Magic Number,AlphaOmega.Debug,NativeMethods,C:\repos\DKorablin_PEReader\PEReader\NativeMethods.cs,AlignToInt,The following statement contains a magic number: return (UInt32)((padding + 3) & ~3);  
Magic Number,AlphaOmega.Debug.CorDirectory,ResourceTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\ResourceTable.cs,DecodeInt,The following statement contains a magic number: while (true) {  	Byte c = base.Parent.Parent.Header.ReadBytes (offset++' 1) [0];  	a |= ((c & 0x7F) << (b & 0x1F));  	b += 7;  	x++;  	if ((c & 0x80) == 0)  		break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory,ResourceTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\ResourceTable.cs,DecodeInt,The following statement contains a magic number: b += 7;  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: if (meta.HasValue) {  	UInt32 position = base.Directory.VirtualAddress + MetaData.SizeOfCor20Metadata1 + meta.Value.Length + MetaData.SizeOfCor20MetaData2;  	for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  		Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  		switch (header.Type) {  		case Cor.StreamHeaderType.StreamTable:  		case Cor.StreamHeaderType.StreamTableUnoptimized:  			//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  			yield return new StreamTables (this' header);  			break;  		case Cor.StreamHeaderType.Guid:  			yield return new GuidHeap (this' header);  			break;  		case Cor.StreamHeaderType.Blob:  			yield return new BlobHeap (this' header);  			break;  		case Cor.StreamHeaderType.String:  			yield return new StringHeap (this' header);  			break;  		case Cor.StreamHeaderType.UnicodeSting:  			yield return new USHeap (this' header);  			break;  		default:  			yield return new StreamHeader (this' header);  			break;  		}  		Int32 length = header.Name.Length + 1;  		Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  		position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  	}  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: if (meta.HasValue) {  	UInt32 position = base.Directory.VirtualAddress + MetaData.SizeOfCor20Metadata1 + meta.Value.Length + MetaData.SizeOfCor20MetaData2;  	for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  		Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  		switch (header.Type) {  		case Cor.StreamHeaderType.StreamTable:  		case Cor.StreamHeaderType.StreamTableUnoptimized:  			//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  			yield return new StreamTables (this' header);  			break;  		case Cor.StreamHeaderType.Guid:  			yield return new GuidHeap (this' header);  			break;  		case Cor.StreamHeaderType.Blob:  			yield return new BlobHeap (this' header);  			break;  		case Cor.StreamHeaderType.String:  			yield return new StringHeap (this' header);  			break;  		case Cor.StreamHeaderType.UnicodeSting:  			yield return new USHeap (this' header);  			break;  		default:  			yield return new StreamHeader (this' header);  			break;  		}  		Int32 length = header.Name.Length + 1;  		Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  		position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  	}  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: if (meta.HasValue) {  	UInt32 position = base.Directory.VirtualAddress + MetaData.SizeOfCor20Metadata1 + meta.Value.Length + MetaData.SizeOfCor20MetaData2;  	for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  		Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  		switch (header.Type) {  		case Cor.StreamHeaderType.StreamTable:  		case Cor.StreamHeaderType.StreamTableUnoptimized:  			//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  			yield return new StreamTables (this' header);  			break;  		case Cor.StreamHeaderType.Guid:  			yield return new GuidHeap (this' header);  			break;  		case Cor.StreamHeaderType.Blob:  			yield return new BlobHeap (this' header);  			break;  		case Cor.StreamHeaderType.String:  			yield return new StringHeap (this' header);  			break;  		case Cor.StreamHeaderType.UnicodeSting:  			yield return new USHeap (this' header);  			break;  		default:  			yield return new StreamHeader (this' header);  			break;  		}  		Int32 length = header.Name.Length + 1;  		Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  		position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  	}  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: if (meta.HasValue) {  	UInt32 position = base.Directory.VirtualAddress + MetaData.SizeOfCor20Metadata1 + meta.Value.Length + MetaData.SizeOfCor20MetaData2;  	for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  		Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  		switch (header.Type) {  		case Cor.StreamHeaderType.StreamTable:  		case Cor.StreamHeaderType.StreamTableUnoptimized:  			//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  			yield return new StreamTables (this' header);  			break;  		case Cor.StreamHeaderType.Guid:  			yield return new GuidHeap (this' header);  			break;  		case Cor.StreamHeaderType.Blob:  			yield return new BlobHeap (this' header);  			break;  		case Cor.StreamHeaderType.String:  			yield return new StringHeap (this' header);  			break;  		case Cor.StreamHeaderType.UnicodeSting:  			yield return new USHeap (this' header);  			break;  		default:  			yield return new StreamHeader (this' header);  			break;  		}  		Int32 length = header.Name.Length + 1;  		Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  		position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  	}  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  	Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  	switch (header.Type) {  	case Cor.StreamHeaderType.StreamTable:  	case Cor.StreamHeaderType.StreamTableUnoptimized:  		//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  		yield return new StreamTables (this' header);  		break;  	case Cor.StreamHeaderType.Guid:  		yield return new GuidHeap (this' header);  		break;  	case Cor.StreamHeaderType.Blob:  		yield return new BlobHeap (this' header);  		break;  	case Cor.StreamHeaderType.String:  		yield return new StringHeap (this' header);  		break;  	case Cor.StreamHeaderType.UnicodeSting:  		yield return new USHeap (this' header);  		break;  	default:  		yield return new StreamHeader (this' header);  		break;  	}  	Int32 length = header.Name.Length + 1;  	Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  	position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  	Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  	switch (header.Type) {  	case Cor.StreamHeaderType.StreamTable:  	case Cor.StreamHeaderType.StreamTableUnoptimized:  		//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  		yield return new StreamTables (this' header);  		break;  	case Cor.StreamHeaderType.Guid:  		yield return new GuidHeap (this' header);  		break;  	case Cor.StreamHeaderType.Blob:  		yield return new BlobHeap (this' header);  		break;  	case Cor.StreamHeaderType.String:  		yield return new StringHeap (this' header);  		break;  	case Cor.StreamHeaderType.UnicodeSting:  		yield return new USHeap (this' header);  		break;  	default:  		yield return new StreamHeader (this' header);  		break;  	}  	Int32 length = header.Name.Length + 1;  	Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  	position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  	Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  	switch (header.Type) {  	case Cor.StreamHeaderType.StreamTable:  	case Cor.StreamHeaderType.StreamTableUnoptimized:  		//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  		yield return new StreamTables (this' header);  		break;  	case Cor.StreamHeaderType.Guid:  		yield return new GuidHeap (this' header);  		break;  	case Cor.StreamHeaderType.Blob:  		yield return new BlobHeap (this' header);  		break;  	case Cor.StreamHeaderType.String:  		yield return new StringHeap (this' header);  		break;  	case Cor.StreamHeaderType.UnicodeSting:  		yield return new USHeap (this' header);  		break;  	default:  		yield return new StreamHeader (this' header);  		break;  	}  	Int32 length = header.Name.Length + 1;  	Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  	position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: for (Int32 loop = 0; loop < meta.Value.Streams; loop++) {  	Cor.STREAM_HEADER header = base.Parent.Parent.Header.PtrToStructure<Cor.STREAM_HEADER> (position);  	switch (header.Type) {  	case Cor.StreamHeaderType.StreamTable:  	case Cor.StreamHeaderType.StreamTableUnoptimized:  		//TODO: Не проверено. Пока ещё не нашёл ни одного файла с таким заголовком  		yield return new StreamTables (this' header);  		break;  	case Cor.StreamHeaderType.Guid:  		yield return new GuidHeap (this' header);  		break;  	case Cor.StreamHeaderType.Blob:  		yield return new BlobHeap (this' header);  		break;  	case Cor.StreamHeaderType.String:  		yield return new StringHeap (this' header);  		break;  	case Cor.StreamHeaderType.UnicodeSting:  		yield return new USHeap (this' header);  		break;  	default:  		yield return new StreamHeader (this' header);  		break;  	}  	Int32 length = header.Name.Length + 1;  	Int32 padding = ((length % 4) != 0) ? (4 - (length % 4)) : 0;  	position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  }  
Magic Number,AlphaOmega.Debug.CorDirectory,MetaData,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\MetaData.cs,GetStreams,The following statement contains a magic number: position += sizeof(UInt32) * 2 + (UInt32)length + (UInt32)padding;  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: switch (this.Column.ColumnType) {  case MetaColumnType.UInt16:  	this.RawValue = reader.ReadUInt16 ();  	this._value = (UInt16)this.RawValue;  	break;  case MetaColumnType.UInt32:  	this.RawValue = reader.ReadUInt32 ();  	this._value = (UInt32)this.RawValue;  	break;  case MetaColumnType.String:  	this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.StringHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Guid:  	this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.GuidHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Blob:  	this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.BlobHeap [(Int32)this.RawValue];  	break;  /*case MetaColumnType.UserString: 				this._value = this.Table.Root.MetaData.USHeap[(Int32)this.RawValue]; 			break;*/default:  	if (this.Column.IsCellPointer)//Указатель на другую таблицу  	 {  		MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  		this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  		this._value = new MetaCellPointer (this' this.RawValue);  		//TODO: Не понял необходимость сдвига исходя из типа таблицы.  		//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  	}  	else if (this.Column.IsCodedToken)//Coded token  	 {  		// Coded token (may need to be uncompressed from 2-byte form)  		UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  		MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  		Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  		Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  		Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  		this.RawValue = (UInt32)token;  		this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  		//this._value = new MetaCellCodedToken(this' this.RawValue);  	}  	break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: switch (this.Column.ColumnType) {  case MetaColumnType.UInt16:  	this.RawValue = reader.ReadUInt16 ();  	this._value = (UInt16)this.RawValue;  	break;  case MetaColumnType.UInt32:  	this.RawValue = reader.ReadUInt32 ();  	this._value = (UInt32)this.RawValue;  	break;  case MetaColumnType.String:  	this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.StringHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Guid:  	this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.GuidHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Blob:  	this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.BlobHeap [(Int32)this.RawValue];  	break;  /*case MetaColumnType.UserString: 				this._value = this.Table.Root.MetaData.USHeap[(Int32)this.RawValue]; 			break;*/default:  	if (this.Column.IsCellPointer)//Указатель на другую таблицу  	 {  		MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  		this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  		this._value = new MetaCellPointer (this' this.RawValue);  		//TODO: Не понял необходимость сдвига исходя из типа таблицы.  		//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  	}  	else if (this.Column.IsCodedToken)//Coded token  	 {  		// Coded token (may need to be uncompressed from 2-byte form)  		UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  		MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  		Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  		Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  		Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  		this.RawValue = (UInt32)token;  		this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  		//this._value = new MetaCellCodedToken(this' this.RawValue);  	}  	break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: switch (this.Column.ColumnType) {  case MetaColumnType.UInt16:  	this.RawValue = reader.ReadUInt16 ();  	this._value = (UInt16)this.RawValue;  	break;  case MetaColumnType.UInt32:  	this.RawValue = reader.ReadUInt32 ();  	this._value = (UInt32)this.RawValue;  	break;  case MetaColumnType.String:  	this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.StringHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Guid:  	this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.GuidHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Blob:  	this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.BlobHeap [(Int32)this.RawValue];  	break;  /*case MetaColumnType.UserString: 				this._value = this.Table.Root.MetaData.USHeap[(Int32)this.RawValue]; 			break;*/default:  	if (this.Column.IsCellPointer)//Указатель на другую таблицу  	 {  		MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  		this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  		this._value = new MetaCellPointer (this' this.RawValue);  		//TODO: Не понял необходимость сдвига исходя из типа таблицы.  		//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  	}  	else if (this.Column.IsCodedToken)//Coded token  	 {  		// Coded token (may need to be uncompressed from 2-byte form)  		UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  		MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  		Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  		Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  		Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  		this.RawValue = (UInt32)token;  		this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  		//this._value = new MetaCellCodedToken(this' this.RawValue);  	}  	break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: switch (this.Column.ColumnType) {  case MetaColumnType.UInt16:  	this.RawValue = reader.ReadUInt16 ();  	this._value = (UInt16)this.RawValue;  	break;  case MetaColumnType.UInt32:  	this.RawValue = reader.ReadUInt32 ();  	this._value = (UInt32)this.RawValue;  	break;  case MetaColumnType.String:  	this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.StringHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Guid:  	this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.GuidHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Blob:  	this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.BlobHeap [(Int32)this.RawValue];  	break;  /*case MetaColumnType.UserString: 				this._value = this.Table.Root.MetaData.USHeap[(Int32)this.RawValue]; 			break;*/default:  	if (this.Column.IsCellPointer)//Указатель на другую таблицу  	 {  		MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  		this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  		this._value = new MetaCellPointer (this' this.RawValue);  		//TODO: Не понял необходимость сдвига исходя из типа таблицы.  		//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  	}  	else if (this.Column.IsCodedToken)//Coded token  	 {  		// Coded token (may need to be uncompressed from 2-byte form)  		UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  		MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  		Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  		Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  		Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  		this.RawValue = (UInt32)token;  		this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  		//this._value = new MetaCellCodedToken(this' this.RawValue);  	}  	break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: switch (this.Column.ColumnType) {  case MetaColumnType.UInt16:  	this.RawValue = reader.ReadUInt16 ();  	this._value = (UInt16)this.RawValue;  	break;  case MetaColumnType.UInt32:  	this.RawValue = reader.ReadUInt32 ();  	this._value = (UInt32)this.RawValue;  	break;  case MetaColumnType.String:  	this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.StringHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Guid:  	this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.GuidHeap [(Int32)this.RawValue];  	break;  case MetaColumnType.Blob:  	this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  	this._value = this.Table.Root.Parent.BlobHeap [(Int32)this.RawValue];  	break;  /*case MetaColumnType.UserString: 				this._value = this.Table.Root.MetaData.USHeap[(Int32)this.RawValue]; 			break;*/default:  	if (this.Column.IsCellPointer)//Указатель на другую таблицу  	 {  		MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  		this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  		this._value = new MetaCellPointer (this' this.RawValue);  		//TODO: Не понял необходимость сдвига исходя из типа таблицы.  		//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  	}  	else if (this.Column.IsCodedToken)//Coded token  	 {  		// Coded token (may need to be uncompressed from 2-byte form)  		UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  		MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  		Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  		Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  		Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  		this.RawValue = (UInt32)token;  		this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  		//this._value = new MetaCellCodedToken(this' this.RawValue);  	}  	break;  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: this.RawValue = this.Table.Root.StreamTableHeader.StringIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: this.RawValue = this.Table.Root.StreamTableHeader.GuidIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: this.RawValue = this.Table.Root.StreamTableHeader.BlobIndexSize == 2 ? (UInt32)reader.ReadUInt16 () : reader.ReadUInt32 ();  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: if (this.Column.IsCellPointer)//Указатель на другую таблицу   {  	MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  	this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  	this._value = new MetaCellPointer (this' this.RawValue);  	//TODO: Не понял необходимость сдвига исходя из типа таблицы.  	//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  }  else if (this.Column.IsCodedToken)//Coded token   {  	// Coded token (may need to be uncompressed from 2-byte form)  	UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  	MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  	Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  	Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  	Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  	this.RawValue = (UInt32)token;  	this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  	//this._value = new MetaCellCodedToken(this' this.RawValue);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: if (this.Column.IsCellPointer)//Указатель на другую таблицу   {  	MetaTable refTable = this.Table.Root [(Cor.MetaTableType)this.Column.ColumnType];  	this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  	this._value = new MetaCellPointer (this' this.RawValue);  	//TODO: Не понял необходимость сдвига исходя из типа таблицы.  	//this.RawValue = (((uint)this.Column.Type << 24) | ((refTable.RowsCount < 65536) ? reader.ReadUInt16() : reader.ReadUInt32()));  }  else if (this.Column.IsCodedToken)//Coded token   {  	// Coded token (may need to be uncompressed from 2-byte form)  	UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  	MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  	Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  	Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  	Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  	this.RawValue = (UInt32)token;  	this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  	//this._value = new MetaCellCodedToken(this' this.RawValue);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: this.RawValue = ((refTable.RowsCount < 65536) ? reader.ReadUInt16 () : reader.ReadUInt32 ());  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaCell,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaCell.cs,MetaCell,The following statement contains a magic number: if (this.Column.IsCodedToken)//Coded token   {  	// Coded token (may need to be uncompressed from 2-byte form)  	UInt32 codedToken = this.Table.SizeOfColumn (this.Column.ColumnType) == 2 ? reader.ReadUInt16 () : reader.ReadUInt32 ();  	MetaColumnType[] columns = MetaTable.GetCodedTokenTypes (this.Column.ColumnType);  	Int32 tableIndex = ((Int32)codedToken) & ~(-1 << MetaCellCodedToken.CodedTokenBits [columns.Length]);  	Int32 index = ((Int32)codedToken) >> MetaCellCodedToken.CodedTokenBits [columns.Length];  	Int32 token = MetaCellCodedToken.ToToken (columns [tableIndex]' index);  	this.RawValue = (UInt32)token;  	this._value = new MetaCellCodedToken (this' (UInt32)index' columns [tableIndex]);  	//this._value = new MetaCellCodedToken(this' this.RawValue);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: switch (type) {  case MetaColumnType.UInt16:  	return 2;  case MetaColumnType.UInt32:  	return 4;  case MetaColumnType.String:  	return this.Root.StreamTableHeader.StringIndexSize;  case MetaColumnType.Blob:  	return this.Root.StreamTableHeader.BlobIndexSize;  case MetaColumnType.Guid:  	return this.Root.StreamTableHeader.GuidIndexSize;  default:  	if (MetaColumn.IsColumnCellPointer (type))  		//Указатель на другую таблицу  		return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  	//CodedToken  	MetaColumnType[] referredTypes = MetaTable.GetCodedTokenTypes (type);  	UInt32 maxRows = 0;  	foreach (MetaColumnType referredType in referredTypes)  		if (referredType != MetaColumnType.UserString)//but what if there is a large user string table?  		 {  			UInt32 rows = (UInt32)this.Root.GetRowsCount ((Cor.MetaTableType)referredType);  			if (maxRows < rows)  				maxRows = rows;  		}  	maxRows = maxRows << MetaCellCodedToken.CodedTokenBits [referredTypes.Length];  	return (UInt32)(maxRows < 65536 ? 2 : 4);  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return 2;  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return 4;  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: if (MetaColumn.IsColumnCellPointer (type))  	//Указатель на другую таблицу  	return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: if (MetaColumn.IsColumnCellPointer (type))  	//Указатель на другую таблицу  	return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: if (MetaColumn.IsColumnCellPointer (type))  	//Указатель на другую таблицу  	return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(this.Root.GetRowsCount ((Cor.MetaTableType)type) < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(maxRows < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(maxRows < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,MetaTable,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\MetaTable.cs,SizeOfColumn,The following statement contains a magic number: return (UInt32)(maxRows < 65536 ? 2 : 4);  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0x80) == 0) {  	padding = 1;  	return result;  }  else if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: if ((result & 0xC0) == 0x80) {  	padding = 2;  	return ((result & 0x3F) << 8) | bytes [position + 1];  }  else {  	padding = 3;  	return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  }  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: padding = 2;  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 8) | bytes [position + 1];  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: padding = 3;  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  
Magic Number,AlphaOmega.Debug.CorDirectory.Meta,BlobHeap,C:\repos\DKorablin_PEReader\PEReader\CorDirectory\Meta\BlobHeap.cs,GetStreamLength,The following statement contains a magic number: return ((result & 0x3F) << 24) | (bytes [position + 1] << 16) | (bytes [position + 2] << 8) | bytes [position + 3];  
Magic Number,AlphaOmega.Debug.NTDirectory.Resources,ResourceString,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceString.cs,GetEnumerator,The following statement contains a magic number: using (PinnedBufferReader reader = base.CreateDataReader ())  	while (padding < reader.Length) {  		UInt16 length = reader.BytesToStructure<UInt16> (ref padding);  		length *= 2;  		String value = Encoding.Unicode.GetString (reader.GetBytes (padding' length));  		//if(value.Length > 0)  		yield return new StringItem () {  			ID = id'  			Value = value'  		};  		id++;  		padding += length;  	}  
Magic Number,AlphaOmega.Debug.NTDirectory.Resources,ResourceString,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceString.cs,GetEnumerator,The following statement contains a magic number: while (padding < reader.Length) {  	UInt16 length = reader.BytesToStructure<UInt16> (ref padding);  	length *= 2;  	String value = Encoding.Unicode.GetString (reader.GetBytes (padding' length));  	//if(value.Length > 0)  	yield return new StringItem () {  		ID = id'  		Value = value'  	};  	id++;  	padding += length;  }  
Magic Number,AlphaOmega.Debug.NTDirectory.Resources,ResourceString,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceString.cs,GetEnumerator,The following statement contains a magic number: length *= 2;  
Magic Number,AlphaOmega.Debug.NTDirectory.Resources,ResourceVersion,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceVersion.cs,GetFileInfo,The following statement contains a magic number: using (PinnedBufferReader reader = base.CreateDataReader ()) {  	List<VersionData> result = new List<VersionData> ();  	while (padding < reader.Length && result.Count < 2)  		result.Add (this.GetVersionData (reader' ref padding));  	return result.ToArray ();  }  
Magic Number,AlphaOmega.Debug.NTDirectory.Resources,ResourceVersion,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\Resources\ResourceVersion.cs,GetFileInfo,The following statement contains a magic number: while (padding < reader.Length && result.Count < 2)  	result.Add (this.GetVersionData (reader' ref padding));  
Magic Number,AlphaOmega.Debug.NTDirectory,RelocationSection,C:\repos\DKorablin_PEReader\PEReader\NTDirectory\RelocationSection.cs,RelocationSection,The following statement contains a magic number: this._type = (WinNT.IMAGE_REL_BASED)((section & 0xf000) >> 12);  
