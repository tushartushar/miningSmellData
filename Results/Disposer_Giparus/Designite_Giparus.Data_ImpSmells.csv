Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Giparus.Data.Connector.Mongo,DataConnector,C:\repos\Disposer_Giparus\Giparus.Data\Connector\Mongo\DataConnector.cs,RegisterIdGenerator,The method has 8 parameters.
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1)  	this.Shape = GeoType.Point;  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1)  	this.Shape = GeoType.Point;  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 2)  	this.Shape = GeoType.Point;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 3) {  	this.Shape = GeoType.LineString;  	var index = this.NodeIds.Count - 1;  	this.NodeIds.RemoveAt (index);  }  else  	this.Shape = GeoType.Polygon;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1)  	this.Shape = GeoType.Point;  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1)  	this.Shape = GeoType.Point;  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2)  		this.Shape = GeoType.Point;  	if (this.NodeIds.Count == 3) {  		this.Shape = GeoType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else  		this.Shape = GeoType.Polygon;  }  else  	this.Shape = GeoType.LineString;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 2)  	this.Shape = GeoType.Point;  
Magic Number,Giparus.Data.Model.MongoModel,Way,C:\repos\Disposer_Giparus\Giparus.Data\Model\MongoModel\Way.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 3) {  	this.Shape = GeoType.LineString;  	var index = this.NodeIds.Count - 1;  	this.NodeIds.RemoveAt (index);  }  else  	this.Shape = GeoType.Polygon;  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1) {  	this.Shape = OpenGisGeographyType.Point;  	builder.BeginGeography (OpenGisGeographyType.Point);  }  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1) {  	this.Shape = OpenGisGeographyType.Point;  	builder.BeginGeography (OpenGisGeographyType.Point);  }  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 2) {  	builder.BeginGeography (OpenGisGeographyType.Point);  	this.Shape = OpenGisGeographyType.Point;  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 3) {  	builder.BeginGeography (OpenGisGeographyType.LineString);  	this.Shape = OpenGisGeographyType.LineString;  	var index = this.NodeIds.Count - 1;  	this.NodeIds.RemoveAt (index);  }  else {  	this.Shape = OpenGisGeographyType.Polygon;  	builder.BeginGeography (OpenGisGeographyType.Polygon);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1) {  	this.Shape = OpenGisGeographyType.Point;  	builder.BeginGeography (OpenGisGeographyType.Point);  }  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 1) {  	this.Shape = OpenGisGeographyType.Point;  	builder.BeginGeography (OpenGisGeographyType.Point);  }  else if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.First ().Equals (this.NodeIds.Last ())) {  	if (this.NodeIds.Count == 2) {  		builder.BeginGeography (OpenGisGeographyType.Point);  		this.Shape = OpenGisGeographyType.Point;  	}  	if (this.NodeIds.Count == 3) {  		builder.BeginGeography (OpenGisGeographyType.LineString);  		this.Shape = OpenGisGeographyType.LineString;  		var index = this.NodeIds.Count - 1;  		this.NodeIds.RemoveAt (index);  	}  	else {  		this.Shape = OpenGisGeographyType.Polygon;  		builder.BeginGeography (OpenGisGeographyType.Polygon);  	}  }  else {  	this.Shape = OpenGisGeographyType.LineString;  	builder.BeginGeography (OpenGisGeographyType.LineString);  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 2) {  	builder.BeginGeography (OpenGisGeographyType.Point);  	this.Shape = OpenGisGeographyType.Point;  }  
Magic Number,Giparus.Data.Model.SqlModel,SqlWay,C:\repos\Disposer_Giparus\Giparus.Data\Model\SqlModel\SqlWay.cs,MakeWay,The following statement contains a magic number: if (this.NodeIds.Count == 3) {  	builder.BeginGeography (OpenGisGeographyType.LineString);  	this.Shape = OpenGisGeographyType.LineString;  	var index = this.NodeIds.Count - 1;  	this.NodeIds.RemoveAt (index);  }  else {  	this.Shape = OpenGisGeographyType.Polygon;  	builder.BeginGeography (OpenGisGeographyType.Polygon);  }  
