Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,GenerateSchema,The method has 132 lines of code.
Long Method,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The method has 230 lines of code.
Long Method,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The method has 116 lines of code.
Long Method,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The method has 174 lines of code.
Complex Method,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,HandleButtonClick,Cyclomatic complexity of the method is 13
Complex Method,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,HandleValidating,Cyclomatic complexity of the method is 15
Complex Method,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,ConvertSqlDataType,Cyclomatic complexity of the method is 30
Complex Method,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,Initialize,Cyclomatic complexity of the method is 10
Long Parameter List,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The method has 5 parameters.
Long Parameter List,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The method has 6 parameters.
Long Parameter List,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,AddContentValue,The method has 6 parameters.
Long Parameter List,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The method has 5 parameters.
Long Parameter List,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,UpgradeDbComment,The method has 5 parameters.
Long Parameter List,Dabay6.Android.ContentProvider.Json,LowercaseResolver,C:\repos\remelpugh_android-code-generators\ContentProvider\Json\LowercaseResolver.cs,CreateProperties,The method has 6 parameters.
Long Statement,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,ShowQuestionMessageBox,The length of the statement  "	return MessageBox.Show (message' Text' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2); " is 122.
Long Statement,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,DefaultValue,The length of the statement  "		if (string.Equals (type' "string"' StringComparison.OrdinalIgnoreCase) || string.Equals (type' "text"' StringComparison.OrdinalIgnoreCase)) { " is 141.
Long Statement,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,Initialize,The length of the statement  "	else if (field.Type.Equals ("int"' StringComparison.OrdinalIgnoreCase) || field.Type.Equals ("integer"' StringComparison.OrdinalIgnoreCase) || field.Type.Equals ("date"' StringComparison.OrdinalIgnoreCase)) { " is 208.
Long Statement,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,Initialize,The length of the statement  "	else if (field.Type.Equals ("float"' StringComparison.OrdinalIgnoreCase) || field.Type.Equals ("real"' StringComparison.OrdinalIgnoreCase)) { " is 141.
Long Statement,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,Initialize,The length of the statement  "	else if (field.Type.Equals ("string"' StringComparison.OrdinalIgnoreCase) || field.Type.Equals ("text"' StringComparison.OrdinalIgnoreCase)) { " is 142.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "						indexes.Append (Constants.Tab3).Append ("db.execSQL(\"CREATE INDEX ").Append (table.Name).Append ("_").Append (field.Name).Append (" on \" + TABLE_NAME + \"(\" + Columns.").Append (constantName).Append (".getName() + \");\");\n"); " is 230.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "							bulkValues.AppendFormat ("{0}value = values.getAsString(Columns.{1}.getName());\n"' Constants.Tab3' constantName).AppendFormat ("{0}stmt.bindString(i++' value != null ? value : \"\");\n"' Constants.Tab3); " is 204.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "					enums.AppendFormat ("{0}{1}(\"{2}\""' Constants.Tab3' field.ConstantName' name).AppendFormat ("' \"{0}\"' true)"' field.DatabaseType); " is 134.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "						upgrade.AppendFormat (contentSubClassUpgrade' version' upgradeTable' hasPreviousPrimaryKey ? string.Format (Constants.PrimaryKey' upgradeTableKey) : ""' upgradeInsertFields); " is 174.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "				subClasses.AppendFormat (contentSubClass' table.ClassName' db.ClassesPrefix' table.Name' db.ClassesPrefix.ToLower ()' table.Name.ToLower ()' enums' projection' create' hasPreviousPrimaryKey ? string.Format (Constants.PrimaryKey' createKey) : ""' indexes' bulkFields' bulkParams' hasTextField ? Constants.BulkStringValue : ""' bulkValues' table.Version' upgradeComment' upgrade); " is 378.
Long Statement,Dabay6.Android.ContentProvider.Generators,ContractClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ContractClassGenerator.cs,Generate,The length of the statement  "			var content = string.Format (contentClass' db.PackageName' db.ClassesPrefix' subClasses' db.ProviderFolder' db.ProviderFolder + Constants.Util); " is 144.
Long Statement,Dabay6.Android.ContentProvider.Generators,DatabaseHelperGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DatabaseHelperGenerator.cs,Generate,The length of the statement  "			imports.AppendFormat ("import {0}.{1}.{2}Contract.{3};\n"' db.PackageName' db.ProviderFolder' db.ClassesPrefix' table.ClassName); " is 129.
Long Statement,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The length of the statement  "								values.AppendFormat (type.Equals ("string"' Constants.IgnoreCase) ? "if (TextUtils.isEmpty({0}.{1}{2}())) {{\n" : "if ({0}.{1}{2}() == null) {{\n"' name.ToLower ()' getter' propertyName).AppendFormat ("{0}values.putNull(name);\n{1}}}\n{1}else {{\n"' Constants.Tab3' Constants.Tab2); " is 282.
Long Statement,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The length of the statement  "							loader.AppendFormat ("\n{0}index = cursor.getColumnIndex(Columns.{1}.getName());\n"' Constants.Tab2' constantName).AppendFormat ("{0}if (index != -1) {{\n"' Constants.Tab2).AppendFormat ("{0}{1}.{2}{3}"' Constants.Tab3' name.ToLower ()' setter' propertyName).AppendFormat ("(cursor.getInt(Columns.{0}.getIndex()) == 1);\n"' constantName).AppendFormat ("{0}}}\n"' Constants.Tab2); " is 379.
Long Statement,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The length of the statement  "					packageName = string.Format (packageName' db.PackageName' db.ProviderFolder.IsEmpty () ? "" : "." + db.ProviderFolder' db.ClassesPrefix' table.ClassName); " is 154.
Long Statement,Dabay6.Android.ContentProvider.Generators,DataTransferObjectGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\DataTransferObjectGenerator.cs,Generate,The length of the statement  "					var content = string.Format (dto' db.PackageName' name' member' getSet' read' write' packageName' loader' name.ToLower ()' values); " is 131.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			imports.AppendFormat ("import {0}.{1}.{2}Contract.{3};\n"' db.PackageName' db.ProviderFolder' db.ClassesPrefix' table.ClassName); " is 129.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			var idFieldName = (field == null) ? "" : string.Format ("{0}.Columns.{1}.getName()"' table.ClassName' field.ConstantName); " is 122.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			codes.Append (Constants.Tab1).AppendFormat ("private static final int {0} = 0x{1};\n"' table.ConstantName' codeIdentifier); " is 123.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}' new UriType({0}' {1}.TABLE_NAME' {1}.TABLE_NAME' {1}.TYPE_ELEM_TYPE' {2}));\n"' table.ConstantName' table.ClassName' idFieldName); " is 191.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			codes.Append (Constants.Tab1).AppendFormat ("private static final int {0}_ID = 0x{1};"' table.ConstantName' ++codeIdentifier); " is 126.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}_ID' new UriType({0}_ID' {1}.TABLE_NAME + \"/#\"' {1}.TABLE_NAME' {1}.TYPE_DIR_TYPE' {2}));"' table.ConstantName' table.ClassName' idFieldName); " is 203.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "					UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddTable' table.ClassName)); " is 136.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "						UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddField' upgradeCommentFields' table.ClassName' upgradeFields.Count > 1 ? "s" : "")); " is 194.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "				upgradeComment.AppendFormat (Constants.UpgradeVersionMulti' minUpgradeWithoutChanges' db.Version' Constants.UpgradeNoChanges); " is 126.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			var code = string.Format (Resources.expanded_selection_id' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings)' table.Name); " is 197.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "			code = string.Format (Resources.expanded_selection' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings)); " is 178.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The length of the statement  "		var content = string.Format (Resources.provider' db.PackageName' imports' db.ClassesPrefix' db.AuthorityPackage' codes' saveCaseId' saveCaseNoId' bulk' db.ProviderFolder' db.Version' upgradeComment' db.Name' db.ProviderFolder + Constants.Util' caseId' caseNoId' joinId' joinNoId' uri); " is 285.
Long Statement,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,UpgradeDbComment,The length of the statement  "	sb.Append (first ? string.Format (Constants.UpgradeVersionVersion' version' content) : string.Format (Constants.UpgradeVersionOther' content)); " is 143.
Long Statement,Dabay6.Android.ContentProvider.Provider,PortableSettingsProvider,C:\repos\remelpugh_android-code-generators\ContentProvider\Provider\PortableSettingsProvider.cs,SetSetting,The length of the statement  "	//        SettingNode.InnerXml = property.SerializedValue.ToString().Replace(@"<?xml version=""1.0"" encoding=""utf-16""?>"' ""); " is 129.
Long Statement,Dabay6.Android.ContentProvider.Schema,Join,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Join.cs,Equals,The length of the statement  "	return string.Equals (TableName' other.TableName' StringComparison.OrdinalIgnoreCase) && string.Equals (ForeignKey' other.ForeignKey' StringComparison.OrdinalIgnoreCase) && Field.Equals (other.Field); " is 200.
Long Statement,Dabay6.Android.ContentProvider.Schema,SchemaDescription,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\SchemaDescription.cs,IsValid,The length of the statement  "	return !(db.PackageName.IsEmpty () || db.ClassesPrefix.IsEmpty () || db.Name.IsEmpty () || schema.Tables == null || schema.Tables.Count == 0); " is 142.
Long Statement,Dabay6.Android.ContentProvider.Schema,Table,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Table.cs,Equals,The length of the statement  "	return Fields.SequenceEqual (other.Fields' Field.FieldComparer) && string.Equals (Name' other.Name' StringComparison.OrdinalIgnoreCase); " is 136.
Magic Number,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,GenerateCode,The following statement contains a magic number: progressBar.Maximum = 3 + (3 * tableCount) + (2 * tableCount);  
Magic Number,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,GenerateCode,The following statement contains a magic number: progressBar.Maximum = 3 + (3 * tableCount) + (2 * tableCount);  
Magic Number,Dabay6.Android.ContentProvider,MainForm,C:\repos\remelpugh_android-code-generators\ContentProvider\MainForm.cs,GenerateCode,The following statement contains a magic number: progressBar.Maximum = 3 + (3 * tableCount) + (2 * tableCount);  
Magic Number,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The following statement contains a magic number: return Task.Run (() =>  {  	var bulk = new StringBuilder ();  	var caseId = new StringBuilder ();  	var caseNoId = new StringBuilder ();  	var codeIdentifier = 10000;  	var codes = new StringBuilder ();  	//var create = new StringBuilder();  	var db = Schema.Database;  	var imports = new StringBuilder ();  	var tables = Schema.Tables;  	var uri = new StringBuilder ();  	//var upgrade = new StringBuilder();  	var upgradeComment = new StringBuilder ();  	var upgradeCommentFields = new StringBuilder ();  	tables.Sort ((table1' table2) => String.Compare (table1.Name' table2.Name' StringComparison.Ordinal));  	for (int i = 0' tableCount = tables.Count; i < tableCount; i++) {  		var isNotLast = i != tableCount - 1;  		var table = tables [i];  		imports.AppendFormat ("import {0}.{1}.{2}Contract.{3};\n"' db.PackageName' db.ProviderFolder' db.ClassesPrefix' table.ClassName);  		var field = table.Fields.FirstOrDefault (x => x.IsId);  		var idFieldName = (field == null) ? "" : string.Format ("{0}.Columns.{1}.getName()"' table.ClassName' field.ConstantName);  		codes.Append (Constants.Tab1).AppendFormat ("private static final int {0} = 0x{1};\n"' table.ConstantName' codeIdentifier);  		uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}' new UriType({0}' {1}.TABLE_NAME' {1}.TABLE_NAME' {1}.TYPE_ELEM_TYPE' {2}));\n"' table.ConstantName' table.ClassName' idFieldName);  		codes.Append (Constants.Tab1).AppendFormat ("private static final int {0}_ID = 0x{1};"' table.ConstantName' ++codeIdentifier);  		uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}_ID' new UriType({0}_ID' {1}.TABLE_NAME + \"/#\"' {1}.TABLE_NAME' {1}.TYPE_DIR_TYPE' {2}));"' table.ConstantName' table.ClassName' idFieldName);  		if (isNotLast) {  			codes.Append ("\n");  			uri.Append ("\n");  		}  		//create.AppendFormat("{0}{1}.createTable(db);\n"' Constants.Tab3' table.ClassName);  		//upgrade.AppendFormat("{0}{1}.upgradeTable(db' oldVersion' newVersion);\n"' Constants.Tab3'  		//                     table.ClassName);  		caseId.AppendFormat ("{0}case {1}_ID:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseId.Append ("\n");  		}  		caseNoId.AppendFormat ("{0}case {1}:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseNoId.Append ("\n");  		}  		bulk.AppendFormat (Resources.provider_bulk' table.ConstantName' table.ClassName);  		codeIdentifier++;  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var saveCaseId = caseId.ToString ();  	var saveCaseNoId = caseNoId.ToString ();  	// Upgrade comments in the provider  	var minUpgradeWithoutChanges = -1;  	for (var version = 2; version <= db.Version; version++) {  		var first = true;  		upgradeCommentFields.Clear ();  		foreach (var table in tables) {  			if (table.Version == version) {  				UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddTable' table.ClassName));  				first = false;  				minUpgradeWithoutChanges = -1;  			}  			if (table.UpgradeFieldMap.ContainsKey (version)) {  				var upgradeFields = table.UpgradeFieldMap [version];  				if (upgradeFields != null) {  					var firstField = true;  					foreach (var field in upgradeFields) {  						if (!firstField) {  							upgradeCommentFields.Append ("' ");  						}  						firstField = false;  						upgradeCommentFields.Append (field.ConstantName);  					}  					UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddField' upgradeCommentFields' table.ClassName' upgradeFields.Count > 1 ? "s" : ""));  					first = false;  					minUpgradeWithoutChanges = -1;  				}  			}  		}  		// No changes in this version  		if (first && minUpgradeWithoutChanges == -1) {  			minUpgradeWithoutChanges = version;  		}  	}  	if (minUpgradeWithoutChanges != -1) {  		if (minUpgradeWithoutChanges == db.Version) {  			// Only one without change  			upgradeComment.AppendFormat (Constants.UpgradeVersionVersion' minUpgradeWithoutChanges' Constants.UpgradeNoChanges);  		}  		else {  			// Multiple versions with changes  			upgradeComment.AppendFormat (Constants.UpgradeVersionMulti' minUpgradeWithoutChanges' db.Version' Constants.UpgradeNoChanges);  		}  	}  	var joins = (from x in tables  	where x.Joins != null && x.Joins.Count > 0  	select x).ToList ();  	tables = (from x in tables  	where x.Joins == null || x.Joins.Count == 0  	select x).ToList ();  	caseId.Clear ();  	caseNoId.Clear ();  	for (int i = 0' tableCount = tables.Count; i < tableCount; i++) {  		var isNotLast = i != tableCount - 1;  		var table = tables [i];  		caseId.AppendFormat ("{0}case {1}_ID:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseId.Append ("\n");  		}  		caseNoId.AppendFormat ("{0}case {1}:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseNoId.Append ("\n");  		}  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var joinId = new StringBuilder ();  	var joinNoId = new StringBuilder ();  	foreach (var table in joins) {  		var joinTables = table.Joins;  		var tableJoin = new StringBuilder ();  		tableJoin.AppendFormat ("\"{0} "' table.Name);  		for (int i = 0' joinCount = joinTables.Count; i < joinCount; i++) {  			var isNotFirst = i != 0;  			var join = joinTables [i];  			if (isNotFirst) {  				tableJoin.Append (" ");  			}  			tableJoin.AppendFormat ("LEFT OUTER JOIN {0} ON {1}.{2} = {0}._id"' join.TableName' table.Name' join.ForeignKey);  		}  		tableJoin.Append ("\"");  		var mappings = new StringBuilder ();  		var mappedFields = (from x in table.Fields  		where !x.MapTable.IsEmpty ()  		select x).ToList ();  		foreach (var mappendField in mappedFields) {  			mappings.AppendFormat (Constants.MapToTable' "\"" + mappendField.Name + "\""' mappendField.MapTable);  		}  		foreach (var join in joinTables) {  			var field = join.Field;  			mappings.AppendFormat (Constants.MapToTable' "\"" + join.ForeignKey + "\""' table.Name);  			if (!field.MapTable.IsEmpty ()) {  				mappings.AppendFormat (Constants.MapToTable' "\"" + field.Name + "\""' field.MapTable);  			}  		}  		var code = string.Format (Resources.expanded_selection_id' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings)' table.Name);  		joinId.AppendFormat ("{0}case {1}_ID: {{\n"' Constants.Tab3' table.ConstantName);  		joinId.AppendFormat ("{0}{1}}}\n"' code' Constants.Tab3);  		code = string.Format (Resources.expanded_selection' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings));  		joinNoId.AppendFormat ("{0}case {1}: {{\n"' Constants.Tab3' table.ConstantName);  		joinNoId.AppendFormat ("{0}{1}}}\n"' code' Constants.Tab3);  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var content = string.Format (Resources.provider' db.PackageName' imports' db.ClassesPrefix' db.AuthorityPackage' codes' saveCaseId' saveCaseNoId' bulk' db.ProviderFolder' db.Version' upgradeComment' db.Name' db.ProviderFolder + Constants.Util' caseId' caseNoId' joinId' joinNoId' uri);  	return new GenerationResult {  		Content = new List<string> {  			content  		}'  		Path = new List<string> {  			Database.GeneratePath (db' path) + "Provider.java"  		}  	};  });  
Magic Number,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The following statement contains a magic number: return Task.Run (() =>  {  	var bulk = new StringBuilder ();  	var caseId = new StringBuilder ();  	var caseNoId = new StringBuilder ();  	var codeIdentifier = 10000;  	var codes = new StringBuilder ();  	//var create = new StringBuilder();  	var db = Schema.Database;  	var imports = new StringBuilder ();  	var tables = Schema.Tables;  	var uri = new StringBuilder ();  	//var upgrade = new StringBuilder();  	var upgradeComment = new StringBuilder ();  	var upgradeCommentFields = new StringBuilder ();  	tables.Sort ((table1' table2) => String.Compare (table1.Name' table2.Name' StringComparison.Ordinal));  	for (int i = 0' tableCount = tables.Count; i < tableCount; i++) {  		var isNotLast = i != tableCount - 1;  		var table = tables [i];  		imports.AppendFormat ("import {0}.{1}.{2}Contract.{3};\n"' db.PackageName' db.ProviderFolder' db.ClassesPrefix' table.ClassName);  		var field = table.Fields.FirstOrDefault (x => x.IsId);  		var idFieldName = (field == null) ? "" : string.Format ("{0}.Columns.{1}.getName()"' table.ClassName' field.ConstantName);  		codes.Append (Constants.Tab1).AppendFormat ("private static final int {0} = 0x{1};\n"' table.ConstantName' codeIdentifier);  		uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}' new UriType({0}' {1}.TABLE_NAME' {1}.TABLE_NAME' {1}.TYPE_ELEM_TYPE' {2}));\n"' table.ConstantName' table.ClassName' idFieldName);  		codes.Append (Constants.Tab1).AppendFormat ("private static final int {0}_ID = 0x{1};"' table.ConstantName' ++codeIdentifier);  		uri.Append (Constants.Tab2).AppendFormat ("uriTypes.put({0}_ID' new UriType({0}_ID' {1}.TABLE_NAME + \"/#\"' {1}.TABLE_NAME' {1}.TYPE_DIR_TYPE' {2}));"' table.ConstantName' table.ClassName' idFieldName);  		if (isNotLast) {  			codes.Append ("\n");  			uri.Append ("\n");  		}  		//create.AppendFormat("{0}{1}.createTable(db);\n"' Constants.Tab3' table.ClassName);  		//upgrade.AppendFormat("{0}{1}.upgradeTable(db' oldVersion' newVersion);\n"' Constants.Tab3'  		//                     table.ClassName);  		caseId.AppendFormat ("{0}case {1}_ID:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseId.Append ("\n");  		}  		caseNoId.AppendFormat ("{0}case {1}:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseNoId.Append ("\n");  		}  		bulk.AppendFormat (Resources.provider_bulk' table.ConstantName' table.ClassName);  		codeIdentifier++;  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var saveCaseId = caseId.ToString ();  	var saveCaseNoId = caseNoId.ToString ();  	// Upgrade comments in the provider  	var minUpgradeWithoutChanges = -1;  	for (var version = 2; version <= db.Version; version++) {  		var first = true;  		upgradeCommentFields.Clear ();  		foreach (var table in tables) {  			if (table.Version == version) {  				UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddTable' table.ClassName));  				first = false;  				minUpgradeWithoutChanges = -1;  			}  			if (table.UpgradeFieldMap.ContainsKey (version)) {  				var upgradeFields = table.UpgradeFieldMap [version];  				if (upgradeFields != null) {  					var firstField = true;  					foreach (var field in upgradeFields) {  						if (!firstField) {  							upgradeCommentFields.Append ("' ");  						}  						firstField = false;  						upgradeCommentFields.Append (field.ConstantName);  					}  					UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddField' upgradeCommentFields' table.ClassName' upgradeFields.Count > 1 ? "s" : ""));  					first = false;  					minUpgradeWithoutChanges = -1;  				}  			}  		}  		// No changes in this version  		if (first && minUpgradeWithoutChanges == -1) {  			minUpgradeWithoutChanges = version;  		}  	}  	if (minUpgradeWithoutChanges != -1) {  		if (minUpgradeWithoutChanges == db.Version) {  			// Only one without change  			upgradeComment.AppendFormat (Constants.UpgradeVersionVersion' minUpgradeWithoutChanges' Constants.UpgradeNoChanges);  		}  		else {  			// Multiple versions with changes  			upgradeComment.AppendFormat (Constants.UpgradeVersionMulti' minUpgradeWithoutChanges' db.Version' Constants.UpgradeNoChanges);  		}  	}  	var joins = (from x in tables  	where x.Joins != null && x.Joins.Count > 0  	select x).ToList ();  	tables = (from x in tables  	where x.Joins == null || x.Joins.Count == 0  	select x).ToList ();  	caseId.Clear ();  	caseNoId.Clear ();  	for (int i = 0' tableCount = tables.Count; i < tableCount; i++) {  		var isNotLast = i != tableCount - 1;  		var table = tables [i];  		caseId.AppendFormat ("{0}case {1}_ID:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseId.Append ("\n");  		}  		caseNoId.AppendFormat ("{0}case {1}:"' Constants.Tab3' table.ConstantName);  		if (isNotLast) {  			caseNoId.Append ("\n");  		}  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var joinId = new StringBuilder ();  	var joinNoId = new StringBuilder ();  	foreach (var table in joins) {  		var joinTables = table.Joins;  		var tableJoin = new StringBuilder ();  		tableJoin.AppendFormat ("\"{0} "' table.Name);  		for (int i = 0' joinCount = joinTables.Count; i < joinCount; i++) {  			var isNotFirst = i != 0;  			var join = joinTables [i];  			if (isNotFirst) {  				tableJoin.Append (" ");  			}  			tableJoin.AppendFormat ("LEFT OUTER JOIN {0} ON {1}.{2} = {0}._id"' join.TableName' table.Name' join.ForeignKey);  		}  		tableJoin.Append ("\"");  		var mappings = new StringBuilder ();  		var mappedFields = (from x in table.Fields  		where !x.MapTable.IsEmpty ()  		select x).ToList ();  		foreach (var mappendField in mappedFields) {  			mappings.AppendFormat (Constants.MapToTable' "\"" + mappendField.Name + "\""' mappendField.MapTable);  		}  		foreach (var join in joinTables) {  			var field = join.Field;  			mappings.AppendFormat (Constants.MapToTable' "\"" + join.ForeignKey + "\""' table.Name);  			if (!field.MapTable.IsEmpty ()) {  				mappings.AppendFormat (Constants.MapToTable' "\"" + field.Name + "\""' field.MapTable);  			}  		}  		var code = string.Format (Resources.expanded_selection_id' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings)' table.Name);  		joinId.AppendFormat ("{0}case {1}_ID: {{\n"' Constants.Tab3' table.ConstantName);  		joinId.AppendFormat ("{0}{1}}}\n"' code' Constants.Tab3);  		code = string.Format (Resources.expanded_selection' tableJoin' string.Format ("{0}{1}"' string.Format (Constants.MapToTable' "uriType.getIdColumnName()"' table.Name)' mappings));  		joinNoId.AppendFormat ("{0}case {1}: {{\n"' Constants.Tab3' table.ConstantName);  		joinNoId.AppendFormat ("{0}{1}}}\n"' code' Constants.Tab3);  		if (progress != null) {  			progress.Report (new ProgressResult {  				Name = this.GetType ().Name'  				Value = 1  			});  		}  	}  	var content = string.Format (Resources.provider' db.PackageName' imports' db.ClassesPrefix' db.AuthorityPackage' codes' saveCaseId' saveCaseNoId' bulk' db.ProviderFolder' db.Version' upgradeComment' db.Name' db.ProviderFolder + Constants.Util' caseId' caseNoId' joinId' joinNoId' uri);  	return new GenerationResult {  		Content = new List<string> {  			content  		}'  		Path = new List<string> {  			Database.GeneratePath (db' path) + "Provider.java"  		}  	};  });  
Magic Number,Dabay6.Android.ContentProvider.Generators,ProviderClassGenerator,C:\repos\remelpugh_android-code-generators\ContentProvider\Generators\ProviderClassGenerator.cs,Generate,The following statement contains a magic number: for (var version = 2; version <= db.Version; version++) {  	var first = true;  	upgradeCommentFields.Clear ();  	foreach (var table in tables) {  		if (table.Version == version) {  			UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddTable' table.ClassName));  			first = false;  			minUpgradeWithoutChanges = -1;  		}  		if (table.UpgradeFieldMap.ContainsKey (version)) {  			var upgradeFields = table.UpgradeFieldMap [version];  			if (upgradeFields != null) {  				var firstField = true;  				foreach (var field in upgradeFields) {  					if (!firstField) {  						upgradeCommentFields.Append ("' ");  					}  					firstField = false;  					upgradeCommentFields.Append (field.ConstantName);  				}  				UpgradeDbComment (upgradeComment' first' minUpgradeWithoutChanges' version' string.Format (Constants.UpgradeAddField' upgradeCommentFields' table.ClassName' upgradeFields.Count > 1 ? "s" : ""));  				first = false;  				minUpgradeWithoutChanges = -1;  			}  		}  	}  	// No changes in this version  	if (first && minUpgradeWithoutChanges == -1) {  		minUpgradeWithoutChanges = version;  	}  }  
Magic Number,Dabay6.Android.ContentProvider.Schema,Join,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Join.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = StringComparer.OrdinalIgnoreCase.GetHashCode (TableName);  	hashCode = (hashCode * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode (ForeignKey);  	hashCode = (hashCode * 397) ^ Field.GetHashCode ();  	return hashCode;  }  
Magic Number,Dabay6.Android.ContentProvider.Schema,Join,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Join.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = StringComparer.OrdinalIgnoreCase.GetHashCode (TableName);  	hashCode = (hashCode * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode (ForeignKey);  	hashCode = (hashCode * 397) ^ Field.GetHashCode ();  	return hashCode;  }  
Magic Number,Dabay6.Android.ContentProvider.Schema,Join,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Join.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode (ForeignKey);  
Magic Number,Dabay6.Android.ContentProvider.Schema,Join,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Join.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Field.GetHashCode ();  
Magic Number,Dabay6.Android.ContentProvider.Schema,Table,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Table.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = 0;  	if (Fields != null) {  		Fields.ForEach (x => hashCode ^= x.GetHashCode ());  	}  	return (hashCode * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode (Name);  }  
Magic Number,Dabay6.Android.ContentProvider.Schema,Table,C:\repos\remelpugh_android-code-generators\ContentProvider\Schema\Table.cs,GetHashCode,The following statement contains a magic number: return (hashCode * 397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode (Name);  
Missing Default,Dabay6.Android.ContentProvider.Extensions,FieldExtensions,C:\repos\remelpugh_android-code-generators\ContentProvider\Extensions\FieldExtensions.cs,ConvertSqlDataType,The following switch statement is missing a default case: switch (dbType) {  case DbType.Int16:  case DbType.Int32:  case DbType.Int64: {  	field.Type = "long";  	break;  }  }  
