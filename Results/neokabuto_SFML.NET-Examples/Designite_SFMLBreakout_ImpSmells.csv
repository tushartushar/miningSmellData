Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,Cyclomatic complexity of the method is 16
Long Statement,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The length of the statement  "				float diagonal2Position = -1.0f * diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y + hitBrick.Size.Y; " is 122.
Long Statement,SFMLBreakout,Brick,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,IsColliding,The length of the statement  "	float distSquared = ((circlecenter.X - closestX) * (circlecenter.X - closestX)) + ((circlecenter.Y - closestY) * (circlecenter.Y - closestY)); " is 142.
Long Statement,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,IsColliding,The length of the statement  "	float distSquared = ((circlecenter.X - closestX) * (circlecenter.X - closestX)) + ((circlecenter.Y - closestY) * (circlecenter.Y - closestY)); " is 142.
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,ResetBall,The following statement contains a magic number: Position = new Vector2f (Program.Window.Size.X / 2 - Radius' Program.Window.Size.Y - 200);  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,ResetBall,The following statement contains a magic number: Position = new Vector2f (Program.Window.Size.X / 2 - Radius' Program.Window.Size.Y - 200);  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Program.Paddle.IsColliding (this)) {  	nextvel.Y *= -1.0f;  	Position = new Vector2f (Position.X' Position.Y - (Position.Y + (Radius * 2) - Program.Paddle.Position.Y));  	// Calculate "surface friction" change to X-speed  	nextvel.X += Program.Paddle.Velocity.X / 2;  	if (Math.Abs (nextvel.Y) < Speed / 2) {  		nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  	}  	// Normalize to Speed  	float length = (float)Math.Sqrt (nextvel.X * nextvel.X + nextvel.Y * nextvel.Y);  	nextvel *= Speed / length;  }  else {  	List<Brick> tempBricks = new List<Brick> ();  	List<Brick> hitBricks = new List<Brick> ();  	foreach (Brick b in Program.Bricks) {  		if (b.IsColliding (this)) {  			// The ball has hit at least one brick this tick  			hitBricks.Add (b);  		}  		else {  			// The brick will still exist  			tempBricks.Add (b);  		}  	}  	Program.Bricks = tempBricks;  	if (hitBricks.Count > 0) {  		bool hitTop = false;  		bool hitLeft = false;  		bool hitRight = false;  		bool hitBottom = false;  		float centerY = Position.Y + Radius;  		float centerX = Position.X + Radius;  		foreach (Brick hitBrick in hitBricks) {  			// Determine collision results  			float diagonalslope = hitBrick.Size.Y / hitBrick.Size.X;  			// y = m (x - x1) + y1 ( with radius to check against center)  			float diagonal1Position = diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y;  			float diagonal2Position = -1.0f * diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y + hitBrick.Size.Y;  			if (centerY > diagonal1Position && centerY > diagonal2Position)// Above both' top side  			 {  				hitTop = true;  			}  			else if (centerY > diagonal1Position)// Above 1 but not 2' right side  			 {  				hitRight = true;  			}  			else if (centerY > diagonal2Position)// Below 1 but above 2' left side  			 {  				hitLeft = true;  			}  			else// Below both' bottom side  			 {  				hitBottom = true;  			}  		}  		// Change velocity based on collisions  		if (hitTop || hitBottom) {  			nextvel.Y *= -1.0f;  		}  		if (hitLeft || hitRight) {  			nextvel.X *= -1.0f;  		}  	}  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Program.Paddle.IsColliding (this)) {  	nextvel.Y *= -1.0f;  	Position = new Vector2f (Position.X' Position.Y - (Position.Y + (Radius * 2) - Program.Paddle.Position.Y));  	// Calculate "surface friction" change to X-speed  	nextvel.X += Program.Paddle.Velocity.X / 2;  	if (Math.Abs (nextvel.Y) < Speed / 2) {  		nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  	}  	// Normalize to Speed  	float length = (float)Math.Sqrt (nextvel.X * nextvel.X + nextvel.Y * nextvel.Y);  	nextvel *= Speed / length;  }  else {  	List<Brick> tempBricks = new List<Brick> ();  	List<Brick> hitBricks = new List<Brick> ();  	foreach (Brick b in Program.Bricks) {  		if (b.IsColliding (this)) {  			// The ball has hit at least one brick this tick  			hitBricks.Add (b);  		}  		else {  			// The brick will still exist  			tempBricks.Add (b);  		}  	}  	Program.Bricks = tempBricks;  	if (hitBricks.Count > 0) {  		bool hitTop = false;  		bool hitLeft = false;  		bool hitRight = false;  		bool hitBottom = false;  		float centerY = Position.Y + Radius;  		float centerX = Position.X + Radius;  		foreach (Brick hitBrick in hitBricks) {  			// Determine collision results  			float diagonalslope = hitBrick.Size.Y / hitBrick.Size.X;  			// y = m (x - x1) + y1 ( with radius to check against center)  			float diagonal1Position = diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y;  			float diagonal2Position = -1.0f * diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y + hitBrick.Size.Y;  			if (centerY > diagonal1Position && centerY > diagonal2Position)// Above both' top side  			 {  				hitTop = true;  			}  			else if (centerY > diagonal1Position)// Above 1 but not 2' right side  			 {  				hitRight = true;  			}  			else if (centerY > diagonal2Position)// Below 1 but above 2' left side  			 {  				hitLeft = true;  			}  			else// Below both' bottom side  			 {  				hitBottom = true;  			}  		}  		// Change velocity based on collisions  		if (hitTop || hitBottom) {  			nextvel.Y *= -1.0f;  		}  		if (hitLeft || hitRight) {  			nextvel.X *= -1.0f;  		}  	}  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Program.Paddle.IsColliding (this)) {  	nextvel.Y *= -1.0f;  	Position = new Vector2f (Position.X' Position.Y - (Position.Y + (Radius * 2) - Program.Paddle.Position.Y));  	// Calculate "surface friction" change to X-speed  	nextvel.X += Program.Paddle.Velocity.X / 2;  	if (Math.Abs (nextvel.Y) < Speed / 2) {  		nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  	}  	// Normalize to Speed  	float length = (float)Math.Sqrt (nextvel.X * nextvel.X + nextvel.Y * nextvel.Y);  	nextvel *= Speed / length;  }  else {  	List<Brick> tempBricks = new List<Brick> ();  	List<Brick> hitBricks = new List<Brick> ();  	foreach (Brick b in Program.Bricks) {  		if (b.IsColliding (this)) {  			// The ball has hit at least one brick this tick  			hitBricks.Add (b);  		}  		else {  			// The brick will still exist  			tempBricks.Add (b);  		}  	}  	Program.Bricks = tempBricks;  	if (hitBricks.Count > 0) {  		bool hitTop = false;  		bool hitLeft = false;  		bool hitRight = false;  		bool hitBottom = false;  		float centerY = Position.Y + Radius;  		float centerX = Position.X + Radius;  		foreach (Brick hitBrick in hitBricks) {  			// Determine collision results  			float diagonalslope = hitBrick.Size.Y / hitBrick.Size.X;  			// y = m (x - x1) + y1 ( with radius to check against center)  			float diagonal1Position = diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y;  			float diagonal2Position = -1.0f * diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y + hitBrick.Size.Y;  			if (centerY > diagonal1Position && centerY > diagonal2Position)// Above both' top side  			 {  				hitTop = true;  			}  			else if (centerY > diagonal1Position)// Above 1 but not 2' right side  			 {  				hitRight = true;  			}  			else if (centerY > diagonal2Position)// Below 1 but above 2' left side  			 {  				hitLeft = true;  			}  			else// Below both' bottom side  			 {  				hitBottom = true;  			}  		}  		// Change velocity based on collisions  		if (hitTop || hitBottom) {  			nextvel.Y *= -1.0f;  		}  		if (hitLeft || hitRight) {  			nextvel.X *= -1.0f;  		}  	}  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Program.Paddle.IsColliding (this)) {  	nextvel.Y *= -1.0f;  	Position = new Vector2f (Position.X' Position.Y - (Position.Y + (Radius * 2) - Program.Paddle.Position.Y));  	// Calculate "surface friction" change to X-speed  	nextvel.X += Program.Paddle.Velocity.X / 2;  	if (Math.Abs (nextvel.Y) < Speed / 2) {  		nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  	}  	// Normalize to Speed  	float length = (float)Math.Sqrt (nextvel.X * nextvel.X + nextvel.Y * nextvel.Y);  	nextvel *= Speed / length;  }  else {  	List<Brick> tempBricks = new List<Brick> ();  	List<Brick> hitBricks = new List<Brick> ();  	foreach (Brick b in Program.Bricks) {  		if (b.IsColliding (this)) {  			// The ball has hit at least one brick this tick  			hitBricks.Add (b);  		}  		else {  			// The brick will still exist  			tempBricks.Add (b);  		}  	}  	Program.Bricks = tempBricks;  	if (hitBricks.Count > 0) {  		bool hitTop = false;  		bool hitLeft = false;  		bool hitRight = false;  		bool hitBottom = false;  		float centerY = Position.Y + Radius;  		float centerX = Position.X + Radius;  		foreach (Brick hitBrick in hitBricks) {  			// Determine collision results  			float diagonalslope = hitBrick.Size.Y / hitBrick.Size.X;  			// y = m (x - x1) + y1 ( with radius to check against center)  			float diagonal1Position = diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y;  			float diagonal2Position = -1.0f * diagonalslope * (centerX - hitBrick.Position.X) + hitBrick.Position.Y + hitBrick.Size.Y;  			if (centerY > diagonal1Position && centerY > diagonal2Position)// Above both' top side  			 {  				hitTop = true;  			}  			else if (centerY > diagonal1Position)// Above 1 but not 2' right side  			 {  				hitRight = true;  			}  			else if (centerY > diagonal2Position)// Below 1 but above 2' left side  			 {  				hitLeft = true;  			}  			else// Below both' bottom side  			 {  				hitBottom = true;  			}  		}  		// Change velocity based on collisions  		if (hitTop || hitBottom) {  			nextvel.Y *= -1.0f;  		}  		if (hitLeft || hitRight) {  			nextvel.X *= -1.0f;  		}  	}  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: Position = new Vector2f (Position.X' Position.Y - (Position.Y + (Radius * 2) - Program.Paddle.Position.Y));  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: nextvel.X += Program.Paddle.Velocity.X / 2;  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Math.Abs (nextvel.Y) < Speed / 2) {  	nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: if (Math.Abs (nextvel.Y) < Speed / 2) {  	nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  }  
Magic Number,SFMLBreakout,Ball,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Ball.cs,Update,The following statement contains a magic number: nextvel.Y = Math.Sign (nextvel.Y) * Speed / 2;  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int x = 0; x < columns; x++) {  	for (int y = 0; y < rows; y++) {  		Brick b = new Brick ();  		b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  		b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  		// Generate color for Brick  		Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  		b.FillColor = c;  		Program.Bricks.Add (b);  	}  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: for (int y = 0; y < rows; y++) {  	Brick b = new Brick ();  	b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  	b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  	// Generate color for Brick  	Color c = new Color ((byte)rand.Next (100' 255)' (byte)rand.Next (100' 255)' (byte)rand.Next (100' 255));  	b.FillColor = c;  	Program.Bricks.Add (b);  }  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: b.Position = new Vector2f (x * brickwidth + 1' y * brickheight + 1 + 64);  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  
Magic Number,SFMLBreakout,BrickBuilder,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Brick.cs,SetupLevel,The following statement contains a magic number: b.Size = new Vector2f (brickwidth - 2' brickheight - 2);  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: MoveSpeed = 250;  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: Size = new Vector2f (100' 16);  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: Size = new Vector2f (100' 16);  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: Position = new Vector2f (Program.Window.Size.X / 2 - Size.X / 2' Program.Window.Size.Y - 64);  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: Position = new Vector2f (Program.Window.Size.X / 2 - Size.X / 2' Program.Window.Size.Y - 64);  
Magic Number,SFMLBreakout,Paddle,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Paddle.cs,Paddle,The following statement contains a magic number: Position = new Vector2f (Program.Window.Size.X / 2 - Size.X / 2' Program.Window.Size.Y - 64);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: Window = new RenderWindow (new VideoMode (800' 600)' "Hello SFML.Net"' Styles.None);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: Window = new RenderWindow (new VideoMode (800' 600)' "Hello SFML.Net"' Styles.None);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: builder.SetupLevel (9' 10);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: builder.SetupLevel (9' 10);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: while (Window.IsOpen) {  	// Update objects  	delta = clock.Restart ().AsSeconds ();  	Ball.Update (delta);  	Paddle.Update (delta);  	// Rebuild level if needed  	if (Bricks.Count == 0) {  		builder.SetupLevel (9' 10);  		Ball.ResetBall ();  	}  	Window.DispatchEvents ();  	// Display objects  	Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  	Window.Draw (Ball);  	Window.Draw (Paddle);  	foreach (Brick b in Bricks) {  		Window.Draw (b);  	}  	Window.Display ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: while (Window.IsOpen) {  	// Update objects  	delta = clock.Restart ().AsSeconds ();  	Ball.Update (delta);  	Paddle.Update (delta);  	// Rebuild level if needed  	if (Bricks.Count == 0) {  		builder.SetupLevel (9' 10);  		Ball.ResetBall ();  	}  	Window.DispatchEvents ();  	// Display objects  	Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  	Window.Draw (Ball);  	Window.Draw (Paddle);  	foreach (Brick b in Bricks) {  		Window.Draw (b);  	}  	Window.Display ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: while (Window.IsOpen) {  	// Update objects  	delta = clock.Restart ().AsSeconds ();  	Ball.Update (delta);  	Paddle.Update (delta);  	// Rebuild level if needed  	if (Bricks.Count == 0) {  		builder.SetupLevel (9' 10);  		Ball.ResetBall ();  	}  	Window.DispatchEvents ();  	// Display objects  	Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  	Window.Draw (Ball);  	Window.Draw (Paddle);  	foreach (Brick b in Bricks) {  		Window.Draw (b);  	}  	Window.Display ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: while (Window.IsOpen) {  	// Update objects  	delta = clock.Restart ().AsSeconds ();  	Ball.Update (delta);  	Paddle.Update (delta);  	// Rebuild level if needed  	if (Bricks.Count == 0) {  		builder.SetupLevel (9' 10);  		Ball.ResetBall ();  	}  	Window.DispatchEvents ();  	// Display objects  	Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  	Window.Draw (Ball);  	Window.Draw (Paddle);  	foreach (Brick b in Bricks) {  		Window.Draw (b);  	}  	Window.Display ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: while (Window.IsOpen) {  	// Update objects  	delta = clock.Restart ().AsSeconds ();  	Ball.Update (delta);  	Paddle.Update (delta);  	// Rebuild level if needed  	if (Bricks.Count == 0) {  		builder.SetupLevel (9' 10);  		Ball.ResetBall ();  	}  	Window.DispatchEvents ();  	// Display objects  	Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  	Window.Draw (Ball);  	Window.Draw (Paddle);  	foreach (Brick b in Bricks) {  		Window.Draw (b);  	}  	Window.Display ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: if (Bricks.Count == 0) {  	builder.SetupLevel (9' 10);  	Ball.ResetBall ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: if (Bricks.Count == 0) {  	builder.SetupLevel (9' 10);  	Ball.ResetBall ();  }  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: builder.SetupLevel (9' 10);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: builder.SetupLevel (9' 10);  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  
Magic Number,SFMLBreakout,Program,C:\repos\neokabuto_SFML.NET-Examples\SFMLBreakout\SFMLBreakout\Program.cs,Main,The following statement contains a magic number: Window.Clear (new Color ((byte)50' (byte)50' (byte)180));  
