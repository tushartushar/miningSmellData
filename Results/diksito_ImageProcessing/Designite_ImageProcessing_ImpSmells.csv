Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageProcessing,ArgumentsParser,C:\repos\diksito_ImageProcessing\ImageProcessing\Infrastructure\ArgumentsParser.cs,isValidParameter,Cyclomatic complexity of the method is 24
Complex Method,ImageProcessing,Image,C:\repos\diksito_ImageProcessing\ImageProcessing\Model\Image.cs,Rotate,Cyclomatic complexity of the method is 11
Complex Method,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,Cyclomatic complexity of the method is 13
Long Parameter List,ImageProcessing,Image,C:\repos\diksito_ImageProcessing\ImageProcessing\Model\Image.cs,Image,The method has 7 parameters.
Magic Number,ImageProcessing,ArgumentsParser,C:\repos\diksito_ImageProcessing\ImageProcessing\Infrastructure\ArgumentsParser.cs,IsValidArgs,The following statement contains a magic number: if (arguments.Length % 2 != 0)  	return false;  
Magic Number,ImageProcessing,Image,C:\repos\diksito_ImageProcessing\ImageProcessing\Model\Image.cs,Rotate,The following statement contains a magic number: switch (degrees) {  case 90:  	bitMap.RotateFlip (RotateFlipType.Rotate90FlipXY);  	break;  case 180:  	bitMap.RotateFlip (RotateFlipType.Rotate180FlipXY);  	break;  case 270:  	bitMap.RotateFlip (RotateFlipType.Rotate270FlipXY);  	break;  default:  	break;  }  
Magic Number,ImageProcessing,Image,C:\repos\diksito_ImageProcessing\ImageProcessing\Model\Image.cs,Rotate,The following statement contains a magic number: switch (degrees) {  case 90:  	bitMap.RotateFlip (RotateFlipType.Rotate90FlipXY);  	break;  case 180:  	bitMap.RotateFlip (RotateFlipType.Rotate180FlipXY);  	break;  case 270:  	bitMap.RotateFlip (RotateFlipType.Rotate270FlipXY);  	break;  default:  	break;  }  
Magic Number,ImageProcessing,Image,C:\repos\diksito_ImageProcessing\ImageProcessing\Model\Image.cs,Rotate,The following statement contains a magic number: switch (degrees) {  case 90:  	bitMap.RotateFlip (RotateFlipType.Rotate90FlipXY);  	break;  case 180:  	bitMap.RotateFlip (RotateFlipType.Rotate180FlipXY);  	break;  case 270:  	bitMap.RotateFlip (RotateFlipType.Rotate270FlipXY);  	break;  default:  	break;  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.Keys.Count () > 0 && ArgumentsParser.Commands.Values.Count () > 0) {  	if (!ArgumentsParser.Commands.Keys.Contains (Constants.COMMAND_FILE)) {  		Log.Error ("Please define file input path.");  		System.Environment.Exit (0);  	}  	// Get file and pass it to Image  	Image image = new Image (ArgumentsParser.Commands [Constants.COMMAND_FILE]);  	bool setDestinationPath = false;  	string destinationPath' parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_DEST' out destinationPath))  		setDestinationPath = true;  	// Resize image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_RESIZE' out parameter)) {  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 2) {  			// Only positive pixels  			if (parameterValues [0] > 0 && parameterValues [1] > 0) {  				Log.Info ("Resizing...");  				image.Resize (parameterValues [0]' parameterValues [1]);  			}  		}  	}  	// Crop image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  		// Croping image...  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 4) {  			Log.Info ("Croping...");  			image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  		}  	}  	// Rotate  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_ROTATE' out parameter)) {  		int degrees;  		if (int.TryParse (parameter' out degrees)) {  			image.Rotate (degrees);  			Log.Info ("Rotating...");  		}  	}  	#region Save image  	Log.Info ("Saving...");  	if (setDestinationPath)  		image.SaveAs (destinationPath);  	else  		image.Save ();  	#endregion  	// Free used resources  	image.Dispose ();  }  else {  	Log.Error ("Missing arguments!");  	System.Environment.Exit (0);  	// terminate the program  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.Keys.Count () > 0 && ArgumentsParser.Commands.Values.Count () > 0) {  	if (!ArgumentsParser.Commands.Keys.Contains (Constants.COMMAND_FILE)) {  		Log.Error ("Please define file input path.");  		System.Environment.Exit (0);  	}  	// Get file and pass it to Image  	Image image = new Image (ArgumentsParser.Commands [Constants.COMMAND_FILE]);  	bool setDestinationPath = false;  	string destinationPath' parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_DEST' out destinationPath))  		setDestinationPath = true;  	// Resize image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_RESIZE' out parameter)) {  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 2) {  			// Only positive pixels  			if (parameterValues [0] > 0 && parameterValues [1] > 0) {  				Log.Info ("Resizing...");  				image.Resize (parameterValues [0]' parameterValues [1]);  			}  		}  	}  	// Crop image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  		// Croping image...  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 4) {  			Log.Info ("Croping...");  			image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  		}  	}  	// Rotate  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_ROTATE' out parameter)) {  		int degrees;  		if (int.TryParse (parameter' out degrees)) {  			image.Rotate (degrees);  			Log.Info ("Rotating...");  		}  	}  	#region Save image  	Log.Info ("Saving...");  	if (setDestinationPath)  		image.SaveAs (destinationPath);  	else  		image.Save ();  	#endregion  	// Free used resources  	image.Dispose ();  }  else {  	Log.Error ("Missing arguments!");  	System.Environment.Exit (0);  	// terminate the program  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.Keys.Count () > 0 && ArgumentsParser.Commands.Values.Count () > 0) {  	if (!ArgumentsParser.Commands.Keys.Contains (Constants.COMMAND_FILE)) {  		Log.Error ("Please define file input path.");  		System.Environment.Exit (0);  	}  	// Get file and pass it to Image  	Image image = new Image (ArgumentsParser.Commands [Constants.COMMAND_FILE]);  	bool setDestinationPath = false;  	string destinationPath' parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_DEST' out destinationPath))  		setDestinationPath = true;  	// Resize image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_RESIZE' out parameter)) {  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 2) {  			// Only positive pixels  			if (parameterValues [0] > 0 && parameterValues [1] > 0) {  				Log.Info ("Resizing...");  				image.Resize (parameterValues [0]' parameterValues [1]);  			}  		}  	}  	// Crop image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  		// Croping image...  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 4) {  			Log.Info ("Croping...");  			image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  		}  	}  	// Rotate  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_ROTATE' out parameter)) {  		int degrees;  		if (int.TryParse (parameter' out degrees)) {  			image.Rotate (degrees);  			Log.Info ("Rotating...");  		}  	}  	#region Save image  	Log.Info ("Saving...");  	if (setDestinationPath)  		image.SaveAs (destinationPath);  	else  		image.Save ();  	#endregion  	// Free used resources  	image.Dispose ();  }  else {  	Log.Error ("Missing arguments!");  	System.Environment.Exit (0);  	// terminate the program  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.Keys.Count () > 0 && ArgumentsParser.Commands.Values.Count () > 0) {  	if (!ArgumentsParser.Commands.Keys.Contains (Constants.COMMAND_FILE)) {  		Log.Error ("Please define file input path.");  		System.Environment.Exit (0);  	}  	// Get file and pass it to Image  	Image image = new Image (ArgumentsParser.Commands [Constants.COMMAND_FILE]);  	bool setDestinationPath = false;  	string destinationPath' parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_DEST' out destinationPath))  		setDestinationPath = true;  	// Resize image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_RESIZE' out parameter)) {  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 2) {  			// Only positive pixels  			if (parameterValues [0] > 0 && parameterValues [1] > 0) {  				Log.Info ("Resizing...");  				image.Resize (parameterValues [0]' parameterValues [1]);  			}  		}  	}  	// Crop image  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  		// Croping image...  		List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  		if (parameterValues != null && parameterValues.Count == 4) {  			Log.Info ("Croping...");  			image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  		}  	}  	// Rotate  	parameter = string.Empty;  	if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_ROTATE' out parameter)) {  		int degrees;  		if (int.TryParse (parameter' out degrees)) {  			image.Rotate (degrees);  			Log.Info ("Rotating...");  		}  	}  	#region Save image  	Log.Info ("Saving...");  	if (setDestinationPath)  		image.SaveAs (destinationPath);  	else  		image.Save ();  	#endregion  	// Free used resources  	image.Dispose ();  }  else {  	Log.Error ("Missing arguments!");  	System.Environment.Exit (0);  	// terminate the program  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_RESIZE' out parameter)) {  	List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  	if (parameterValues != null && parameterValues.Count == 2) {  		// Only positive pixels  		if (parameterValues [0] > 0 && parameterValues [1] > 0) {  			Log.Info ("Resizing...");  			image.Resize (parameterValues [0]' parameterValues [1]);  		}  	}  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (parameterValues != null && parameterValues.Count == 2) {  	// Only positive pixels  	if (parameterValues [0] > 0 && parameterValues [1] > 0) {  		Log.Info ("Resizing...");  		image.Resize (parameterValues [0]' parameterValues [1]);  	}  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  	// Croping image...  	List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  	if (parameterValues != null && parameterValues.Count == 4) {  		Log.Info ("Croping...");  		image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  	}  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  	// Croping image...  	List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  	if (parameterValues != null && parameterValues.Count == 4) {  		Log.Info ("Croping...");  		image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  	}  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (ArgumentsParser.Commands.TryGetValue (Constants.COMMAND_CROP' out parameter)) {  	// Croping image...  	List<int> parameterValues = ArgumentsParser.ParseIntValues (parameter);  	if (parameterValues != null && parameterValues.Count == 4) {  		Log.Info ("Croping...");  		image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  	}  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (parameterValues != null && parameterValues.Count == 4) {  	Log.Info ("Croping...");  	image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (parameterValues != null && parameterValues.Count == 4) {  	Log.Info ("Croping...");  	image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: if (parameterValues != null && parameterValues.Count == 4) {  	Log.Info ("Croping...");  	image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  }  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  
Magic Number,ImageProcessing,Program,C:\repos\diksito_ImageProcessing\ImageProcessing\Program.cs,Main,The following statement contains a magic number: image.Crop (parameter [0]' parameter [1]' parameter [2]' parameter [3]);  
