Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,EnsureSelectStatement,Cyclomatic complexity of the method is 10
Complex Method,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,IndexOfMatchingBracket,Cyclomatic complexity of the method is 9
Complex Method,SQL.Translation,PhysicalQuantityLiteralTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,Cyclomatic complexity of the method is 15
Complex Method,SQL.Translation,QueryTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,Cyclomatic complexity of the method is 9
Long Parameter List,SQL.Translation,QueryTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The method has 8 parameters.
Long Statement,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,EnsureSelectExpression,The length of the statement  "	if (!(expression is SQLModel.SelectExpression) && !(expression is SQLModel.QueryExpression) && !(expression is SQLModel.SelectStatement) && !(expression is SQLModel.SelectStatementExpression)) { " is 194.
Long Statement,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,PromoteBooleanValuedExpression,The length of the statement  "		throw new InvalidOperationException (String.Format ("Statement of type {0} cannot be promoted to a boolean-valued expression."' expression.GetType ().Name)); " is 157.
Long Statement,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,DemoteBooleanValuedExpression,The length of the statement  "	// Although the traditional test for true is "<> 0"' we use "= 1" here because A) we have control over how boolean are translated to integers' " is 142.
Long Statement,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,DemoteBooleanValuedExpression,The length of the statement  "	// so we know they will always be represented as a 1 or 0' and the use of "=" rather than "<>" is more likely to be optimizable if it hits a sargable scenario. (we stay conjunctive). " is 182.
Long Statement,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,EnsureSelectStatement,The length of the statement  "		throw new InvalidOperationException (String.Format ("Could not promote expression of type {0} to a SelectStatement."' expression.GetType ().Name)); " is 147.
Long Statement,SQL.Translation,SQLTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslator.cs,Translate,The length of the statement  "	var identifier = source.MetaData.Children.First (c => c.Name == "identifiers").Children.First (c => c.Name == "identifier"); " is 124.
Long Statement,SQL.Translation,SQLTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslator.cs,Translate,The length of the statement  "			// Okay to pass null for the verification context here' each of the referenced libraries should already be verified at this point. " is 130.
Long Statement,SQL.Translation,SQLTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslator.cs,Translate,The length of the statement  "			result.Statements.AddRange (TranslateLibrary (context' libraryRef.Name' LibraryFactory.ResolveLibrary (libraryRef' null))); " is 123.
Long Statement,SQL.Translation,SQLTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslator.cs,Translate,The length of the statement  "			result.Statements.Add (TranslateCondition (context' source.MetaData.Name' String.Format ("Condition{0}"' conditionNumber)' condition)); " is 135.
Long Statement,SQL.Translation,SQLWriter,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLWriter.cs,Write,The length of the statement  "	// Emit using TSQLTextEmitter' though in theory we could emit using any emitter' the translator would have to be aware of the dialectic differences as well. " is 156.
Long Statement,SQL.Translation,ExpressionRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	result.TableName = sqlContext.GetExpressionObjectName (String.Format ("{0}.{1}"' node.GetAttribute<string> ("libraryName"' sqlContext.ArtifactName)' node.GetAttribute<string> ("name"))); " is 186.
Long Statement,SQL.Translation,ExpressionRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	// If the expression being referenced is scalar' it will be automatically promoted to a query by the expression def translation " is 127.
Long Statement,SQL.Translation,ExpressionRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		selectExpression.SelectClause.Columns.Add (new SQLModel.ColumnExpression (new SQLModel.QualifiedFieldExpression ("value"))); " is 124.
Long Statement,SQL.Translation,ExpressionRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		// If the result type is also boolean' the expression will be converted to a 1 or 0' so it must be demoted back to an actual boolean-valued expression " is 150.
Long Statement,SQL.Translation,ParameterRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	result.TableName = sqlContext.GetExpressionObjectName (String.Format ("{0}.{1}"' node.GetAttribute<string> ("libraryName"' sqlContext.ArtifactName)' node.GetAttribute<string> ("name"))); " is 186.
Long Statement,SQL.Translation,LiteralTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		return new Model.BinaryExpression (new Model.ValueExpression (1)' "iEqual"' new Model.ValueExpression (Boolean.Parse (node.GetAttribute<string> ("value")) ? 1 : 0)); " is 165.
Long Statement,SQL.Translation,DateAddTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	if (granularity.NodeType == "urn:hl7-org:v3:knowledgeartifact:r1:Literal")// TODO: Better story for this type of thing.... " is 122.
Long Statement,SQL.Translation,DateAddTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		throw new NotSupportedException ("Date granularity argument to a DateAdd expression must be a literal because CREF does not support granularity as an argument' only as an attribute of the target DateAdd expression."); " is 217.
Long Statement,SQL.Translation,DurationBetweenTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		new Model.ValueExpression (SQLTranslationUtilities.DateTimePrecisionToDatePartSpecifier (precision)' Model.TokenType.String)' " is 125.
Long Statement,SQL.Translation,IsEmptyTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	unaryExpression.Expression = SQLTranslationUtilities.EnsureSelectStatementExpression (context.TranslateNode (node.Children [0])); " is 129.
Long Statement,SQL.Translation,IsNotEmptyTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	unaryExpression.Expression = SQLTranslationUtilities.EnsureSelectStatementExpression (context.TranslateNode (node.Children [0])); " is 129.
Long Statement,SQL.Translation,InTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	// As long as this is list containment' it can be translated using an Exists(Filter(Collection' Condition(Current = Element))); " is 127.
Long Statement,SQL.Translation,InTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		throw new NotSupportedException ("In translation with an element of type list is not supported because there is no equivalent SQL representation."); " is 148.
Long Statement,SQL.Translation,InTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		selectExpression.FromClause = new SQLModel.CalculusFromClause (new SQLModel.TableSpecifier (SQLTranslationUtilities.EnsureSelectStatementExpression (context.TranslateNode (collectionNode))' "T")); " is 196.
Long Statement,SQL.Translation,InTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "				var propertyCondition = new Model.BinaryExpression (new SQLModel.QualifiedFieldExpression (property.Name' "T")' "iEqual"' new SQLModel.QualifiedFieldExpression (property.Name' "O")); " is 182.
Long Statement,SQL.Translation,InTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "			condition = new Model.BinaryExpression (new SQLModel.QualifiedFieldExpression ("value"' "T")' "iEqual"' (Model.Expression)context.TranslateNode (elementNode)); " is 159.
Long Statement,SQL.Translation,PropertyTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		selectExpression.SelectClause.Columns.Add (new SQLModel.ColumnExpression (SQLTranslationUtilities.ResolvePath (path' "T")' "value")); " is 133.
Long Statement,SQL.Translation,PropertyTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		selectExpression.FromClause = new SQLModel.CalculusFromClause (new SQLModel.TableSpecifier (SQLTranslationUtilities.EnsureExpression (context.TranslateNode (source))' "T")); " is 173.
Long Statement,SQL.Translation,PhysicalQuantityLiteralTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	// Physical quantity is not supported as a value type within SQL' so the literal will need to be transformed to a "unit normalized representation" " is 146.
Long Statement,SQL.Translation,PhysicalQuantityLiteralTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		throw new NotSupportedException (String.Format ("Physical quantity unit translation for unit type of '{0}' is not supported."' unit)); " is 134.
Long Statement,SQL.Translation,QueryTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,TranslateAliasedQuerySource,The length of the statement  "		return new SQLModel.TableSpecifier (SQLTranslationUtilities.EnsureExpression (context.TranslateNode (expression))' alias); " is 122.
Long Statement,SQL.Translation,QueryTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,TranslateReturnClause,The length of the statement  "			var column = new SQLModel.ColumnExpression ((Model.Expression)context.TranslateNode ((ASTNode)element.Children.Single (n => n.Name == "value"))' element.GetAttribute<String> ("name")); " is 184.
Long Statement,SQL.Translation,RetrieveTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		throw new InvalidOperationException (String.Format ("Unable to determine request type from source type: '{0}'."' node.ResultType.Name)); " is 136.
Long Statement,SQL.Translation,RetrieveTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		// So the retrieve must include a where condition limiting the code property to the set of codes (same as InValueSet translation) " is 129.
Long Statement,SQL.Translation,RetrieveTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		selectExpression.WhereClause.Expression = new Model.BinaryExpression (selectExpression.WhereClause.Expression' "iAnd"' new Model.BinaryExpression (codeExpression' "iEqual"' new SQLModel.QualifiedFieldExpression ("Code"' "VS"))); " is 228.
Long Statement,SQL.Translation,RetrieveTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "		// So the retrieve must include a where condition limiting the date range property to the interval (same as In(date' interval) translation) " is 139.
Long Statement,SQL.Translation,ValueSetRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	selectExpression.FromClause = new SQLModel.CalculusFromClause (new SQLModel.TableSpecifier (new SQLModel.TableExpression ("ValueSet")' "VS")); " is 142.
Long Statement,SQL.Translation,ValueSetRefTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	var valueSetCondition = new Model.BinaryExpression (new SQLModel.QualifiedFieldExpression ("ValueSetName"' "VS")' "iEqual"' new Model.ValueExpression (String.Format ("{0}.{1}"' valueSetLibraryName' valueSetName)' Model.TokenType.String)); " is 238.
Long Statement,SQL.Translation,InValueSetTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The length of the statement  "	selectExpression.WhereClause.Expression = new Model.BinaryExpression (selectExpression.WhereClause.Expression' "iAnd"' new Model.BinaryExpression (codeExpression' "iEqual"' new SQLModel.QualifiedFieldExpression ("Code"' "VS"))); " is 228.
Complex Conditional,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,EnsureSelectExpression,The conditional expression  "!(expression is SQLModel.SelectExpression) && !(expression is SQLModel.QueryExpression) && !(expression is SQLModel.SelectStatement) && !(expression is SQLModel.SelectStatementExpression)"  is complex.
Magic Number,SQL.Translation,ConditionalTranslator,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\Translators.cs,Translate,The following statement contains a magic number: result.ElseExpression = (Model.Expression)context.TranslateNode (node.Children [2]);  
Missing Default,SQL.Translation,SQLTranslationUtilities,C:\repos\cqframework_healthedecisions\tooling\framework\SQL.Translation\SQLTranslationUtilities.cs,IndexOfMatchingBracket,The following switch statement is missing a default case: switch (path [currentIndex]) {  case '[':  	bracketCount++;  	break;  case ']':  	bracketCount--;  	break;  }  
