Implementation smell,Namespace,Class,File,Method,Description
Long Statement,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The length of the statement  "            // app.UseStatusCodePages(context => context.HttpContext.Response.SendAsync("Handler' status code: " + context.HttpContext.Response.StatusCode' "text/plain")); " is 159.
Long Statement,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The length of the statement  "                    builder.AppendLine("An error occurred' Status Code: " + HtmlEncoder.Default.Encode(context.Request.Path.ToString().Substring(1)) + "<br>"); " is 139.
Long Statement,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The length of the statement  "                        builder.AppendLine("<a href=\"" + HtmlEncoder.Default.Encode(referrer) + "\">Retry " + WebUtility.HtmlEncode(referrer) + "</a><br>"); " is 133.
Magic Number,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The following statement contains a magic number: app.Run(async context =>              {                  // Generates the HTML with all status codes.                  var builder = new StringBuilder();                  builder.AppendLine("<html><body>");                  builder.AppendLine("<a href=\"" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/\">" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/</a><br>");                    var space = string.Concat(Enumerable.Repeat("&nbsp;"' 12));                  builder.AppendFormat("<br><b>{0}{1}{2}</b><br>"' "Status Code"' space' "Status Code Pages");                  for (int statusCode = 400; statusCode < 600; statusCode++)                  {                      builder.AppendFormat("{0}{1}{2}{3}<br>"'                          statusCode'                          space + space'                          string.Format("<a href=\"?statuscode={0}\">[Enabled]</a>{1}"' statusCode' space)'                          string.Format("<a href=\"?statuscode={0}&disableStatusCodePages=true\">[Disabled]</a>{1}"' statusCode' space));                  }                    builder.AppendLine("</body></html>");                  context.Response.ContentType = "text/html";                  await context.Response.WriteAsync(builder.ToString());              });
Magic Number,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The following statement contains a magic number: app.Run(async context =>              {                  // Generates the HTML with all status codes.                  var builder = new StringBuilder();                  builder.AppendLine("<html><body>");                  builder.AppendLine("<a href=\"" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/\">" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/</a><br>");                    var space = string.Concat(Enumerable.Repeat("&nbsp;"' 12));                  builder.AppendFormat("<br><b>{0}{1}{2}</b><br>"' "Status Code"' space' "Status Code Pages");                  for (int statusCode = 400; statusCode < 600; statusCode++)                  {                      builder.AppendFormat("{0}{1}{2}{3}<br>"'                          statusCode'                          space + space'                          string.Format("<a href=\"?statuscode={0}\">[Enabled]</a>{1}"' statusCode' space)'                          string.Format("<a href=\"?statuscode={0}&disableStatusCodePages=true\">[Disabled]</a>{1}"' statusCode' space));                  }                    builder.AppendLine("</body></html>");                  context.Response.ContentType = "text/html";                  await context.Response.WriteAsync(builder.ToString());              });
Magic Number,StatusCodePagesSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\StatusCodePagesSample\Startup.cs,Configure,The following statement contains a magic number: app.Run(async context =>              {                  // Generates the HTML with all status codes.                  var builder = new StringBuilder();                  builder.AppendLine("<html><body>");                  builder.AppendLine("<a href=\"" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/\">" +                      HtmlEncoder.Default.Encode(context.Request.PathBase.ToString()) + "/missingpage/</a><br>");                    var space = string.Concat(Enumerable.Repeat("&nbsp;"' 12));                  builder.AppendFormat("<br><b>{0}{1}{2}</b><br>"' "Status Code"' space' "Status Code Pages");                  for (int statusCode = 400; statusCode < 600; statusCode++)                  {                      builder.AppendFormat("{0}{1}{2}{3}<br>"'                          statusCode'                          space + space'                          string.Format("<a href=\"?statuscode={0}\">[Enabled]</a>{1}"' statusCode' space)'                          string.Format("<a href=\"?statuscode={0}&disableStatusCodePages=true\">[Disabled]</a>{1}"' statusCode' space));                  }                    builder.AppendLine("</body></html>");                  context.Response.ContentType = "text/html";                  await context.Response.WriteAsync(builder.ToString());              });
