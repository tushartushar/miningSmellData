Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The method has 384 lines of code.
Long Method,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The method has 444 lines of code.
Long Method,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The method has 308 lines of code.
Long Method,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The method has 340 lines of code.
Complex Method,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.DiagnosticsViewPage.Views,BaseView,C:\repos\aspnet_Diagnostics\src\shared\BaseView.cs,WriteAttributeTo,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.AspNetCore.Diagnostics.Elm,ElmLogger,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\ElmLogger.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Microsoft.AspNetCore.DiagnosticsViewPage.Views,BaseView,C:\repos\aspnet_Diagnostics\src\shared\BaseView.cs,WriteAttributeValue,The method has 6 parameters. Parameters: thingy' startPostion' value' endValue' dealyo' yesno
Long Parameter List,Microsoft.AspNetCore.DiagnosticsViewPage.Views,BaseView,C:\repos\aspnet_Diagnostics\src\shared\BaseView.cs,BeginWriteAttribute,The method has 6 parameters. Parameters: name' begining' startPosition' ending' endPosition' thingy
Long Parameter List,Microsoft.AspNetCore.DiagnosticsViewPage.Views,BaseView,C:\repos\aspnet_Diagnostics\src\shared\BaseView.cs,WriteAttributeTo,The method has 5 parameters. Parameters: writer' name' leader' trailer' values
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,LogRow,The length of the statement  "               (string.IsNullOrEmpty(Model.Options.NamePrefix) || log.Name.StartsWith(Model.Options.NamePrefix' StringComparison.Ordinal))) " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("        <h2 id=\"requestHeader\">Request Details</h2>\r\n        <table id=\"requestDetails\">\r\n            <colgroup><col id=\"label\" /><col /></colgroup>\r\n\r\n            <tr>\r\n                <th>Path</th>\r\n                <td>"); " is 256.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Host</th>\r\n                <td>"); " is 120.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Content Type</th>\r\n                <td>"); " is 128.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Method</th>\r\n                <td>"); " is 122.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Protocol</th>\r\n                <td>"); " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                        </tbody>\r\n                    </table>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th>Status Code</th>\r\n                <td>"); " is 211.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>User</th>\r\n                <td>"); " is 120.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Claims</th>\r\n                <td>\r\n"); " is 126.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                </td>\r\n            </tr>\r\n            <tr>\r\n                <th>Scheme</th>\r\n                <td>"); " is 138.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Query</th>\r\n                <td>"); " is 121.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Cookies</th>\r\n                <td>\r\n"); " is 127.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,LogRow,The length of the statement  "                (string.IsNullOrEmpty(Model.Options.NamePrefix) || log.Name.StartsWith(Model.Options.NamePrefix' StringComparison.Ordinal))) " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("\r\n.information {\r\n    color: blue;\r\n}\r\n\r\n.debug {\r\n    color: black;\r\n}\r\n\r\n.warning {\r\n    color: orange;\r\n}\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>ASP.NET Core Logs</h1>\r\n    <form id=\"viewOptions\" method=\"get\">\r\n        <select name=\"level\">\r\n"); " is 305.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>"); " is 211.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n"); " is 212.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,LogRow,The length of the statement  "               (string.IsNullOrEmpty(Model.Options.NamePrefix) || log.Name.StartsWith(Model.Options.NamePrefix' StringComparison.Ordinal))) " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("        <h2 id=\"requestHeader\">Request Details</h2>\r\n        <table id=\"requestDetails\">\r\n            <colgroup><col id=\"label\" /><col /></colgroup>\r\n\r\n            <tr>\r\n                <th>Path</th>\r\n                <td>"); " is 256.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Host</th>\r\n                <td>"); " is 120.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Content Type</th>\r\n                <td>"); " is 128.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Method</th>\r\n                <td>"); " is 122.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Protocol</th>\r\n                <td>"); " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                        </tbody>\r\n                    </table>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th>Status Code</th>\r\n                <td>"); " is 211.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>User</th>\r\n                <td>"); " is 120.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Claims</th>\r\n                <td>\r\n"); " is 126.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                </td>\r\n            </tr>\r\n            <tr>\r\n                <th>Scheme</th>\r\n                <td>"); " is 138.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Query</th>\r\n                <td>"); " is 121.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Cookies</th>\r\n                <td>\r\n"); " is 127.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,LogRow,The length of the statement  "                (string.IsNullOrEmpty(Model.Options.NamePrefix) || log.Name.StartsWith(Model.Options.NamePrefix' StringComparison.Ordinal))) " is 124.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The length of the statement  "        body {\r\n    font-size: .813em;\r\n    white-space: nowrap;\r\n    margin: 20px;\r\n}\r\n\r\ncol:nth-child(2n) {\r\n    background-color: #FAFAFA;\r\n}\r\n\r\nform { \r\n    display: inline-block; \r\n}\r\n\r\nh1 {\r\n    margin-left: 25px;\r\n}\r\n\r\ntable {\r\n    margin: 0px auto;\r\n    border-collapse: collapse;\r\n    border-spacing: 0px;\r\n    table-layout: fixed;\r\n    width: 100%;\r\n}\r\n\r\ntd' th {\r\n    padding: 4px;\r\n}\r\n\r\nthead {\r\n    font-size: 1em;\r\n    font-family: Arial;\r\n}\r\n\r\ntr {\r\n    height: 23px;\r\n}\r\n\r\n#requestHeader {\r\n    border-bottom: solid 1px gray;\r\n    border-top: solid 1px gray;\r\n    margin-bottom: 2px;\r\n    font-size: 1em;\r\n    line-height: 2em;\r\n}\r\n\r\n.collapse {\r\n    color: black;\r\n    float: right;\r\n    font-weight: normal;\r\n    width: 1em;\r\n}\r\n\r\n.date' .time {\r\n    width: 70px; \r\n}\r\n\r\n.logHeader {\r\n    border-bottom: 1px solid lightgray;\r\n    color: gray;\r\n    text-align: left;\r\n}\r\n\r\n.logState {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n}\r\n\r\n.logTd {\r\n    border-left: 1px solid gray;\r\n    padding: 0px;\r\n}\r\n\r\n.logs {\r\n    width: 80%;\r\n}\r\n\r\n.logRow:hover {\r\n    background-color: #D6F5FF;\r\n}\r\n\r\n.requestRow>td {\r\n    border-bottom: solid 1px gray;\r\n}\r\n\r\n.severity {\r\n    width: 80px;\r\n}\r\n\r\n.summary {\r\n    color: black;\r\n    line-height: 1.8em;\r\n}\r\n\r\n.summary>th {\r\n    font-weight: normal;\r\n}\r\n\r\n.tab {\r\n    margin-left: 30px;\r\n}\r\n\r\n#viewOptions {\r\n    margin: 20px;\r\n}\r\n\r\n#viewOptions > * {\r\n    margin: 5px;\r\n} " is 1642.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The length of the statement  "        body {\r\n    font-family: 'Segoe UI'' Tahoma' Arial' Helvtica' sans-serif;\r\n    line-height: 1.4em;\r\n}\r\n\r\nh1 {\r\n    font-family: 'Segoe UI'' Helvetica' sans-serif;\r\n    font-size: 2.5em;\r\n}\r\n\r\ntd {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n}\r\n\r\ntr:nth-child(2n) {\r\n    background-color: #F6F6F6;\r\n}\r\n\r\n.critical {\r\n    background-color: red;\r\n    color: white;\r\n}\r\n\r\n.error {\r\n    color: red;\r\n}\r\n\r\n.information {\r\n    color: blue;\r\n}\r\n\r\n.debug {\r\n    color: black;\r\n}\r\n\r\n.warning {\r\n    color: orange;\r\n} " is 592.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>"); " is 211.
Long Statement,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The length of the statement  "            WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n"); " is 212.
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm,ElmPageMiddleware,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\ElmPageMiddleware.cs,RenderDetailsPage,The following statement contains a magic number: if (!Guid.TryParse(parts[parts.Length - 1]' out id))              {                  context.Response.StatusCode = 400;                  await context.Response.WriteAsync("Invalid Id");                  return;              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 8920' "\""' 8940' 1);  #line 319 "DetailsPage.cshtml"  WriteAttributeValue(""' 8928' severityInt' 8928' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 319 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 320 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 9069' "\""' 9089' 1);  #line 323 "DetailsPage.cshtml"  WriteAttributeValue(""' 9077' severityInt' 9077' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 323 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 324 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 9202' "\""' 9235' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 9202' "\""' 9235' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 9210' Model.Options.NamePrefix' 9210' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 9210' Model.Options.NamePrefix' 9210' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\DetailsPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 9210' Model.Options.NamePrefix' 9210' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6825' "\""' 6845' 1);  #line 285 "LogPage.cshtml"  WriteAttributeValue(""' 6833' severityInt' 6833' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 285 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 286 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 6974' "\""' 6994' 1);  #line 289 "LogPage.cshtml"  WriteAttributeValue(""' 6982' severityInt' 6982' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 289 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 290 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 7107' "\""' 7140' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 7107' "\""' 7140' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 7115' Model.Options.NamePrefix' 7115' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 7115' Model.Options.NamePrefix' 7115' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 7115' Model.Options.NamePrefix' 7115' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.RazorViews,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\LogPage.Designer.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 321 "LogPage.cshtml"                          #line default  #line hidden    #line 321 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 8204' "\""' 8224' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8211' activityPath' 8211' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8225' "\""' 8256' 1);  #line 325 "LogPage.cshtml"  WriteAttributeValue(""' 8233' activity.HttpInfo.Path' 8233' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 325 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 326 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 327 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 328 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 329 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8646' "\""' 8666' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8653' activityPath' 8653' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 8667' "\""' 8695' 1);  #line 332 "LogPage.cshtml"  WriteAttributeValue(""' 8675' activity.Root.State' 8675' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 332 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 333 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 8858' "\""' 8878' 1);  #line 336 "LogPage.cshtml"  WriteAttributeValue(""' 8865' activityPath' 8865' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 337 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 351 "LogPage.cshtml"                                  #line default  #line hidden    #line 351 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 360 "LogPage.cshtml"                                      #line default  #line hidden    #line 360 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 364 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 364 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 369 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 369 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 374 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 375 "LogPage.cshtml"                                          #line default  #line hidden    #line 375 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 378 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 378 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 379 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 382 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 382 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 383 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 391 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7723' "\""' 7743' 1);  #line 226 "DetailsPage.cshtml"  WriteAttributeValue(""' 7731' severityInt' 7731' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 226 "DetailsPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 227 "DetailsPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 7872' "\""' 7892' 1);  #line 230 "DetailsPage.cshtml"  WriteAttributeValue(""' 7880' severityInt' 7880' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 230 "DetailsPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 231 "DetailsPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 8005' "\""' 8038' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 8005' "\""' 8038' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 8013' Model.Options.NamePrefix' 8013' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 8013' Model.Options.NamePrefix' 8013' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,DetailsPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\DetailsPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 8013' Model.Options.NamePrefix' 8013' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var severity in Enum.GetValues(typeof(LogLevel)))              {                  var severityInt = (int)severity;                  if ((int)Model.Options.MinLevel == severityInt)                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 4934' "\""' 4954' 1);  #line 138 "LogPage.cshtml"  WriteAttributeValue(""' 4942' severityInt' 4942' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(" selected=\"selected\">");  #line 138 "LogPage.cshtml"                                                                  Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 139 "LogPage.cshtml"                  }                  else                  {    #line default  #line hidden                WriteLiteral("                    <option");              BeginWriteAttribute("value"' " value=\""' 5083' "\""' 5103' 1);  #line 142 "LogPage.cshtml"  WriteAttributeValue(""' 5091' severityInt' 5091' 12' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 142 "LogPage.cshtml"                                              Write(severity);    #line default  #line hidden              WriteLiteral("</option>\r\n");  #line 143 "LogPage.cshtml"                  }              }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 5216' "\""' 5249' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: BeginWriteAttribute("value"' " value=\""' 5216' "\""' 5249' 1);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 5224' Model.Options.NamePrefix' 5224' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 5224' Model.Options.NamePrefix' 5224' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: WriteAttributeValue(""' 5224' Model.Options.NamePrefix' 5224' 25' false);
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.Diagnostics.Elm.Views,LogPage,C:\repos\aspnet_Diagnostics\src\Microsoft.AspNetCore.Diagnostics.Elm\Views\Obsolete\LogPage.cs,ExecuteAsync,The following statement contains a magic number: foreach (var activity in Model.Activities.Reverse())          {    #line default  #line hidden                WriteLiteral("            <tbody>\r\n                <tr class=\"requestRow\">\r\n");  #line 174 "LogPage.cshtml"                          #line default  #line hidden    #line 174 "LogPage.cshtml"                                                  var activityPath = Model.Path.Value + "/" + activity.Id;                          if (activity.HttpInfo != null)                          {    #line default  #line hidden                WriteLiteral("                        \t<td><a");              BeginWriteAttribute("href"' " href=\""' 6313' "\""' 6333' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6320' activityPath' 6320' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6334' "\""' 6365' 1);  #line 178 "LogPage.cshtml"  WriteAttributeValue(""' 6342' activity.HttpInfo.Path' 6342' 23' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 178 "LogPage.cshtml"                                                                                     Write(activity.HttpInfo.Path);    #line default  #line hidden              WriteLiteral("</a></td>\r\n                            <td>");  #line 179 "LogPage.cshtml"                             Write(activity.HttpInfo.Method);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 180 "LogPage.cshtml"                             Write(activity.HttpInfo.Host);    #line default  #line hidden              WriteLiteral("</td>\r\n                            <td>");  #line 181 "LogPage.cshtml"                             Write(activity.HttpInfo.StatusCode);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 182 "LogPage.cshtml"                          }                          else if (activity.RepresentsScope)                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6755' "\""' 6775' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6762' activityPath' 6762' 13' false);    #line default  #line hidden              EndWriteAttribute();              BeginWriteAttribute("title"' " title=\""' 6776' "\""' 6804' 1);  #line 185 "LogPage.cshtml"  WriteAttributeValue(""' 6784' activity.Root.State' 6784' 20' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">");  #line 185 "LogPage.cshtml"                                                                                              Write(activity.Root.State);    #line default  #line hidden              WriteLiteral("</a></td>\r\n");  #line 186 "LogPage.cshtml"                          }                          else                          {    #line default  #line hidden                WriteLiteral("                            <td colspan=\"4\"><a");              BeginWriteAttribute("href"' " href=\""' 6967' "\""' 6987' 1);  #line 189 "LogPage.cshtml"  WriteAttributeValue(""' 6974' activityPath' 6974' 13' false);    #line default  #line hidden              EndWriteAttribute();              WriteLiteral(">Non-scope Log</a></td>\r\n");  #line 190 "LogPage.cshtml"                          }                          #line default  #line hidden                WriteLiteral(@"                    <td class=""logTd"">                          <table class=""logTable"">                              <thead class=""logHeader"">                                  <tr class=""headerRow"">                                      <th class=""date"">Date</th>                                      <th class=""time"">Time</th>                                      <th class=""name"">Name</th>                                      <th class=""severity"">Severity</th>                                      <th class=""state"">State</th>                                      <th>Error<span class=""collapse"">^</span></th>                                  </tr>                              </thead>  ");  #line 204 "LogPage.cshtml"                                  #line default  #line hidden    #line 204 "LogPage.cshtml"                                                                  var counts = new Dictionary<string' int>();                                  counts["Critical"] = 0;                                  counts["Error"] = 0;                                  counts["Warning"] = 0;                                                                  counts["Information"] = 0;                                  counts["Debug"] = 0;                                  #line default  #line hidden                WriteLiteral("                            <tbody class=\"logBody\">\r\n");  #line 213 "LogPage.cshtml"                                      #line default  #line hidden    #line 213 "LogPage.cshtml"                                   if (!activity.RepresentsScope)                                  {                                      // message not within a scope                                      var logInfo = activity.Root.Messages.FirstOrDefault();                                          #line default  #line hidden    #line 217 "LogPage.cshtml"                                 Write(LogRow(logInfo' 0));    #line default  #line hidden  #line 217 "LogPage.cshtml"                                                                                               counts[logInfo.Severity.ToString()] = 1;                                  }                                  else                                  {                                          #line default  #line hidden    #line 222 "LogPage.cshtml"                                 Write(Traverse(activity.Root' 0' counts));    #line default  #line hidden  #line 222 "LogPage.cshtml"                                                                                                           }    #line default  #line hidden                WriteLiteral("                            </tbody>\r\n                            <tbody class=\"summary\">\r\n                                <tr class=\"logRow\">\r\n                                    <td>");  #line 227 "LogPage.cshtml"                                     Write(activity.Time.ToString("MM-dd-yyyy HH:mm:ss"));    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 228 "LogPage.cshtml"                                          #line default  #line hidden    #line 228 "LogPage.cshtml"                                       foreach (var kvp in counts)                                      {                                          if (string.Equals("Debug"' kvp.Key)) {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 231 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 231 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("<span class=\"collapse\">v</span></td>\r\n");  #line 232 "LogPage.cshtml"                                          }                                          else                                          {    #line default  #line hidden                WriteLiteral("                                            <td>");  #line 235 "LogPage.cshtml"                                             Write(kvp.Value);    #line default  #line hidden              WriteLiteral(" ");  #line 235 "LogPage.cshtml"                                                        Write(kvp.Key);    #line default  #line hidden              WriteLiteral("</td>\r\n");  #line 236 "LogPage.cshtml"                                          }                                      }    #line default  #line hidden                WriteLiteral("                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n");  #line 244 "LogPage.cshtml"          }
Magic Number,Microsoft.AspNetCore.DiagnosticsViewPage.Views,BaseView,C:\repos\aspnet_Diagnostics\src\shared\BaseView.cs,ExecuteAsync,The following statement contains a magic number: Output = new StreamWriter(Response.Body' Encoding.UTF8' 4096' leaveOpen: true);
