Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ExceptionHandlerSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\ExceptionHandlerSample\Startup.cs,Configure,The following statement contains a magic number: app.UseExceptionHandler(errorApp =>              {                  // Normally you'd use MVC or similar to render a nice page.                  errorApp.Run(async context =>                  {                      context.Response.StatusCode = 500;                      context.Response.ContentType = "text/html";                      await context.Response.WriteAsync("<html><body>\r\n");                      await context.Response.WriteAsync("We're sorry' we encountered an un-expected issue with your application.<br>\r\n");                        var error = context.Features.Get<IExceptionHandlerFeature>();                      if (error != null)                      {                          // This error would not normally be exposed to the client                          await context.Response.WriteAsync("<br>Error: " + HtmlEncoder.Default.Encode(error.Error.Message) + "<br>\r\n");                      }                      await context.Response.WriteAsync("<br><a href=\"/\">Home</a><br>\r\n");                      await context.Response.WriteAsync("</body></html>\r\n");                      await context.Response.WriteAsync(new string(' '' 512)); // Padding for IE                  });              });
Magic Number,ExceptionHandlerSample,Startup,D:\research\architectureSmells\repos\aspnet_Diagnostics\samples\ExceptionHandlerSample\Startup.cs,Configure,The following statement contains a magic number: app.UseExceptionHandler(errorApp =>              {                  // Normally you'd use MVC or similar to render a nice page.                  errorApp.Run(async context =>                  {                      context.Response.StatusCode = 500;                      context.Response.ContentType = "text/html";                      await context.Response.WriteAsync("<html><body>\r\n");                      await context.Response.WriteAsync("We're sorry' we encountered an un-expected issue with your application.<br>\r\n");                        var error = context.Features.Get<IExceptionHandlerFeature>();                      if (error != null)                      {                          // This error would not normally be exposed to the client                          await context.Response.WriteAsync("<br>Error: " + HtmlEncoder.Default.Encode(error.Error.Message) + "<br>\r\n");                      }                      await context.Response.WriteAsync("<br><a href=\"/\">Home</a><br>\r\n");                      await context.Response.WriteAsync("</body></html>\r\n");                      await context.Response.WriteAsync(new string(' '' 512)); // Padding for IE                  });              });
