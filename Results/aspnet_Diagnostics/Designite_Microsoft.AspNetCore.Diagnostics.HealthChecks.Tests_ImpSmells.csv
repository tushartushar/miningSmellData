Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,SetsCacheHeaders,The length of the statement  "            Assert.Equal(new string[] { "Thu' 01 Jan 1970 00:00:00 GMT" }' response.Content.Headers.GetValues(HeaderNames.Expires)); " is 120.
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanSetCustomStatusCodes,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.UseHealthChecks("/health"' new HealthCheckOptions()                      {                          ResultStatusCodes =                          {                              [HealthStatus.Healthy] = 201'                          }                      });                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_AcceptsRequest_OnSpecifiedPort,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        app.UseHealthChecks("/health"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPortWithoutPath_AcceptsRequest_OnSpecifiedPort,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        app.UseHealthChecks(default' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_RejectsRequest_OnOtherPort,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        app.UseHealthChecks("/health"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_MultipleMiddleware,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        // Throws if used                      app.UseHealthChecks("/health"' port: 5001' new HealthCheckOptions()                      {                          ResponseWriter = (c' r) => throw null'                      });                        app.UseHealthChecks("/health/detailed"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_MultipleMiddleware,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        // Throws if used                      app.UseHealthChecks("/health"' port: 5001' new HealthCheckOptions()                      {                          ResponseWriter = (c' r) => throw null'                      });                        app.UseHealthChecks("/health/detailed"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_MultipleMiddleware_DifferentPorts,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        // Throws if used                      app.UseHealthChecks("/health"' port: 5002' new HealthCheckOptions()                      {                          ResponseWriter = (c' r) => throw null'                      });                        app.UseHealthChecks("/health"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
Magic Number,Microsoft.AspNetCore.Diagnostics.HealthChecks,HealthCheckMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Diagnostics\test\Microsoft.AspNetCore.Diagnostics.HealthChecks.Tests\HealthCheckMiddlewareTests.cs,CanListenOnPort_MultipleMiddleware_DifferentPorts,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.Use(next => async (context) =>                      {                          // Need to fake setting the connection info. TestServer doesn't                          // do that' because it doesn't have a connection.                          context.Connection.LocalPort = context.Request.Host.Port.Value;                          await next(context);                      });                        // Throws if used                      app.UseHealthChecks("/health"' port: 5002' new HealthCheckOptions()                      {                          ResponseWriter = (c' r) => throw null'                      });                        app.UseHealthChecks("/health"' port: 5001);                  })                  .ConfigureServices(services =>                  {                      services.AddHealthChecks();                  });
