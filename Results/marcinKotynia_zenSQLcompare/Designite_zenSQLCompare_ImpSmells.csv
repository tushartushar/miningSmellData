Implementation smell,Namespace,Class,File,Method,Description
Long Method,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The method has 233 lines of code.
Complex Method,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,Cyclomatic complexity of the method is 8
Complex Method,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,Cyclomatic complexity of the method is 10
Long Parameter List,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,dgResultInsertRow,The method has 7 parameters.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,btnShowDiff_Click,The length of the statement  "			if ((dgvr.Selected && (string)dgvr.Cells ["scriptModel"].Value != "" && (string)dgvr.Cells ["scriptTarget"].Value != "")) { " is 123.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,btnShowDiff_Click,The length of the statement  "				string filenameModel = string.Format ("{3}_{0}_{1}_{2}_M.sql"' mdatabase.Text' (string)dgvr.Cells ["object"].Value' DateTime.Now.ToString ("yyyymmddhhmmss")' mserver.Text); " is 172.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,btnShowDiff_Click,The length of the statement  "				string filenameTarget = string.Format ("{3}_{0}_{1}_{2}_T.sql"' sdatabase.Text' (string)dgvr.Cells ["object"].Value' DateTime.Now.ToString ("yyyymmddhhmmss")' mserver.Text); " is 173.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,btncompare_Click,The length of the statement  "	logger (string.Format ("COMPARE FINISHED found {0} problems. Excluded item {1}"' dgResult.Rows.Count.ToString ()' excludedNumber)); " is 131.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "			if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) { " is 137.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "					script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name " is 124.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' ""); " is 157.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :)" is 195.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "-- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index" is 121.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "						dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' ""); " is 233.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :)" is 195.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "						script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name " is 152.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "						dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' ""); " is 288.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "-- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index" is 122.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "						dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' ""); " is 151.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "						dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' ""); " is 178.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript); " is 144.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "					script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name " is 142.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "					dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' ""); " is 148.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript); " is 171.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The length of the statement  "				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' ""); " is 141.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The length of the statement  "		retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6)); " is 121.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The length of the statement  "		retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")"); " is 169.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+procedure\\s+"' "CREATE PROCEDURE "' RegexOptions.IgnoreCase); " is 134.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+function\\s+"' "CREATE FUNCTION "' RegexOptions.IgnoreCase); " is 132.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+trigger\\s+"' "CREATE TRIGGER "' RegexOptions.IgnoreCase); " is 130.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+view\\s+"' "CREATE VIEW "' RegexOptions.IgnoreCase); " is 124.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "alter\\s+procedure\\s+"' "ALTER PROCEDURE "' RegexOptions.IgnoreCase); " is 132.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+proc\\s+"' "CREATE PROCEDURE "' RegexOptions.IgnoreCase); " is 129.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "alter\\s+function\\s+"' "ALTER FUNCTION "' RegexOptions.IgnoreCase); " is 130.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "alter\\s+trigger\\s+"' "ALTER TRIGGER "' RegexOptions.IgnoreCase); " is 128.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,unification,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "alter\\s+view\\s+"' "ALTER VIEW "' RegexOptions.IgnoreCase); " is 122.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,replaceAlter,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+procedure\\s+"' "ALTER PROCEDURE "' RegexOptions.IgnoreCase); " is 133.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,replaceAlter,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+proc\\s+"' "ALTER PROCEDURE "' RegexOptions.IgnoreCase); " is 128.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,replaceAlter,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+function\\s+"' "ALTER FUNCTION "' RegexOptions.IgnoreCase); " is 131.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,replaceAlter,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+trigger\\s+"' "ALTER TRIGGER "' RegexOptions.IgnoreCase); " is 129.
Long Statement,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,replaceAlter,The length of the statement  "	input = System.Text.RegularExpressions.Regex.Replace (input' "create\\s+view\\s+"' "ALTER VIEW "' RegexOptions.IgnoreCase); " is 123.
Long Statement,zenComparer,customCompareKeyValue,C:\repos\marcinKotynia_zenSQLcompare\userControlLib\customCompareKeyValue.cs,btnShowChanges_Click,The length of the statement  "				string filenameModel = zenComparer.Extensions.MakeSafeFilename (string.Format ("{0}_{1}model.txt"' (string)dgvr.Cells [0].Value' time)' separator); " is 147.
Long Statement,zenComparer,customCompareKeyValue,C:\repos\marcinKotynia_zenSQLcompare\userControlLib\customCompareKeyValue.cs,btnShowChanges_Click,The length of the statement  "				string filenameTarget = zenComparer.Extensions.MakeSafeFilename (string.Format ("{0}_{1}target.txt"' (string)dgvr.Cells [0].Value' time)' separator); " is 149.
Magic Number,zenComparer,Extensions,C:\repos\marcinKotynia_zenSQLcompare\extensions.cs,GetDataTable,The following statement contains a magic number: mycommand.CommandTimeout = 90;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: foreach (DataRow r in master.Rows) {  	string option = r ["type"].ToString ().Trim ().ToUpper ();  	//typ  	string action = "";  	string a = ""' b = ""' temp = "";  	bool excluded = false;  	string script = "";  	string ModelScript = "";  	string TargetScript = "";  	//Sprawdzenie czy wogole porownywac  	char[] delim =  {  		'''  	};  	string[] excludeditem = txtexclude.Text.ToLower ().Split (delim);  	string details = "";  	string key = Extensions._getSeparatedString (r ["key"].ToString ().ToLower ()' 0);  	key = key.Replace ("dbo."' "");  	key = key.Replace ("["' "");  	key = key.Replace ("]"' "");  	//nazwa obiektu  	foreach (string s in excludeditem) {  		if (key == s.ToLower ()) {  			excluded = true;  			break;  		}  	}  	if (excluded) {  		excludedCounter += 1;  		continue;  	}  	//sprawdzenie czy slave zawiera taki klucz jelsi tak trzeba porownac  	if (ht.ContainsKey (r ["key"].ToString ().ToLower ())) {  		a = ht [r ["key"].ToString ().ToLower ()].ToString ().Trim ();  		//pobranie ze slave  		b = r ["text"].ToString ().Trim ();  		//pobranie z master  		ModelScript = unification (a).Trim ();  		//zenComparer.Extensions._cleanstring(unification(a));  		TargetScript = unification (b).Trim ();  		//zenComparer.Extensions._cleanstring(unification(b));  		//Wazne cleanstring porownuje bez whitespace  		//unification zapewnia ze tpominiete zostana texty create ktore czesto maja male duze litery  		if (string.CompareOrdinal (zenComparer.Extensions._cleanstring (ModelScript)' zenComparer.Extensions._cleanstring (TargetScript)) != 0) {  			action = "Missmatched";  		}  	}  	else//Obiekt missing  	 {  		b = r ["text"].ToString ();  		//pobranie z master  		action = "Missing";  	}  	details = Extensions._getSeparatedString (b' 1);  	if (action == "Missing" || action == "Missmatched")  		switch (option) {  		//case "U":  		//    if (action == "Missing") //Brak tabeli  		//    {  		//    }  		//    break;  		case "CO":  			//user tables sa bardziej skomplikowane  			/// 0 -table name  			/// 1- column_name  			/// 2- isnull(cast(data_type as varchar)' '')  			/// 3- isnull(cast(character_maximum_length as varchar)' '')  			/// 4- isnull(column_default' '')  			/// 5- numeric precision  			/// 6- numeric_scale  			/// 7- is nullable  			/// 8- default constraint name  			/// 9- isidentity 1  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' //get varchar(max) decimal(18'2)  				identity (b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  			}  			else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  			 {  				//    0     1  				//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  				//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  				string x' x1;  				//porownanie typow datetime'smalldtatime  				x = datatype (a);  				//slave  				x1 = datatype (b);  				//master  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  				}  				//porownanie default  				x = Extensions._getSeparatedString (a' 4);  				x1 = Extensions._getSeparatedString (b' 4);  				script = "";  				if (string.CompareOrdinal (x' x1) != 0) {  					if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  						script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  						Extensions._getSeparatedString (b' 1)' //column name  						datatype (b)' notnull (b)' //not null  						Extensions._getSeparatedString (b' 9)' //schema  						Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  						);  					}  					script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 8)' //default constraint name  					Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  					Extensions._getSeparatedString (b' 1)' //1- column_name  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  				}  				//porownanie not null  				x = Extensions._getSeparatedString (a' 7);  				x1 = Extensions._getSeparatedString (b' 7);  				if (string.CompareOrdinal (x' x1) != 0) {  					script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' // identity(b)' //identity  					notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)//schema  					);  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  				}  				//porownanie identity  				x = Extensions._getSeparatedString (a' 9);  				x1 = Extensions._getSeparatedString (b' 9);  				if (string.CompareOrdinal (x' x1) != 0) {  					dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  					//nie da sie dodac identity do istniejacej  				}  				//drop all index  				// add all index  			}  			break;  		case "FN":  		// Scalar function  		case "TF":  		// Table-valued Function  		case "IF":  		//FN 'IF'P'TR'V  		case "P":  		//FN 'IF'P'TR'V  		case "TR":  		//FN 'IF'P'TR'V  		case "V":  			//FN 'IF'P'TR'V  			if (action == "Missmatched") {  				script = replaceAlter (r ["text"].ToString ());  				ModelScript = replaceAlter (ModelScript);  			}  			else {  				script = r ["text"].ToString ();  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		case "PK":  			//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  			/// 0- type  			/// 1- name  			/// 2- type description  			/// 3- table name  			/// 4- column name  			if (action == "Missing")//brakuje kolumny  			 {  				script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  				Extensions._getSeparatedString (b' 0)' //name  				Extensions._getSeparatedString (b' 4)' //column name  				Extensions._getSeparatedString (b' 5)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  			}  			break;  		case "IX":  			if (action == "Missmatched") {  				script = r ["text"].ToString ();  			}  			else//new  			 {  				script = r ["text"].ToString ();  				script = script.Replace ("' DROP_EXISTING = ON"' "");  			}  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  			break;  		default:  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  			break;  		}  	//if (!excluded && !string.IsNullOrEmpty(script))  	//    result.AppendText(script + variables.scriptSeparator );  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing" || action == "Missmatched")  	switch (option) {  	//case "U":  	//    if (action == "Missing") //Brak tabeli  	//    {  	//    }  	//    break;  	case "CO":  		//user tables sa bardziej skomplikowane  		/// 0 -table name  		/// 1- column_name  		/// 2- isnull(cast(data_type as varchar)' '')  		/// 3- isnull(cast(character_maximum_length as varchar)' '')  		/// 4- isnull(column_default' '')  		/// 5- numeric precision  		/// 6- numeric_scale  		/// 7- is nullable  		/// 8- default constraint name  		/// 9- isidentity 1  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' //get varchar(max) decimal(18'2)  			identity (b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  		}  		else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  		 {  			//    0     1  			//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  			//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  			string x' x1;  			//porownanie typow datetime'smalldtatime  			x = datatype (a);  			//slave  			x1 = datatype (b);  			//master  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  			}  			//porownanie default  			x = Extensions._getSeparatedString (a' 4);  			x1 = Extensions._getSeparatedString (b' 4);  			script = "";  			if (string.CompareOrdinal (x' x1) != 0) {  				if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  					script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  					Extensions._getSeparatedString (b' 1)' //column name  					datatype (b)' notnull (b)' //not null  					Extensions._getSeparatedString (b' 9)' //schema  					Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  					);  				}  				script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 8)' //default constraint name  				Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  				Extensions._getSeparatedString (b' 1)' //1- column_name  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  			}  			//porownanie not null  			x = Extensions._getSeparatedString (a' 7);  			x1 = Extensions._getSeparatedString (b' 7);  			if (string.CompareOrdinal (x' x1) != 0) {  				script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' // identity(b)' //identity  				notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)//schema  				);  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  			}  			//porownanie identity  			x = Extensions._getSeparatedString (a' 9);  			x1 = Extensions._getSeparatedString (b' 9);  			if (string.CompareOrdinal (x' x1) != 0) {  				dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  				//nie da sie dodac identity do istniejacej  			}  			//drop all index  			// add all index  		}  		break;  	case "FN":  	// Scalar function  	case "TF":  	// Table-valued Function  	case "IF":  	//FN 'IF'P'TR'V  	case "P":  	//FN 'IF'P'TR'V  	case "TR":  	//FN 'IF'P'TR'V  	case "V":  		//FN 'IF'P'TR'V  		if (action == "Missmatched") {  			script = replaceAlter (r ["text"].ToString ());  			ModelScript = replaceAlter (ModelScript);  		}  		else {  			script = r ["text"].ToString ();  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	case "PK":  		//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  		/// 0- type  		/// 1- name  		/// 2- type description  		/// 3- table name  		/// 4- column name  		if (action == "Missing")//brakuje kolumny  		 {  			script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  			Extensions._getSeparatedString (b' 0)' //name  			Extensions._getSeparatedString (b' 4)' //column name  			Extensions._getSeparatedString (b' 5)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  		}  		break;  	case "IX":  		if (action == "Missmatched") {  			script = r ["text"].ToString ();  		}  		else//new  		 {  			script = r ["text"].ToString ();  			script = script.Replace ("' DROP_EXISTING = ON"' "");  		}  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  		break;  	default:  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  		break;  	}  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: switch (option) {  //case "U":  //    if (action == "Missing") //Brak tabeli  //    {  //    }  //    break;  case "CO":  	//user tables sa bardziej skomplikowane  	/// 0 -table name  	/// 1- column_name  	/// 2- isnull(cast(data_type as varchar)' '')  	/// 3- isnull(cast(character_maximum_length as varchar)' '')  	/// 4- isnull(column_default' '')  	/// 5- numeric precision  	/// 6- numeric_scale  	/// 7- is nullable  	/// 8- default constraint name  	/// 9- isidentity 1  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' //get varchar(max) decimal(18'2)  		identity (b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  	}  	else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale  	 {  		//    0     1  		//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  		//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  		string x' x1;  		//porownanie typow datetime'smalldtatime  		x = datatype (a);  		//slave  		x1 = datatype (b);  		//master  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  		}  		//porownanie default  		x = Extensions._getSeparatedString (a' 4);  		x1 = Extensions._getSeparatedString (b' 4);  		script = "";  		if (string.CompareOrdinal (x' x1) != 0) {  			if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  				script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  				Extensions._getSeparatedString (b' 1)' //column name  				datatype (b)' notnull (b)' //not null  				Extensions._getSeparatedString (b' 9)' //schema  				Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  				);  			}  			script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 8)' //default constraint name  			Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  			Extensions._getSeparatedString (b' 1)' //1- column_name  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  		}  		//porownanie not null  		x = Extensions._getSeparatedString (a' 7);  		x1 = Extensions._getSeparatedString (b' 7);  		if (string.CompareOrdinal (x' x1) != 0) {  			script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' // identity(b)' //identity  			notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)//schema  			);  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  		}  		//porownanie identity  		x = Extensions._getSeparatedString (a' 9);  		x1 = Extensions._getSeparatedString (b' 9);  		if (string.CompareOrdinal (x' x1) != 0) {  			dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  			//nie da sie dodac identity do istniejacej  		}  		//drop all index  		// add all index  	}  	break;  case "FN":  // Scalar function  case "TF":  // Table-valued Function  case "IF":  //FN 'IF'P'TR'V  case "P":  //FN 'IF'P'TR'V  case "TR":  //FN 'IF'P'TR'V  case "V":  	//FN 'IF'P'TR'V  	if (action == "Missmatched") {  		script = replaceAlter (r ["text"].ToString ());  		ModelScript = replaceAlter (ModelScript);  	}  	else {  		script = r ["text"].ToString ();  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script"' script' ModelScript);  	break;  case "PK":  	//  PK|pk_tblpriceitem|PRIMARY_KEY_CONSTRAINT|tblPriceItem|pricedetailID  	/// 0- type  	/// 1- name  	/// 2- type description  	/// 3- table name  	/// 4- column name  	if (action == "Missing")//brakuje kolumny  	 {  		script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  		Extensions._getSeparatedString (b' 0)' //name  		Extensions._getSeparatedString (b' 4)' //column name  		Extensions._getSeparatedString (b' 5)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  	}  	break;  case "IX":  	if (action == "Missmatched") {  		script = r ["text"].ToString ();  	}  	else//new  	 {  		script = r ["text"].ToString ();  		script = script.Replace ("' DROP_EXISTING = ON"' "");  	}  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' r ["key"].ToString ()' action)' key' details' "Generated Script"' script' ModelScript);  	break;  default:  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "no Action > change manual "' ""' "");  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' //get varchar(max) decimal(18'2)  	identity (b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' "Column"' action)' key' details' "Generated script " + temp' script' "");  }  else if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format ("alter table [{5}].[{0}] add [{1}] {2} {3} {4}"' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' //get varchar(max) decimal(18'2)  identity (b)' //identity  notnull (b)' //not null  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missmatched")//data_type' character maximum length'numeric precision' numeric scale   {  	//    0     1  	//a	"tbldoc|docagreement|datetime|||0|0|YES|"	string  	//b	"tbldoc|docagreement|smalldatetime|||0|0|YES|"	string  	string x' x1;  	//porownanie typow datetime'smalldtatime  	x = datatype (a);  	//slave  	x1 = datatype (b);  	//master  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  	}  	//porownanie default  	x = Extensions._getSeparatedString (a' 4);  	x1 = Extensions._getSeparatedString (b' 4);  	script = "";  	if (string.CompareOrdinal (x' x1) != 0) {  		if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  			script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  			Extensions._getSeparatedString (b' 1)' //column name  			datatype (b)' notnull (b)' //not null  			Extensions._getSeparatedString (b' 9)' //schema  			Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  			);  		}  		script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 8)' //default constraint name  		Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  		Extensions._getSeparatedString (b' 1)' //1- column_name  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  	}  	//porownanie not null  	x = Extensions._getSeparatedString (a' 7);  	x1 = Extensions._getSeparatedString (b' 7);  	if (string.CompareOrdinal (x' x1) != 0) {  		script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' // identity(b)' //identity  		notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)//schema  		);  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  	}  	//porownanie identity  	x = Extensions._getSeparatedString (a' 9);  	x1 = Extensions._getSeparatedString (b' 9);  	if (string.CompareOrdinal (x' x1) != 0) {  		dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "identity")' key' SymbolToObject (option)' details' "no Action > change manual "' "");  		//nie da sie dodac identity do istniejacej  	}  	//drop all index  	// add all index  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "data type")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' datatype (a)' datatype (b))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' notnull (b)' //not null  Extensions._getSeparatedString (b' 9)' //schema  Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' notnull (b)' //not null  Extensions._getSeparatedString (b' 9)' //schema  Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script += string.Format (@" -- DROP INDEX[{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index alter table [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3} "' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' notnull (b)' //not null  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x = Extensions._getSeparatedString (a' 4);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x1 = Extensions._getSeparatedString (b' 4);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  		script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  		Extensions._getSeparatedString (b' 1)' //column name  		datatype (b)' notnull (b)' //not null  		Extensions._getSeparatedString (b' 9)' //schema  		Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  		);  	}  	script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 8)' //default constraint name  	Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  	Extensions._getSeparatedString (b' 1)' //1- column_name  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (!string.IsNullOrEmpty (Extensions._getSeparatedString (a' 8))) {  	script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)' //schema  	Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  	);  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' notnull (b)' //not null  Extensions._getSeparatedString (b' 9)' //schema  Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format (@" exec sp_unbindefault  @objname = '[{4}].[{0}].[{1}]' --try to unbind default throw error if no default GO ALTER TABLE [{4}].[{0}] DROP CONSTRAINT [{5}]  -- drop default constraint which prevents update of datatype' Default constraint will be created in second schema comparision hit' Ugly but works :) GO "' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' notnull (b)' //not null  Extensions._getSeparatedString (b' 9)' //schema  Extensions._getSeparatedString (a' 8)//default constarint name jelsi jest jakis  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 8)' //default constraint name  Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  Extensions._getSeparatedString (b' 1)' //1- column_name  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 8)' //default constraint name  Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  Extensions._getSeparatedString (b' 1)' //1- column_name  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script += string.Format ("alter table [{4}].[{0}] add CONSTRAINT [{1}] DEFAULT  {2} FOR {3} --bind"' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 8)' //default constraint name  Extensions._getSeparatedString (b' 4)' //isnull(column_default' '')  Extensions._getSeparatedString (b' 1)' //1- column_name  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "column_default")' key' details' String.Format ("Generated script > change {0}> from:{1} to:{2} "' temp' Extensions._getSeparatedString (a' 4)' Extensions._getSeparatedString (b' 4))' script' "");  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x = Extensions._getSeparatedString (a' 7);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x1 = Extensions._getSeparatedString (b' 7);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (string.CompareOrdinal (x' x1) != 0) {  	script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  	Extensions._getSeparatedString (b' 1)' //column name  	datatype (b)' // identity(b)' //identity  	notnull (b)' //not null  	Extensions._getSeparatedString (b' 9)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}.{2}"' SymbolToObject (option)' action' "not null")' key' details' "Generated Script"' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format (@" -- DROP INDEX [{4}].[{0}].[index name]  --IF index exists you must drop first' zencomparer will recreate from source index -- SELECT *  from [{4}].[{0}] where  [{1}] is null -- Helper query -- update [{4}].[{0}] set [{1}]  = Defaultvalue  where is null -- Helper query ALTER TABLE [{4}].[{0}] ALTER COLUMN  [{1}] {2} {3}"' Extensions._getSeparatedString (b' 0)' //table name  Extensions._getSeparatedString (b' 1)' //column name  datatype (b)' // identity(b)' //identity  notnull (b)' //not null  Extensions._getSeparatedString (b' 9)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x = Extensions._getSeparatedString (a' 9);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: x1 = Extensions._getSeparatedString (b' 9);  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  	Extensions._getSeparatedString (b' 0)' //name  	Extensions._getSeparatedString (b' 4)' //column name  	Extensions._getSeparatedString (b' 5)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  	Extensions._getSeparatedString (b' 0)' //name  	Extensions._getSeparatedString (b' 4)' //column name  	Extensions._getSeparatedString (b' 5)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: if (action == "Missing")//brakuje kolumny   {  	script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  	Extensions._getSeparatedString (b' 0)' //name  	Extensions._getSeparatedString (b' 4)' //column name  	Extensions._getSeparatedString (b' 5)//schema  	);  	dgResultInsertRow ("Target"' string.Format ("{0}.{1}"' SymbolToObject (option)' action)' key' details' "Generated Script Primary key "' script' "");  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  Extensions._getSeparatedString (b' 0)' //name  Extensions._getSeparatedString (b' 4)' //column name  Extensions._getSeparatedString (b' 5)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  Extensions._getSeparatedString (b' 0)' //name  Extensions._getSeparatedString (b' 4)' //column name  Extensions._getSeparatedString (b' 5)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,compare,The following statement contains a magic number: script = string.Format ("alter table [{3}].[{0}]  ADD CONSTRAINT  {1} PRIMARY KEY ({2}) "' Extensions._getSeparatedString (b' 3)' //table name  Extensions._getSeparatedString (b' 0)' //name  Extensions._getSeparatedString (b' 4)' //column name  Extensions._getSeparatedString (b' 5)//schema  );  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: while (charEnum.MoveNext ()) {  	if (a [counter] != b [counter]) {  		//start  		if (counter - charBeforeAfter > -1)  			astart = counter - charBeforeAfter;  		else  			astart = 0;  		//end a  		if (counter + (charBeforeAfter * 2) < a.Length + 1)  			afinish = charBeforeAfter * 2;  		else  			afinish = a.Length - counter;  		//end b  		if (counter + (charBeforeAfter * 2) < b.Length + 1)  			bfinish = charBeforeAfter * 2;  		else  			bfinish = b.Length - counter;  		retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  		return retval;  	}  	counter++;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: while (charEnum.MoveNext ()) {  	if (a [counter] != b [counter]) {  		//start  		if (counter - charBeforeAfter > -1)  			astart = counter - charBeforeAfter;  		else  			astart = 0;  		//end a  		if (counter + (charBeforeAfter * 2) < a.Length + 1)  			afinish = charBeforeAfter * 2;  		else  			afinish = a.Length - counter;  		//end b  		if (counter + (charBeforeAfter * 2) < b.Length + 1)  			bfinish = charBeforeAfter * 2;  		else  			bfinish = b.Length - counter;  		retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  		return retval;  	}  	counter++;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: while (charEnum.MoveNext ()) {  	if (a [counter] != b [counter]) {  		//start  		if (counter - charBeforeAfter > -1)  			astart = counter - charBeforeAfter;  		else  			astart = 0;  		//end a  		if (counter + (charBeforeAfter * 2) < a.Length + 1)  			afinish = charBeforeAfter * 2;  		else  			afinish = a.Length - counter;  		//end b  		if (counter + (charBeforeAfter * 2) < b.Length + 1)  			bfinish = charBeforeAfter * 2;  		else  			bfinish = b.Length - counter;  		retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  		return retval;  	}  	counter++;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: while (charEnum.MoveNext ()) {  	if (a [counter] != b [counter]) {  		//start  		if (counter - charBeforeAfter > -1)  			astart = counter - charBeforeAfter;  		else  			astart = 0;  		//end a  		if (counter + (charBeforeAfter * 2) < a.Length + 1)  			afinish = charBeforeAfter * 2;  		else  			afinish = a.Length - counter;  		//end b  		if (counter + (charBeforeAfter * 2) < b.Length + 1)  			bfinish = charBeforeAfter * 2;  		else  			bfinish = b.Length - counter;  		retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  		return retval;  	}  	counter++;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (a [counter] != b [counter]) {  	//start  	if (counter - charBeforeAfter > -1)  		astart = counter - charBeforeAfter;  	else  		astart = 0;  	//end a  	if (counter + (charBeforeAfter * 2) < a.Length + 1)  		afinish = charBeforeAfter * 2;  	else  		afinish = a.Length - counter;  	//end b  	if (counter + (charBeforeAfter * 2) < b.Length + 1)  		bfinish = charBeforeAfter * 2;  	else  		bfinish = b.Length - counter;  	retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  	return retval;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (a [counter] != b [counter]) {  	//start  	if (counter - charBeforeAfter > -1)  		astart = counter - charBeforeAfter;  	else  		astart = 0;  	//end a  	if (counter + (charBeforeAfter * 2) < a.Length + 1)  		afinish = charBeforeAfter * 2;  	else  		afinish = a.Length - counter;  	//end b  	if (counter + (charBeforeAfter * 2) < b.Length + 1)  		bfinish = charBeforeAfter * 2;  	else  		bfinish = b.Length - counter;  	retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  	return retval;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (a [counter] != b [counter]) {  	//start  	if (counter - charBeforeAfter > -1)  		astart = counter - charBeforeAfter;  	else  		astart = 0;  	//end a  	if (counter + (charBeforeAfter * 2) < a.Length + 1)  		afinish = charBeforeAfter * 2;  	else  		afinish = a.Length - counter;  	//end b  	if (counter + (charBeforeAfter * 2) < b.Length + 1)  		bfinish = charBeforeAfter * 2;  	else  		bfinish = b.Length - counter;  	retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  	return retval;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (a [counter] != b [counter]) {  	//start  	if (counter - charBeforeAfter > -1)  		astart = counter - charBeforeAfter;  	else  		astart = 0;  	//end a  	if (counter + (charBeforeAfter * 2) < a.Length + 1)  		afinish = charBeforeAfter * 2;  	else  		afinish = a.Length - counter;  	//end b  	if (counter + (charBeforeAfter * 2) < b.Length + 1)  		bfinish = charBeforeAfter * 2;  	else  		bfinish = b.Length - counter;  	retval += string.Format ("a-text:[{0}]\nb-text:[{1}]"' a.Substring (astart' afinish)' b.Substring (astart' bfinish));  	return retval;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (counter + (charBeforeAfter * 2) < a.Length + 1)  	afinish = charBeforeAfter * 2;  else  	afinish = a.Length - counter;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (counter + (charBeforeAfter * 2) < a.Length + 1)  	afinish = charBeforeAfter * 2;  else  	afinish = a.Length - counter;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: afinish = charBeforeAfter * 2;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (counter + (charBeforeAfter * 2) < b.Length + 1)  	bfinish = charBeforeAfter * 2;  else  	bfinish = b.Length - counter;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: if (counter + (charBeforeAfter * 2) < b.Length + 1)  	bfinish = charBeforeAfter * 2;  else  	bfinish = b.Length - counter;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,showDiff,The following statement contains a magic number: bfinish = charBeforeAfter * 2;  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,identity,The following statement contains a magic number: if (Extensions._getSeparatedString (item' 9) == "1")  	return "IDENTITY(1'1)";  else  	return "";  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,notnull,The following statement contains a magic number: if (Extensions._getSeparatedString (item' 7) == "YES")  	return "NULL";  else  	return "NOT NULL";  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: switch (Extensions._getSeparatedString (item' 2).ToLower ()) {  case "numeric":  case "decimal":  	retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  	break;  case "sql_variant":  	retval = "";  	// String.Format("({0}'{1})"' Extensions._getSeparatedString(item' 5)' Extensions._getSeparatedString(item' 6));  	break;  default:  	retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  	//maximum length  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: switch (Extensions._getSeparatedString (item' 2).ToLower ()) {  case "numeric":  case "decimal":  	retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  	break;  case "sql_variant":  	retval = "";  	// String.Format("({0}'{1})"' Extensions._getSeparatedString(item' 5)' Extensions._getSeparatedString(item' 6));  	break;  default:  	retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  	//maximum length  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: switch (Extensions._getSeparatedString (item' 2).ToLower ()) {  case "numeric":  case "decimal":  	retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  	break;  case "sql_variant":  	retval = "";  	// String.Format("({0}'{1})"' Extensions._getSeparatedString(item' 5)' Extensions._getSeparatedString(item' 6));  	break;  default:  	retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  	//maximum length  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: switch (Extensions._getSeparatedString (item' 2).ToLower ()) {  case "numeric":  case "decimal":  	retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  	break;  case "sql_variant":  	retval = "";  	// String.Format("({0}'{1})"' Extensions._getSeparatedString(item' 5)' Extensions._getSeparatedString(item' 6));  	break;  default:  	retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  	//maximum length  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: switch (Extensions._getSeparatedString (item' 2).ToLower ()) {  case "numeric":  case "decimal":  	retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  	break;  case "sql_variant":  	retval = "";  	// String.Format("({0}'{1})"' Extensions._getSeparatedString(item' 5)' Extensions._getSeparatedString(item' 6));  	break;  default:  	retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  	//maximum length  	break;  }  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: retval = String.Format ("({0}'{1})"' Extensions._getSeparatedString (item' 5)' Extensions._getSeparatedString (item' 6));  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: retval = string.IsNullOrEmpty (Extensions._getSeparatedString (item' 3)) ? "" : string.Concat ("("' Extensions._getSeparatedString (item' 3).Replace ("-1"' "Max")' ")");  
Magic Number,zenComparer,frmMain,C:\repos\marcinKotynia_zenSQLcompare\frmMain.cs,datatype,The following statement contains a magic number: retval = String.Concat (Extensions._getSeparatedString (item' 2)' //data_type   retval//'   //data_type   //Extensions._getSeparatedString(item' 7).ToLower() == "yes" ? " NULL" : " NOT NULL"  );  
