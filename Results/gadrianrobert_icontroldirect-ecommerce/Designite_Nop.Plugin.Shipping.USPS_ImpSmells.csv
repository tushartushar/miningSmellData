Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The method has 242 lines of code.
Complex Method,Nop.Plugin.Shipping.USPS.Domain,USPSServices,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Domain\USPSServices.cs,GetServiceIdDomestic,Cyclomatic complexity of the method is 53
Complex Method,Nop.Plugin.Shipping.USPS.Domain,USPSServices,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Domain\USPSServices.cs,GetServiceIdInternational,Cyclomatic complexity of the method is 44
Complex Method,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,IsDomesticRequest,Cyclomatic complexity of the method is 16
Complex Method,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,Cyclomatic complexity of the method is 37
Complex Method,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,Cyclomatic complexity of the method is 20
Complex Method,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,GetShippingOptions,Cyclomatic complexity of the method is 8
Complex Method,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,Cyclomatic complexity of the method is 13
Complex Method,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,Cyclomatic complexity of the method is 12
Long Parameter List,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,USPSComputationMethod,The method has 6 parameters.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesOfferedDomestic is 30.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesOfferedInternational is 35.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesOfferedDomestic is 30.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesDomesticSelectedCount is 36.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesOfferedInternational is 35.
Long Identifier,Nop.Plugin.Shipping.USPS.Controllers,ShippingUSPSController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\Controllers\ShippingUSPSController.cs,Configure,The length of the parameter carrierServicesInternationalSelectedCount is 41.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,IsDomesticRequest,The length of the statement  "	if (getShippingOptionRequest != null && getShippingOptionRequest.ShippingAddress != null && getShippingOptionRequest.ShippingAddress.Country != null) { " is 151.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "		throw new NopException (string.Format ("USPS shipping service. Could not load \"{0}\" measure weight"' MEASUREWEIGHTSYSTEMKEYWORD)); " is 132.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "		throw new NopException (string.Format ("USPS shipping service. Could not load \"{0}\" measure dimension"' MEASUREDIMENSIONSYSTEMKEYWORD)); " is 138.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "	int length = Convert.ToInt32 (Math.Ceiling (getShippingOptionRequest.GetTotalLength () / baseusedMeasureDimension.Ratio * usedMeasureDimension.Ratio)); " is 151.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "	int height = Convert.ToInt32 (Math.Ceiling (getShippingOptionRequest.GetTotalHeight () / baseusedMeasureDimension.Ratio * usedMeasureDimension.Ratio)); " is 151.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "	int width = Convert.ToInt32 (Math.Ceiling (getShippingOptionRequest.GetTotalWidth () / baseusedMeasureDimension.Ratio * usedMeasureDimension.Ratio)); " is 149.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "	int weight = Convert.ToInt32 (Math.Ceiling (_shippingService.GetShoppingCartTotalWeight (getShippingOptionRequest.Items) / baseusedMeasureWeight.Ratio * usedMeasureWeight.Ratio)); " is 179.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "			// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE; " is 182.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The length of the statement  "		//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.   " is 142.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The length of the statement  "	string carrierServicesOffered = isDomestic ? _uspsSettings.CarrierServicesOfferedDomestic : _uspsSettings.CarrierServicesOfferedInternational; " is 142.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The length of the statement  "					if (!String.IsNullOrEmpty (serviceId) && !String.IsNullOrEmpty (carrierServicesOffered) && !carrierServicesOffered.Contains (serviceId)) { " is 138.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AdditionalHandlingCharge"' "Additional handling charge"); " is 125.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AdditionalHandlingCharge.Hint"' "Enter additional handling fee to charge your customers."); " is 159.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.ZipPostalCodeFrom.Hint"' "Specify origin zip code."); " is 121.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AvailableCarrierServicesDomestic"' "Domestic Carrier Services"); " is 132.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AvailableCarrierServicesDomestic.Hint"' "Select the services you want to offer to customers."); " is 163.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AvailableCarrierServicesInternational"' "International Carrier Services"); " is 142.
Long Statement,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Shipping.USPS.Fields.AvailableCarrierServicesInternational.Hint"' "Select the services you want to offer to customers."); " is 168.
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (isDomestic) {  	#region domestic request  	zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  	zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  	var sb = new StringBuilder ();  	sb.AppendFormat ("<RateV4Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.Append ("<Revision>2</Revision>");  	var xmlStrings = new USPSStrings ();  	// Create new instance with string array  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		var packageSize = GetPackageSize (length' height' width);  		// RJH get all XML strings not commented out for USPSStrings.   		// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  		// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  		foreach (string element in xmlStrings.Elements)// Loop over elements with property  		 {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.Append ("<Package ID=\"0\">");  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width);  				sb.AppendFormat ("<Length>{0}</Length>"' length);  				sb.AppendFormat ("<Height>{0}</Height>"' height);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		var packageSize = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			foreach (string element in xmlStrings.Elements) {  				if ((element == "First Class") && (weight >= 14)) {  					// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   				}  				else {  					sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  					sb.AppendFormat ("<Service>{0}</Service>"' element);  					if (element == "First Class")  						sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  					sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  					sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  					sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  					sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  					sb.Append ("<Container/>");  					sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  					sb.AppendFormat ("<Width>{0}</Width>"' width2);  					sb.AppendFormat ("<Length>{0}</Length>"' length2);  					sb.AppendFormat ("<Height>{0}</Height>"' height2);  					sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  					sb.Append ("<Machinable>FALSE</Machinable>");  					sb.Append ("</Package>");  				}  			}  		}  	}  	sb.Append ("</RateV4Request>");  	requestString = "API=RateV4&XML=" + sb.ToString ();  	#endregion  }  else {  	#region international request  	var sb = new StringBuilder ();  	// sb.AppendFormat("<IntlRateRequest USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	sb.AppendFormat ("<IntlRateV2Request USERID=\"{0}\" PASSWORD=\"{1}\">"' username' password);  	//V2 International rates require the package value to be declared.  Max content value for most shipping options is $400 so it is limited here.    	decimal intlSubTotal = decimal.Zero;  	if (subTotal > 400) {  		intlSubTotal = 400;  	}  	else {  		intlSubTotal = subTotal;  	}  	//little hack here for international requests  	length = 12;  	width = 12;  	height = 12;  	girth = height + height + width + width;  	string mailType = "Package";  	//Package' Envelope  	var packageSize = GetPackageSize (length' height' width);  	if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  	else {  		int totalPackages = 1;  		int totalPackagesDims = 1;  		int totalPackagesWeights = 1;  		if (IsPackageTooHeavy (pounds)) {  			totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  		}  		if (IsPackageTooLarge (length' height' width)) {  			totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  		}  		totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  		if (totalPackages == 0)  			totalPackages = 1;  		int pounds2 = pounds / totalPackages;  		//we don't use ounces  		int ounces2 = ounces / totalPackages;  		int height2 = height / totalPackages;  		int width2 = width / totalPackages;  		int length2 = length / totalPackages;  		if (pounds2 < 1)  			pounds2 = 1;  		if (height2 < 1)  			height2 = 1;  		if (width2 < 1)  			width2 = 1;  		if (length2 < 1)  			length2 = 1;  		//little hack here for international requests  		length2 = 12;  		width2 = 12;  		height2 = 12;  		var packageSize2 = GetPackageSize (length2' height2' width2);  		int girth2 = height2 + height2 + width2 + width2;  		for (int i = 0; i < totalPackages; i++) {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  			sb.Append ("<GXG>");  			sb.Append ("<POBoxFlag>N</POBoxFlag>");  			sb.Append ("<GiftFlag>N</GiftFlag>");  			sb.Append ("</GXG>");  			sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  			sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  			sb.Append ("<Container>RECTANGULAR</Container>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<CommercialFlag>N</CommercialFlag>");  			sb.Append ("</Package>");  		}  	}  	sb.Append ("</IntlRateV2Request>");  	requestString = "API=IntlRateV2&XML=" + sb.ToString ();  	#endregion  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: zipPostalCodeFrom = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeFrom)' 5);  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: zipPostalCodeTo = CommonHelper.EnsureMaximumLength (CommonHelper.EnsureNumericOnly (zipPostalCodeTo)' 5);  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	var packageSize = GetPackageSize (length' height' width);  	// RJH get all XML strings not commented out for USPSStrings.   	// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  	// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  	foreach (string element in xmlStrings.Elements)// Loop over elements with property  	 {  		if ((element == "First Class") && (weight >= 14)) {  			// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   		}  		else {  			sb.Append ("<Package ID=\"0\">");  			sb.AppendFormat ("<Service>{0}</Service>"' element);  			if (element == "First Class")  				sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  			sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  			sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  			sb.Append ("<Container/>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  			sb.AppendFormat ("<Width>{0}</Width>"' width);  			sb.AppendFormat ("<Length>{0}</Length>"' length);  			sb.AppendFormat ("<Height>{0}</Height>"' height);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.Append ("</Package>");  		}  	}  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	var packageSize = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		foreach (string element in xmlStrings.Elements) {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width2);  				sb.AppendFormat ("<Length>{0}</Length>"' length2);  				sb.AppendFormat ("<Height>{0}</Height>"' height2);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	var packageSize = GetPackageSize (length' height' width);  	// RJH get all XML strings not commented out for USPSStrings.   	// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  	// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  	foreach (string element in xmlStrings.Elements)// Loop over elements with property  	 {  		if ((element == "First Class") && (weight >= 14)) {  			// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   		}  		else {  			sb.Append ("<Package ID=\"0\">");  			sb.AppendFormat ("<Service>{0}</Service>"' element);  			if (element == "First Class")  				sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  			sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  			sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  			sb.Append ("<Container/>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  			sb.AppendFormat ("<Width>{0}</Width>"' width);  			sb.AppendFormat ("<Length>{0}</Length>"' length);  			sb.AppendFormat ("<Height>{0}</Height>"' height);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.Append ("</Package>");  		}  	}  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	var packageSize = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		foreach (string element in xmlStrings.Elements) {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width2);  				sb.AppendFormat ("<Length>{0}</Length>"' length2);  				sb.AppendFormat ("<Height>{0}</Height>"' height2);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	var packageSize = GetPackageSize (length' height' width);  	// RJH get all XML strings not commented out for USPSStrings.   	// RJH V3 USPS Service must be Express' Express SH' Express Commercial' Express SH Commercial' First Class' Priority' Priority Commercial' Parcel' Library' BPM' Media' ALL or ONLINE;  	// AC - Updated to V4 API and made minor improvements to allow First Class Packages (package only - not envelopes).  	foreach (string element in xmlStrings.Elements)// Loop over elements with property  	 {  		if ((element == "First Class") && (weight >= 14)) {  			// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   		}  		else {  			sb.Append ("<Package ID=\"0\">");  			sb.AppendFormat ("<Service>{0}</Service>"' element);  			if (element == "First Class")  				sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  			sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  			sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  			sb.Append ("<Container/>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  			sb.AppendFormat ("<Width>{0}</Width>"' width);  			sb.AppendFormat ("<Length>{0}</Length>"' length);  			sb.AppendFormat ("<Height>{0}</Height>"' height);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.Append ("</Package>");  		}  	}  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	var packageSize = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		foreach (string element in xmlStrings.Elements) {  			if ((element == "First Class") && (weight >= 14)) {  				// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   			}  			else {  				sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  				sb.AppendFormat ("<Service>{0}</Service>"' element);  				if (element == "First Class")  					sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  				sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  				sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  				sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  				sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  				sb.Append ("<Container/>");  				sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  				sb.AppendFormat ("<Width>{0}</Width>"' width2);  				sb.AppendFormat ("<Length>{0}</Length>"' length2);  				sb.AppendFormat ("<Height>{0}</Height>"' height2);  				sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  				sb.Append ("<Machinable>FALSE</Machinable>");  				sb.Append ("</Package>");  			}  		}  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: foreach (string element in xmlStrings.Elements)// Loop over elements with property   {  	if ((element == "First Class") && (weight >= 14)) {  		// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   	}  	else {  		sb.Append ("<Package ID=\"0\">");  		sb.AppendFormat ("<Service>{0}</Service>"' element);  		if (element == "First Class")  			sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  		sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  		sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  		sb.Append ("<Container/>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width);  		sb.AppendFormat ("<Length>{0}</Length>"' length);  		sb.AppendFormat ("<Height>{0}</Height>"' height);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((element == "First Class") && (weight >= 14)) {  	// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   }  else {  	sb.Append ("<Package ID=\"0\">");  	sb.AppendFormat ("<Service>{0}</Service>"' element);  	if (element == "First Class")  		sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  	sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  	sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  	sb.Append ("<Container/>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width);  	sb.AppendFormat ("<Length>{0}</Length>"' length);  	sb.AppendFormat ("<Height>{0}</Height>"' height);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.Append ("</Package>");  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (IsPackageTooLarge (length' height' width)) {  	totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: for (int i = 0; i < totalPackages; i++) {  	foreach (string element in xmlStrings.Elements) {  		if ((element == "First Class") && (weight >= 14)) {  			// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   		}  		else {  			sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  			sb.AppendFormat ("<Service>{0}</Service>"' element);  			if (element == "First Class")  				sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  			sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  			sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  			sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  			sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  			sb.Append ("<Container/>");  			sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  			sb.AppendFormat ("<Width>{0}</Width>"' width2);  			sb.AppendFormat ("<Length>{0}</Length>"' length2);  			sb.AppendFormat ("<Height>{0}</Height>"' height2);  			sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  			sb.Append ("<Machinable>FALSE</Machinable>");  			sb.Append ("</Package>");  		}  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: foreach (string element in xmlStrings.Elements) {  	if ((element == "First Class") && (weight >= 14)) {  		// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   	}  	else {  		sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  		sb.AppendFormat ("<Service>{0}</Service>"' element);  		if (element == "First Class")  			sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  		sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  		sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  		sb.Append ("<Container/>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  		sb.AppendFormat ("<Width>{0}</Width>"' width2);  		sb.AppendFormat ("<Length>{0}</Length>"' length2);  		sb.AppendFormat ("<Height>{0}</Height>"' height2);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((element == "First Class") && (weight >= 14)) {  	// AC - At the time of coding there aren't any First Class shipping options for packages over 13 ounces.   }  else {  	sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  	sb.AppendFormat ("<Service>{0}</Service>"' element);  	if (element == "First Class")  		sb.Append ("<FirstClassMailType>PARCEL</FirstClassMailType>");  	sb.AppendFormat ("<ZipOrigination>{0}</ZipOrigination>"' zipPostalCodeFrom);  	sb.AppendFormat ("<ZipDestination>{0}</ZipDestination>"' zipPostalCodeTo);  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  	sb.Append ("<Container/>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width2);  	sb.AppendFormat ("<Length>{0}</Length>"' length2);  	sb.AppendFormat ("<Height>{0}</Height>"' height2);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.Append ("</Package>");  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (subTotal > 400) {  	intlSubTotal = 400;  }  else {  	intlSubTotal = subTotal;  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (subTotal > 400) {  	intlSubTotal = 400;  }  else {  	intlSubTotal = subTotal;  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: intlSubTotal = 400;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: length = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: width = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: height = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	sb.Append ("<Package ID=\"0\">");  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  	sb.Append ("<GXG>");  	sb.Append ("<POBoxFlag>N</POBoxFlag>");  	sb.Append ("<GiftFlag>N</GiftFlag>");  	sb.Append ("</GXG>");  	sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  	sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  	sb.Append ("<Container>RECTANGULAR</Container>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width);  	sb.AppendFormat ("<Length>{0}</Length>"' length);  	sb.AppendFormat ("<Height>{0}</Height>"' height);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  	sb.Append ("<CommercialFlag>N</CommercialFlag>");  	sb.Append ("</Package>");  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	//little hack here for international requests  	length2 = 12;  	width2 = 12;  	height2 = 12;  	var packageSize2 = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  		sb.AppendFormat ("<Width>{0}</Width>"' width2);  		sb.AppendFormat ("<Length>{0}</Length>"' length2);  		sb.AppendFormat ("<Height>{0}</Height>"' height2);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	sb.Append ("<Package ID=\"0\">");  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  	sb.Append ("<GXG>");  	sb.Append ("<POBoxFlag>N</POBoxFlag>");  	sb.Append ("<GiftFlag>N</GiftFlag>");  	sb.Append ("</GXG>");  	sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  	sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  	sb.Append ("<Container>RECTANGULAR</Container>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width);  	sb.AppendFormat ("<Length>{0}</Length>"' length);  	sb.AppendFormat ("<Height>{0}</Height>"' height);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  	sb.Append ("<CommercialFlag>N</CommercialFlag>");  	sb.Append ("</Package>");  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	//little hack here for international requests  	length2 = 12;  	width2 = 12;  	height2 = 12;  	var packageSize2 = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  		sb.AppendFormat ("<Width>{0}</Width>"' width2);  		sb.AppendFormat ("<Length>{0}</Length>"' length2);  		sb.AppendFormat ("<Height>{0}</Height>"' height2);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	sb.Append ("<Package ID=\"0\">");  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  	sb.Append ("<GXG>");  	sb.Append ("<POBoxFlag>N</POBoxFlag>");  	sb.Append ("<GiftFlag>N</GiftFlag>");  	sb.Append ("</GXG>");  	sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  	sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  	sb.Append ("<Container>RECTANGULAR</Container>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width);  	sb.AppendFormat ("<Length>{0}</Length>"' length);  	sb.AppendFormat ("<Height>{0}</Height>"' height);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  	sb.Append ("<CommercialFlag>N</CommercialFlag>");  	sb.Append ("</Package>");  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	//little hack here for international requests  	length2 = 12;  	width2 = 12;  	height2 = 12;  	var packageSize2 = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  		sb.AppendFormat ("<Width>{0}</Width>"' width2);  		sb.AppendFormat ("<Length>{0}</Length>"' length2);  		sb.AppendFormat ("<Height>{0}</Height>"' height2);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if ((!IsPackageTooHeavy (pounds)) && (!IsPackageTooLarge (length' height' width))) {  	sb.Append ("<Package ID=\"0\">");  	sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds);  	sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces);  	sb.Append ("<Machinable>FALSE</Machinable>");  	sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  	sb.Append ("<GXG>");  	sb.Append ("<POBoxFlag>N</POBoxFlag>");  	sb.Append ("<GiftFlag>N</GiftFlag>");  	sb.Append ("</GXG>");  	sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  	sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  	sb.Append ("<Container>RECTANGULAR</Container>");  	sb.AppendFormat ("<Size>{0}</Size>"' packageSize);  	sb.AppendFormat ("<Width>{0}</Width>"' width);  	sb.AppendFormat ("<Length>{0}</Length>"' length);  	sb.AppendFormat ("<Height>{0}</Height>"' height);  	sb.AppendFormat ("<Girth>{0}</Girth>"' girth);  	sb.Append ("<CommercialFlag>N</CommercialFlag>");  	sb.Append ("</Package>");  }  else {  	int totalPackages = 1;  	int totalPackagesDims = 1;  	int totalPackagesWeights = 1;  	if (IsPackageTooHeavy (pounds)) {  		totalPackagesWeights = Convert.ToInt32 (Math.Ceiling ((decimal)pounds / (decimal)MAXPACKAGEWEIGHT));  	}  	if (IsPackageTooLarge (length' height' width)) {  		totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  	}  	totalPackages = totalPackagesDims > totalPackagesWeights ? totalPackagesDims : totalPackagesWeights;  	if (totalPackages == 0)  		totalPackages = 1;  	int pounds2 = pounds / totalPackages;  	//we don't use ounces  	int ounces2 = ounces / totalPackages;  	int height2 = height / totalPackages;  	int width2 = width / totalPackages;  	int length2 = length / totalPackages;  	if (pounds2 < 1)  		pounds2 = 1;  	if (height2 < 1)  		height2 = 1;  	if (width2 < 1)  		width2 = 1;  	if (length2 < 1)  		length2 = 1;  	//little hack here for international requests  	length2 = 12;  	width2 = 12;  	height2 = 12;  	var packageSize2 = GetPackageSize (length2' height2' width2);  	int girth2 = height2 + height2 + width2 + width2;  	for (int i = 0; i < totalPackages; i++) {  		sb.AppendFormat ("<Package ID=\"{0}\">"' i.ToString ());  		sb.AppendFormat ("<Pounds>{0}</Pounds>"' pounds2);  		sb.AppendFormat ("<Ounces>{0}</Ounces>"' ounces2);  		sb.Append ("<Machinable>FALSE</Machinable>");  		sb.AppendFormat ("<MailType>{0}</MailType>"' mailType);  		sb.Append ("<GXG>");  		sb.Append ("<POBoxFlag>N</POBoxFlag>");  		sb.Append ("<GiftFlag>N</GiftFlag>");  		sb.Append ("</GXG>");  		sb.AppendFormat ("<ValueOfContents>{0}</ValueOfContents>"' intlSubTotal);  		sb.AppendFormat ("<Country>{0}</Country>"' getShippingOptionRequest.ShippingAddress.Country.Name);  		sb.Append ("<Container>RECTANGULAR</Container>");  		sb.AppendFormat ("<Size>{0}</Size>"' packageSize2);  		sb.AppendFormat ("<Width>{0}</Width>"' width2);  		sb.AppendFormat ("<Length>{0}</Length>"' length2);  		sb.AppendFormat ("<Height>{0}</Height>"' height2);  		sb.AppendFormat ("<Girth>{0}</Girth>"' girth2);  		sb.Append ("<CommercialFlag>N</CommercialFlag>");  		sb.Append ("</Package>");  	}  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: if (IsPackageTooLarge (length' height' width)) {  	totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: totalPackagesDims = Convert.ToInt32 (Math.Ceiling ((decimal)TotalPackageSize (length' height' width) / (decimal)108));  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: length2 = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: width2 = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The following statement contains a magic number: height2 = 12;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,IsPackageTooLarge,The following statement contains a magic number: if (total > 130)  	return true;  else  	return false;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,GetPackageSize,The following statement contains a magic number: if (total <= 84)  	return USPSPackageSize.Regular;  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The following statement contains a magic number: using (var sr = new StringReader (response))  	using (var tr = new XmlTextReader (sr)) {  		do {  			tr.Read ();  			if ((tr.Name == "Error") && (tr.NodeType == XmlNodeType.Element)) {  				string errorText = "";  				while (tr.Read ()) {  					if ((tr.Name == "Description") && (tr.NodeType == XmlNodeType.Element))  						errorText += "Error Desc: " + tr.ReadString ();  					if ((tr.Name == "HelpContext") && (tr.NodeType == XmlNodeType.Element))  						errorText += "USPS Help Context: " + tr.ReadString () + ". ";  				}  				error = "USPS Error returned: " + errorText;  			}  			if ((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.Element)) {  				string serviceId = string.Empty;  				// Find the ID for the service  				if (tr.HasAttributes) {  					for (int i = 0; i < tr.AttributeCount; i++) {  						tr.MoveToAttribute (i);  						if (tr.Name.Equals (classStr)) {  							// Add delimiters [] so that single digit IDs aren't found in mutli-digit IDs                                      							serviceId = String.Format ("[{0}]"' tr.Value);  							break;  						}  					}  				}  				// Go to the next rate if the service ID is not in the list of services to offer  				if (!String.IsNullOrEmpty (serviceId) && !String.IsNullOrEmpty (carrierServicesOffered) && !carrierServicesOffered.Contains (serviceId)) {  					continue;  				}  				string serviceCode = string.Empty;  				string postalRate = string.Empty;  				do {  					tr.Read ();  					if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.Element)) {  						serviceCode = tr.ReadString ();  						tr.ReadEndElement ();  						if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.EndElement))  							break;  					}  					if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.Element)) {  						postalRate = tr.ReadString ();  						tr.ReadEndElement ();  						if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.EndElement))  							break;  					}  				}  				while (!((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.EndElement)));  				//USPS issue fixed  				char reg = (char)174;  				// registered sign "\u00AE"  				string tm = "\u2122";  				// trademark sign  				serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;reg;&lt;/sup&gt;"' reg.ToString ());  				serviceCode = serviceCode.Replace ("&lt;sup&gt;&#174;&lt;/sup&gt;"' reg.ToString ());  				serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;trade;&lt;/sup&gt;"' tm);  				serviceCode = serviceCode.Replace ("&lt;sup&gt;&#8482;&lt;/sup&gt;"' tm);  				ShippingOption shippingOption = shippingOptions.Find (s => s.Name == serviceCode);  				if (shippingOption == null) {  					shippingOption = new ShippingOption ();  					shippingOption.Name = serviceCode;  					shippingOptions.Add (shippingOption);  				}  				shippingOption.Rate += Convert.ToDecimal (postalRate' new CultureInfo ("en-US"));  			}  		}  		while (!tr.EOF);  	}  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The following statement contains a magic number: using (var tr = new XmlTextReader (sr)) {  	do {  		tr.Read ();  		if ((tr.Name == "Error") && (tr.NodeType == XmlNodeType.Element)) {  			string errorText = "";  			while (tr.Read ()) {  				if ((tr.Name == "Description") && (tr.NodeType == XmlNodeType.Element))  					errorText += "Error Desc: " + tr.ReadString ();  				if ((tr.Name == "HelpContext") && (tr.NodeType == XmlNodeType.Element))  					errorText += "USPS Help Context: " + tr.ReadString () + ". ";  			}  			error = "USPS Error returned: " + errorText;  		}  		if ((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.Element)) {  			string serviceId = string.Empty;  			// Find the ID for the service  			if (tr.HasAttributes) {  				for (int i = 0; i < tr.AttributeCount; i++) {  					tr.MoveToAttribute (i);  					if (tr.Name.Equals (classStr)) {  						// Add delimiters [] so that single digit IDs aren't found in mutli-digit IDs                                      						serviceId = String.Format ("[{0}]"' tr.Value);  						break;  					}  				}  			}  			// Go to the next rate if the service ID is not in the list of services to offer  			if (!String.IsNullOrEmpty (serviceId) && !String.IsNullOrEmpty (carrierServicesOffered) && !carrierServicesOffered.Contains (serviceId)) {  				continue;  			}  			string serviceCode = string.Empty;  			string postalRate = string.Empty;  			do {  				tr.Read ();  				if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.Element)) {  					serviceCode = tr.ReadString ();  					tr.ReadEndElement ();  					if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.EndElement))  						break;  				}  				if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.Element)) {  					postalRate = tr.ReadString ();  					tr.ReadEndElement ();  					if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.EndElement))  						break;  				}  			}  			while (!((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.EndElement)));  			//USPS issue fixed  			char reg = (char)174;  			// registered sign "\u00AE"  			string tm = "\u2122";  			// trademark sign  			serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;reg;&lt;/sup&gt;"' reg.ToString ());  			serviceCode = serviceCode.Replace ("&lt;sup&gt;&#174;&lt;/sup&gt;"' reg.ToString ());  			serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;trade;&lt;/sup&gt;"' tm);  			serviceCode = serviceCode.Replace ("&lt;sup&gt;&#8482;&lt;/sup&gt;"' tm);  			ShippingOption shippingOption = shippingOptions.Find (s => s.Name == serviceCode);  			if (shippingOption == null) {  				shippingOption = new ShippingOption ();  				shippingOption.Name = serviceCode;  				shippingOptions.Add (shippingOption);  			}  			shippingOption.Rate += Convert.ToDecimal (postalRate' new CultureInfo ("en-US"));  		}  	}  	while (!tr.EOF);  }  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The following statement contains a magic number: do {  	tr.Read ();  	if ((tr.Name == "Error") && (tr.NodeType == XmlNodeType.Element)) {  		string errorText = "";  		while (tr.Read ()) {  			if ((tr.Name == "Description") && (tr.NodeType == XmlNodeType.Element))  				errorText += "Error Desc: " + tr.ReadString ();  			if ((tr.Name == "HelpContext") && (tr.NodeType == XmlNodeType.Element))  				errorText += "USPS Help Context: " + tr.ReadString () + ". ";  		}  		error = "USPS Error returned: " + errorText;  	}  	if ((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.Element)) {  		string serviceId = string.Empty;  		// Find the ID for the service  		if (tr.HasAttributes) {  			for (int i = 0; i < tr.AttributeCount; i++) {  				tr.MoveToAttribute (i);  				if (tr.Name.Equals (classStr)) {  					// Add delimiters [] so that single digit IDs aren't found in mutli-digit IDs                                      					serviceId = String.Format ("[{0}]"' tr.Value);  					break;  				}  			}  		}  		// Go to the next rate if the service ID is not in the list of services to offer  		if (!String.IsNullOrEmpty (serviceId) && !String.IsNullOrEmpty (carrierServicesOffered) && !carrierServicesOffered.Contains (serviceId)) {  			continue;  		}  		string serviceCode = string.Empty;  		string postalRate = string.Empty;  		do {  			tr.Read ();  			if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.Element)) {  				serviceCode = tr.ReadString ();  				tr.ReadEndElement ();  				if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.EndElement))  					break;  			}  			if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.Element)) {  				postalRate = tr.ReadString ();  				tr.ReadEndElement ();  				if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.EndElement))  					break;  			}  		}  		while (!((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.EndElement)));  		//USPS issue fixed  		char reg = (char)174;  		// registered sign "\u00AE"  		string tm = "\u2122";  		// trademark sign  		serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;reg;&lt;/sup&gt;"' reg.ToString ());  		serviceCode = serviceCode.Replace ("&lt;sup&gt;&#174;&lt;/sup&gt;"' reg.ToString ());  		serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;trade;&lt;/sup&gt;"' tm);  		serviceCode = serviceCode.Replace ("&lt;sup&gt;&#8482;&lt;/sup&gt;"' tm);  		ShippingOption shippingOption = shippingOptions.Find (s => s.Name == serviceCode);  		if (shippingOption == null) {  			shippingOption = new ShippingOption ();  			shippingOption.Name = serviceCode;  			shippingOptions.Add (shippingOption);  		}  		shippingOption.Rate += Convert.ToDecimal (postalRate' new CultureInfo ("en-US"));  	}  }  while (!tr.EOF);  
Magic Number,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,ParseResponse,The following statement contains a magic number: if ((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.Element)) {  	string serviceId = string.Empty;  	// Find the ID for the service  	if (tr.HasAttributes) {  		for (int i = 0; i < tr.AttributeCount; i++) {  			tr.MoveToAttribute (i);  			if (tr.Name.Equals (classStr)) {  				// Add delimiters [] so that single digit IDs aren't found in mutli-digit IDs                                      				serviceId = String.Format ("[{0}]"' tr.Value);  				break;  			}  		}  	}  	// Go to the next rate if the service ID is not in the list of services to offer  	if (!String.IsNullOrEmpty (serviceId) && !String.IsNullOrEmpty (carrierServicesOffered) && !carrierServicesOffered.Contains (serviceId)) {  		continue;  	}  	string serviceCode = string.Empty;  	string postalRate = string.Empty;  	do {  		tr.Read ();  		if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.Element)) {  			serviceCode = tr.ReadString ();  			tr.ReadEndElement ();  			if ((tr.Name == mailServiceStr) && (tr.NodeType == XmlNodeType.EndElement))  				break;  		}  		if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.Element)) {  			postalRate = tr.ReadString ();  			tr.ReadEndElement ();  			if ((tr.Name == rateStr) && (tr.NodeType == XmlNodeType.EndElement))  				break;  		}  	}  	while (!((tr.Name == postageStr) && (tr.NodeType == XmlNodeType.EndElement)));  	//USPS issue fixed  	char reg = (char)174;  	// registered sign "\u00AE"  	string tm = "\u2122";  	// trademark sign  	serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;reg;&lt;/sup&gt;"' reg.ToString ());  	serviceCode = serviceCode.Replace ("&lt;sup&gt;&#174;&lt;/sup&gt;"' reg.ToString ());  	serviceCode = serviceCode.Replace ("&lt;sup&gt;&amp;trade;&lt;/sup&gt;"' tm);  	serviceCode = serviceCode.Replace ("&lt;sup&gt;&#8482;&lt;/sup&gt;"' tm);  	ShippingOption shippingOption = shippingOptions.Find (s => s.Name == serviceCode);  	if (shippingOption == null) {  		shippingOption = new ShippingOption ();  		shippingOption.Name = serviceCode;  		shippingOptions.Add (shippingOption);  	}  	shippingOption.Rate += Convert.ToDecimal (postalRate' new CultureInfo ("en-US"));  }  
Duplicate Code,Nop.Plugin.Shipping.USPS,USPSComputationMethod,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Shipping.USPS\USPSComputationMethod.cs,CreateRequest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((80' 107)' (181' 208))
