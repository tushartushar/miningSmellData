Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The method has 152 lines of code.
Complex Method,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,NotificationHandler,Cyclomatic complexity of the method is 9
Complex Method,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,Cyclomatic complexity of the method is 21
Complex Method,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessCallBackRequest,Cyclomatic complexity of the method is 15
Long Parameter List,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,PaymentGoogleCheckoutController,The method has 10 parameters.
Long Parameter List,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,GoogleCheckoutPaymentProcessor,The method has 17 parameters.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,Configure,The length of the statement  "		ModelState.AddModelError (""' "Configuring Google Checkout is not allowed in medium trust. Manually update web.config file."); " is 126.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,PaymentInfo,The length of the statement  "	var cart = _workContext.CurrentCustomer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).Where (sci => sci.StoreId == _storeContext.CurrentStore.Id).ToList (); " is 197.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,SubmitButton,The length of the statement  "		var cart = _workContext.CurrentCustomer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).Where (sci => sci.StoreId == _storeContext.CurrentStore.Id).ToList (); " is 197.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,SubmitButton,The length of the statement  "		var req = new CheckoutShoppingCartRequest (GCheckoutConfigurationHelper.MerchantID.ToString ()' GCheckoutConfigurationHelper.MerchantKey' GCheckoutConfigurationHelper.Environment' currency' cartExpirationMinutes' false); " is 220.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,SubmitButton,The length of the statement  "		var processor = _paymentService.LoadPaymentMethodBySystemName ("Payments.GoogleCheckout") as GoogleCheckoutPaymentProcessor; " is 124.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,SubmitButton,The length of the statement  "			return Content ("Resp.RedirectUrl = " + resp.RedirectUrl + "<br />" + "Resp.IsGood = " + resp.IsGood + "<br />" + "Resp.ErrorMessage = " + Server.HtmlEncode (resp.ErrorMessage) + "<br />" + "Resp.ResponseXml = " + Server.HtmlEncode (resp.ResponseXml) + "<br />"); " is 263.
Long Statement,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,NotificationHandler,The length of the statement  "	var processor = _paymentService.LoadPaymentMethodBySystemName ("Payments.GoogleCheckout") as GoogleCheckoutPaymentProcessor; " is 124.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "		var cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).Where (sci => sci.StoreId == _storeContext.CurrentStore.Id).ToList (); " is 177.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "		var billingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyerbillingaddress.region.Trim ()); " is 138.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "		var billingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyerbillingaddress.countrycode.Trim ()); " is 129.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "		var billingAddress = customer.Addresses.ToList ().FindAddress (billingFirstName' billingLastName' billingPhoneNumber' billingEmail' string.Empty' string.Empty' billingAddress1' billingAddress2' billingCity' billingStateProvinceId' billingZipPostalCode' billingCountryId); " is 271.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.SelectedShippingOption' null' _storeContext.CurrentStore.Id); " is 156.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "			var shippingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyershippingaddress.region.Trim ()); " is 140.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "			var shippingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyershippingaddress.countrycode.Trim ()); " is 131.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "			var shippingAddress = customer.Addresses.ToList ().FindAddress (shippingFirstName' shippingLastName' shippingPhoneNumber' shippingEmail' string.Empty' string.Empty' shippingAddress1' shippingAddress2' shippingCity' shippingStateProvinceId' shippingZipPostalCode' shippingCountryId); " is 282.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "			if (newOrderNotification.orderadjustment != null && newOrderNotification.orderadjustment.shipping != null && newOrderNotification.orderadjustment.shipping.Item != null) { " is 170.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The length of the statement  "				_genericAttributeService.SaveAttribute (customer' SystemCustomerAttributeNames.SelectedShippingOption' shippingOption' _storeContext.CurrentStore.Id); " is 150.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessOrderStateChangeNotification,The length of the statement  "		var changeOrder = (OrderStateChangeNotification)EncodeHelper.Deserialize (xmlData' typeof(OrderStateChangeNotification)); " is 121.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessOrderStateChangeNotification,The length of the statement  "			string message = string.Format ("Order status {0} from Google: Order Number {1}"' orderState' changeOrder.googleordernumber); " is 125.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessRiskInformationNotification,The length of the statement  "	var riskInformationNotification = (RiskInformationNotification)EncodeHelper.Deserialize (xmlData' typeof(RiskInformationNotification)); " is 135.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessPayment,The length of the statement  "	var googleOrderNumber = processPaymentRequest.CustomValues.ContainsKey ("GoogleOrderNumber") ? processPaymentRequest.CustomValues ["GoogleOrderNumber"] as string : ""; " is 167.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,PostCartToGoogle,The length of the statement  "			string description = _productAttributeFormatter.FormatAttributes (product' sci.AttributesXml' _workContext.CurrentCustomer' "' "' false' true' true' true' false); " is 162.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,PostCartToGoogle,The length of the statement  "			decimal unitPrice = _taxService.GetProductPrice (sci.Product' _priceCalculationService.GetUnitPrice (sci' true)' out taxRate); " is 126.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,PostCartToGoogle,The length of the statement  "	//        TaxByStateProvinceCollection taxByStateProvinceCollection = TaxByIoC.Resolve<IStateProvinceService>().GetAllByStateProvinceID(state.StateProvinceID); " is 159.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,PostCartToGoogle,The length of the statement  "	//    req.AddItem(string.Format("Gift Card - {0}"' agc.GiftCard.GiftCardCouponCode)' string.Empty' string.Empty' (decimal)(-1.0) * agc.AmountCanBeUsed' 1); " is 155.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.UseSandbox.Hint"' "Check to enable Sandbox (testing environment)."); " is 146.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.GoogleVendorId.Hint"' "Specify Google Vendor ID."); " is 129.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.GoogleMerchantKey"' "Google Merchant Key"); " is 121.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.GoogleMerchantKey.Hint"' "Specify Google Merchant Key."); " is 135.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.AuthenticateCallback"' "Authenticate callback"); " is 126.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.AuthenticateCallback.Hint"' "Check to ensure that Google handler callback is authenticated."); " is 172.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.GoogleCheckout.Fields.PassEditLink.Hint"' "Check to pass 'edit cart' link to Google Checkout"); " is 151.
Long Statement,Nop.Plugin.Payments.GoogleCheckout,RouteProvider,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\RouteProvider.cs,RegisterRoutes,The length of the statement  "	routes.MapRoute ("Plugin.Payments.GoogleCheckout.NotificationHandler"' "Plugins/PaymentGoogleCheckout/NotificationHandler"' new { " is 129.
Magic Number,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,NotificationHandler,The following statement contains a magic number: if (!processor.VerifyMessageAuthentication (Request.Headers ["Authorization"])) {  	return new HttpStatusCodeResult (401' "Access Denied");  	//return new HttpUnauthorizedResult("Access Denied");  }  
Magic Number,Nop.Plugin.Payments.GoogleCheckout.Controllers,PaymentGoogleCheckoutController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\Controllers\PaymentGoogleCheckoutController.cs,NotificationHandler,The following statement contains a magic number: return new HttpStatusCodeResult (401' "Access Denied");  
Magic Number,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The following statement contains a magic number: try {  	var newOrderNotification = (NewOrderNotification)EncodeHelper.Deserialize (xmlData' typeof(NewOrderNotification));  	string googleOrderNumber = newOrderNotification.googleordernumber;  	XmlNode customerInfo = newOrderNotification.shoppingcart.merchantprivatedata.Any [0];  	int customerId = Convert.ToInt32 (customerInfo.Attributes ["CustomerID"].Value);  	//int customerLanguageId = Convert.ToInt32(customerInfo.Attributes["CustomerLanguageID"].Value);  	//int customerCurrencyId = Convert.ToInt32(customerInfo.Attributes["CustomerCurrencyID"].Value);  	var customer = _customerService.GetCustomerById (customerId);  	if (customer == null) {  		LogMessage ("Could not load a customer");  		return;  	}  	var cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).Where (sci => sci.StoreId == _storeContext.CurrentStore.Id).ToList ();  	_workContext.CurrentCustomer = customer;  	if (cart.Count == 0) {  		LogMessage ("Cart is empty");  		return;  	}  	//validate cart  	foreach (var sci in cart) {  		bool ok = false;  		foreach (Item item in newOrderNotification.shoppingcart.items) {  			if (!String.IsNullOrEmpty (item.merchantitemid)) {  				if ((Convert.ToInt32 (item.merchantitemid) == sci.Id) && (item.quantity == sci.Quantity)) {  					ok = true;  					break;  				}  			}  		}  		if (!ok) {  			LogMessage (string.Format ("Shopping Cart item has been changed. {0}. {1}"' sci.Id' sci.Quantity));  			return;  		}  	}  	string[] billingFullname = newOrderNotification.buyerbillingaddress.contactname.Trim ().Split (new char[] {  		' '  	}' 2' StringSplitOptions.RemoveEmptyEntries);  	string billingFirstName = billingFullname [0];  	string billingLastName = string.Empty;  	if (billingFullname.Length > 1)  		billingLastName = billingFullname [1];  	string billingEmail = newOrderNotification.buyerbillingaddress.email.Trim ();  	string billingAddress1 = newOrderNotification.buyerbillingaddress.address1.Trim ();  	string billingAddress2 = newOrderNotification.buyerbillingaddress.address2.Trim ();  	string billingPhoneNumber = newOrderNotification.buyerbillingaddress.phone.Trim ();  	string billingCity = newOrderNotification.buyerbillingaddress.city.Trim ();  	int? billingStateProvinceId = null;  	var billingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyerbillingaddress.region.Trim ());  	if (billingStateProvince != null)  		billingStateProvinceId = billingStateProvince.Id;  	string billingZipPostalCode = newOrderNotification.buyerbillingaddress.postalcode.Trim ();  	int? billingCountryId = null;  	var billingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyerbillingaddress.countrycode.Trim ());  	if (billingCountry != null)  		billingCountryId = billingCountry.Id;  	var billingAddress = customer.Addresses.ToList ().FindAddress (billingFirstName' billingLastName' billingPhoneNumber' billingEmail' string.Empty' string.Empty' billingAddress1' billingAddress2' billingCity' billingStateProvinceId' billingZipPostalCode' billingCountryId);  	if (billingAddress == null) {  		billingAddress = new Core.Domain.Common.Address () {  			FirstName = billingFirstName'  			LastName = billingLastName'  			PhoneNumber = billingPhoneNumber'  			Email = billingEmail'  			Address1 = billingAddress1'  			Address2 = billingAddress2'  			City = billingCity'  			StateProvinceId = billingStateProvinceId'  			ZipPostalCode = billingZipPostalCode'  			CountryId = billingCountryId'  			CreatedOnUtc = DateTime.UtcNow'  		};  		customer.Addresses.Add (billingAddress);  	}  	//set default billing address  	customer.BillingAddress = billingAddress;  	_customerService.UpdateCustomer (customer);  	_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.SelectedShippingOption' null' _storeContext.CurrentStore.Id);  	bool shoppingCartRequiresShipping = cart.RequiresShipping ();  	if (shoppingCartRequiresShipping) {  		string[] shippingFullname = newOrderNotification.buyershippingaddress.contactname.Trim ().Split (new char[] {  			' '  		}' 2' StringSplitOptions.RemoveEmptyEntries);  		string shippingFirstName = shippingFullname [0];  		string shippingLastName = string.Empty;  		if (shippingFullname.Length > 1)  			shippingLastName = shippingFullname [1];  		string shippingEmail = newOrderNotification.buyershippingaddress.email.Trim ();  		string shippingAddress1 = newOrderNotification.buyershippingaddress.address1.Trim ();  		string shippingAddress2 = newOrderNotification.buyershippingaddress.address2.Trim ();  		string shippingPhoneNumber = newOrderNotification.buyershippingaddress.phone.Trim ();  		string shippingCity = newOrderNotification.buyershippingaddress.city.Trim ();  		int? shippingStateProvinceId = null;  		var shippingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyershippingaddress.region.Trim ());  		if (shippingStateProvince != null)  			shippingStateProvinceId = shippingStateProvince.Id;  		int? shippingCountryId = null;  		string shippingZipPostalCode = newOrderNotification.buyershippingaddress.postalcode.Trim ();  		var shippingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyershippingaddress.countrycode.Trim ());  		if (shippingCountry != null)  			shippingCountryId = shippingCountry.Id;  		var shippingAddress = customer.Addresses.ToList ().FindAddress (shippingFirstName' shippingLastName' shippingPhoneNumber' shippingEmail' string.Empty' string.Empty' shippingAddress1' shippingAddress2' shippingCity' shippingStateProvinceId' shippingZipPostalCode' shippingCountryId);  		if (shippingAddress == null) {  			shippingAddress = new Core.Domain.Common.Address () {  				FirstName = shippingFirstName'  				LastName = shippingLastName'  				PhoneNumber = shippingPhoneNumber'  				Email = shippingEmail'  				Address1 = shippingAddress1'  				Address2 = shippingAddress2'  				City = shippingCity'  				StateProvinceId = shippingStateProvinceId'  				ZipPostalCode = shippingZipPostalCode'  				CountryId = shippingCountryId'  				CreatedOnUtc = DateTime.UtcNow'  			};  			customer.Addresses.Add (shippingAddress);  		}  		//set default shipping address  		customer.ShippingAddress = shippingAddress;  		_customerService.UpdateCustomer (customer);  		if (newOrderNotification.orderadjustment != null && newOrderNotification.orderadjustment.shipping != null && newOrderNotification.orderadjustment.shipping.Item != null) {  			var shippingMethod = (FlatRateShippingAdjustment)newOrderNotification.orderadjustment.shipping.Item;  			var shippingOption = new ShippingOption ();  			shippingOption.Name = shippingMethod.shippingname;  			shippingOption.Rate = shippingMethod.shippingcost.Value;  			_genericAttributeService.SaveAttribute (customer' SystemCustomerAttributeNames.SelectedShippingOption' shippingOption' _storeContext.CurrentStore.Id);  		}  	}  	//customer.LastCalculatedTax = decimal.Zero;  	var paymentInfo = new ProcessPaymentRequest () {  		StoreId = _storeContext.CurrentStore.Id'  		PaymentMethodSystemName = "Payments.GoogleCheckout"'  		CustomerId = customer.Id'  	};  	paymentInfo.CustomValues.Add ("GoogleOrderNumber"' googleOrderNumber);  	//TODO set customer language and currency  	//paymentInfo.CustomerLanguage = IoC.Resolve<ILanguageService>().GetLanguageById(CustomerLanguageID);  	//paymentInfo.CustomerCurrency = IoC.Resolve<ICurrencyService>().GetCurrencyById(CustomerCurrencyID);  	var result = _orderProcessingService.PlaceOrder (paymentInfo);  	if (!result.Success) {  		LogMessage ("new-order-notification received. CreateOrder() error: Order Number " + googleOrderNumber + ". " + result);  		return;  	}  	var order = result.PlacedOrder;  	if (order != null) {  		LogMessage ("new-order-notification received and saved: Order Number " + order.Id);  	}  }  catch (Exception exc) {  	LogMessage ("processNewOrderNotification Exception: " + exc.Message + ": " + exc.StackTrace);  }  
Magic Number,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The following statement contains a magic number: try {  	var newOrderNotification = (NewOrderNotification)EncodeHelper.Deserialize (xmlData' typeof(NewOrderNotification));  	string googleOrderNumber = newOrderNotification.googleordernumber;  	XmlNode customerInfo = newOrderNotification.shoppingcart.merchantprivatedata.Any [0];  	int customerId = Convert.ToInt32 (customerInfo.Attributes ["CustomerID"].Value);  	//int customerLanguageId = Convert.ToInt32(customerInfo.Attributes["CustomerLanguageID"].Value);  	//int customerCurrencyId = Convert.ToInt32(customerInfo.Attributes["CustomerCurrencyID"].Value);  	var customer = _customerService.GetCustomerById (customerId);  	if (customer == null) {  		LogMessage ("Could not load a customer");  		return;  	}  	var cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).Where (sci => sci.StoreId == _storeContext.CurrentStore.Id).ToList ();  	_workContext.CurrentCustomer = customer;  	if (cart.Count == 0) {  		LogMessage ("Cart is empty");  		return;  	}  	//validate cart  	foreach (var sci in cart) {  		bool ok = false;  		foreach (Item item in newOrderNotification.shoppingcart.items) {  			if (!String.IsNullOrEmpty (item.merchantitemid)) {  				if ((Convert.ToInt32 (item.merchantitemid) == sci.Id) && (item.quantity == sci.Quantity)) {  					ok = true;  					break;  				}  			}  		}  		if (!ok) {  			LogMessage (string.Format ("Shopping Cart item has been changed. {0}. {1}"' sci.Id' sci.Quantity));  			return;  		}  	}  	string[] billingFullname = newOrderNotification.buyerbillingaddress.contactname.Trim ().Split (new char[] {  		' '  	}' 2' StringSplitOptions.RemoveEmptyEntries);  	string billingFirstName = billingFullname [0];  	string billingLastName = string.Empty;  	if (billingFullname.Length > 1)  		billingLastName = billingFullname [1];  	string billingEmail = newOrderNotification.buyerbillingaddress.email.Trim ();  	string billingAddress1 = newOrderNotification.buyerbillingaddress.address1.Trim ();  	string billingAddress2 = newOrderNotification.buyerbillingaddress.address2.Trim ();  	string billingPhoneNumber = newOrderNotification.buyerbillingaddress.phone.Trim ();  	string billingCity = newOrderNotification.buyerbillingaddress.city.Trim ();  	int? billingStateProvinceId = null;  	var billingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyerbillingaddress.region.Trim ());  	if (billingStateProvince != null)  		billingStateProvinceId = billingStateProvince.Id;  	string billingZipPostalCode = newOrderNotification.buyerbillingaddress.postalcode.Trim ();  	int? billingCountryId = null;  	var billingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyerbillingaddress.countrycode.Trim ());  	if (billingCountry != null)  		billingCountryId = billingCountry.Id;  	var billingAddress = customer.Addresses.ToList ().FindAddress (billingFirstName' billingLastName' billingPhoneNumber' billingEmail' string.Empty' string.Empty' billingAddress1' billingAddress2' billingCity' billingStateProvinceId' billingZipPostalCode' billingCountryId);  	if (billingAddress == null) {  		billingAddress = new Core.Domain.Common.Address () {  			FirstName = billingFirstName'  			LastName = billingLastName'  			PhoneNumber = billingPhoneNumber'  			Email = billingEmail'  			Address1 = billingAddress1'  			Address2 = billingAddress2'  			City = billingCity'  			StateProvinceId = billingStateProvinceId'  			ZipPostalCode = billingZipPostalCode'  			CountryId = billingCountryId'  			CreatedOnUtc = DateTime.UtcNow'  		};  		customer.Addresses.Add (billingAddress);  	}  	//set default billing address  	customer.BillingAddress = billingAddress;  	_customerService.UpdateCustomer (customer);  	_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.SelectedShippingOption' null' _storeContext.CurrentStore.Id);  	bool shoppingCartRequiresShipping = cart.RequiresShipping ();  	if (shoppingCartRequiresShipping) {  		string[] shippingFullname = newOrderNotification.buyershippingaddress.contactname.Trim ().Split (new char[] {  			' '  		}' 2' StringSplitOptions.RemoveEmptyEntries);  		string shippingFirstName = shippingFullname [0];  		string shippingLastName = string.Empty;  		if (shippingFullname.Length > 1)  			shippingLastName = shippingFullname [1];  		string shippingEmail = newOrderNotification.buyershippingaddress.email.Trim ();  		string shippingAddress1 = newOrderNotification.buyershippingaddress.address1.Trim ();  		string shippingAddress2 = newOrderNotification.buyershippingaddress.address2.Trim ();  		string shippingPhoneNumber = newOrderNotification.buyershippingaddress.phone.Trim ();  		string shippingCity = newOrderNotification.buyershippingaddress.city.Trim ();  		int? shippingStateProvinceId = null;  		var shippingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyershippingaddress.region.Trim ());  		if (shippingStateProvince != null)  			shippingStateProvinceId = shippingStateProvince.Id;  		int? shippingCountryId = null;  		string shippingZipPostalCode = newOrderNotification.buyershippingaddress.postalcode.Trim ();  		var shippingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyershippingaddress.countrycode.Trim ());  		if (shippingCountry != null)  			shippingCountryId = shippingCountry.Id;  		var shippingAddress = customer.Addresses.ToList ().FindAddress (shippingFirstName' shippingLastName' shippingPhoneNumber' shippingEmail' string.Empty' string.Empty' shippingAddress1' shippingAddress2' shippingCity' shippingStateProvinceId' shippingZipPostalCode' shippingCountryId);  		if (shippingAddress == null) {  			shippingAddress = new Core.Domain.Common.Address () {  				FirstName = shippingFirstName'  				LastName = shippingLastName'  				PhoneNumber = shippingPhoneNumber'  				Email = shippingEmail'  				Address1 = shippingAddress1'  				Address2 = shippingAddress2'  				City = shippingCity'  				StateProvinceId = shippingStateProvinceId'  				ZipPostalCode = shippingZipPostalCode'  				CountryId = shippingCountryId'  				CreatedOnUtc = DateTime.UtcNow'  			};  			customer.Addresses.Add (shippingAddress);  		}  		//set default shipping address  		customer.ShippingAddress = shippingAddress;  		_customerService.UpdateCustomer (customer);  		if (newOrderNotification.orderadjustment != null && newOrderNotification.orderadjustment.shipping != null && newOrderNotification.orderadjustment.shipping.Item != null) {  			var shippingMethod = (FlatRateShippingAdjustment)newOrderNotification.orderadjustment.shipping.Item;  			var shippingOption = new ShippingOption ();  			shippingOption.Name = shippingMethod.shippingname;  			shippingOption.Rate = shippingMethod.shippingcost.Value;  			_genericAttributeService.SaveAttribute (customer' SystemCustomerAttributeNames.SelectedShippingOption' shippingOption' _storeContext.CurrentStore.Id);  		}  	}  	//customer.LastCalculatedTax = decimal.Zero;  	var paymentInfo = new ProcessPaymentRequest () {  		StoreId = _storeContext.CurrentStore.Id'  		PaymentMethodSystemName = "Payments.GoogleCheckout"'  		CustomerId = customer.Id'  	};  	paymentInfo.CustomValues.Add ("GoogleOrderNumber"' googleOrderNumber);  	//TODO set customer language and currency  	//paymentInfo.CustomerLanguage = IoC.Resolve<ILanguageService>().GetLanguageById(CustomerLanguageID);  	//paymentInfo.CustomerCurrency = IoC.Resolve<ICurrencyService>().GetCurrencyById(CustomerCurrencyID);  	var result = _orderProcessingService.PlaceOrder (paymentInfo);  	if (!result.Success) {  		LogMessage ("new-order-notification received. CreateOrder() error: Order Number " + googleOrderNumber + ". " + result);  		return;  	}  	var order = result.PlacedOrder;  	if (order != null) {  		LogMessage ("new-order-notification received and saved: Order Number " + order.Id);  	}  }  catch (Exception exc) {  	LogMessage ("processNewOrderNotification Exception: " + exc.Message + ": " + exc.StackTrace);  }  
Magic Number,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,ProcessNewOrderNotification,The following statement contains a magic number: if (shoppingCartRequiresShipping) {  	string[] shippingFullname = newOrderNotification.buyershippingaddress.contactname.Trim ().Split (new char[] {  		' '  	}' 2' StringSplitOptions.RemoveEmptyEntries);  	string shippingFirstName = shippingFullname [0];  	string shippingLastName = string.Empty;  	if (shippingFullname.Length > 1)  		shippingLastName = shippingFullname [1];  	string shippingEmail = newOrderNotification.buyershippingaddress.email.Trim ();  	string shippingAddress1 = newOrderNotification.buyershippingaddress.address1.Trim ();  	string shippingAddress2 = newOrderNotification.buyershippingaddress.address2.Trim ();  	string shippingPhoneNumber = newOrderNotification.buyershippingaddress.phone.Trim ();  	string shippingCity = newOrderNotification.buyershippingaddress.city.Trim ();  	int? shippingStateProvinceId = null;  	var shippingStateProvince = _stateProvinceService.GetStateProvinceByAbbreviation (newOrderNotification.buyershippingaddress.region.Trim ());  	if (shippingStateProvince != null)  		shippingStateProvinceId = shippingStateProvince.Id;  	int? shippingCountryId = null;  	string shippingZipPostalCode = newOrderNotification.buyershippingaddress.postalcode.Trim ();  	var shippingCountry = _countryService.GetCountryByTwoLetterIsoCode (newOrderNotification.buyershippingaddress.countrycode.Trim ());  	if (shippingCountry != null)  		shippingCountryId = shippingCountry.Id;  	var shippingAddress = customer.Addresses.ToList ().FindAddress (shippingFirstName' shippingLastName' shippingPhoneNumber' shippingEmail' string.Empty' string.Empty' shippingAddress1' shippingAddress2' shippingCity' shippingStateProvinceId' shippingZipPostalCode' shippingCountryId);  	if (shippingAddress == null) {  		shippingAddress = new Core.Domain.Common.Address () {  			FirstName = shippingFirstName'  			LastName = shippingLastName'  			PhoneNumber = shippingPhoneNumber'  			Email = shippingEmail'  			Address1 = shippingAddress1'  			Address2 = shippingAddress2'  			City = shippingCity'  			StateProvinceId = shippingStateProvinceId'  			ZipPostalCode = shippingZipPostalCode'  			CountryId = shippingCountryId'  			CreatedOnUtc = DateTime.UtcNow'  		};  		customer.Addresses.Add (shippingAddress);  	}  	//set default shipping address  	customer.ShippingAddress = shippingAddress;  	_customerService.UpdateCustomer (customer);  	if (newOrderNotification.orderadjustment != null && newOrderNotification.orderadjustment.shipping != null && newOrderNotification.orderadjustment.shipping.Item != null) {  		var shippingMethod = (FlatRateShippingAdjustment)newOrderNotification.orderadjustment.shipping.Item;  		var shippingOption = new ShippingOption ();  		shippingOption.Name = shippingMethod.shippingname;  		shippingOption.Rate = shippingMethod.shippingcost.Value;  		_genericAttributeService.SaveAttribute (customer' SystemCustomerAttributeNames.SelectedShippingOption' shippingOption' _storeContext.CurrentStore.Id);  	}  }  
Magic Number,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,VerifyMessageAuthentication,The following statement contains a magic number: if (!Convert.ToBoolean (config.AppSettings.Settings ["GoogleAuthenticateCallback"].Value)) {  	result = true;  }  else if (String.IsNullOrEmpty (authStr) || authStr.IndexOf ("Basic"' 0) != 0) {  	result = false;  }  else {  	byte[] decodedBytes = Convert.FromBase64String (authStr.Trim ().Substring (6));  	string decodedAuthString = Encoding.ASCII.GetString (decodedBytes);  	string username = decodedAuthString.Split (':') [0];  	string password = decodedAuthString.Split (':') [1];  	string merchantID = config.AppSettings.Settings ["GoogleMerchantID"].Value;  	string merchantKey = config.AppSettings.Settings ["GoogleMerchantKey"].Value;  	result = (username == merchantID && password == merchantKey);  }  
Magic Number,Nop.Plugin.Payments.GoogleCheckout,GoogleCheckoutPaymentProcessor,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Payments.GoogleCheckout\GoogleCheckoutPaymentProcessor.cs,VerifyMessageAuthentication,The following statement contains a magic number: if (String.IsNullOrEmpty (authStr) || authStr.IndexOf ("Basic"' 0) != 0) {  	result = false;  }  else {  	byte[] decodedBytes = Convert.FromBase64String (authStr.Trim ().Substring (6));  	string decodedAuthString = Encoding.ASCII.GetString (decodedBytes);  	string username = decodedAuthString.Split (':') [0];  	string password = decodedAuthString.Split (':') [1];  	string merchantID = config.AppSettings.Settings ["GoogleMerchantID"].Value;  	string merchantKey = config.AppSettings.Settings ["GoogleMerchantKey"].Value;  	result = (username == merchantID && password == merchantKey);  }  
