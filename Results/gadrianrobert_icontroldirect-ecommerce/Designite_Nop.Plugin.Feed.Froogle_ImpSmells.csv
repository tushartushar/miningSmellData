Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The method has 239 lines of code.
Complex Method,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,Configure,Cyclomatic complexity of the method is 9
Complex Method,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,GenerateFeed,Cyclomatic complexity of the method is 15
Complex Method,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,Cyclomatic complexity of the method is 55
Long Parameter List,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,FeedFroogleController,The method has 11 parameters.
Long Parameter List,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The method has 6 parameters.
Long Parameter List,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,FroogleService,The method has 13 parameters.
Long Statement,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,Configure,The length of the statement  "		var localFilePath = System.IO.Path.Combine (HttpRuntime.AppDomainAppPath' "content\\files\\exportimport"' store.Id + "-" + _froogleSettings.StaticFileName); " is 156.
Long Statement,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,Configure,The length of the statement  "				FileUrl = string.Format ("{0}content/files/exportimport/{1}-{2}"' _webHelper.GetStoreLocation (false)' store.Id' _froogleSettings.StaticFileName) " is 145.
Long Statement,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,GenerateFeed,The length of the statement  "		var localFilePath = System.IO.Path.Combine (HttpRuntime.AppDomainAppPath' "content\\files\\exportimport"' store.Id + "-" + _froogleSettings.StaticFileName); " is 156.
Long Statement,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,GenerateFeed,The length of the statement  "				FileUrl = string.Format ("{0}content/files/exportimport/{1}-{2}"' _webHelper.GetStoreLocation (false)' store.Id' _froogleSettings.StaticFileName) " is 145.
Long Statement,Nop.Plugin.Feed.Froogle.Controllers,FeedFroogleController,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Controllers\FeedFroogleController.cs,GoogleProductList,The length of the statement  "	var products = _productService.SearchProducts (pageIndex: command.Page - 1' pageSize: command.PageSize' showHidden: true); " is 122.
Long Statement,Nop.Plugin.Feed.Froogle.Data,EfStartUpTask,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\Data\EfStartUpTask.cs,Execute,The length of the statement  "	//otherwise' you'll get something like "The model backing the 'your context name' context has changed since the database was created. Consider using Code First Migrations to update the database" " is 194.
Long Statement,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<IDbContext> (c => new GoogleProductObjectContext (dataProviderSettings.DataConnectionString)).Named<IDbContext> ("nop_object_context_google_product").InstancePerHttpRequest (); " is 193.
Long Statement,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<GoogleProductObjectContext> (c => new GoogleProductObjectContext (dataProviderSettings.DataConnectionString)).InstancePerHttpRequest (); " is 153.
Long Statement,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<IDbContext> (c => new GoogleProductObjectContext (c.Resolve<DataSettings> ().DataConnectionString)).Named<IDbContext> ("nop_object_context_google_product").InstancePerHttpRequest (); " is 199.
Long Statement,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<GoogleProductObjectContext> (c => new GoogleProductObjectContext (c.Resolve<DataSettings> ().DataConnectionString)).InstancePerHttpRequest (); " is 159.
Long Statement,Nop.Plugin.Feed.Froogle,DependencyRegistrar,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<EfRepository<GoogleProductRecord>> ().As<IRepository<GoogleProductRecord>> ().WithParameter (ResolvedParameter.ForNamed<IDbContext> ("nop_object_context_google_product")).InstancePerHttpRequest (); " is 218.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "		//Generate feed according to the following specs: http://www.google.com/support/merchants/bin/answer.py?answer=188494&expand=GB " is 127.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "					var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id); " is 145.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "				//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081 " is 137.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "				writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd")); " is 123.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "				writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode); " is 156.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "				/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search." is 283.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "                         * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes." is 296.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "                         * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available." is 293.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "				//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute. " is 255.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The length of the statement  "					writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName)); " is 214.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.Store.Hint"' "Select the store that will be used to generate the feed."); " is 133.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.Currency.Hint"' "Select the default currency that will be used to generate the feed."); " is 147.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.DefaultGoogleCategory.Hint"' "The default Google category will be useds if other one is not specified."); " is 165.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.ProductPictureSize.Hint"' "The default size (pixels) for product thumbnail images."); " is 145.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.SuccessResult"' "Froogle feed has been successfully generated."); " is 125.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Feed.Froogle.StaticFilePath.Hint"' "A file path of the generated Froogle file. It's static for your store and can be shared with the Froogle service."); " is 199.
Long Statement,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateStaticFile,The length of the statement  "	string filePath = System.IO.Path.Combine (HttpRuntime.AppDomainAppPath' "content\\files\\exportimport"' store.Id + "-" + _froogleSettings.StaticFileName); " is 154.
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: using (var writer = XmlWriter.Create (stream' settings)) {  	//Generate feed according to the following specs: http://www.google.com/support/merchants/bin/answer.py?answer=188494&expand=GB  	writer.WriteStartDocument ();  	writer.WriteStartElement ("rss");  	writer.WriteAttributeString ("version"' "2.0");  	writer.WriteAttributeString ("xmlns"' "g"' null' googleBaseNamespace);  	writer.WriteStartElement ("channel");  	writer.WriteElementString ("title"' "Google Base feed");  	writer.WriteElementString ("link"' "http://base.google.com/base/");  	writer.WriteElementString ("description"' "Information about products");  	var products1 = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: true);  	foreach (var product1 in products1) {  		var productsToProcess = new List<Product> ();  		switch (product1.ProductType) {  		case ProductType.SimpleProduct:  			{  				//simple product doesn't have child products  				productsToProcess.Add (product1);  			}  			break;  		case ProductType.GroupedProduct:  			{  				//grouped products could have several child products  				var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  				productsToProcess.AddRange (associatedProducts);  			}  			break;  		default:  			continue;  		}  		foreach (var product in productsToProcess) {  			writer.WriteStartElement ("item");  			#region Basic Product Information  			//id [id]- An identifier of the item  			writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  			//title [title] - Title of the item  			writer.WriteStartElement ("title");  			var title = product.Name;  			//title should be not longer than 70 characters  			if (title.Length > 70)  				title = title.Substring (0' 70);  			writer.WriteCData (title);  			writer.WriteEndElement ();  			// title  			//description [description] - Description of the item  			writer.WriteStartElement ("description");  			string description = product.FullDescription;  			if (String.IsNullOrEmpty (description))  				description = product.ShortDescription;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			//description is required  			//resolving character encoding issues in your data feed  			description = StripInvalidChars (description' true);  			writer.WriteCData (description);  			writer.WriteEndElement ();  			// description  			//google product category [google_product_category] - Google's category of the item  			//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  			string googleProductCategory = "";  			var googleProduct = _googleService.GetByProductId (product.Id);  			if (googleProduct != null)  				googleProductCategory = googleProduct.Taxonomy;  			if (String.IsNullOrEmpty (googleProductCategory))  				googleProductCategory = _froogleSettings.DefaultGoogleCategory;  			if (String.IsNullOrEmpty (googleProductCategory))  				throw new NopException ("Default Google category is not set");  			writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  			writer.WriteCData (googleProductCategory);  			writer.WriteFullEndElement ();  			// g:google_product_category  			//product type [product_type] - Your category of the item  			var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  			if (defaultProductCategory != null) {  				var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  				if (!String.IsNullOrEmpty ((category))) {  					writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  					writer.WriteCData (category);  					writer.WriteFullEndElement ();  					// g:product_type  				}  			}  			//link [link] - URL directly linking to your item's page on your website  			var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  			writer.WriteElementString ("link"' productUrl);  			//image link [image_link] - URL of an image of the item  			string imageUrl;  			var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  			if (picture != null)  				imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  			else  				imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  			writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  			//condition [condition] - Condition or state of the item  			writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  			writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  			#endregion  			#region Availability & Price  			//availability [availability] - Availability status of the item  			string availability = "in stock";  			//in stock by default  			if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  				switch (product.BackorderMode) {  				case BackorderMode.NoBackorders:  					{  						availability = "out of stock";  					}  					break;  				case BackorderMode.AllowQtyBelow0:  				case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  					{  						availability = "available for order";  						//availability = "preorder";  					}  					break;  				default:  					break;  				}  			}  			writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  			//price [price] - Price of the item  			var currency = GetUsedCurrency ();  			decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  			writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  			#endregion  			#region Unique Product Identifiers  			/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  			var gtin = product.Gtin;  			if (!String.IsNullOrEmpty (gtin)) {  				writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  				writer.WriteCData (gtin);  				writer.WriteFullEndElement ();  				// g:gtin  			}  			//brand [brand] - Brand of the item  			var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  			if (defaultManufacturer != null) {  				writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  				writer.WriteCData (defaultManufacturer.Manufacturer.Name);  				writer.WriteFullEndElement ();  				// g:brand  			}  			//mpn [mpn] - Manufacturer Part Number (MPN) of the item  			var mpn = product.ManufacturerPartNumber;  			if (!String.IsNullOrEmpty (mpn)) {  				writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  				writer.WriteCData (mpn);  				writer.WriteFullEndElement ();  				// g:mpn  			}  			#endregion  			#region Apparel Products  			/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  				writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Gender);  				writer.WriteFullEndElement ();  				// g:gender  			}  			//age group [age_group] - Target age group of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  				writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  				writer.WriteCData (googleProduct.AgeGroup);  				writer.WriteFullEndElement ();  				// g:age_group  			}  			//color [color] - Color of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  				writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Color);  				writer.WriteFullEndElement ();  				// g:color  			}  			//size [size] - Size of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  				writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Size);  				writer.WriteFullEndElement ();  				// g:size  			}  			#endregion  			#region Tax & Shipping  			//tax [tax]  			//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  			//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  			//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  			//shipping weight [shipping_weight] - Weight of the item for shipping  			//We accept only the following units of weight: lb' oz' g' kg.  			if (_froogleSettings.PassShippingInfo) {  				var weightName = "kg";  				var shippingWeight = product.Weight;  				switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  				case "ounce":  					weightName = "oz";  					break;  				case "lb":  					weightName = "lb";  					break;  				case "grams":  					weightName = "g";  					break;  				case "kg":  					weightName = "kg";  					break;  				default:  					//unknown weight   					weightName = "kg";  					break;  				}  				writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  			}  			#endregion  			writer.WriteEndElement ();  			// item  		}  	}  	writer.WriteEndElement ();  	// channel  	writer.WriteEndElement ();  	// rss  	writer.WriteEndDocument ();  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: using (var writer = XmlWriter.Create (stream' settings)) {  	//Generate feed according to the following specs: http://www.google.com/support/merchants/bin/answer.py?answer=188494&expand=GB  	writer.WriteStartDocument ();  	writer.WriteStartElement ("rss");  	writer.WriteAttributeString ("version"' "2.0");  	writer.WriteAttributeString ("xmlns"' "g"' null' googleBaseNamespace);  	writer.WriteStartElement ("channel");  	writer.WriteElementString ("title"' "Google Base feed");  	writer.WriteElementString ("link"' "http://base.google.com/base/");  	writer.WriteElementString ("description"' "Information about products");  	var products1 = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: true);  	foreach (var product1 in products1) {  		var productsToProcess = new List<Product> ();  		switch (product1.ProductType) {  		case ProductType.SimpleProduct:  			{  				//simple product doesn't have child products  				productsToProcess.Add (product1);  			}  			break;  		case ProductType.GroupedProduct:  			{  				//grouped products could have several child products  				var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  				productsToProcess.AddRange (associatedProducts);  			}  			break;  		default:  			continue;  		}  		foreach (var product in productsToProcess) {  			writer.WriteStartElement ("item");  			#region Basic Product Information  			//id [id]- An identifier of the item  			writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  			//title [title] - Title of the item  			writer.WriteStartElement ("title");  			var title = product.Name;  			//title should be not longer than 70 characters  			if (title.Length > 70)  				title = title.Substring (0' 70);  			writer.WriteCData (title);  			writer.WriteEndElement ();  			// title  			//description [description] - Description of the item  			writer.WriteStartElement ("description");  			string description = product.FullDescription;  			if (String.IsNullOrEmpty (description))  				description = product.ShortDescription;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			//description is required  			//resolving character encoding issues in your data feed  			description = StripInvalidChars (description' true);  			writer.WriteCData (description);  			writer.WriteEndElement ();  			// description  			//google product category [google_product_category] - Google's category of the item  			//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  			string googleProductCategory = "";  			var googleProduct = _googleService.GetByProductId (product.Id);  			if (googleProduct != null)  				googleProductCategory = googleProduct.Taxonomy;  			if (String.IsNullOrEmpty (googleProductCategory))  				googleProductCategory = _froogleSettings.DefaultGoogleCategory;  			if (String.IsNullOrEmpty (googleProductCategory))  				throw new NopException ("Default Google category is not set");  			writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  			writer.WriteCData (googleProductCategory);  			writer.WriteFullEndElement ();  			// g:google_product_category  			//product type [product_type] - Your category of the item  			var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  			if (defaultProductCategory != null) {  				var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  				if (!String.IsNullOrEmpty ((category))) {  					writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  					writer.WriteCData (category);  					writer.WriteFullEndElement ();  					// g:product_type  				}  			}  			//link [link] - URL directly linking to your item's page on your website  			var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  			writer.WriteElementString ("link"' productUrl);  			//image link [image_link] - URL of an image of the item  			string imageUrl;  			var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  			if (picture != null)  				imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  			else  				imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  			writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  			//condition [condition] - Condition or state of the item  			writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  			writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  			#endregion  			#region Availability & Price  			//availability [availability] - Availability status of the item  			string availability = "in stock";  			//in stock by default  			if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  				switch (product.BackorderMode) {  				case BackorderMode.NoBackorders:  					{  						availability = "out of stock";  					}  					break;  				case BackorderMode.AllowQtyBelow0:  				case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  					{  						availability = "available for order";  						//availability = "preorder";  					}  					break;  				default:  					break;  				}  			}  			writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  			//price [price] - Price of the item  			var currency = GetUsedCurrency ();  			decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  			writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  			#endregion  			#region Unique Product Identifiers  			/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  			var gtin = product.Gtin;  			if (!String.IsNullOrEmpty (gtin)) {  				writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  				writer.WriteCData (gtin);  				writer.WriteFullEndElement ();  				// g:gtin  			}  			//brand [brand] - Brand of the item  			var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  			if (defaultManufacturer != null) {  				writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  				writer.WriteCData (defaultManufacturer.Manufacturer.Name);  				writer.WriteFullEndElement ();  				// g:brand  			}  			//mpn [mpn] - Manufacturer Part Number (MPN) of the item  			var mpn = product.ManufacturerPartNumber;  			if (!String.IsNullOrEmpty (mpn)) {  				writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  				writer.WriteCData (mpn);  				writer.WriteFullEndElement ();  				// g:mpn  			}  			#endregion  			#region Apparel Products  			/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  				writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Gender);  				writer.WriteFullEndElement ();  				// g:gender  			}  			//age group [age_group] - Target age group of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  				writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  				writer.WriteCData (googleProduct.AgeGroup);  				writer.WriteFullEndElement ();  				// g:age_group  			}  			//color [color] - Color of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  				writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Color);  				writer.WriteFullEndElement ();  				// g:color  			}  			//size [size] - Size of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  				writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Size);  				writer.WriteFullEndElement ();  				// g:size  			}  			#endregion  			#region Tax & Shipping  			//tax [tax]  			//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  			//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  			//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  			//shipping weight [shipping_weight] - Weight of the item for shipping  			//We accept only the following units of weight: lb' oz' g' kg.  			if (_froogleSettings.PassShippingInfo) {  				var weightName = "kg";  				var shippingWeight = product.Weight;  				switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  				case "ounce":  					weightName = "oz";  					break;  				case "lb":  					weightName = "lb";  					break;  				case "grams":  					weightName = "g";  					break;  				case "kg":  					weightName = "kg";  					break;  				default:  					//unknown weight   					weightName = "kg";  					break;  				}  				writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  			}  			#endregion  			writer.WriteEndElement ();  			// item  		}  	}  	writer.WriteEndElement ();  	// channel  	writer.WriteEndElement ();  	// rss  	writer.WriteEndDocument ();  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: using (var writer = XmlWriter.Create (stream' settings)) {  	//Generate feed according to the following specs: http://www.google.com/support/merchants/bin/answer.py?answer=188494&expand=GB  	writer.WriteStartDocument ();  	writer.WriteStartElement ("rss");  	writer.WriteAttributeString ("version"' "2.0");  	writer.WriteAttributeString ("xmlns"' "g"' null' googleBaseNamespace);  	writer.WriteStartElement ("channel");  	writer.WriteElementString ("title"' "Google Base feed");  	writer.WriteElementString ("link"' "http://base.google.com/base/");  	writer.WriteElementString ("description"' "Information about products");  	var products1 = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: true);  	foreach (var product1 in products1) {  		var productsToProcess = new List<Product> ();  		switch (product1.ProductType) {  		case ProductType.SimpleProduct:  			{  				//simple product doesn't have child products  				productsToProcess.Add (product1);  			}  			break;  		case ProductType.GroupedProduct:  			{  				//grouped products could have several child products  				var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  				productsToProcess.AddRange (associatedProducts);  			}  			break;  		default:  			continue;  		}  		foreach (var product in productsToProcess) {  			writer.WriteStartElement ("item");  			#region Basic Product Information  			//id [id]- An identifier of the item  			writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  			//title [title] - Title of the item  			writer.WriteStartElement ("title");  			var title = product.Name;  			//title should be not longer than 70 characters  			if (title.Length > 70)  				title = title.Substring (0' 70);  			writer.WriteCData (title);  			writer.WriteEndElement ();  			// title  			//description [description] - Description of the item  			writer.WriteStartElement ("description");  			string description = product.FullDescription;  			if (String.IsNullOrEmpty (description))  				description = product.ShortDescription;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			if (String.IsNullOrEmpty (description))  				description = product.Name;  			//description is required  			//resolving character encoding issues in your data feed  			description = StripInvalidChars (description' true);  			writer.WriteCData (description);  			writer.WriteEndElement ();  			// description  			//google product category [google_product_category] - Google's category of the item  			//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  			string googleProductCategory = "";  			var googleProduct = _googleService.GetByProductId (product.Id);  			if (googleProduct != null)  				googleProductCategory = googleProduct.Taxonomy;  			if (String.IsNullOrEmpty (googleProductCategory))  				googleProductCategory = _froogleSettings.DefaultGoogleCategory;  			if (String.IsNullOrEmpty (googleProductCategory))  				throw new NopException ("Default Google category is not set");  			writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  			writer.WriteCData (googleProductCategory);  			writer.WriteFullEndElement ();  			// g:google_product_category  			//product type [product_type] - Your category of the item  			var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  			if (defaultProductCategory != null) {  				var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  				if (!String.IsNullOrEmpty ((category))) {  					writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  					writer.WriteCData (category);  					writer.WriteFullEndElement ();  					// g:product_type  				}  			}  			//link [link] - URL directly linking to your item's page on your website  			var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  			writer.WriteElementString ("link"' productUrl);  			//image link [image_link] - URL of an image of the item  			string imageUrl;  			var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  			if (picture != null)  				imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  			else  				imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  			writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  			//condition [condition] - Condition or state of the item  			writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  			writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  			#endregion  			#region Availability & Price  			//availability [availability] - Availability status of the item  			string availability = "in stock";  			//in stock by default  			if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  				switch (product.BackorderMode) {  				case BackorderMode.NoBackorders:  					{  						availability = "out of stock";  					}  					break;  				case BackorderMode.AllowQtyBelow0:  				case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  					{  						availability = "available for order";  						//availability = "preorder";  					}  					break;  				default:  					break;  				}  			}  			writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  			//price [price] - Price of the item  			var currency = GetUsedCurrency ();  			decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  			writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  			#endregion  			#region Unique Product Identifiers  			/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  			var gtin = product.Gtin;  			if (!String.IsNullOrEmpty (gtin)) {  				writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  				writer.WriteCData (gtin);  				writer.WriteFullEndElement ();  				// g:gtin  			}  			//brand [brand] - Brand of the item  			var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  			if (defaultManufacturer != null) {  				writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  				writer.WriteCData (defaultManufacturer.Manufacturer.Name);  				writer.WriteFullEndElement ();  				// g:brand  			}  			//mpn [mpn] - Manufacturer Part Number (MPN) of the item  			var mpn = product.ManufacturerPartNumber;  			if (!String.IsNullOrEmpty (mpn)) {  				writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  				writer.WriteCData (mpn);  				writer.WriteFullEndElement ();  				// g:mpn  			}  			#endregion  			#region Apparel Products  			/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  				writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Gender);  				writer.WriteFullEndElement ();  				// g:gender  			}  			//age group [age_group] - Target age group of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  				writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  				writer.WriteCData (googleProduct.AgeGroup);  				writer.WriteFullEndElement ();  				// g:age_group  			}  			//color [color] - Color of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  				writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Color);  				writer.WriteFullEndElement ();  				// g:color  			}  			//size [size] - Size of the item  			if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  				writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  				writer.WriteCData (googleProduct.Size);  				writer.WriteFullEndElement ();  				// g:size  			}  			#endregion  			#region Tax & Shipping  			//tax [tax]  			//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  			//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  			//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  			//shipping weight [shipping_weight] - Weight of the item for shipping  			//We accept only the following units of weight: lb' oz' g' kg.  			if (_froogleSettings.PassShippingInfo) {  				var weightName = "kg";  				var shippingWeight = product.Weight;  				switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  				case "ounce":  					weightName = "oz";  					break;  				case "lb":  					weightName = "lb";  					break;  				case "grams":  					weightName = "g";  					break;  				case "kg":  					weightName = "kg";  					break;  				default:  					//unknown weight   					weightName = "kg";  					break;  				}  				writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  			}  			#endregion  			writer.WriteEndElement ();  			// item  		}  	}  	writer.WriteEndElement ();  	// channel  	writer.WriteEndElement ();  	// rss  	writer.WriteEndDocument ();  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product1 in products1) {  	var productsToProcess = new List<Product> ();  	switch (product1.ProductType) {  	case ProductType.SimpleProduct:  		{  			//simple product doesn't have child products  			productsToProcess.Add (product1);  		}  		break;  	case ProductType.GroupedProduct:  		{  			//grouped products could have several child products  			var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  			productsToProcess.AddRange (associatedProducts);  		}  		break;  	default:  		continue;  	}  	foreach (var product in productsToProcess) {  		writer.WriteStartElement ("item");  		#region Basic Product Information  		//id [id]- An identifier of the item  		writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  		//title [title] - Title of the item  		writer.WriteStartElement ("title");  		var title = product.Name;  		//title should be not longer than 70 characters  		if (title.Length > 70)  			title = title.Substring (0' 70);  		writer.WriteCData (title);  		writer.WriteEndElement ();  		// title  		//description [description] - Description of the item  		writer.WriteStartElement ("description");  		string description = product.FullDescription;  		if (String.IsNullOrEmpty (description))  			description = product.ShortDescription;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		//description is required  		//resolving character encoding issues in your data feed  		description = StripInvalidChars (description' true);  		writer.WriteCData (description);  		writer.WriteEndElement ();  		// description  		//google product category [google_product_category] - Google's category of the item  		//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  		string googleProductCategory = "";  		var googleProduct = _googleService.GetByProductId (product.Id);  		if (googleProduct != null)  			googleProductCategory = googleProduct.Taxonomy;  		if (String.IsNullOrEmpty (googleProductCategory))  			googleProductCategory = _froogleSettings.DefaultGoogleCategory;  		if (String.IsNullOrEmpty (googleProductCategory))  			throw new NopException ("Default Google category is not set");  		writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  		writer.WriteCData (googleProductCategory);  		writer.WriteFullEndElement ();  		// g:google_product_category  		//product type [product_type] - Your category of the item  		var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  		if (defaultProductCategory != null) {  			var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  			if (!String.IsNullOrEmpty ((category))) {  				writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  				writer.WriteCData (category);  				writer.WriteFullEndElement ();  				// g:product_type  			}  		}  		//link [link] - URL directly linking to your item's page on your website  		var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  		writer.WriteElementString ("link"' productUrl);  		//image link [image_link] - URL of an image of the item  		string imageUrl;  		var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  		if (picture != null)  			imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  		else  			imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  		writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  		//condition [condition] - Condition or state of the item  		writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  		writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  		#endregion  		#region Availability & Price  		//availability [availability] - Availability status of the item  		string availability = "in stock";  		//in stock by default  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  			switch (product.BackorderMode) {  			case BackorderMode.NoBackorders:  				{  					availability = "out of stock";  				}  				break;  			case BackorderMode.AllowQtyBelow0:  			case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  				{  					availability = "available for order";  					//availability = "preorder";  				}  				break;  			default:  				break;  			}  		}  		writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  		//price [price] - Price of the item  		var currency = GetUsedCurrency ();  		decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  		writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  		#endregion  		#region Unique Product Identifiers  		/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  		var gtin = product.Gtin;  		if (!String.IsNullOrEmpty (gtin)) {  			writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  			writer.WriteCData (gtin);  			writer.WriteFullEndElement ();  			// g:gtin  		}  		//brand [brand] - Brand of the item  		var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  		if (defaultManufacturer != null) {  			writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  			writer.WriteCData (defaultManufacturer.Manufacturer.Name);  			writer.WriteFullEndElement ();  			// g:brand  		}  		//mpn [mpn] - Manufacturer Part Number (MPN) of the item  		var mpn = product.ManufacturerPartNumber;  		if (!String.IsNullOrEmpty (mpn)) {  			writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  			writer.WriteCData (mpn);  			writer.WriteFullEndElement ();  			// g:mpn  		}  		#endregion  		#region Apparel Products  		/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  			writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Gender);  			writer.WriteFullEndElement ();  			// g:gender  		}  		//age group [age_group] - Target age group of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  			writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  			writer.WriteCData (googleProduct.AgeGroup);  			writer.WriteFullEndElement ();  			// g:age_group  		}  		//color [color] - Color of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  			writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Color);  			writer.WriteFullEndElement ();  			// g:color  		}  		//size [size] - Size of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  			writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Size);  			writer.WriteFullEndElement ();  			// g:size  		}  		#endregion  		#region Tax & Shipping  		//tax [tax]  		//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  		//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  		//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  		//shipping weight [shipping_weight] - Weight of the item for shipping  		//We accept only the following units of weight: lb' oz' g' kg.  		if (_froogleSettings.PassShippingInfo) {  			var weightName = "kg";  			var shippingWeight = product.Weight;  			switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  			case "ounce":  				weightName = "oz";  				break;  			case "lb":  				weightName = "lb";  				break;  			case "grams":  				weightName = "g";  				break;  			case "kg":  				weightName = "kg";  				break;  			default:  				//unknown weight   				weightName = "kg";  				break;  			}  			writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  		}  		#endregion  		writer.WriteEndElement ();  		// item  	}  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product1 in products1) {  	var productsToProcess = new List<Product> ();  	switch (product1.ProductType) {  	case ProductType.SimpleProduct:  		{  			//simple product doesn't have child products  			productsToProcess.Add (product1);  		}  		break;  	case ProductType.GroupedProduct:  		{  			//grouped products could have several child products  			var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  			productsToProcess.AddRange (associatedProducts);  		}  		break;  	default:  		continue;  	}  	foreach (var product in productsToProcess) {  		writer.WriteStartElement ("item");  		#region Basic Product Information  		//id [id]- An identifier of the item  		writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  		//title [title] - Title of the item  		writer.WriteStartElement ("title");  		var title = product.Name;  		//title should be not longer than 70 characters  		if (title.Length > 70)  			title = title.Substring (0' 70);  		writer.WriteCData (title);  		writer.WriteEndElement ();  		// title  		//description [description] - Description of the item  		writer.WriteStartElement ("description");  		string description = product.FullDescription;  		if (String.IsNullOrEmpty (description))  			description = product.ShortDescription;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		//description is required  		//resolving character encoding issues in your data feed  		description = StripInvalidChars (description' true);  		writer.WriteCData (description);  		writer.WriteEndElement ();  		// description  		//google product category [google_product_category] - Google's category of the item  		//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  		string googleProductCategory = "";  		var googleProduct = _googleService.GetByProductId (product.Id);  		if (googleProduct != null)  			googleProductCategory = googleProduct.Taxonomy;  		if (String.IsNullOrEmpty (googleProductCategory))  			googleProductCategory = _froogleSettings.DefaultGoogleCategory;  		if (String.IsNullOrEmpty (googleProductCategory))  			throw new NopException ("Default Google category is not set");  		writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  		writer.WriteCData (googleProductCategory);  		writer.WriteFullEndElement ();  		// g:google_product_category  		//product type [product_type] - Your category of the item  		var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  		if (defaultProductCategory != null) {  			var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  			if (!String.IsNullOrEmpty ((category))) {  				writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  				writer.WriteCData (category);  				writer.WriteFullEndElement ();  				// g:product_type  			}  		}  		//link [link] - URL directly linking to your item's page on your website  		var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  		writer.WriteElementString ("link"' productUrl);  		//image link [image_link] - URL of an image of the item  		string imageUrl;  		var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  		if (picture != null)  			imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  		else  			imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  		writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  		//condition [condition] - Condition or state of the item  		writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  		writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  		#endregion  		#region Availability & Price  		//availability [availability] - Availability status of the item  		string availability = "in stock";  		//in stock by default  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  			switch (product.BackorderMode) {  			case BackorderMode.NoBackorders:  				{  					availability = "out of stock";  				}  				break;  			case BackorderMode.AllowQtyBelow0:  			case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  				{  					availability = "available for order";  					//availability = "preorder";  				}  				break;  			default:  				break;  			}  		}  		writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  		//price [price] - Price of the item  		var currency = GetUsedCurrency ();  		decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  		writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  		#endregion  		#region Unique Product Identifiers  		/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  		var gtin = product.Gtin;  		if (!String.IsNullOrEmpty (gtin)) {  			writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  			writer.WriteCData (gtin);  			writer.WriteFullEndElement ();  			// g:gtin  		}  		//brand [brand] - Brand of the item  		var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  		if (defaultManufacturer != null) {  			writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  			writer.WriteCData (defaultManufacturer.Manufacturer.Name);  			writer.WriteFullEndElement ();  			// g:brand  		}  		//mpn [mpn] - Manufacturer Part Number (MPN) of the item  		var mpn = product.ManufacturerPartNumber;  		if (!String.IsNullOrEmpty (mpn)) {  			writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  			writer.WriteCData (mpn);  			writer.WriteFullEndElement ();  			// g:mpn  		}  		#endregion  		#region Apparel Products  		/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  			writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Gender);  			writer.WriteFullEndElement ();  			// g:gender  		}  		//age group [age_group] - Target age group of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  			writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  			writer.WriteCData (googleProduct.AgeGroup);  			writer.WriteFullEndElement ();  			// g:age_group  		}  		//color [color] - Color of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  			writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Color);  			writer.WriteFullEndElement ();  			// g:color  		}  		//size [size] - Size of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  			writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Size);  			writer.WriteFullEndElement ();  			// g:size  		}  		#endregion  		#region Tax & Shipping  		//tax [tax]  		//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  		//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  		//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  		//shipping weight [shipping_weight] - Weight of the item for shipping  		//We accept only the following units of weight: lb' oz' g' kg.  		if (_froogleSettings.PassShippingInfo) {  			var weightName = "kg";  			var shippingWeight = product.Weight;  			switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  			case "ounce":  				weightName = "oz";  				break;  			case "lb":  				weightName = "lb";  				break;  			case "grams":  				weightName = "g";  				break;  			case "kg":  				weightName = "kg";  				break;  			default:  				//unknown weight   				weightName = "kg";  				break;  			}  			writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  		}  		#endregion  		writer.WriteEndElement ();  		// item  	}  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product1 in products1) {  	var productsToProcess = new List<Product> ();  	switch (product1.ProductType) {  	case ProductType.SimpleProduct:  		{  			//simple product doesn't have child products  			productsToProcess.Add (product1);  		}  		break;  	case ProductType.GroupedProduct:  		{  			//grouped products could have several child products  			var associatedProducts = _productService.SearchProducts (storeId: store.Id' visibleIndividuallyOnly: false' parentGroupedProductId: product1.Id);  			productsToProcess.AddRange (associatedProducts);  		}  		break;  	default:  		continue;  	}  	foreach (var product in productsToProcess) {  		writer.WriteStartElement ("item");  		#region Basic Product Information  		//id [id]- An identifier of the item  		writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  		//title [title] - Title of the item  		writer.WriteStartElement ("title");  		var title = product.Name;  		//title should be not longer than 70 characters  		if (title.Length > 70)  			title = title.Substring (0' 70);  		writer.WriteCData (title);  		writer.WriteEndElement ();  		// title  		//description [description] - Description of the item  		writer.WriteStartElement ("description");  		string description = product.FullDescription;  		if (String.IsNullOrEmpty (description))  			description = product.ShortDescription;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		if (String.IsNullOrEmpty (description))  			description = product.Name;  		//description is required  		//resolving character encoding issues in your data feed  		description = StripInvalidChars (description' true);  		writer.WriteCData (description);  		writer.WriteEndElement ();  		// description  		//google product category [google_product_category] - Google's category of the item  		//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  		string googleProductCategory = "";  		var googleProduct = _googleService.GetByProductId (product.Id);  		if (googleProduct != null)  			googleProductCategory = googleProduct.Taxonomy;  		if (String.IsNullOrEmpty (googleProductCategory))  			googleProductCategory = _froogleSettings.DefaultGoogleCategory;  		if (String.IsNullOrEmpty (googleProductCategory))  			throw new NopException ("Default Google category is not set");  		writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  		writer.WriteCData (googleProductCategory);  		writer.WriteFullEndElement ();  		// g:google_product_category  		//product type [product_type] - Your category of the item  		var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  		if (defaultProductCategory != null) {  			var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  			if (!String.IsNullOrEmpty ((category))) {  				writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  				writer.WriteCData (category);  				writer.WriteFullEndElement ();  				// g:product_type  			}  		}  		//link [link] - URL directly linking to your item's page on your website  		var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  		writer.WriteElementString ("link"' productUrl);  		//image link [image_link] - URL of an image of the item  		string imageUrl;  		var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  		if (picture != null)  			imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  		else  			imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  		writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  		//condition [condition] - Condition or state of the item  		writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  		writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  		#endregion  		#region Availability & Price  		//availability [availability] - Availability status of the item  		string availability = "in stock";  		//in stock by default  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  			switch (product.BackorderMode) {  			case BackorderMode.NoBackorders:  				{  					availability = "out of stock";  				}  				break;  			case BackorderMode.AllowQtyBelow0:  			case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  				{  					availability = "available for order";  					//availability = "preorder";  				}  				break;  			default:  				break;  			}  		}  		writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  		//price [price] - Price of the item  		var currency = GetUsedCurrency ();  		decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  		writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  		#endregion  		#region Unique Product Identifiers  		/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  		var gtin = product.Gtin;  		if (!String.IsNullOrEmpty (gtin)) {  			writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  			writer.WriteCData (gtin);  			writer.WriteFullEndElement ();  			// g:gtin  		}  		//brand [brand] - Brand of the item  		var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  		if (defaultManufacturer != null) {  			writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  			writer.WriteCData (defaultManufacturer.Manufacturer.Name);  			writer.WriteFullEndElement ();  			// g:brand  		}  		//mpn [mpn] - Manufacturer Part Number (MPN) of the item  		var mpn = product.ManufacturerPartNumber;  		if (!String.IsNullOrEmpty (mpn)) {  			writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  			writer.WriteCData (mpn);  			writer.WriteFullEndElement ();  			// g:mpn  		}  		#endregion  		#region Apparel Products  		/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  			writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Gender);  			writer.WriteFullEndElement ();  			// g:gender  		}  		//age group [age_group] - Target age group of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  			writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  			writer.WriteCData (googleProduct.AgeGroup);  			writer.WriteFullEndElement ();  			// g:age_group  		}  		//color [color] - Color of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  			writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Color);  			writer.WriteFullEndElement ();  			// g:color  		}  		//size [size] - Size of the item  		if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  			writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  			writer.WriteCData (googleProduct.Size);  			writer.WriteFullEndElement ();  			// g:size  		}  		#endregion  		#region Tax & Shipping  		//tax [tax]  		//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  		//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  		//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  		//shipping weight [shipping_weight] - Weight of the item for shipping  		//We accept only the following units of weight: lb' oz' g' kg.  		if (_froogleSettings.PassShippingInfo) {  			var weightName = "kg";  			var shippingWeight = product.Weight;  			switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  			case "ounce":  				weightName = "oz";  				break;  			case "lb":  				weightName = "lb";  				break;  			case "grams":  				weightName = "g";  				break;  			case "kg":  				weightName = "kg";  				break;  			default:  				//unknown weight   				weightName = "kg";  				break;  			}  			writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  		}  		#endregion  		writer.WriteEndElement ();  		// item  	}  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product in productsToProcess) {  	writer.WriteStartElement ("item");  	#region Basic Product Information  	//id [id]- An identifier of the item  	writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  	//title [title] - Title of the item  	writer.WriteStartElement ("title");  	var title = product.Name;  	//title should be not longer than 70 characters  	if (title.Length > 70)  		title = title.Substring (0' 70);  	writer.WriteCData (title);  	writer.WriteEndElement ();  	// title  	//description [description] - Description of the item  	writer.WriteStartElement ("description");  	string description = product.FullDescription;  	if (String.IsNullOrEmpty (description))  		description = product.ShortDescription;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	//description is required  	//resolving character encoding issues in your data feed  	description = StripInvalidChars (description' true);  	writer.WriteCData (description);  	writer.WriteEndElement ();  	// description  	//google product category [google_product_category] - Google's category of the item  	//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  	string googleProductCategory = "";  	var googleProduct = _googleService.GetByProductId (product.Id);  	if (googleProduct != null)  		googleProductCategory = googleProduct.Taxonomy;  	if (String.IsNullOrEmpty (googleProductCategory))  		googleProductCategory = _froogleSettings.DefaultGoogleCategory;  	if (String.IsNullOrEmpty (googleProductCategory))  		throw new NopException ("Default Google category is not set");  	writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  	writer.WriteCData (googleProductCategory);  	writer.WriteFullEndElement ();  	// g:google_product_category  	//product type [product_type] - Your category of the item  	var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  	if (defaultProductCategory != null) {  		var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  		if (!String.IsNullOrEmpty ((category))) {  			writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  			writer.WriteCData (category);  			writer.WriteFullEndElement ();  			// g:product_type  		}  	}  	//link [link] - URL directly linking to your item's page on your website  	var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  	writer.WriteElementString ("link"' productUrl);  	//image link [image_link] - URL of an image of the item  	string imageUrl;  	var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  	if (picture != null)  		imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  	else  		imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  	writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  	//condition [condition] - Condition or state of the item  	writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  	writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  	#endregion  	#region Availability & Price  	//availability [availability] - Availability status of the item  	string availability = "in stock";  	//in stock by default  	if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  		switch (product.BackorderMode) {  		case BackorderMode.NoBackorders:  			{  				availability = "out of stock";  			}  			break;  		case BackorderMode.AllowQtyBelow0:  		case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  			{  				availability = "available for order";  				//availability = "preorder";  			}  			break;  		default:  			break;  		}  	}  	writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  	//price [price] - Price of the item  	var currency = GetUsedCurrency ();  	decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  	writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  	#endregion  	#region Unique Product Identifiers  	/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  	var gtin = product.Gtin;  	if (!String.IsNullOrEmpty (gtin)) {  		writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  		writer.WriteCData (gtin);  		writer.WriteFullEndElement ();  		// g:gtin  	}  	//brand [brand] - Brand of the item  	var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  	if (defaultManufacturer != null) {  		writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  		writer.WriteCData (defaultManufacturer.Manufacturer.Name);  		writer.WriteFullEndElement ();  		// g:brand  	}  	//mpn [mpn] - Manufacturer Part Number (MPN) of the item  	var mpn = product.ManufacturerPartNumber;  	if (!String.IsNullOrEmpty (mpn)) {  		writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  		writer.WriteCData (mpn);  		writer.WriteFullEndElement ();  		// g:mpn  	}  	#endregion  	#region Apparel Products  	/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  		writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Gender);  		writer.WriteFullEndElement ();  		// g:gender  	}  	//age group [age_group] - Target age group of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  		writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  		writer.WriteCData (googleProduct.AgeGroup);  		writer.WriteFullEndElement ();  		// g:age_group  	}  	//color [color] - Color of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  		writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Color);  		writer.WriteFullEndElement ();  		// g:color  	}  	//size [size] - Size of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  		writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Size);  		writer.WriteFullEndElement ();  		// g:size  	}  	#endregion  	#region Tax & Shipping  	//tax [tax]  	//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  	//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  	//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  	//shipping weight [shipping_weight] - Weight of the item for shipping  	//We accept only the following units of weight: lb' oz' g' kg.  	if (_froogleSettings.PassShippingInfo) {  		var weightName = "kg";  		var shippingWeight = product.Weight;  		switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  		case "ounce":  			weightName = "oz";  			break;  		case "lb":  			weightName = "lb";  			break;  		case "grams":  			weightName = "g";  			break;  		case "kg":  			weightName = "kg";  			break;  		default:  			//unknown weight   			weightName = "kg";  			break;  		}  		writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  	}  	#endregion  	writer.WriteEndElement ();  	// item  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product in productsToProcess) {  	writer.WriteStartElement ("item");  	#region Basic Product Information  	//id [id]- An identifier of the item  	writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  	//title [title] - Title of the item  	writer.WriteStartElement ("title");  	var title = product.Name;  	//title should be not longer than 70 characters  	if (title.Length > 70)  		title = title.Substring (0' 70);  	writer.WriteCData (title);  	writer.WriteEndElement ();  	// title  	//description [description] - Description of the item  	writer.WriteStartElement ("description");  	string description = product.FullDescription;  	if (String.IsNullOrEmpty (description))  		description = product.ShortDescription;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	//description is required  	//resolving character encoding issues in your data feed  	description = StripInvalidChars (description' true);  	writer.WriteCData (description);  	writer.WriteEndElement ();  	// description  	//google product category [google_product_category] - Google's category of the item  	//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  	string googleProductCategory = "";  	var googleProduct = _googleService.GetByProductId (product.Id);  	if (googleProduct != null)  		googleProductCategory = googleProduct.Taxonomy;  	if (String.IsNullOrEmpty (googleProductCategory))  		googleProductCategory = _froogleSettings.DefaultGoogleCategory;  	if (String.IsNullOrEmpty (googleProductCategory))  		throw new NopException ("Default Google category is not set");  	writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  	writer.WriteCData (googleProductCategory);  	writer.WriteFullEndElement ();  	// g:google_product_category  	//product type [product_type] - Your category of the item  	var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  	if (defaultProductCategory != null) {  		var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  		if (!String.IsNullOrEmpty ((category))) {  			writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  			writer.WriteCData (category);  			writer.WriteFullEndElement ();  			// g:product_type  		}  	}  	//link [link] - URL directly linking to your item's page on your website  	var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  	writer.WriteElementString ("link"' productUrl);  	//image link [image_link] - URL of an image of the item  	string imageUrl;  	var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  	if (picture != null)  		imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  	else  		imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  	writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  	//condition [condition] - Condition or state of the item  	writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  	writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  	#endregion  	#region Availability & Price  	//availability [availability] - Availability status of the item  	string availability = "in stock";  	//in stock by default  	if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  		switch (product.BackorderMode) {  		case BackorderMode.NoBackorders:  			{  				availability = "out of stock";  			}  			break;  		case BackorderMode.AllowQtyBelow0:  		case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  			{  				availability = "available for order";  				//availability = "preorder";  			}  			break;  		default:  			break;  		}  	}  	writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  	//price [price] - Price of the item  	var currency = GetUsedCurrency ();  	decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  	writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  	#endregion  	#region Unique Product Identifiers  	/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  	var gtin = product.Gtin;  	if (!String.IsNullOrEmpty (gtin)) {  		writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  		writer.WriteCData (gtin);  		writer.WriteFullEndElement ();  		// g:gtin  	}  	//brand [brand] - Brand of the item  	var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  	if (defaultManufacturer != null) {  		writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  		writer.WriteCData (defaultManufacturer.Manufacturer.Name);  		writer.WriteFullEndElement ();  		// g:brand  	}  	//mpn [mpn] - Manufacturer Part Number (MPN) of the item  	var mpn = product.ManufacturerPartNumber;  	if (!String.IsNullOrEmpty (mpn)) {  		writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  		writer.WriteCData (mpn);  		writer.WriteFullEndElement ();  		// g:mpn  	}  	#endregion  	#region Apparel Products  	/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  		writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Gender);  		writer.WriteFullEndElement ();  		// g:gender  	}  	//age group [age_group] - Target age group of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  		writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  		writer.WriteCData (googleProduct.AgeGroup);  		writer.WriteFullEndElement ();  		// g:age_group  	}  	//color [color] - Color of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  		writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Color);  		writer.WriteFullEndElement ();  		// g:color  	}  	//size [size] - Size of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  		writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Size);  		writer.WriteFullEndElement ();  		// g:size  	}  	#endregion  	#region Tax & Shipping  	//tax [tax]  	//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  	//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  	//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  	//shipping weight [shipping_weight] - Weight of the item for shipping  	//We accept only the following units of weight: lb' oz' g' kg.  	if (_froogleSettings.PassShippingInfo) {  		var weightName = "kg";  		var shippingWeight = product.Weight;  		switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  		case "ounce":  			weightName = "oz";  			break;  		case "lb":  			weightName = "lb";  			break;  		case "grams":  			weightName = "g";  			break;  		case "kg":  			weightName = "kg";  			break;  		default:  			//unknown weight   			weightName = "kg";  			break;  		}  		writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  	}  	#endregion  	writer.WriteEndElement ();  	// item  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: foreach (var product in productsToProcess) {  	writer.WriteStartElement ("item");  	#region Basic Product Information  	//id [id]- An identifier of the item  	writer.WriteElementString ("g"' "id"' googleBaseNamespace' product.Id.ToString ());  	//title [title] - Title of the item  	writer.WriteStartElement ("title");  	var title = product.Name;  	//title should be not longer than 70 characters  	if (title.Length > 70)  		title = title.Substring (0' 70);  	writer.WriteCData (title);  	writer.WriteEndElement ();  	// title  	//description [description] - Description of the item  	writer.WriteStartElement ("description");  	string description = product.FullDescription;  	if (String.IsNullOrEmpty (description))  		description = product.ShortDescription;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	if (String.IsNullOrEmpty (description))  		description = product.Name;  	//description is required  	//resolving character encoding issues in your data feed  	description = StripInvalidChars (description' true);  	writer.WriteCData (description);  	writer.WriteEndElement ();  	// description  	//google product category [google_product_category] - Google's category of the item  	//the category of the product according to Googleâ€™s product taxonomy. http://www.google.com/support/merchants/bin/answer.py?answer=160081  	string googleProductCategory = "";  	var googleProduct = _googleService.GetByProductId (product.Id);  	if (googleProduct != null)  		googleProductCategory = googleProduct.Taxonomy;  	if (String.IsNullOrEmpty (googleProductCategory))  		googleProductCategory = _froogleSettings.DefaultGoogleCategory;  	if (String.IsNullOrEmpty (googleProductCategory))  		throw new NopException ("Default Google category is not set");  	writer.WriteStartElement ("g"' "google_product_category"' googleBaseNamespace);  	writer.WriteCData (googleProductCategory);  	writer.WriteFullEndElement ();  	// g:google_product_category  	//product type [product_type] - Your category of the item  	var defaultProductCategory = _categoryService.GetProductCategoriesByProductId (product.Id).FirstOrDefault ();  	if (defaultProductCategory != null) {  		var category = defaultProductCategory.Category.GetFormattedBreadCrumb (_categoryService' separator: ">");  		if (!String.IsNullOrEmpty ((category))) {  			writer.WriteStartElement ("g"' "product_type"' googleBaseNamespace);  			writer.WriteCData (category);  			writer.WriteFullEndElement ();  			// g:product_type  		}  	}  	//link [link] - URL directly linking to your item's page on your website  	var productUrl = string.Format ("{0}{1}"' store.Url' product.GetSeName (_workContext.WorkingLanguage.Id));  	writer.WriteElementString ("link"' productUrl);  	//image link [image_link] - URL of an image of the item  	string imageUrl;  	var picture = _pictureService.GetPicturesByProductId (product.Id' 1).FirstOrDefault ();  	if (picture != null)  		imageUrl = _pictureService.GetPictureUrl (picture' _froogleSettings.ProductPictureSize' storeLocation: store.Url);  	else  		imageUrl = _pictureService.GetDefaultPictureUrl (_froogleSettings.ProductPictureSize' storeLocation: store.Url);  	writer.WriteElementString ("g"' "image_link"' googleBaseNamespace' imageUrl);  	//condition [condition] - Condition or state of the item  	writer.WriteElementString ("g"' "condition"' googleBaseNamespace' "new");  	writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  	#endregion  	#region Availability & Price  	//availability [availability] - Availability status of the item  	string availability = "in stock";  	//in stock by default  	if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock && product.StockQuantity <= 0) {  		switch (product.BackorderMode) {  		case BackorderMode.NoBackorders:  			{  				availability = "out of stock";  			}  			break;  		case BackorderMode.AllowQtyBelow0:  		case BackorderMode.AllowQtyBelow0AndNotifyCustomer:  			{  				availability = "available for order";  				//availability = "preorder";  			}  			break;  		default:  			break;  		}  	}  	writer.WriteElementString ("g"' "availability"' googleBaseNamespace' availability);  	//price [price] - Price of the item  	var currency = GetUsedCurrency ();  	decimal price = _currencyService.ConvertFromPrimaryStoreCurrency (product.Price' currency);  	writer.WriteElementString ("g"' "price"' googleBaseNamespace' price.ToString (new CultureInfo ("en-US"' false).NumberFormat) + " " + currency.CurrencyCode);  	#endregion  	#region Unique Product Identifiers  	/* Unique product identifiers such as UPC' EAN' JAN or ISBN allow us to show your listing on the appropriate product page. If you don't provide the required unique product identifiers' your store may not appear on product pages' and all your items may be removed from Product Search.                          * We require unique product identifiers for all products - except for custom made goods. For apparel' you must submit the 'brand' attribute. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute. In all cases' we recommend you submit all three attributes.                          * You need to submit at least two attributes of 'brand'' 'gtin' and 'mpn'' but we recommend that you submit all three if available. For media (such as books' movies' music and video games)' you must submit the 'gtin' attribute' but we recommend that you include 'brand' and 'mpn' if available.                         *///GTIN [gtin] - GTIN  	var gtin = product.Gtin;  	if (!String.IsNullOrEmpty (gtin)) {  		writer.WriteStartElement ("g"' "gtin"' googleBaseNamespace);  		writer.WriteCData (gtin);  		writer.WriteFullEndElement ();  		// g:gtin  	}  	//brand [brand] - Brand of the item  	var defaultManufacturer = _manufacturerService.GetProductManufacturersByProductId ((product.Id)).FirstOrDefault ();  	if (defaultManufacturer != null) {  		writer.WriteStartElement ("g"' "brand"' googleBaseNamespace);  		writer.WriteCData (defaultManufacturer.Manufacturer.Name);  		writer.WriteFullEndElement ();  		// g:brand  	}  	//mpn [mpn] - Manufacturer Part Number (MPN) of the item  	var mpn = product.ManufacturerPartNumber;  	if (!String.IsNullOrEmpty (mpn)) {  		writer.WriteStartElement ("g"' "mpn"' googleBaseNamespace);  		writer.WriteCData (mpn);  		writer.WriteFullEndElement ();  		// g:mpn  	}  	#endregion  	#region Apparel Products  	/* Apparel includes all products that fall under 'Apparel & Accessories' (including all sub-categories)                          * in Googleâ€™s product taxonomy.                         *///gender [gender] - Gender of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Gender)) {  		writer.WriteStartElement ("g"' "gender"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Gender);  		writer.WriteFullEndElement ();  		// g:gender  	}  	//age group [age_group] - Target age group of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.AgeGroup)) {  		writer.WriteStartElement ("g"' "age_group"' googleBaseNamespace);  		writer.WriteCData (googleProduct.AgeGroup);  		writer.WriteFullEndElement ();  		// g:age_group  	}  	//color [color] - Color of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Color)) {  		writer.WriteStartElement ("g"' "color"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Color);  		writer.WriteFullEndElement ();  		// g:color  	}  	//size [size] - Size of the item  	if (googleProduct != null && !String.IsNullOrEmpty (googleProduct.Size)) {  		writer.WriteStartElement ("g"' "size"' googleBaseNamespace);  		writer.WriteCData (googleProduct.Size);  		writer.WriteFullEndElement ();  		// g:size  	}  	#endregion  	#region Tax & Shipping  	//tax [tax]  	//The tax attribute is an item-level override for merchant-level tax settings as defined in your Google Merchant Center account. This attribute is only accepted in the US' if your feed targets a country outside of the US' please do not use this attribute.  	//IMPORTANT NOTE: Set tax in your Google Merchant Center account settings  	//IMPORTANT NOTE: Set shipping in your Google Merchant Center account settings  	//shipping weight [shipping_weight] - Weight of the item for shipping  	//We accept only the following units of weight: lb' oz' g' kg.  	if (_froogleSettings.PassShippingInfo) {  		var weightName = "kg";  		var shippingWeight = product.Weight;  		switch (_measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).SystemKeyword) {  		case "ounce":  			weightName = "oz";  			break;  		case "lb":  			weightName = "lb";  			break;  		case "grams":  			weightName = "g";  			break;  		case "kg":  			weightName = "kg";  			break;  		default:  			//unknown weight   			weightName = "kg";  			break;  		}  		writer.WriteElementString ("g"' "shipping_weight"' googleBaseNamespace' string.Format (CultureInfo.InvariantCulture' "{0} {1}"' shippingWeight.ToString (new CultureInfo ("en-US"' false).NumberFormat)' weightName));  	}  	#endregion  	writer.WriteEndElement ();  	// item  }  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: if (title.Length > 70)  	title = title.Substring (0' 70);  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: if (title.Length > 70)  	title = title.Substring (0' 70);  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: title = title.Substring (0' 70);  
Magic Number,Nop.Plugin.Feed.Froogle,FroogleService,C:\repos\gadrianrobert_icontroldirect-ecommerce\Plugins\Nop.Plugin.Feed.Froogle\FroogleService.cs,GenerateFeed,The following statement contains a magic number: writer.WriteElementString ("g"' "expiration_date"' googleBaseNamespace' DateTime.Now.AddDays (28).ToString ("yyyy-MM-dd"));  
