Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ENode.SqlServer,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\ENodeExtensions.cs,InitializeSqlServerEventStore,The method has 8 parameters. Parameters: eNodeConfiguration' connectionString' tableName' tableCount' versionIndexName' commandIndexName' bulkCopyBatchSize' bulkCopyTimeoutSeconds
Long Parameter List,ENode.SqlServer,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\ENodeExtensions.cs,InitializeSqlServerPublishedVersionStore,The method has 5 parameters. Parameters: eNodeConfiguration' connectionString' tableName' tableCount' uniqueIndexName
Long Parameter List,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,Initialize,The method has 7 parameters. Parameters: connectionString' tableName' tableCount' versionIndexName' commandIndexName' bulkCopyBatchSize' bulkCopyTimeoutSeconds
Long Identifier,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,BatchAppendAsync,The length of the parameter batchAggregateEventAppendResult is 31.
Long Identifier,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,BatchAppendAggregateEventsAsync,The length of the parameter batchAggregateEventAppendResult is 31.
Long Identifier,ENode.SqlServer,BatchAggregateEventAppendResult,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,,The length of the parameter _aggregateEventAppendResultDict is 31.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,QueryAggregateEventsAsync,The length of the statement  "                    var errorMessage = string.Format("Failed to query aggregate events async' aggregateRootId: {0}' aggregateRootType: {1}"' aggregateRootId' aggregateRootTypeName); " is 161.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,FindAsync,The length of the statement  "                        var result = await connection.QueryListAsync<StreamRecord>(new { AggregateRootId = aggregateRootId' Version = version }' GetTableName(aggregateRootId)).ConfigureAwait(false); " is 174.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by version has unknown exception' aggregateRootId: {0}' version: {1}"' aggregateRootId' version)' ex); " is 142.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,FindAsync,The length of the statement  "                        var result = await connection.QueryListAsync<StreamRecord>(new { AggregateRootId = aggregateRootId' CommandId = commandId }' GetTableName(aggregateRootId)).ConfigureAwait(false); " is 178.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by commandId has unknown exception' aggregateRootId: {0}' commandId: {1}"' aggregateRootId' commandId)' ex); " is 148.
Long Statement,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,BatchAppendAggregateEventsAsync,The length of the statement  "            currentRetryTimes => BatchAppendAggregateEventsAsync(aggregateRootId' eventStreamList' batchAggregateEventAppendResult' currentRetryTimes)' " is 139.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,UpdatePublishedVersionAsync,The length of the statement  "                        var errorMessage = string.Format("Insert aggregate published version has sql exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 175.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,UpdatePublishedVersionAsync,The length of the statement  "                        var errorMessage = string.Format("Insert aggregate published version has unknown exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 179.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,UpdatePublishedVersionAsync,The length of the statement  "                        var errorMessage = string.Format("Update aggregate published version has sql exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 175.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,UpdatePublishedVersionAsync,The length of the statement  "                        var errorMessage = string.Format("Update aggregate published version has unknown exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 179.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,GetPublishedVersionAsync,The length of the statement  "                    var errorMessage = string.Format("Get aggregate published version has sql exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 172.
Long Statement,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,GetPublishedVersionAsync,The length of the statement  "                    var errorMessage = string.Format("Get aggregate published version has unknown exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId); " is 176.
Magic Number,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,GetTableIndex,The following statement contains a magic number: int hash = 23;
Magic Number,ENode.SqlServer,SqlServerEventStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerEventStore.cs,GetTableIndex,The following statement contains a magic number: hash = (hash << 5) - hash + c;
Magic Number,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,UpdatePublishedVersionAsync,The following statement contains a magic number: await _ioHelper.TryIOActionAsync(async () =>              {                  if (publishedVersion == 1)                  {                        try                      {                          using (var connection = GetConnection())                          {                              var currentTime = _timeProvider.GetCurrentTime();                              await connection.OpenAsync().ConfigureAwait(false);                              await connection.InsertAsync(new                              {                                  ProcessorName = processorName'                                  AggregateRootTypeName = aggregateRootTypeName'                                  AggregateRootId = aggregateRootId'                                  Version = 1'                                  CreatedOn = currentTime'                                  UpdatedOn = currentTime                              }' GetTableName(aggregateRootId)).ConfigureAwait(false);                          }                      }                      catch (SqlException ex)                      {                          if (ex.Number == 2601 && ex.Message.Contains(_uniqueIndexName))                          {                              return;                          }                          var errorMessage = string.Format("Insert aggregate published version has sql exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId);                          _logger.Error(errorMessage' ex);                          throw;                      }                      catch (Exception ex)                      {                          var errorMessage = string.Format("Insert aggregate published version has unknown exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId);                          _logger.Error(errorMessage' ex);                          throw;                      }                  }                  else                  {                      try                      {                          using (var connection = GetConnection())                          {                              await connection.OpenAsync().ConfigureAwait(false);                              await connection.UpdateAsync(                              new                              {                                  Version = publishedVersion'                                  UpdatedOn = _timeProvider.GetCurrentTime()                              }'                              new                              {                                  ProcessorName = processorName'                                  AggregateRootId = aggregateRootId'                                  Version = publishedVersion - 1                              }' GetTableName(aggregateRootId)).ConfigureAwait(false);                          }                      }                      catch (SqlException ex)                      {                          var errorMessage = string.Format("Update aggregate published version has sql exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId);                          _logger.Error(errorMessage' ex);                          throw;                      }                      catch (Exception ex)                      {                          var errorMessage = string.Format("Update aggregate published version has unknown exception' aggregateRootType: {0}' aggregateRootId: {1}"' aggregateRootTypeName' aggregateRootId);                          _logger.Error(errorMessage' ex);                          throw;                      }                  }              }' "UpdatePublishedVersionAsync");
Magic Number,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,GetTableIndex,The following statement contains a magic number: int hash = 23;
Magic Number,ENode.SqlServer,SqlServerPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.SqlServer\SqlServerPublishedVersionStore.cs,GetTableIndex,The following statement contains a magic number: hash = (hash << 5) - hash + c;
