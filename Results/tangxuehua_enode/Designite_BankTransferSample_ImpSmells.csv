Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BankTransferSample.Domain,TransferTransaction,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\TransferTransaction\TransferTransaction.cs,ConfirmAccountValidatePassed,Cyclomatic complexity of the method is 8
Long Parameter List,BankTransferSample.Commands,AddTransactionPreparationCommand,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Commands\BankAccountCommands.cs,AddTransactionPreparationCommand,The method has 5 parameters. Parameters: accountId' transactionId' transactionType' preparationType' amount
Long Parameter List,BankTransferSample.Domain,InsufficientBalanceException,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\BankAccount\InsufficientBalanceException.cs,InsufficientBalanceException,The method has 6 parameters. Parameters: accountId' transactionId' transactionType' amount' currentBalance' currentAvailableBalance
Long Parameter List,BankTransferSample.Domain,TransactionPreparation,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\BankAccount\TransactionPreparation.cs,TransactionPreparation,The method has 5 parameters. Parameters: accountId' transactionId' transactionType' preparationType' amount
Long Identifier,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The length of the parameter commandConsumerAllocatedQueues is 30.
Long Identifier,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The length of the parameter exceptionConsumerAllocatedQueues is 32.
Long Identifier,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,,The length of the parameter _nameServerSocketRemotingClient is 31.
Long Identifier,BankTransferSample.Domain,BankAccount,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\BankAccount\BankAccount.cs,GetAvailableBalance,The length of the parameter totalDebitTransactionPreparationAmount is 38.
Long Identifier,BankTransferSample.Domain,TransferTransaction,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\TransferTransaction\TransferTransaction.cs,,The length of the parameter _isSourceAccountValidatePassed is 30.
Long Identifier,BankTransferSample.Domain,TransferTransaction,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\TransferTransaction\TransferTransaction.cs,,The length of the parameter _isTargetAccountValidatePassed is 30.
Long Identifier,BankTransferSample.Domain,TransferTransaction,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\TransferTransaction\TransferTransaction.cs,,The length of the parameter _isTransferOutPreparationConfirmed is 34.
Long Identifier,BankTransferSample.Domain,TransferTransaction,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\TransferTransaction\TransferTransaction.cs,,The length of the parameter _isTransferInPreparationConfirmed is 33.
Long Statement,BankTransferSample.CommandHandlers,BankAccountCommandHandlers,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\CommandHandlers\BankAccountCommandHandlers.cs,HandleAsync,The length of the statement  "            account.AddTransactionPreparation(command.TransactionId' command.TransactionType' command.PreparationType' command.Amount); " is 123.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,UseEQueue,The length of the statement  "            configuration.SetDefault<IMessagePublisher<IApplicationMessage>' ApplicationMessagePublisher>(_applicationMessagePublisher); " is 124.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9000))); " is 124.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _applicationMessageConsumer = new ApplicationMessageConsumer().InitializeEQueue().Subscribe(Constants.ApplicationMessageTopic); " is 127.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493)); " is 137.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The length of the statement  "                _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait(); " is 136.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The length of the statement  "                var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic); " is 122.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The length of the statement  "                if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4) " is 142.
Long Statement,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,CreateTopic,The length of the statement  "                throw new Exception(string.Format("CreateTopic failed' errorMessage: {0}"' Encoding.UTF8.GetString(task.Result.ResponseBody))); " is 127.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The length of the statement  "            commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account1' account3' 300D)) " is 147.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The length of the statement  "            commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account1' account2' 1200D)) " is 148.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The length of the statement  "            commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account2' account1' 500D)) " is 147.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The length of the statement  "                commandService.ExecuteAsync(new CreateAccountCommand(accountId' "SampleAccount" + i)' CommandReturnType.EventHandled).Wait(); " is 125.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The length of the statement  "                commandService.SendAsync(new StartDepositTransactionCommand(ObjectId.GenerateNewStringId()' accountId' depositAmount)).Wait(); " is 126.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The length of the statement  "                commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(sourceAccount' targetAccount' transferAmount))); " is 169.
Long Statement,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The length of the statement  "            Console.WriteLine("All transfer transactions completed' time spent: {0}ms' throughput: {1} transactions per second."' spentTime' transactionCount * 1000 / spentTime); " is 166.
Long Statement,BankTransferSample.Domain,BankAccount,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\BankAccount\BankAccount.cs,AddTransactionPreparation,The length of the statement  "            ApplyEvent(new TransactionPreparationAddedEvent(new TransactionPreparation(Id' transactionId' transactionType' preparationType' amount))); " is 138.
Long Statement,BankTransferSample.Domain,BankAccount,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Domain\BankAccount\BankAccount.cs,GetAvailableBalance,The length of the statement  "            foreach (var debitTransactionPreparation in _transactionPreparations.Values.Where(x => x.PreparationType == PreparationType.DebitPreparation)) " is 142.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "                    Console.WriteLine("账户预转出成功，交易ID：{0}，账户：{1}，金额：{2}"' evnt.TransactionPreparation.TransactionId' evnt.TransactionPreparation.AccountId' evnt.TransactionPreparation.Amount); " is 170.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "                    Console.WriteLine("账户预转入成功，交易ID：{0}，账户：{1}，金额：{2}"' evnt.TransactionPreparation.TransactionId' evnt.TransactionPreparation.AccountId' evnt.TransactionPreparation.Amount); " is 170.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "                    Console.WriteLine("账户存款已成功，账户：{0}，金额：{1}，当前余额：{2}"' evnt.TransactionPreparation.AccountId' evnt.TransactionPreparation.Amount' evnt.CurrentBalance); " is 148.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "                    Console.WriteLine("账户转出已成功，交易ID：{0}，账户：{1}，金额：{2}，当前余额：{3}"' evnt.TransactionPreparation.TransactionId' evnt.TransactionPreparation.AccountId' evnt.TransactionPreparation.Amount' evnt.CurrentBalance); " is 200.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "                    Console.WriteLine("账户转入已成功，交易ID：{0}，账户：{1}，金额：{2}，当前余额：{3}"' evnt.TransactionPreparation.TransactionId' evnt.TransactionPreparation.AccountId' evnt.TransactionPreparation.Amount' evnt.CurrentBalance); " is 200.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "            Console.WriteLine("转账交易已开始，交易ID：{0}，源账户：{1}，目标账户：{2}，转账金额：{3}"' evnt.AggregateRootId' evnt.TransactionInfo.SourceAccountId' evnt.TransactionInfo.TargetAccountId' evnt.TransactionInfo.Amount); " is 191.
Long Statement,BankTransferSample.EventHandlers,ConsoleLogger,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\EventHandlers\ConsoleLogger.cs,HandleAsync,The length of the statement  "            Console.WriteLine("账户的余额不足，交易ID：{0}，账户：{1}，可用余额：{2}，转出金额：{3}"' exception.TransactionId' exception.AccountId' exception.CurrentAvailableBalance' exception.Amount); " is 162.
Long Statement,BankTransferSample.ProcessManagers,DepositTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\DepositTransactionProcessManager.cs,HandleAsync,The length of the statement  "                await _commandService.SendAsync(new ConfirmDepositPreparationCommand(evnt.TransactionPreparation.TransactionId) { Id = evnt.Id }); " is 130.
Long Statement,BankTransferSample.ProcessManagers,DepositTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\DepositTransactionProcessManager.cs,HandleAsync,The length of the statement  "            await _commandService.SendAsync(new CommitTransactionPreparationCommand(evnt.AccountId' evnt.AggregateRootId) { Id = evnt.Id }); " is 128.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            var task1 = _commandService.SendAsync(new ValidateAccountCommand(evnt.TransactionInfo.SourceAccountId' evnt.AggregateRootId) { Id = evnt.Id' Items = evnt.Items }); " is 163.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            var task2 = _commandService.SendAsync(new ValidateAccountCommand(evnt.TransactionInfo.TargetAccountId' evnt.AggregateRootId) { Id = evnt.Id' Items = evnt.Items }); " is 163.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            await _commandService.SendAsync(new ConfirmAccountValidatePassedCommand(message.TransactionId' message.AccountId) { Id = message.Id' Items = message.Items }); " is 158.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            await _commandService.SendAsync(new CancelTransferTransactionCommand(message.TransactionId) { Id = message.Id' Items = message.Items }); " is 136.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "                    await _commandService.SendAsync(new ConfirmTransferOutPreparationCommand(evnt.TransactionPreparation.TransactionId) { Id = evnt.Id' Items = evnt.Items }); " is 154.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "                    await _commandService.SendAsync(new ConfirmTransferInPreparationCommand(evnt.TransactionPreparation.TransactionId) { Id = evnt.Id' Items = evnt.Items }); " is 153.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "                await _commandService.SendAsync(new CancelTransferTransactionCommand(exception.TransactionId) { Id = exception.Id' Items = exception.Items }); " is 142.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            var task1 = _commandService.SendAsync(new CommitTransactionPreparationCommand(evnt.TransactionInfo.SourceAccountId' evnt.AggregateRootId) { Id = evnt.Id' Items = evnt.Items }); " is 176.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "            var task2 = _commandService.SendAsync(new CommitTransactionPreparationCommand(evnt.TransactionInfo.TargetAccountId' evnt.AggregateRootId) { Id = evnt.Id' Items = evnt.Items }); " is 176.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "                    await _commandService.SendAsync(new ConfirmTransferOutCommand(evnt.TransactionPreparation.TransactionId) { Id = evnt.Id' Items = evnt.Items }); " is 143.
Long Statement,BankTransferSample.ProcessManagers,TransferTransactionProcessManager,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ProcessManagers\TransferTransactionProcessManager.cs,HandleAsync,The length of the statement  "                    await _commandService.SendAsync(new ConfirmTransferInCommand(evnt.TransactionPreparation.TransactionId) { Id = evnt.Id' Items = evnt.Items }); " is 142.
Complex Conditional,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The conditional expression  "availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4"  is complex.
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9000)));
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493));
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _domainEventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _exceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _domainEventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _exceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var exceptionConsumerAllocatedQueues = _exceptionConsumer.Consumer.GetCurrentQueues();                  if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var exceptionConsumerAllocatedQueues = _exceptionConsumer.Consumer.GetCurrentQueues();                  if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var exceptionConsumerAllocatedQueues = _exceptionConsumer.Consumer.GetCurrentQueues();                  if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var exceptionConsumerAllocatedQueues = _exceptionConsumer.Consumer.GetCurrentQueues();                  if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var exceptionConsumerAllocatedQueues = _exceptionConsumer.Consumer.GetCurrentQueues();                  if (commandConsumerAllocatedQueues.Count() == 4 && eventConsumerAllocatedQueues.Count() == 4 && exceptionConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,BankTransferSample,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\ENodeExtensions.cs,CreateTopic,The following statement contains a magic number: var task = _nameServerSocketRemotingClient.InvokeAsync(remotingRequest' 30000);
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: commandService.SendAsync(new StartDepositTransactionCommand(ObjectId.GenerateNewStringId()' account1' 1000)).Wait();
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: commandService.SendAsync(new StartDepositTransactionCommand(ObjectId.GenerateNewStringId()' account2' 1000)).Wait();
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account1' account3' 300D))              {                  Items = new Dictionary<string' string>                  {                      { "ProcessId"' "10000" }                  }              }).Wait();
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account1' account2' 1200D))              {                  Items = new Dictionary<string' string>                  {                      { "ProcessId"' "10001" }                  }              }).Wait();
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: commandService.SendAsync(new StartTransferTransactionCommand(ObjectId.GenerateNewStringId()' new TransferTransactionInfo(account2' account1' 500D))              {                  Items = new Dictionary<string' string>                  {                      { "ProcessId"' "10002" }                  }              }).Wait();
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,NormalTest,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: var accountCount = 100;
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: var transactionCount = 1000;
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: var depositAmount = 1000000000D;
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: var transferAmount = 100D;
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,BankTransferSample,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\BankTransferSample\Program.cs,PerformanceTest,The following statement contains a magic number: Console.WriteLine("All transfer transactions completed' time spent: {0}ms' throughput: {1} transactions per second."' spentTime' transactionCount * 1000 / spentTime);
