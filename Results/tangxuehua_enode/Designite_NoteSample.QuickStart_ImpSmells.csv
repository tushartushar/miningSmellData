Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The length of the parameter commandConsumerAllocatedQueues is 30.
Long Identifier,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,,The length of the parameter _nameServerSocketRemotingClient is 31.
Long Statement,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9000))); " is 124.
Long Statement,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493)); " is 137.
Long Statement,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,CreateTopic,The length of the statement  "                throw new Exception(string.Format("CreateTopic failed' errorMessage: {0}"' Encoding.UTF8.GetString(task.Result.ResponseBody))); " is 127.
Complex Conditional,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The conditional expression  "availableQueues1 != null                   && availableQueues2 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4"  is complex.
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9000)));
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493));
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  if (availableQueues1 != null                   && availableQueues2 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  if (availableQueues1 != null                   && availableQueues2 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  if (availableQueues1 != null                   && availableQueues2 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  if (availableQueues1 != null                   && availableQueues2 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  if (eventConsumerAllocatedQueues.Count() == 4 && commandConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  if (eventConsumerAllocatedQueues.Count() == 4 && commandConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  if (eventConsumerAllocatedQueues.Count() == 4 && commandConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  var eventConsumerAllocatedQueues = _eventConsumer.Consumer.GetCurrentQueues();                  var commandConsumerAllocatedQueues = _commandConsumer.Consumer.GetCurrentQueues();                  if (eventConsumerAllocatedQueues.Count() == 4 && commandConsumerAllocatedQueues.Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,NoteSample.QuickStart,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\Samples\NoteSample\NoteSample.QuickStart\ENodeExtensions.cs,CreateTopic,The following statement contains a magic number: var task = _nameServerSocketRemotingClient.InvokeAsync(remotingRequest' 30000);
