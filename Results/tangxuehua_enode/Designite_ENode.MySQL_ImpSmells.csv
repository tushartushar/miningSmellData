Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ENode.MySQL,ENodeExtensions,C:\repos\tangxuehua_enode\src\ENode.MySQL\ENodeExtensions.cs,InitializeMySqlEventStore,The method has 7 parameters. Parameters: eNodeConfiguration' connectionString' tableName' tableCount' versionIndexName' commandIndexName' batchInsertTimeoutSeconds
Long Parameter List,ENode.MySQL,ENodeExtensions,C:\repos\tangxuehua_enode\src\ENode.MySQL\ENodeExtensions.cs,InitializeMySqlPublishedVersionStore,The method has 5 parameters. Parameters: eNodeConfiguration' connectionString' tableName' tableCount' uniqueIndexName
Long Parameter List,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,Initialize,The method has 6 parameters. Parameters: connectionString' tableName' tableCount' versionIndexName' commandIndexName' batchInsertTimeoutSeconds
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,QueryAggregateEvents,The length of the statement  "                    var errorMessage = string.Format("Failed to query aggregate events' aggregateRootId: {0}' aggregateRootType: {1}"' aggregateRootId' aggregateRootTypeName); " is 155.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,QueryAggregateEvents,The length of the statement  "                    var errorMessage = string.Format("Failed to query aggregate events' aggregateRootId: {0}' aggregateRootType: {1}"' aggregateRootId' aggregateRootTypeName); " is 155.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,QueryAggregateEventsAsync,The length of the statement  "                    var errorMessage = string.Format("Failed to query aggregate events async' aggregateRootId: {0}' aggregateRootType: {1}"' aggregateRootId' aggregateRootTypeName); " is 161.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,QueryAggregateEventsAsync,The length of the statement  "                    var errorMessage = string.Format("Failed to query aggregate events async' aggregateRootId: {0}' aggregateRootType: {1}"' aggregateRootId' aggregateRootTypeName); " is 161.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,BatchAppendAsync,The length of the statement  "                            await connection.ExecuteAsync(sql' streamRecords' transaction: transaction' commandTimeout: _batchInsertTimeoutSeconds); " is 120.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                        var result = await connection.QueryListAsync<StreamRecord>(new { AggregateRootId = aggregateRootId' Version = version }' GetTableName(aggregateRootId)); " is 152.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by version has sql exception' aggregateRootId: {0}' version: {1}"' aggregateRootId' version)' ex); " is 138.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by version has unknown exception' aggregateRootId: {0}' version: {1}"' aggregateRootId' version)' ex); " is 142.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                        var result = await connection.QueryListAsync<StreamRecord>(new { AggregateRootId = aggregateRootId' CommandId = commandId }' GetTableName(aggregateRootId)); " is 156.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by commandId has sql exception' aggregateRootId: {0}' commandId: {1}"' aggregateRootId' commandId)' ex); " is 144.
Long Statement,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,FindAsync,The length of the statement  "                    _logger.Error(string.Format("Find event by commandId has unknown exception' aggregateRootId: {0}' commandId: {1}"' aggregateRootId' commandId)' ex); " is 148.
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,BatchAppendAsync,The following statement contains a magic number: return _ioHelper.TryIOFuncAsync(async () =>              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.OpenAsync();                          var transaction = await Task.Run(() => connection.BeginTransaction());                          try                          {                              await connection.ExecuteAsync(sql' streamRecords' transaction: transaction' commandTimeout: _batchInsertTimeoutSeconds);                              await Task.Run(() => transaction.Commit());                              return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.Success);                          }                          catch                          {                              try                              {                                  transaction.Rollback();                              }                              catch (Exception ex)                              {                                  _logger.ErrorFormat("Transaction rollback failed."' ex);                              }                              throw;                          }                      }                  }                  catch (MySqlException ex)                  {                      if (ex.Number == 1062 && ex.Message.Contains(_versionIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateEvent);                      }                      if (ex.Number == 1062 && ex.Message.Contains(_commandIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateCommand);                      }                      _logger.Error("Batch append event has sql exception."' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.IOException' ex.Message' EventAppendResult.Failed);                  }                  catch (Exception ex)                  {                      _logger.Error("Batch append event has unknown exception."' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Failed' ex.Message' EventAppendResult.Failed);                  }              }' "BatchAppendEventsAsync");
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,BatchAppendAsync,The following statement contains a magic number: return _ioHelper.TryIOFuncAsync(async () =>              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.OpenAsync();                          var transaction = await Task.Run(() => connection.BeginTransaction());                          try                          {                              await connection.ExecuteAsync(sql' streamRecords' transaction: transaction' commandTimeout: _batchInsertTimeoutSeconds);                              await Task.Run(() => transaction.Commit());                              return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.Success);                          }                          catch                          {                              try                              {                                  transaction.Rollback();                              }                              catch (Exception ex)                              {                                  _logger.ErrorFormat("Transaction rollback failed."' ex);                              }                              throw;                          }                      }                  }                  catch (MySqlException ex)                  {                      if (ex.Number == 1062 && ex.Message.Contains(_versionIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateEvent);                      }                      if (ex.Number == 1062 && ex.Message.Contains(_commandIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateCommand);                      }                      _logger.Error("Batch append event has sql exception."' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.IOException' ex.Message' EventAppendResult.Failed);                  }                  catch (Exception ex)                  {                      _logger.Error("Batch append event has unknown exception."' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Failed' ex.Message' EventAppendResult.Failed);                  }              }' "BatchAppendEventsAsync");
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,AppendAsync,The following statement contains a magic number: return _ioHelper.TryIOFuncAsync(async () =>              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.ExecuteAsync(sql' record);                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.Success);                      }                  }                  catch (MySqlException ex)                  {                      if (ex.Number == 1062 && ex.Message.Contains(_versionIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateEvent);                      }                      else if (ex.Number == 1062 && ex.Message.Contains(_commandIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateCommand);                      }                      _logger.Error(string.Format("Append event has sql exception' eventStream: {0}"' eventStream)' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.IOException' ex.Message' EventAppendResult.Failed);                  }                  catch (Exception ex)                  {                      _logger.Error(string.Format("Append event has unknown exception' eventStream: {0}"' eventStream)' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Failed' ex.Message' EventAppendResult.Failed);                  }              }' "AppendEventsAsync");
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,AppendAsync,The following statement contains a magic number: return _ioHelper.TryIOFuncAsync(async () =>              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.ExecuteAsync(sql' record);                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.Success);                      }                  }                  catch (MySqlException ex)                  {                      if (ex.Number == 1062 && ex.Message.Contains(_versionIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateEvent);                      }                      else if (ex.Number == 1062 && ex.Message.Contains(_commandIndexName))                      {                          return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Success' EventAppendResult.DuplicateCommand);                      }                      _logger.Error(string.Format("Append event has sql exception' eventStream: {0}"' eventStream)' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.IOException' ex.Message' EventAppendResult.Failed);                  }                  catch (Exception ex)                  {                      _logger.Error(string.Format("Append event has unknown exception' eventStream: {0}"' eventStream)' ex);                      return new AsyncTaskResult<EventAppendResult>(AsyncTaskStatus.Failed' ex.Message' EventAppendResult.Failed);                  }              }' "AppendEventsAsync");
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,GetTableIndex,The following statement contains a magic number: int hash = 23;
Magic Number,ENode.MySQL,MySqlEventStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlEventStore.cs,GetTableIndex,The following statement contains a magic number: foreach (char c in aggregateRootId)              {                  hash = (hash << 5) - hash + c;              }
Magic Number,ENode.MySQL,MySqlPublishedVersionStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlPublishedVersionStore.cs,UpdatePublishedVersionAsync,The following statement contains a magic number: if (publishedVersion == 1)              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.InsertAsync(new                          {                              ProcessorName = processorName'                              AggregateRootTypeName = aggregateRootTypeName'                              AggregateRootId = aggregateRootId'                              Version = 1'                              CreatedOn = DateTime.Now                          }' GetTableName(aggregateRootId));                          return AsyncTaskResult.Success;                      }                  }                  catch (MySqlException ex)                  {                      if (ex.Number == 1062 && ex.Message.Contains(_uniqueIndexName))                      {                          return AsyncTaskResult.Success;                      }                      _logger.Error("Insert aggregate published version has sql exception."' ex);                      return new AsyncTaskResult(AsyncTaskStatus.IOException' ex.Message);                  }                  catch (Exception ex)                  {                      _logger.Error("Insert aggregate published version has unknown exception."' ex);                      return new AsyncTaskResult(AsyncTaskStatus.Failed' ex.Message);                  }              }              else              {                  try                  {                      using (var connection = GetConnection())                      {                          await connection.UpdateAsync(                          new                          {                              Version = publishedVersion'                              CreatedOn = DateTime.Now                          }'                          new                          {                              ProcessorName = processorName'                              AggregateRootId = aggregateRootId'                              Version = publishedVersion - 1                          }' GetTableName(aggregateRootId));                          return AsyncTaskResult.Success;                      }                  }                  catch (MySqlException ex)                  {                      _logger.Error("Update aggregate published version has sql exception."' ex);                      return new AsyncTaskResult(AsyncTaskStatus.IOException' ex.Message);                  }                  catch (Exception ex)                  {                      _logger.Error("Update aggregate published version has unknown exception."' ex);                      return new AsyncTaskResult(AsyncTaskStatus.Failed' ex.Message);                  }              }
Magic Number,ENode.MySQL,MySqlPublishedVersionStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlPublishedVersionStore.cs,GetTableIndex,The following statement contains a magic number: int hash = 23;
Magic Number,ENode.MySQL,MySqlPublishedVersionStore,C:\repos\tangxuehua_enode\src\ENode.MySQL\MySqlPublishedVersionStore.cs,GetTableIndex,The following statement contains a magic number: foreach (char c in aggregateRootId)              {                  hash = (hash << 5) - hash + c;              }
