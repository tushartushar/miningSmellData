Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ENode.PublishEventPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\Program.cs,PublishEventAsync,The length of the statement  "                eventStreams.Add(new DomainEventStreamMessage(commandId' note.Id' 1' note.GetType().FullName' evnts' new Dictionary<string' string>())); " is 136.
Magic Number,ENode.PublishEventPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _eventPublisher.Producer.SendOneway(new EQueueMessage("NoteEventTopic"' 100' new byte[1])' "1");                  var availableQueues = _eventPublisher.Producer.GetAvailableMessageQueues("NoteEventTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.PublishEventPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _eventPublisher.Producer.SendOneway(new EQueueMessage("NoteEventTopic"' 100' new byte[1])' "1");                  var availableQueues = _eventPublisher.Producer.GetAvailableMessageQueues("NoteEventTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.PublishEventPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _eventPublisher.Producer.SendOneway(new EQueueMessage("NoteEventTopic"' 100' new byte[1])' "1");                  var availableQueues = _eventPublisher.Producer.GetAvailableMessageQueues("NoteEventTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.PublishEventPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _eventPublisher.Producer.SendOneway(new EQueueMessage("NoteEventTopic"' 100' new byte[1])' "1");                  var availableQueues = _eventPublisher.Producer.GetAvailableMessageQueues("NoteEventTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.PublishEventPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\Program.cs,Main,The following statement contains a magic number: PublishEventAsync(100000);
Magic Number,ENode.PublishEventPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\Program.cs,PublishEventAsync,The following statement contains a magic number: var printSize = eventCount / 10;
Magic Number,ENode.PublishEventPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.PublishEventPerfTests\Program.cs,PublishEventAsync,The following statement contains a magic number: Console.WriteLine("--Event publish async completed' throughput: {0}/s"' eventCount * 1000 / watch.ElapsedMilliseconds);
