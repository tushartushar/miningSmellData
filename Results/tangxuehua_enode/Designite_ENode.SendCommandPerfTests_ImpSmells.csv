Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ENode.SendCommandPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\Program.cs,SendCommandAsync,The length of the statement  "            Console.WriteLine("--Commands send async completed' throughput: {0}/s"' commandCount * 1000 / watch.ElapsedMilliseconds); " is 121.
Magic Number,ENode.SendCommandPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.SendOneway(new Message("NoteCommandTopic"' 100' new byte[1])' "1");                  var availableQueues = _commandService.Producer.GetAvailableMessageQueues("NoteCommandTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.SendCommandPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.SendOneway(new Message("NoteCommandTopic"' 100' new byte[1])' "1");                  var availableQueues = _commandService.Producer.GetAvailableMessageQueues("NoteCommandTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.SendCommandPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.SendOneway(new Message("NoteCommandTopic"' 100' new byte[1])' "1");                  var availableQueues = _commandService.Producer.GetAvailableMessageQueues("NoteCommandTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.SendCommandPerfTests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.SendOneway(new Message("NoteCommandTopic"' 100' new byte[1])' "1");                  var availableQueues = _commandService.Producer.GetAvailableMessageQueues("NoteCommandTopic");                  if (availableQueues.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.SendCommandPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\Program.cs,SendCommandAsync,The following statement contains a magic number: var printSize = commandCount / 10;
Magic Number,ENode.SendCommandPerfTests,Program,D:\research\architectureSmells\repos1\tangxuehua_enode\src\PerformanceTests\ENode.SendCommandPerfTests\Program.cs,SendCommandAsync,The following statement contains a magic number: Console.WriteLine("--Commands send async completed' throughput: {0}/s"' commandCount * 1000 / watch.ElapsedMilliseconds);
