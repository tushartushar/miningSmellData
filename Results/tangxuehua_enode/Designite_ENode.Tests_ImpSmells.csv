Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,Initialize,The method has 5 parameters. Parameters: useMockEventStore' useMockPublishedVersionStore' useMockDomainEventPublisher' useMockApplicationMessagePublisher' useMockDomainExceptionPublisher
Long Parameter List,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,InitializeENode,The method has 5 parameters. Parameters: useMockEventStore' useMockPublishedVersionStore' useMockDomainEventPublisher' useMockApplicationMessagePublisher' useMockDomainExceptionPublisher
Long Identifier,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,UseEQueue,The length of the parameter useMockApplicationMessagePublisher is 34.
Long Identifier,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,UseEQueue,The length of the parameter useMockDomainExceptionPublisher is 31.
Long Identifier,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,,The length of the parameter _nameServerSocketRemotingClient is 31.
Long Identifier,ENode.Tests,MockPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\Mocks\MockPublishedVersionStore.cs,,The length of the parameter _inMemoryPublishedVersionStore is 30.
Long Identifier,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,Initialize,The length of the parameter useMockApplicationMessagePublisher is 34.
Long Identifier,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,Initialize,The length of the parameter useMockDomainExceptionPublisher is 31.
Long Identifier,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,InitializeENode,The length of the parameter useMockApplicationMessagePublisher is 34.
Long Identifier,ENode.Tests,BaseTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\BaseTest.cs,InitializeENode,The length of the parameter useMockDomainExceptionPublisher is 31.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,UseEQueue,The length of the statement  "                configuration.SetDefault<IMessagePublisher<IApplicationMessage>' ApplicationMessagePublisher>(_applicationMessagePublisher); " is 124.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9001))); " is 124.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _commandConsumer = new CommandConsumer().InitializeEQueue(setting: new ConsumerSetting { ConsumeFromWhere = ConsumeFromWhere.LastOffset }).Subscribe("CommandTopic"); " is 165.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _eventConsumer = new DomainEventConsumer().InitializeEQueue(setting: new ConsumerSetting { ConsumeFromWhere = ConsumeFromWhere.LastOffset }).Subscribe("EventTopic"); " is 165.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _applicationMessageConsumer = new ApplicationMessageConsumer().InitializeEQueue(setting: new ConsumerSetting { ConsumeFromWhere = ConsumeFromWhere.LastOffset }).Subscribe("ApplicationMessageTopic"); " is 198.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _domainExceptionConsumer = new DomainExceptionConsumer().InitializeEQueue(setting: new ConsumerSetting { ConsumeFromWhere = ConsumeFromWhere.LastOffset }).Subscribe("DomainExceptionTopic"); " is 189.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The length of the statement  "            _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493)); " is 137.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The length of the statement  "                _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait(); " is 136.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The length of the statement  "                _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait(); " is 124.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The length of the statement  "                var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic); " is 122.
Long Statement,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,CreateTopic,The length of the statement  "                throw new Exception(string.Format("CreateTopic failed' errorMessage: {0}"' Encoding.UTF8.GetString(task.Result.ResponseBody))); " is 127.
Long Statement,ENode.Tests,MockPublishedVersionStore,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\Mocks\MockPublishedVersionStore.cs,UpdatePublishedVersionAsync,The length of the statement  "            return _inMemoryPublishedVersionStore.UpdatePublishedVersionAsync(processorName' aggregateRootTypeName' aggregateRootId' publishedVersion); " is 139.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test,The length of the statement  "            _publishedVersionStore.UpdatePublishedVersionAsync("DefaultEventProcessor"' typeof(TestAggregate).FullName' aggregateId' 1).Wait(); " is 131.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test,The length of the statement  "            _logger.Info("----create_concurrent_conflict_and_then_update_many_times_test' _commandService.ExecuteAsync create success"); " is 124.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test,The length of the statement  "                    _logger.InfoFormat("----create_concurrent_conflict_and_then_update_many_times_test' updateCommand finished' count: {0}"' totalCount); " is 133.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test2,The length of the statement  "            _publishedVersionStore.UpdatePublishedVersionAsync("DefaultEventProcessor"' typeof(TestAggregate).FullName' aggregateId' 1).Wait(); " is 131.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,update_concurrent_conflict_test,The length of the statement  "            _publishedVersionStore.UpdatePublishedVersionAsync("DefaultEventProcessor"' typeof(TestAggregate).FullName' aggregateId' 2).Wait(); " is 131.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,sequence_domain_event_process_test,The length of the statement  "            processor.Process(new ProcessingEvent(message1' new DomainEventStreamProcessContext(message1' waitHandle' versionList))); " is 121.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,sequence_domain_event_process_test,The length of the statement  "            processor.Process(new ProcessingEvent(message3' new DomainEventStreamProcessContext(message3' waitHandle' versionList))); " is 121.
Long Statement,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,sequence_domain_event_process_test,The length of the statement  "            processor.Process(new ProcessingEvent(message2' new DomainEventStreamProcessContext(message2' waitHandle' versionList))); " is 121.
Complex Conditional,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The conditional expression  "availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4"  is complex.
Complex Conditional,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The conditional expression  "_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4"  is complex.
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _commandService.InitializeEQueue(new CommandResultProcessor().Initialize(new IPEndPoint(SocketUtils.GetLocalIPV4()' 9001)));
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,StartEQueue,The following statement contains a magic number: _nameServerSocketRemotingClient = new SocketRemotingClient("NameServerRemotingClient"' new IPEndPoint(SocketUtils.GetLocalIPV4()' 9493));
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllProducerTopicQueuesAvailable,The following statement contains a magic number: scheduleService.StartTask("WaitAllProducerTopicQueuesAvailable"' () =>              {                  _commandService.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.CommandTopic).Wait();                  _eventPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.EventTopic).Wait();                  _applicationMessagePublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ApplicationMessageTopic).Wait();                  _domainExceptionPublisher.Producer.ClientService.LoadTopicMessageQueuesFromNameServerAsync(Constants.ExceptionTopic).Wait();                  var availableQueues1 = _commandService.Producer.GetAvailableMessageQueues(Constants.CommandTopic);                  var availableQueues2 = _eventPublisher.Producer.GetAvailableMessageQueues(Constants.EventTopic);                  var availableQueues3 = _applicationMessagePublisher.Producer.GetAvailableMessageQueues(Constants.ApplicationMessageTopic);                  var availableQueues4 = _domainExceptionPublisher.Producer.GetAvailableMessageQueues(Constants.ExceptionTopic);                  if (availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1 != null                   && availableQueues1.Count == 4                   && availableQueues2.Count == 4                   && availableQueues3.Count == 4                   && availableQueues4.Count == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,WaitAllConsumerLoadBalanceComplete,The following statement contains a magic number: scheduleService.StartTask("WaitAllConsumerLoadBalanceComplete"' () =>              {                  if (_eventConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _commandConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _applicationMessageConsumer.Consumer.GetCurrentQueues().Count() == 4                   && _domainExceptionConsumer.Consumer.GetCurrentQueues().Count() == 4)                  {                      waitHandle.Set();                  }              }' 1000' 1000);
Magic Number,ENode.Tests,ENodeExtensions,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\ENodeExtensions.cs,CreateTopic,The following statement contains a magic number: var task = _nameServerSocketRemotingClient.InvokeAsync(remotingRequest' 30000);
Magic Number,ENode.Tests,Handler121,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(2'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,Handler122,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(2'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,Handler123,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(2'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,Handler1231,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(3'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,Handler1232,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(3'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,Handler1233,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\EventHandlers\PriorityEventHandlers.cs,HandleAsync,The following statement contains a magic number: CommandAndEventServiceTest.HandlerTypes.AddOrUpdate(3'              x => new List<string> { GetType().Name }'              (x' existing) =>              {                  existing.Add(GetType().Name);                  return existing;              });
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_and_update_aggregate_test,The following statement contains a magic number: Assert.AreEqual(2' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_and_update_inherit_aggregate_test,The following statement contains a magic number: Assert.AreEqual(2' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,command_sync_execute_test,The following statement contains a magic number: var command = new CreateTestAggregateCommand              {                  AggregateRootId = aggregateId'                  Title = "Sample Note"'                  SleepMilliseconds = 3000              };
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,command_sync_execute_test,The following statement contains a magic number: Assert.AreEqual(2' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,duplicate_update_aggregate_command_test,The following statement contains a magic number: Assert.AreEqual(2' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,duplicate_update_aggregate_command_test,The following statement contains a magic number: Assert.AreEqual(2' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_and_concurrent_update_aggregate_test,The following statement contains a magic number: var totalCount = 100;
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test,The following statement contains a magic number: i < 50
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,create_concurrent_conflict_and_then_update_many_times_test2,The following statement contains a magic number: i < 50
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,update_concurrent_conflict_test,The following statement contains a magic number: var eventStream = new DomainEventStream(                  ObjectId.GenerateNewStringId()'                  aggregateId'                  typeof(TestAggregate).FullName'                  DateTime.Now'                  new IDomainEvent[] { new TestAggregateTitleChanged("Changed Title") { AggregateRootId = aggregateId' Version = 2 } }'                  null);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,update_concurrent_conflict_test,The following statement contains a magic number: _publishedVersionStore.UpdatePublishedVersionAsync("DefaultEventProcessor"' typeof(TestAggregate).FullName' aggregateId' 2).Wait();
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,update_concurrent_conflict_test,The following statement contains a magic number: i < 50
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,update_concurrent_conflict_test,The following statement contains a magic number: Assert.AreEqual(2 + commandList.Count' ((IAggregateRoot)note).Version);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(3' HandlerTypes[1].Count);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler1).Name' HandlerTypes[1][2]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(3' HandlerTypes[2].Count);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(3' HandlerTypes[2].Count);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler122).Name' HandlerTypes[2][0]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler121).Name' HandlerTypes[2][1]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler123).Name' HandlerTypes[2][2]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler123).Name' HandlerTypes[2][2]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(3' HandlerTypes[3].Count);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(3' HandlerTypes[3].Count);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler1232).Name' HandlerTypes[3][0]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler1231).Name' HandlerTypes[3][1]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler1233).Name' HandlerTypes[3][2]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,event_handler_priority_test,The following statement contains a magic number: Assert.AreEqual(typeof(Handler1233).Name' HandlerTypes[3][2]);
Magic Number,ENode.Tests,CommandAndEventServiceTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,sequence_domain_event_process_test,The following statement contains a magic number: i < 3
Magic Number,ENode.Tests,DomainEventStreamProcessContext,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\CommandAndEventServiceTest.cs,NotifyEventProcessed,The following statement contains a magic number: _domainEventStreamMessage.Version == 3
Magic Number,ENode.Tests,ApplicationMessagePublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\ApplicationMessagePublisherFailedTest.cs,command_application_message_publish_failed_test,The following statement contains a magic number: ((MockApplicationMessagePublisher)_applicationMessagePublisher).SetExpectFailedCount(FailedType.UnKnownException' 5);
Magic Number,ENode.Tests,ApplicationMessagePublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\ApplicationMessagePublisherFailedTest.cs,command_application_message_publish_failed_test,The following statement contains a magic number: ((MockApplicationMessagePublisher)_applicationMessagePublisher).SetExpectFailedCount(FailedType.IOException' 5);
Magic Number,ENode.Tests,EventPublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\EventPublisherFailedTest.cs,event_publisher_failed_test,The following statement contains a magic number: ((MockDomainEventPublisher)_domainEventPublisher).SetExpectFailedCount(FailedType.UnKnownException' 5);
Magic Number,ENode.Tests,EventPublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\EventPublisherFailedTest.cs,event_publisher_failed_test,The following statement contains a magic number: ((MockDomainEventPublisher)_domainEventPublisher).SetExpectFailedCount(FailedType.IOException' 5);
Magic Number,ENode.Tests,EventStoreFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\EventStoreFailedTest.cs,event_store_failed_test,The following statement contains a magic number: mockEventStore.SetExpectFailedCount(FailedType.UnKnownException' 5);
Magic Number,ENode.Tests,EventStoreFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\EventStoreFailedTest.cs,event_store_failed_test,The following statement contains a magic number: mockEventStore.SetExpectFailedCount(FailedType.IOException' 5);
Magic Number,ENode.Tests,DomainExceptionPublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\DomainExceptionPublisherFailedTest.cs,domain_exception_publisher_throw_exception_test,The following statement contains a magic number: ((MockDomainExceptionPublisher)_domainExceptionPublisher).SetExpectFailedCount(FailedType.UnKnownException' 5);
Magic Number,ENode.Tests,DomainExceptionPublisherFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\DomainExceptionPublisherFailedTest.cs,domain_exception_publisher_throw_exception_test,The following statement contains a magic number: ((MockDomainExceptionPublisher)_domainExceptionPublisher).SetExpectFailedCount(FailedType.IOException' 5);
Magic Number,ENode.Tests,PublishedVersionStoreFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\PublishedVersionStoreFailedTest.cs,published_version_store_failed_test,The following statement contains a magic number: mockPublishedVersionStore.SetExpectFailedCount(FailedType.UnKnownException' 5);
Magic Number,ENode.Tests,PublishedVersionStoreFailedTest,D:\research\architectureSmells\repos1\tangxuehua_enode\src\ENode.Tests\TestClasses\IOFailedTests\PublishedVersionStoreFailedTest.cs,published_version_store_failed_test,The following statement contains a magic number: mockPublishedVersionStore.SetExpectFailedCount(FailedType.IOException' 5);
