Implementation smell,Namespace,Class,File,Method,Description
Long Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has 778 lines of code.
Long Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Logging,The method has 153 lines of code.
Complex Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,Cyclomatic complexity of the method is 115
Complex Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,Cyclomatic complexity of the method is 10
Complex Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,Cyclomatic complexity of the method is 16
Complex Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,Cyclomatic complexity of the method is 13
Complex Method,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Logging,Cyclomatic complexity of the method is 109
Complex Method,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,SetLogFile,Cyclomatic complexity of the method is 10
Complex Method,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,GetExceptionXElement,Cyclomatic complexity of the method is 9
Complex Method,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntryToFile,Cyclomatic complexity of the method is 8
Long Parameter List,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has 25 parameters.
Long Parameter List,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,SetLogFile,The method has 8 parameters.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "		string appdataDir = String.Format ("{0}\\{1}\\{2}\\"' Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' Application.CompanyName' Application.ProductName); " is 175.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "					Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower); " is 151.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "					Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "	IniSettings.sSpreadDir = String.Format ("{0}\\{1}\\{2}\\"' Application.StoragePlace' Application.CompanyName' Application.ProductName); " is 135.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We think '{0}' directory exists already."' OtherSettings.sSpreadDirB)' "Info"' IniSettings.sVerbosePower); " is 131.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "		Logging (String.Format ("We failed to create '{0}' directory because: {1}"' OtherSettings.sSpreadDirB' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 157.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "					Logging (String.Format ("We copied file '{0}' to '{1}'."' name' OtherSettings.sSpreadDirB + Path.GetFileName (name))' "Info"' IniSettings.sVerbosePower); " is 153.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We failed to copy file '{0}' to '{1}' because: {2}"' file_paths [iteration]' OtherSettings.sSpreadDirB + Path.GetFileName (file_paths [iteration])' exc.ToString ())' "Warning"' IniSettings.sVerbosePower); " is 229.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We changed INI location to '{0}'."' OtherSettings.IniLocation)' "Info"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We failed to parse INI file because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 122.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				string[] file_paths = Directory.GetFiles (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' String.Format ("{0}*.{1}"' IniSettings.sLogfilePrefix' OtherSettings.DummyLogExt)' SearchOption.TopDirectoryOnly); " is 208.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "					Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 149.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower); " is 123.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We changed CMD location to '{0}'."' OtherSettings.CmdLocation)' "Info"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "					Logging (String.Format ("We think '{0}' directory exists already."' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower); " is 128.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We failed to create '{0}' directory because: {1}"' IniSettings.sSpreadDir' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 154.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We changed INI location to '{0}'."' OtherSettings.IniLocation)' "Info"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We changed CMD location to '{0}'."' OtherSettings.CmdLocation)' "Info"' IniSettings.sVerbosePower); " is 124.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower); " is 127.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower); " is 127.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower); " is 127.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower); " is 127.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower); " is 127.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("We failed to copy file '{0}' to '{1}' because: {2}"' file_oldpaths [iteration]' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 183.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "		Logging (String.Format ("We failed to create new WebClient instance because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 137.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("  We didn't recall previous command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 130.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower); " is 123.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower); " is 123.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "				Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 122.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 122.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower); " is 120.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 146.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00")); " is 173.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "						Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower); " is 136.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower); " is 120.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 146.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00")); " is 173.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower); " is 120.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 146.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00")); " is 173.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower); " is 120.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "							Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 146.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The length of the statement  "								Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00")); " is 173.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The length of the statement  "	if (!IniContents.Sections.ContainsSection (@"General") || !IniContents [@"General"].ContainsKey (PublicMethods.GetVariableName (new { " is 133.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The length of the statement  "		regValue = Convert.ToString (Registry.CurrentUser.OpenSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run"' false).GetValue (name)); " is 139.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The length of the statement  "			regValue = Convert.ToString (Registry.LocalMachine.OpenSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run"' false).GetValue (name)); " is 140.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The length of the statement  "		Logging (String.Format ("We failed to check autorun regkey because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 128.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The length of the statement  "			Logging (String.Format ("We failed to change autorun regkey because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 129.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandSync,The length of the statement  "		Logging (String.Format ("We failed to execute command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 123.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandAsync,The length of the statement  "		Logging (String.Format ("We failed to execute command(async) because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower); " is 130.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,initiateLogging,The length of the statement  "		SimpleLog.SetLogFile (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' IniSettings.sLogfilePrefix' null' OtherSettings.DummyLogExt); " is 135.
Long Statement,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,initiateLogging,The length of the statement  "		Logging (String.Format ("We failed to create LOG file because: {0}"' exc.ToString ())' "Warning"' IniSettings.sVerbosePower); " is 125.
Long Statement,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,GetExceptionXElement,The length of the statement  "	xElement.Add (new XAttribute ("Source"' ex.TargetSite == null || ex.TargetSite.DeclaringType == null ? ex.Source : string.Format ("{0}.{1}"' ex.TargetSite.DeclaringType.FullName' ex.TargetSite.Name))); " is 201.
Long Statement,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,GetExceptionXElement,The length of the statement  "	xElement.Add (ex.InnerException == null ? new XElement ("StackTrace"' ex.StackTrace) : GetExceptionXElement (ex.InnerException)); " is 129.
Long Statement,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,Log,The length of the statement  "	return string.IsNullOrEmpty (message) ? null : Log (new XElement ("Message"' message)' severity' useBackgroundTask' framesToSkip); " is 130.
Long Statement,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The length of the statement  "		// be locked by another application. When it didn't work out after ten tries' dequeue the entry anyway' i.e. the entry is lost then.  " is 132.
Long Statement,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntryToFile,The length of the statement  "		return new Exception (string.Format ("Could not write to file '{0}'' because it was blocked by another thread for more than {1} seconds."' FileName' secondsToWaitForFile)); " is 172.
Empty Catch Block,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method has an empty catch block.
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!elevated) {  	// Workaround in case user runs the program w/ admin rights 2+ time  	/*string programfilesDir = String.Format("{0}\\{1}\\{2}\\"'                     PublicMethods.ProgramFilesx86()' Application.CompanyName' Application.ProductName);                 string programfilesExe = String.Format("{0}{1}.exe"' programfilesDir' Application.ProductName);                  if (Directory.Exists(programfilesDir))                 {                     if (File.Exists(programfilesExe))                     {                         Application.State = "idle";                          Logging("RUN WITH ADMINISTRATOR RIGHTS"'                             "Warning"' IniSettings.sVerbosePower);                          //Process.Start(programfilesExe);                         Environment.Exit(0);                     }                 }*/Application.StoragePlace = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData);  }  else {  	// Workaround in case user ran the program w/o admin rights first time  	string appdataDir = String.Format ("{0}\\{1}\\{2}\\"' Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' Application.CompanyName' Application.ProductName);  	if (Directory.Exists (appdataDir)) {  		if (!File.Exists (appdataDir + Application.Flags [2])) {  			string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  			int iteration = 0;  			try {  				foreach (string name in file_paths) {  					if (File.Exists (name)) {  						File.Delete (name);  						Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  						++iteration;  					}  				}  			}  			catch (Exception exc) {  				Application.State = "idle";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			try {  				using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  					reg.DeleteValue (Application.ProductName);  				}  			}  			catch {  			}  			try {  				File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  			}  			catch (Exception exc) {  				Application.State = "idle";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  		}  	}  	Application.StoragePlace = PublicMethods.ProgramFilesx86 ();  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!elevated) {  	// Workaround in case user runs the program w/ admin rights 2+ time  	/*string programfilesDir = String.Format("{0}\\{1}\\{2}\\"'                     PublicMethods.ProgramFilesx86()' Application.CompanyName' Application.ProductName);                 string programfilesExe = String.Format("{0}{1}.exe"' programfilesDir' Application.ProductName);                  if (Directory.Exists(programfilesDir))                 {                     if (File.Exists(programfilesExe))                     {                         Application.State = "idle";                          Logging("RUN WITH ADMINISTRATOR RIGHTS"'                             "Warning"' IniSettings.sVerbosePower);                          //Process.Start(programfilesExe);                         Environment.Exit(0);                     }                 }*/Application.StoragePlace = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData);  }  else {  	// Workaround in case user ran the program w/o admin rights first time  	string appdataDir = String.Format ("{0}\\{1}\\{2}\\"' Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' Application.CompanyName' Application.ProductName);  	if (Directory.Exists (appdataDir)) {  		if (!File.Exists (appdataDir + Application.Flags [2])) {  			string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  			int iteration = 0;  			try {  				foreach (string name in file_paths) {  					if (File.Exists (name)) {  						File.Delete (name);  						Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  						++iteration;  					}  				}  			}  			catch (Exception exc) {  				Application.State = "idle";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			try {  				using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  					reg.DeleteValue (Application.ProductName);  				}  			}  			catch {  			}  			try {  				File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  			}  			catch (Exception exc) {  				Application.State = "idle";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  		}  	}  	Application.StoragePlace = PublicMethods.ProgramFilesx86 ();  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (Directory.Exists (appdataDir)) {  	if (!File.Exists (appdataDir + Application.Flags [2])) {  		string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  		int iteration = 0;  		try {  			foreach (string name in file_paths) {  				if (File.Exists (name)) {  					File.Delete (name);  					Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  					++iteration;  				}  			}  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		try {  			using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  				reg.DeleteValue (Application.ProductName);  			}  		}  		catch {  		}  		try {  			File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (Directory.Exists (appdataDir)) {  	if (!File.Exists (appdataDir + Application.Flags [2])) {  		string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  		int iteration = 0;  		try {  			foreach (string name in file_paths) {  				if (File.Exists (name)) {  					File.Delete (name);  					Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  					++iteration;  				}  			}  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		try {  			using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  				reg.DeleteValue (Application.ProductName);  			}  		}  		catch {  		}  		try {  			File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (appdataDir + Application.Flags [2])) {  	string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  	int iteration = 0;  	try {  		foreach (string name in file_paths) {  			if (File.Exists (name)) {  				File.Delete (name);  				Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  				++iteration;  			}  		}  	}  	catch (Exception exc) {  		Application.State = "idle";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  		Application.State = "running";  	}  	try {  		using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  			reg.DeleteValue (Application.ProductName);  		}  	}  	catch {  	}  	try {  		File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  	}  	catch (Exception exc) {  		Application.State = "idle";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  		Application.State = "running";  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (appdataDir + Application.Flags [2])) {  	string[] file_paths = Directory.GetFiles (appdataDir' "*.*"' SearchOption.TopDirectoryOnly);  	int iteration = 0;  	try {  		foreach (string name in file_paths) {  			if (File.Exists (name)) {  				File.Delete (name);  				Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  				++iteration;  			}  		}  	}  	catch (Exception exc) {  		Application.State = "idle";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Warning"' IniSettings.sVerbosePower);  		Application.State = "running";  	}  	try {  		using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  			reg.DeleteValue (Application.ProductName);  		}  	}  	catch {  	}  	try {  		File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  	}  	catch (Exception exc) {  		Application.State = "idle";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  		Application.State = "running";  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  }  catch (Exception exc) {  	Application.State = "idle";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We can't raise flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  	Application.State = "running";  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: File.WriteAllText (appdataDir + Application.Flags [2]' String.Empty);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (OtherSettings.sSpreadDirB)) {  		Directory.CreateDirectory (OtherSettings.sSpreadDirB);  		Logging (String.Format ("We created directory: {0}"' OtherSettings.sSpreadDirB)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("We think '{0}' directory exists already."' OtherSettings.sSpreadDirB)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to create '{0}' directory because: {1}"' OtherSettings.sSpreadDirB' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (File.Exists (OtherSettings.IniLocation)) {  	try {  		fileIniData = new FileIniDataParser ();  		iniContents = fileIniData.ReadFile (OtherSettings.IniLocation);  		readSettingsData (iniContents);  		Logging ("We parsed INI file."' "Info"' IniSettings.sVerbosePower);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to parse INI file because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	fileIniData = new FileIniDataParser ();  	iniContents = fileIniData.ReadFile (OtherSettings.IniLocation);  	readSettingsData (iniContents);  	Logging ("We parsed INI file."' "Info"' IniSettings.sVerbosePower);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to parse INI file because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (args.Length == 0) {  	initiateLogging ();  	if (fileIniData == null) {  		Logging ("We're leaving due to absence of INI file and passed arguments."' "Info"' IniSettings.sVerbosePower);  		Environment.Exit (0);  	}  	else {  		Logging ("We found no arguments."' "Info"' IniSettings.sVerbosePower);  		fileIniData = null;  	}  }  else {  	readSettingsData (args);  	#region Interpret args before logging started  	if (Convert.ToString (args [0]).ToLower () == "delete-logs") {  		if (Directory.Exists (IniSettings.sSpreadDir + OtherSettings.DummyLogDir)) {  			string[] file_paths = Directory.GetFiles (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' String.Format ("{0}*.{1}"' IniSettings.sLogfilePrefix' OtherSettings.DummyLogExt)' SearchOption.TopDirectoryOnly);  			int iteration = 0;  			try {  				foreach (string name in file_paths) {  					if (File.Exists (name)) {  						File.Delete (name);  						Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  						++iteration;  					}  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  		Environment.Exit (0);  	}  	#endregion  	initiateLogging ();  	#region Interpret args after logging started  	if (Convert.ToString (args [0]).ToLower () == "show-logfile") {  		Logging ("We're opening log file' leaving after that."' "Info"' IniSettings.sVerbosePower);  		SimpleLog.ShowLogFile ();  		Environment.Exit (0);  	}  	else if (Convert.ToString (args [0]).ToLower () == "show-logdir") {  		Logging ("We're opening log directory' leaving after that."' "Info"' IniSettings.sVerbosePower);  		Process.Start (IniSettings.sSpreadDir + OtherSettings.DummyLogDir);  		Environment.Exit (0);  	}  	#endregion  	Logging ("Arguments were passed. Our attempt to write to INI file ..."' "Info"' IniSettings.sVerbosePower);  	try {  		fileIniData = new FileIniDataParser ();  		iniContents = new IniData ();  		writeSettingsData (iniContents);  		fileIniData = null;  		Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (String.Format (" ERR! Reason (pls send to dev): {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (args.Length == 0) {  	initiateLogging ();  	if (fileIniData == null) {  		Logging ("We're leaving due to absence of INI file and passed arguments."' "Info"' IniSettings.sVerbosePower);  		Environment.Exit (0);  	}  	else {  		Logging ("We found no arguments."' "Info"' IniSettings.sVerbosePower);  		fileIniData = null;  	}  }  else {  	readSettingsData (args);  	#region Interpret args before logging started  	if (Convert.ToString (args [0]).ToLower () == "delete-logs") {  		if (Directory.Exists (IniSettings.sSpreadDir + OtherSettings.DummyLogDir)) {  			string[] file_paths = Directory.GetFiles (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' String.Format ("{0}*.{1}"' IniSettings.sLogfilePrefix' OtherSettings.DummyLogExt)' SearchOption.TopDirectoryOnly);  			int iteration = 0;  			try {  				foreach (string name in file_paths) {  					if (File.Exists (name)) {  						File.Delete (name);  						Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  						++iteration;  					}  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  		Environment.Exit (0);  	}  	#endregion  	initiateLogging ();  	#region Interpret args after logging started  	if (Convert.ToString (args [0]).ToLower () == "show-logfile") {  		Logging ("We're opening log file' leaving after that."' "Info"' IniSettings.sVerbosePower);  		SimpleLog.ShowLogFile ();  		Environment.Exit (0);  	}  	else if (Convert.ToString (args [0]).ToLower () == "show-logdir") {  		Logging ("We're opening log directory' leaving after that."' "Info"' IniSettings.sVerbosePower);  		Process.Start (IniSettings.sSpreadDir + OtherSettings.DummyLogDir);  		Environment.Exit (0);  	}  	#endregion  	Logging ("Arguments were passed. Our attempt to write to INI file ..."' "Info"' IniSettings.sVerbosePower);  	try {  		fileIniData = new FileIniDataParser ();  		iniContents = new IniData ();  		writeSettingsData (iniContents);  		fileIniData = null;  		Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (String.Format (" ERR! Reason (pls send to dev): {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (Convert.ToString (args [0]).ToLower () == "delete-logs") {  	if (Directory.Exists (IniSettings.sSpreadDir + OtherSettings.DummyLogDir)) {  		string[] file_paths = Directory.GetFiles (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' String.Format ("{0}*.{1}"' IniSettings.sLogfilePrefix' OtherSettings.DummyLogExt)' SearchOption.TopDirectoryOnly);  		int iteration = 0;  		try {  			foreach (string name in file_paths) {  				if (File.Exists (name)) {  					File.Delete (name);  					Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  					++iteration;  				}  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  	Environment.Exit (0);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (Directory.Exists (IniSettings.sSpreadDir + OtherSettings.DummyLogDir)) {  	string[] file_paths = Directory.GetFiles (IniSettings.sSpreadDir + OtherSettings.DummyLogDir' String.Format ("{0}*.{1}"' IniSettings.sLogfilePrefix' OtherSettings.DummyLogExt)' SearchOption.TopDirectoryOnly);  	int iteration = 0;  	try {  		foreach (string name in file_paths) {  			if (File.Exists (name)) {  				File.Delete (name);  				Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  				++iteration;  			}  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	foreach (string name in file_paths) {  		if (File.Exists (name)) {  			File.Delete (name);  			Logging (String.Format ("We deleted file '{0}'."' name)' "Info"' IniSettings.sVerbosePower);  			++iteration;  		}  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to delete file '{0}' because: {1}"' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	fileIniData = new FileIniDataParser ();  	iniContents = new IniData ();  	writeSettingsData (iniContents);  	fileIniData = null;  	Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (String.Format (" ERR! Reason (pls send to dev): {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (IniSettings.bAutoRun) {  	if ((IniSettings.sSpreadDir != OtherSettings.sSpreadDirB) && IniSettings.sSpreadDir != Application.Directory) {  		try {  			if (!Directory.Exists (IniSettings.sSpreadDir)) {  				Directory.CreateDirectory (IniSettings.sSpreadDir);  				Logging (String.Format ("We created directory: {0}"' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("We think '{0}' directory exists already."' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We failed to create '{0}' directory because: {1}"' IniSettings.sSpreadDir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  	List<string> file_oldpaths = new List<string> ();  	List<string> file_paths = new List<string> ();  	if (IniSettings.sSpreadDir != Application.Directory) {  		file_oldpaths.Add (Application.ExecutablePath);  		file_paths.Add (String.Format ("{0}{1}.exe"' IniSettings.sSpreadDir' Application.ProductName));  		foreach (string name in Application.DllPaths) {  			file_oldpaths.Add (name);  			file_paths.Add (String.Format ("{0}{1}"' IniSettings.sSpreadDir' Path.GetFileName (name)));  		}  		#region Sub-handle autorun  		if (IniSettings.sSpreadDir != OtherSettings.sSpreadDirB) {  			OtherSettings.IniLocation = IniSettings.sSpreadDir + OtherSettings.sIniFile;  			Logging (String.Format ("We changed INI location to '{0}'."' OtherSettings.IniLocation)' "Info"' IniSettings.sVerbosePower);  			OtherSettings.CmdLocation = IniSettings.sSpreadDir + OtherSettings.sCmdFile;  			Logging (String.Format ("We changed CMD location to '{0}'."' OtherSettings.CmdLocation)' "Info"' IniSettings.sVerbosePower);  		}  		#endregion  		if (OtherSettings.IniLocation != OtherSettings.IniLocationB) {  			file_oldpaths.Add (OtherSettings.IniLocation);  			file_paths.Add (String.Format ("{0}{1}"' IniSettings.sSpreadDir' OtherSettings.sIniFile));  		}  	}  	int iteration = 0;  	try {  		if (file_paths.Any ()) {  			foreach (string name in file_paths) {  				if (iteration == 0) {  					if (File.Exists (name)) {  						FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  						if (Application.ProductVersion != info.ProductVersion) {  							File.Copy (file_oldpaths [iteration]' name' true);  							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  						}  					}  					else {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  					switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' name);  				}  				else if (iteration == 1) {  					if (File.Exists (name)) {  						FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  						if (FileVersionInfo.GetVersionInfo (file_oldpaths [iteration]).ProductVersion != info.ProductVersion) {  							File.Copy (file_oldpaths [iteration]' name' true);  							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  						}  					}  					else {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					File.Copy (file_oldpaths [iteration]' name' true);  					Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  				}  				++iteration;  			}  		}  		else {  			switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' Application.ExecutablePath);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to copy file '{0}' to '{1}' because: {2}"' file_oldpaths [iteration]' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  else {  	switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (IniSettings.bAutoRun) {  	if ((IniSettings.sSpreadDir != OtherSettings.sSpreadDirB) && IniSettings.sSpreadDir != Application.Directory) {  		try {  			if (!Directory.Exists (IniSettings.sSpreadDir)) {  				Directory.CreateDirectory (IniSettings.sSpreadDir);  				Logging (String.Format ("We created directory: {0}"' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("We think '{0}' directory exists already."' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We failed to create '{0}' directory because: {1}"' IniSettings.sSpreadDir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  	List<string> file_oldpaths = new List<string> ();  	List<string> file_paths = new List<string> ();  	if (IniSettings.sSpreadDir != Application.Directory) {  		file_oldpaths.Add (Application.ExecutablePath);  		file_paths.Add (String.Format ("{0}{1}.exe"' IniSettings.sSpreadDir' Application.ProductName));  		foreach (string name in Application.DllPaths) {  			file_oldpaths.Add (name);  			file_paths.Add (String.Format ("{0}{1}"' IniSettings.sSpreadDir' Path.GetFileName (name)));  		}  		#region Sub-handle autorun  		if (IniSettings.sSpreadDir != OtherSettings.sSpreadDirB) {  			OtherSettings.IniLocation = IniSettings.sSpreadDir + OtherSettings.sIniFile;  			Logging (String.Format ("We changed INI location to '{0}'."' OtherSettings.IniLocation)' "Info"' IniSettings.sVerbosePower);  			OtherSettings.CmdLocation = IniSettings.sSpreadDir + OtherSettings.sCmdFile;  			Logging (String.Format ("We changed CMD location to '{0}'."' OtherSettings.CmdLocation)' "Info"' IniSettings.sVerbosePower);  		}  		#endregion  		if (OtherSettings.IniLocation != OtherSettings.IniLocationB) {  			file_oldpaths.Add (OtherSettings.IniLocation);  			file_paths.Add (String.Format ("{0}{1}"' IniSettings.sSpreadDir' OtherSettings.sIniFile));  		}  	}  	int iteration = 0;  	try {  		if (file_paths.Any ()) {  			foreach (string name in file_paths) {  				if (iteration == 0) {  					if (File.Exists (name)) {  						FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  						if (Application.ProductVersion != info.ProductVersion) {  							File.Copy (file_oldpaths [iteration]' name' true);  							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  						}  					}  					else {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  					switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' name);  				}  				else if (iteration == 1) {  					if (File.Exists (name)) {  						FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  						if (FileVersionInfo.GetVersionInfo (file_oldpaths [iteration]).ProductVersion != info.ProductVersion) {  							File.Copy (file_oldpaths [iteration]' name' true);  							Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  						}  					}  					else {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					File.Copy (file_oldpaths [iteration]' name' true);  					Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  				}  				++iteration;  			}  		}  		else {  			switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' Application.ExecutablePath);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to copy file '{0}' to '{1}' because: {2}"' file_oldpaths [iteration]' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  else {  	switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((IniSettings.sSpreadDir != OtherSettings.sSpreadDirB) && IniSettings.sSpreadDir != Application.Directory) {  	try {  		if (!Directory.Exists (IniSettings.sSpreadDir)) {  			Directory.CreateDirectory (IniSettings.sSpreadDir);  			Logging (String.Format ("We created directory: {0}"' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("We think '{0}' directory exists already."' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to create '{0}' directory because: {1}"' IniSettings.sSpreadDir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (IniSettings.sSpreadDir)) {  		Directory.CreateDirectory (IniSettings.sSpreadDir);  		Logging (String.Format ("We created directory: {0}"' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("We think '{0}' directory exists already."' IniSettings.sSpreadDir)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to create '{0}' directory because: {1}"' IniSettings.sSpreadDir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (file_paths.Any ()) {  		foreach (string name in file_paths) {  			if (iteration == 0) {  				if (File.Exists (name)) {  					FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  					if (Application.ProductVersion != info.ProductVersion) {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					File.Copy (file_oldpaths [iteration]' name' true);  					Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  				}  				switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' name);  			}  			else if (iteration == 1) {  				if (File.Exists (name)) {  					FileVersionInfo info = FileVersionInfo.GetVersionInfo (name);  					if (FileVersionInfo.GetVersionInfo (file_oldpaths [iteration]).ProductVersion != info.ProductVersion) {  						File.Copy (file_oldpaths [iteration]' name' true);  						Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					File.Copy (file_oldpaths [iteration]' name' true);  					Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				File.Copy (file_oldpaths [iteration]' name' true);  				Logging (String.Format ("We copied file '{0}' to '{1}'."' file_oldpaths [iteration]' name)' "Info"' IniSettings.sVerbosePower);  			}  			++iteration;  		}  	}  	else {  		switchAutorunValue (IniSettings.bAutoRun' Application.ProductName' elevated' Application.ExecutablePath);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to copy file '{0}' to '{1}' because: {2}"' file_oldpaths [iteration]' file_paths [iteration]' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	webClient = new WebClient ();  	Logging ("We created new WebClient instance."' "Info"' IniSettings.sVerbosePower);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to create new WebClient instance because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (File.Exists (OtherSettings.CmdLocation)) {  	try {  		using (StreamReader sr = new StreamReader (OtherSettings.CmdLocation)) {  			sRemoteCommandOld = sr.ReadLine ();  		}  		Logging ("  We recalled previous command."' "Info"' IniSettings.sVerbosePower);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't recall previous command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (StreamReader sr = new StreamReader (OtherSettings.CmdLocation)) {  		sRemoteCommandOld = sr.ReadLine ();  	}  	Logging ("  We recalled previous command."' "Info"' IniSettings.sVerbosePower);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't recall previous command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (; ;) {  	if (Application.State != "running")  		Application.State = "running";  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [1])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [1]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 1)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		else {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = !Application.Hidden;  	}  	if (File.Exists (IniSettings.sSpreadDir + Application.Flags [0])) {  		try {  			File.Delete (IniSettings.sSpreadDir + Application.Flags [0]);  		}  		catch (Exception exc) {  			Application.State = "idle";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("We can't hide flag #{1} because: {0}"' exc.ToString ()' 0)' "Warning"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		Environment.Exit (0);  	}  	#region Actually fetching command  	try {  		using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  			using (var reader = new StreamReader (stream)) {  				sRemoteCommand = reader.ReadLine ();  			}  	}  	catch (WebException exc) {  		++WebErrCount;  		sRemoteCommand = null;  		if (WebErrCount == IniSettings.iWebErrMax) {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  		}  		else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		else {  			int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  			int timeCounterB = timeCounter;  			Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  			System.Timers.Timer aTimer = new System.Timers.Timer ();  			aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  				TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  				if (timeCounter == 1) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					aTimer.Dispose ();  				}  			});  			aTimer.Disposed += (sender' e) =>  {  				Application.State = "running";  			};  			aTimer.Interval = 1000;  			aTimer.Enabled = true;  			Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	#endregion  	#region Parsing command  	if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  	}  	else {  		if (sRemoteCommand != null) {  			WebErrCount = 0;  			sRemoteCommandOld = sRemoteCommand;  			// Refactor the thing so my commands look more presentable  			string[] command_parts = sRemoteCommand.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries);  			// Contains delimiter: if (command_parts[0] != sRemoteCommand)  			if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  				executeCommandAsync (sRemoteCommand);  			}  			else if (command_parts [0] == @"r") {  				if (command_parts.Length >= 2) {  					if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  						executeCommandAsync (command_parts [1]);  					}  					else if (command_parts [1] == @"p") {  						if (command_parts.Length >= 3) {  							OtherSettings.UsePowershell = true;  							// Make separated commands whole  							for (int i = 3; i < command_parts.Length; ++i) {  								command_parts [2] += "; " + command_parts [i];  							}  							command_parts [2] = command_parts [2].Replace (@""""' @"\""");  							executeCommandAsync (command_parts [2]);  						}  						else {  							Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  						}  					}  					else if (command_parts [1] == @"q") {  						try {  							File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  						}  						catch (Exception exc) {  							Application.State = "failure";  							Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  							Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  							Environment.Exit (2);  						}  						Environment.Exit (0);  					}  					else {  						Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"p") {  				if (command_parts.Length >= 2) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 2; i < command_parts.Length; ++i) {  						command_parts [1] += "; " + command_parts [i];  					}  					command_parts [1] = command_parts [1].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [1]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"d") {  				if (command_parts.Length >= 3) {  					string download_dir = Path.GetDirectoryName (command_parts [2]);  					string download_file = Path.GetFileName (command_parts [2]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"l") {  				if (command_parts.Length >= 3) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file' command_parts [2]);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  				else if (command_parts.Length == 2) {  					string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  					string download_file = PublicMethods.UrlToFile (command_parts [1]);  					try {  						if (!Directory.Exists (download_dir)) {  							Directory.CreateDirectory (download_dir);  							Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  						else {  							Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  						}  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					using (WebClient wc = new WebClient ()) {  						wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  						wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  							if (e.Error == null) {  								TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  								Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  								Process.Start (download_dir + download_file);  								Application.State = "running";  							}  							else {  								Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  								try {  									File.Delete (download_dir + download_file);  								}  								catch {  								}  								Application.State = "running";  							}  						});  						wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  							Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  							TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  						});  					}  					Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [0] == @"s") {  				if (Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  				}  				Application.Hidden = false;  			}  			else if (command_parts [0] == @"h") {  				if (!Application.Hidden) {  					NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  				}  				Application.Hidden = true;  			}  			else if (command_parts [0] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  		}  	}  	#endregion  	Thread.Sleep (IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	using (var stream = webClient.OpenRead (IniSettings.sDirectLink))  		using (var reader = new StreamReader (stream)) {  			sRemoteCommand = reader.ReadLine ();  		}  }  catch (WebException exc) {  	++WebErrCount;  	sRemoteCommand = null;  	if (WebErrCount == IniSettings.iWebErrMax) {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  	}  	else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	else {  		int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  		int timeCounterB = timeCounter;  		Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  		System.Timers.Timer aTimer = new System.Timers.Timer ();  		aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  			TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  			if (timeCounter == 1) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				aTimer.Dispose ();  			}  		});  		aTimer.Disposed += (sender' e) =>  {  			Application.State = "running";  		};  		aTimer.Interval = 1000;  		aTimer.Enabled = true;  		Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount == IniSettings.iWebErrMax) {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 3600;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  }  else if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Logging (String.Format ("  We're resting for {0} hours."' timeCounter / 3600)' "Info"' IniSettings.sVerbosePower);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: aTimer.Interval = 1000;  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (IniSettings.iFetchInterval * 3600 - IniSettings.iFetchInterval);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (WebErrCount - 1 == IniSettings.iWebErrMax) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We didn't receive command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  else {  	int timeCounter = IniSettings.iFetchInterval / 1000 * 60 * WebErrCount;  	int timeCounterB = timeCounter;  	Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  	TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  	Console.Title = String.Format ("Remaining: {0} seconds"' timeCounter);  	System.Timers.Timer aTimer = new System.Timers.Timer ();  	aTimer.Elapsed += new System.Timers.ElapsedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Remaining: {0} seconds"' --timeCounter);  		TaskbarProgress.SetValue (handle' timeCounter' timeCounterB);  		if (timeCounter == 1) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			aTimer.Dispose ();  		}  	});  	aTimer.Disposed += (sender' e) =>  {  		Application.State = "running";  	};  	aTimer.Interval = 1000;  	aTimer.Enabled = true;  	Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Logging (String.Format ("  We're relaxing for {0} minutes."' timeCounter / 60)' "Info"' IniSettings.sVerbosePower);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: aTimer.Interval = 1000;  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (IniSettings.iFetchInterval * 60 * WebErrCount - IniSettings.iFetchInterval);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if ((sRemoteCommand == String.Empty || sRemoteCommand == sRemoteCommandOld) && !sRemoteCommand.StartsWith (@"r;")) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  }  else {  	if (sRemoteCommand != null) {  		WebErrCount = 0;  		sRemoteCommandOld = sRemoteCommand;  		// Refactor the thing so my commands look more presentable  		string[] command_parts = sRemoteCommand.Split (new char[] {  			';'  		}' StringSplitOptions.RemoveEmptyEntries);  		// Contains delimiter: if (command_parts[0] != sRemoteCommand)  		if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  			executeCommandAsync (sRemoteCommand);  		}  		else if (command_parts [0] == @"r") {  			if (command_parts.Length >= 2) {  				if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  					executeCommandAsync (command_parts [1]);  				}  				else if (command_parts [1] == @"p") {  					if (command_parts.Length >= 3) {  						OtherSettings.UsePowershell = true;  						// Make separated commands whole  						for (int i = 3; i < command_parts.Length; ++i) {  							command_parts [2] += "; " + command_parts [i];  						}  						command_parts [2] = command_parts [2].Replace (@""""' @"\""");  						executeCommandAsync (command_parts [2]);  					}  					else {  						Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  					}  				}  				else if (command_parts [1] == @"q") {  					try {  						File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  					}  					catch (Exception exc) {  						Application.State = "failure";  						Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  						Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  						Environment.Exit (2);  					}  					Environment.Exit (0);  				}  				else {  					Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"p") {  			if (command_parts.Length >= 2) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 2; i < command_parts.Length; ++i) {  					command_parts [1] += "; " + command_parts [i];  				}  				command_parts [1] = command_parts [1].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [1]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"d") {  			if (command_parts.Length >= 3) {  				string download_dir = Path.GetDirectoryName (command_parts [2]);  				string download_file = Path.GetFileName (command_parts [2]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"l") {  			if (command_parts.Length >= 3) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file' command_parts [2]);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  			else if (command_parts.Length == 2) {  				string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  				string download_file = PublicMethods.UrlToFile (command_parts [1]);  				try {  					if (!Directory.Exists (download_dir)) {  						Directory.CreateDirectory (download_dir);  						Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  					else {  						Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  					}  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				using (WebClient wc = new WebClient ()) {  					wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  					wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  						if (e.Error == null) {  							TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  							Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  							Process.Start (download_dir + download_file);  							Application.State = "running";  						}  						else {  							Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  							try {  								File.Delete (download_dir + download_file);  							}  							catch {  							}  							Application.State = "running";  						}  					});  					wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  						Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  						TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  					});  				}  				Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [0] == @"s") {  			if (Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  			}  			Application.Hidden = false;  		}  		else if (command_parts [0] == @"h") {  			if (!Application.Hidden) {  				NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  			}  			Application.Hidden = true;  		}  		else if (command_parts [0] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (sRemoteCommand != null) {  	WebErrCount = 0;  	sRemoteCommandOld = sRemoteCommand;  	// Refactor the thing so my commands look more presentable  	string[] command_parts = sRemoteCommand.Split (new char[] {  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	// Contains delimiter: if (command_parts[0] != sRemoteCommand)  	if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  		executeCommandAsync (sRemoteCommand);  	}  	else if (command_parts [0] == @"r") {  		if (command_parts.Length >= 2) {  			if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  				executeCommandAsync (command_parts [1]);  			}  			else if (command_parts [1] == @"p") {  				if (command_parts.Length >= 3) {  					OtherSettings.UsePowershell = true;  					// Make separated commands whole  					for (int i = 3; i < command_parts.Length; ++i) {  						command_parts [2] += "; " + command_parts [i];  					}  					command_parts [2] = command_parts [2].Replace (@""""' @"\""");  					executeCommandAsync (command_parts [2]);  				}  				else {  					Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  				}  			}  			else if (command_parts [1] == @"q") {  				try {  					File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  				}  				catch (Exception exc) {  					Application.State = "failure";  					Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  					Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  					Environment.Exit (2);  				}  				Environment.Exit (0);  			}  			else {  				Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"p") {  		if (command_parts.Length >= 2) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 2; i < command_parts.Length; ++i) {  				command_parts [1] += "; " + command_parts [i];  			}  			command_parts [1] = command_parts [1].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [1]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"d") {  		if (command_parts.Length >= 3) {  			string download_dir = Path.GetDirectoryName (command_parts [2]);  			string download_file = Path.GetFileName (command_parts [2]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"l") {  		if (command_parts.Length >= 3) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file' command_parts [2]);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  		else if (command_parts.Length == 2) {  			string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  			string download_file = PublicMethods.UrlToFile (command_parts [1]);  			try {  				if (!Directory.Exists (download_dir)) {  					Directory.CreateDirectory (download_dir);  					Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  				else {  					Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  				}  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			using (WebClient wc = new WebClient ()) {  				wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  				wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  					if (e.Error == null) {  						TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  						Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  						Process.Start (download_dir + download_file);  						Application.State = "running";  					}  					else {  						Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  						try {  							File.Delete (download_dir + download_file);  						}  						catch {  						}  						Application.State = "running";  					}  				});  				wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  					Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  					TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  				});  			}  			Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [0] == @"s") {  		if (Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  		}  		Application.Hidden = false;  	}  	else if (command_parts [0] == @"h") {  		if (!Application.Hidden) {  			NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  		}  		Application.Hidden = true;  	}  	else if (command_parts [0] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.*")) {  	executeCommandAsync (sRemoteCommand);  }  else if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"r") {  	if (command_parts.Length >= 2) {  		if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  			executeCommandAsync (command_parts [1]);  		}  		else if (command_parts [1] == @"p") {  			if (command_parts.Length >= 3) {  				OtherSettings.UsePowershell = true;  				// Make separated commands whole  				for (int i = 3; i < command_parts.Length; ++i) {  					command_parts [2] += "; " + command_parts [i];  				}  				command_parts [2] = command_parts [2].Replace (@""""' @"\""");  				executeCommandAsync (command_parts [2]);  			}  			else {  				Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  			}  		}  		else if (command_parts [1] == @"q") {  			try {  				File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  			}  			catch (Exception exc) {  				Application.State = "failure";  				Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  				Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  				Environment.Exit (2);  			}  			Environment.Exit (0);  		}  		else {  			Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  		executeCommandAsync (command_parts [1]);  	}  	else if (command_parts [1] == @"p") {  		if (command_parts.Length >= 3) {  			OtherSettings.UsePowershell = true;  			// Make separated commands whole  			for (int i = 3; i < command_parts.Length; ++i) {  				command_parts [2] += "; " + command_parts [i];  			}  			command_parts [2] = command_parts [2].Replace (@""""' @"\""");  			executeCommandAsync (command_parts [2]);  		}  		else {  			Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  		}  	}  	else if (command_parts [1] == @"q") {  		try {  			File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		Environment.Exit (0);  	}  	else {  		Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  	}  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (!Regex.IsMatch (sRemoteCommand' "^.;.;.*")) {  	executeCommandAsync (command_parts [1]);  }  else if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"p") {  	if (command_parts.Length >= 3) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 3; i < command_parts.Length; ++i) {  			command_parts [2] += "; " + command_parts [i];  		}  		command_parts [2] = command_parts [2].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [2]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 3; i < command_parts.Length; ++i) {  		command_parts [2] += "; " + command_parts [i];  	}  	command_parts [2] = command_parts [2].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [2]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (int i = 3; i < command_parts.Length; ++i) {  	command_parts [2] += "; " + command_parts [i];  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (int i = 3; i < command_parts.Length; ++i) {  	command_parts [2] += "; " + command_parts [i];  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: command_parts [2] += "; " + command_parts [i];  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: command_parts [2] = command_parts [2].Replace (@""""' @"\""");  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: command_parts [2] = command_parts [2].Replace (@""""' @"\""");  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: executeCommandAsync (command_parts [2]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [1] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"p") {  	if (command_parts.Length >= 2) {  		OtherSettings.UsePowershell = true;  		// Make separated commands whole  		for (int i = 2; i < command_parts.Length; ++i) {  			command_parts [1] += "; " + command_parts [i];  		}  		command_parts [1] = command_parts [1].Replace (@""""' @"\""");  		executeCommandAsync (command_parts [1]);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 2; i < command_parts.Length; ++i) {  		command_parts [1] += "; " + command_parts [i];  	}  	command_parts [1] = command_parts [1].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [1]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 2) {  	OtherSettings.UsePowershell = true;  	// Make separated commands whole  	for (int i = 2; i < command_parts.Length; ++i) {  		command_parts [1] += "; " + command_parts [i];  	}  	command_parts [1] = command_parts [1].Replace (@""""' @"\""");  	executeCommandAsync (command_parts [1]);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: for (int i = 2; i < command_parts.Length; ++i) {  	command_parts [1] += "; " + command_parts [i];  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"d") {  	if (command_parts.Length >= 3) {  		string download_dir = Path.GetDirectoryName (command_parts [2]);  		string download_file = Path.GetFileName (command_parts [2]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = Path.GetDirectoryName (command_parts [2]);  	string download_file = Path.GetFileName (command_parts [2]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' to '{1}' ..."' download_file' download_dir)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (download_dir)) {  		Directory.CreateDirectory (download_dir);  		Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  	wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  		if (e.Error == null) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  			Application.State = "running";  		}  		else {  			Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  			try {  				File.Delete (download_dir + download_file);  			}  			catch {  			}  			Application.State = "running";  		}  	});  	wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  		TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  	});  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  	Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  	TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  });  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else {  	Logging ("  Someone gave us incomplete order."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (download_dir)) {  		Directory.CreateDirectory (download_dir);  		Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  	wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  		if (e.Error == null) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  			Process.Start (download_dir);  			Application.State = "running";  		}  		else {  			Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  			try {  				File.Delete (download_dir + download_file);  			}  			catch {  			}  			Application.State = "running";  		}  	});  	wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  		TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  	});  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  	Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  	TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  });  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"l") {  	if (command_parts.Length >= 3) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file' command_parts [2]);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  	else if (command_parts.Length == 2) {  		string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  		string download_file = PublicMethods.UrlToFile (command_parts [1]);  		try {  			if (!Directory.Exists (download_dir)) {  				Directory.CreateDirectory (download_dir);  				Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  			else {  				Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  			}  		}  		catch (Exception exc) {  			Application.State = "failure";  			Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  			Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  			Environment.Exit (2);  		}  		using (WebClient wc = new WebClient ()) {  			wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  			wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  				if (e.Error == null) {  					TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  					Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  					Process.Start (download_dir + download_file);  					Application.State = "running";  				}  				else {  					Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  					try {  						File.Delete (download_dir + download_file);  					}  					catch {  					}  					Application.State = "running";  				}  			});  			wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  				Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  				TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  			});  		}  		Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  	}  }  else if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length >= 3) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file' command_parts [2]);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  else if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (download_dir)) {  		Directory.CreateDirectory (download_dir);  		Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  	wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  		if (e.Error == null) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  			Process.Start (download_dir + download_file' command_parts [2]);  			Application.State = "running";  		}  		else {  			Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  			try {  				File.Delete (download_dir + download_file);  			}  			catch {  			}  			Application.State = "running";  		}  	});  	wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  		TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  	});  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  	wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  		if (e.Error == null) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  			Process.Start (download_dir + download_file' command_parts [2]);  			Application.State = "running";  		}  		else {  			Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  			try {  				File.Delete (download_dir + download_file);  			}  			catch {  			}  			Application.State = "running";  		}  	});  	wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  		TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  	});  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  	if (e.Error == null) {  		TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  		Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  		Process.Start (download_dir + download_file' command_parts [2]);  		Application.State = "running";  	}  	else {  		Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  		try {  			File.Delete (download_dir + download_file);  		}  		catch {  		}  		Application.State = "running";  	}  });  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (e.Error == null) {  	TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  	Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  	Process.Start (download_dir + download_file' command_parts [2]);  	Application.State = "running";  }  else {  	Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  	try {  		File.Delete (download_dir + download_file);  	}  	catch {  	}  	Application.State = "running";  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Process.Start (download_dir + download_file' command_parts [2]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  	Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  	TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  });  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts.Length == 2) {  	string download_dir = String.Format ("{0}{1}\\"' Path.GetTempPath ()' Application.Guid.ToUpper ());  	string download_file = PublicMethods.UrlToFile (command_parts [1]);  	try {  		if (!Directory.Exists (download_dir)) {  			Directory.CreateDirectory (download_dir);  			Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  		else {  			Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	using (WebClient wc = new WebClient ()) {  		wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  		wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  			if (e.Error == null) {  				TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  				Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  				Process.Start (download_dir + download_file);  				Application.State = "running";  			}  			else {  				Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  				try {  					File.Delete (download_dir + download_file);  				}  				catch {  				}  				Application.State = "running";  			}  		});  		wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  			Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  			TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  		});  	}  	Logging (String.Format ("  We're downloading file '{0}' ..."' download_file)' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	if (!Directory.Exists (download_dir)) {  		Directory.CreateDirectory (download_dir);  		Logging (String.Format ("  We created directory: {0}"' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  	else {  		Logging (String.Format ("  We think '{0}' directory exists already."' download_dir)' "Info"' IniSettings.sVerbosePower);  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  We failed to create '{0}' directory because: {1}"' download_dir' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.DownloadFileAsync (new Uri (command_parts [1])' download_dir + download_file);  	wc.DownloadFileCompleted += new AsyncCompletedEventHandler ((sender' e) =>  {  		if (e.Error == null) {  			TaskbarProgress.SetState (handle' TaskbarProgress.TaskbarStates.NoProgress);  			Logging (" OK!"' "Info"' IniSettings.sVerbosePower);  			Process.Start (download_dir + download_file);  			Application.State = "running";  		}  		else {  			Logging (" ERR!"' "Info"' IniSettings.sVerbosePower);  			try {  				File.Delete (download_dir + download_file);  			}  			catch {  			}  			Application.State = "running";  		}  	});  	wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  		Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  		TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  	});  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler ((sender' e) =>  {  	Console.Title = String.Format ("Downloading: {0} of {1} MB"' (e.BytesReceived / 1024d / 1024d).ToString ("0.00")' (e.TotalBytesToReceive / 1024d / 1024d).ToString ("0.00"));  	TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  });  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: TaskbarProgress.SetValue (handle' e.ProgressPercentage' 100);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"s") {  	if (Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_SHOW);  	}  	Application.Hidden = false;  }  else if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"h") {  	if (!Application.Hidden) {  		NativeMethods.ShowWindow (handle' NativeMethods.SW_HIDE);  	}  	Application.Hidden = true;  }  else if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: if (command_parts [0] == @"q") {  	try {  		File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  	Environment.Exit (0);  }  else {  	Logging ("  Someone gave us order we don't know."' "Info"' IniSettings.sVerbosePower);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: try {  	File.WriteAllText (OtherSettings.CmdLocation' sRemoteCommandOld);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("  TOTAL RECALL because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 2)  	IniSettings.iFetchInterval = Convert.ToInt32 (args [1]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 3)  	IniSettings.bAutoRun = Convert.ToBoolean (args [2]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 3)  	IniSettings.bAutoRun = Convert.ToBoolean (args [2]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: IniSettings.bAutoRun = Convert.ToBoolean (args [2]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 4)  	IniSettings.sSpreadDir = Convert.ToString (args [3]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 4)  	IniSettings.sSpreadDir = Convert.ToString (args [3]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: IniSettings.sSpreadDir = Convert.ToString (args [3]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 5)  	IniSettings.sLogfilePrefix = Convert.ToString (args [4]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 5)  	IniSettings.sLogfilePrefix = Convert.ToString (args [4]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: IniSettings.sLogfilePrefix = Convert.ToString (args [4]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 6)  	IniSettings.sVerbosePower = Convert.ToString (args [5]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 6)  	IniSettings.sVerbosePower = Convert.ToString (args [5]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: IniSettings.sVerbosePower = Convert.ToString (args [5]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 7)  	IniSettings.iWebErrMax = Convert.ToInt32 (args [6]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 7)  	IniSettings.iWebErrMax = Convert.ToInt32 (args [6]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: IniSettings.iWebErrMax = Convert.ToInt32 (args [6]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 8)  	OtherSettings.bLaunchApp = Convert.ToBoolean (args [7]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: if (args.Length >= 8)  	OtherSettings.bLaunchApp = Convert.ToBoolean (args [7]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,readSettingsData,The following statement contains a magic number: OtherSettings.bLaunchApp = Convert.ToBoolean (args [7]);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The following statement contains a magic number: try {  	regValue = Convert.ToString (Registry.CurrentUser.OpenSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run"' false).GetValue (name));  	if (regValue == String.Empty) {  		regValue = Convert.ToString (Registry.LocalMachine.OpenSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run"' false).GetValue (name));  	}  	Logging ("We checked autorun regkey."' "Info"' IniSettings.sVerbosePower);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to check autorun regkey because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The following statement contains a magic number: if (regValue != path) {  	try {  		if (!elevated) {  			using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  				if (switcher) {  					reg.SetValue (name' path);  					Logging ("We wrote autorun regkey."' "Info"' IniSettings.sVerbosePower);  				}  				else {  					reg.DeleteValue (name);  					Logging ("We erased autorun regkey."' "Info"' IniSettings.sVerbosePower);  				}  			}  		}  		else {  			using (RegistryKey reg = Registry.LocalMachine.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  				if (switcher) {  					reg.SetValue (name' path);  					Logging ("We wrote autorun regkey."' "Info"' IniSettings.sVerbosePower);  				}  				else {  					reg.DeleteValue (name);  					Logging ("We erased autorun regkey."' "Info"' IniSettings.sVerbosePower);  				}  			}  		}  	}  	catch (Exception exc) {  		Application.State = "failure";  		Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  		Logging (String.Format ("We failed to change autorun regkey because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  		Environment.Exit (2);  	}  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The following statement contains a magic number: try {  	if (!elevated) {  		using (RegistryKey reg = Registry.CurrentUser.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  			if (switcher) {  				reg.SetValue (name' path);  				Logging ("We wrote autorun regkey."' "Info"' IniSettings.sVerbosePower);  			}  			else {  				reg.DeleteValue (name);  				Logging ("We erased autorun regkey."' "Info"' IniSettings.sVerbosePower);  			}  		}  	}  	else {  		using (RegistryKey reg = Registry.LocalMachine.CreateSubKey ("Software\\Microsoft\\Windows\\CurrentVersion\\Run")) {  			if (switcher) {  				reg.SetValue (name' path);  				Logging ("We wrote autorun regkey."' "Info"' IniSettings.sVerbosePower);  			}  			else {  				reg.DeleteValue (name);  				Logging ("We erased autorun regkey."' "Info"' IniSettings.sVerbosePower);  			}  		}  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to change autorun regkey because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,switchAutorunValue,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandSync,The following statement contains a magic number: try {  	ProcessStartInfo procStartInfo;  	if (!OtherSettings.UsePowershell) {  		procStartInfo = new ProcessStartInfo ("cmd"' "/c " + command);  	}  	else {  		procStartInfo = new ProcessStartInfo ("powershell"' "-command " + command);  		OtherSettings.UsePowershell = false;  	}  	procStartInfo.RedirectStandardOutput = true;  	procStartInfo.UseShellExecute = false;  	procStartInfo.CreateNoWindow = true;  	Process proc = new Process ();  	proc.StartInfo = procStartInfo;  	proc.Start ();  	string result = "  " + proc.StandardOutput.ReadToEnd ();  	if (result == "  ")  		result = String.Empty;  	if (IniSettings.sVerbosePower != "nothing") {  		Console.Write (PublicMethods.GetFilledLine ('x'));  		Console.ForegroundColor = ConsoleColor.Magenta;  		Console.Write (result);  		Console.ResetColor ();  		Console.WriteLine (PublicMethods.GetFilledLine ('x'));  	}  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to execute command because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandSync,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandAsync,The following statement contains a magic number: try {  	Thread objThread = new Thread (new ParameterizedThreadStart (executeCommandSync));  	objThread.IsBackground = true;  	objThread.Priority = ThreadPriority.AboveNormal;  	objThread.Start (command);  }  catch (Exception exc) {  	Application.State = "failure";  	Logging (OtherSettings.GeneralDevMsg' "Info"' IniSettings.sVerbosePower);  	Logging (String.Format ("We failed to execute command(async) because: {0}"' exc.ToString ())' "Error"' IniSettings.sVerbosePower);  	Environment.Exit (2);  }  
Magic Number,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,executeCommandAsync,The following statement contains a magic number: Environment.Exit (2);  
Magic Number,RemoteCMD_Server,PublicMethods,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,ProgramFilesx86,The following statement contains a magic number: if (8 == IntPtr.Size || (!String.IsNullOrEmpty (Environment.GetEnvironmentVariable ("PROCESSOR_ARCHITEW6432")))) {  	return Environment.GetEnvironmentVariable ("ProgramFiles(x86)");  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,ShowLogFile,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,StopLogging,The following statement contains a magic number: lock (_backgroundTaskSyncRoot) {  	if (_backgroundTask == null)  		return;  	// Wait for task to finish and set null then  	_backgroundTask.Wait (1000);  	_backgroundTask = null;  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,StopLogging,The following statement contains a magic number: _backgroundTask.Wait (1000);  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,Flush,The following statement contains a magic number: while (NumberOfLogEntriesWaitingToBeWrittenToFile > 0) {  	// Remember current number  	int lastNumber = NumberOfLogEntriesWaitingToBeWrittenToFile;  	// Wait some time to let background task do its work  	Thread.Sleep (222);  	// Didn't help? No log entries have been processed? We probably hang.   	// Let it be to avoid waiting eternally.  	if (lastNumber == NumberOfLogEntriesWaitingToBeWrittenToFile)  		break;  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,Flush,The following statement contains a magic number: Thread.Sleep (222);  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,Enqueue,The following statement contains a magic number: lock (_logEntryQueue) {  	// Stop enqueueing when stop request was set or when the queue gets too full.  	if (!StopLoggingRequested && _logEntryQueue.Count < 10000)  		_logEntryQueue.Enqueue (logEntry);  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,Enqueue,The following statement contains a magic number: if (!StopLoggingRequested && _logEntryQueue.Count < 10000)  	_logEntryQueue.Enqueue (logEntry);  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: while (!StopLoggingRequested) {  	// Get next log entry from queue  	XElement xmlEntry = Peek ();  	if (xmlEntry == null) {  		// If queue is empty' sleep for a while and look again later.  		Thread.Sleep (100);  		continue;  	}  	// Try ten times to write the entry to the log file. Wait between tries' because the file could (hopefully) temporarily   	// be locked by another application. When it didn't work out after ten tries' dequeue the entry anyway' i.e. the entry is lost then.   	// This is necessary to ensure that the queue does not get too full and we run out of memory.  	for (int i = 0; i < 10; i++) {  		// Actually write entry to log file.  		LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  		// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  		if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  			break;  		// Only wait when queue is not already getting full.  		Thread.Sleep (100);  	}  	// Dequeue entry from the queue  	Dequeue ();  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: while (!StopLoggingRequested) {  	// Get next log entry from queue  	XElement xmlEntry = Peek ();  	if (xmlEntry == null) {  		// If queue is empty' sleep for a while and look again later.  		Thread.Sleep (100);  		continue;  	}  	// Try ten times to write the entry to the log file. Wait between tries' because the file could (hopefully) temporarily   	// be locked by another application. When it didn't work out after ten tries' dequeue the entry anyway' i.e. the entry is lost then.   	// This is necessary to ensure that the queue does not get too full and we run out of memory.  	for (int i = 0; i < 10; i++) {  		// Actually write entry to log file.  		LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  		// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  		if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  			break;  		// Only wait when queue is not already getting full.  		Thread.Sleep (100);  	}  	// Dequeue entry from the queue  	Dequeue ();  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: while (!StopLoggingRequested) {  	// Get next log entry from queue  	XElement xmlEntry = Peek ();  	if (xmlEntry == null) {  		// If queue is empty' sleep for a while and look again later.  		Thread.Sleep (100);  		continue;  	}  	// Try ten times to write the entry to the log file. Wait between tries' because the file could (hopefully) temporarily   	// be locked by another application. When it didn't work out after ten tries' dequeue the entry anyway' i.e. the entry is lost then.   	// This is necessary to ensure that the queue does not get too full and we run out of memory.  	for (int i = 0; i < 10; i++) {  		// Actually write entry to log file.  		LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  		// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  		if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  			break;  		// Only wait when queue is not already getting full.  		Thread.Sleep (100);  	}  	// Dequeue entry from the queue  	Dequeue ();  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: while (!StopLoggingRequested) {  	// Get next log entry from queue  	XElement xmlEntry = Peek ();  	if (xmlEntry == null) {  		// If queue is empty' sleep for a while and look again later.  		Thread.Sleep (100);  		continue;  	}  	// Try ten times to write the entry to the log file. Wait between tries' because the file could (hopefully) temporarily   	// be locked by another application. When it didn't work out after ten tries' dequeue the entry anyway' i.e. the entry is lost then.   	// This is necessary to ensure that the queue does not get too full and we run out of memory.  	for (int i = 0; i < 10; i++) {  		// Actually write entry to log file.  		LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  		// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  		if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  			break;  		// Only wait when queue is not already getting full.  		Thread.Sleep (100);  	}  	// Dequeue entry from the queue  	Dequeue ();  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: if (xmlEntry == null) {  	// If queue is empty' sleep for a while and look again later.  	Thread.Sleep (100);  	continue;  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	// Actually write entry to log file.  	LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  	// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  	if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  		break;  	// Only wait when queue is not already getting full.  	Thread.Sleep (100);  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	// Actually write entry to log file.  	LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  	// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  	if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  		break;  	// Only wait when queue is not already getting full.  	Thread.Sleep (100);  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	// Actually write entry to log file.  	LastExceptionInBackgroundTask = WriteLogEntryToFile (xmlEntry);  	// When all is fine' we're done. Otherwise do not retry when queue is already getting full.  	if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  		break;  	// Only wait when queue is not already getting full.  	Thread.Sleep (100);  }  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: if (LastExceptionInBackgroundTask == null || NumberOfLogEntriesWaitingToBeWrittenToFile > 1000)  	break;  
Magic Number,RemoteCMD_Server,SimpleLog,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\SimpleLog.cs,WriteLogEntriesToFile,The following statement contains a magic number: Thread.Sleep (100);  
Duplicate Code,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method contains a code clone-set at the following line numbers (starting from the method definition): ((558' 578)' (601' 621)' (650' 670)' (694' 714))
Duplicate Code,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method contains a code clone-set at the following line numbers (starting from the method definition): ((597' 619)' (690' 712))
Duplicate Code,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Main,The method contains a code clone-set at the following line numbers (starting from the method definition): ((599' 619)' (648' 668)' (692' 712))
Duplicate Code,RemoteCMD_Server,Program,C:\repos\Svetomech_RemoteCMD-Server\RemoteCMD Server\Program.cs,Logging,The method contains a code clone-set at the following line numbers (starting from the method definition): ((48' 97)' (103' 152))
