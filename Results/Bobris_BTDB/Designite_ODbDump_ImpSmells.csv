Implementation smell,Namespace,Class,File,Method,Description
Long Method,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The method has 141 lines of code.
Long Statement,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The length of the statement  "                                    details = string.Format("KVCount:{0} CommitUlong:{1} TrLogFileId:{2} TrLogOffset:{3}"' keyindex.KeyValueCount' keyindex.CommitUlong' keyindex.TrLogFileId' keyindex.TrLogOffset);" is 177.
Long Statement,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The length of the statement  "                                Console.WriteLine("File {0} Guid:{3} Gen:{2} Type:{1} {4}"' fi.Key' fi.Value.FileType.ToString()' fi.Value.Generation' fi.Value.Guid' details);" is 143.
Magic Number,ODbDump,ToConsoleFastVisitor,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Print,The following statement contains a magic number: Console.WriteLine(new String(' '' _indent * 2) + s);
Magic Number,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The following statement contains a magic number: switch (action)             {                 case "nicedump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitorNice();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dumpnull":                 case "null":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var tr = odb.StartTransaction())                             {                                 var visitor = new ToNullVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "stat":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         {                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "fileheaders":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         {                             var fcfi = new FileCollectionWithFileInfos(dfc);                             foreach (var fi in fcfi.FileInfos)                             {                                 var details = "";                                 var keyindex = fi.Value as IKeyIndex;                                 if (keyindex != null)                                 {                                     details = string.Format("KVCount:{0} CommitUlong:{1} TrLogFileId:{2} TrLogOffset:{3}"' keyindex.KeyValueCount' keyindex.CommitUlong' keyindex.TrLogFileId' keyindex.TrLogOffset);                                     var usedFiles = keyindex.UsedFilesInOlderGenerations;                                     if (usedFiles != null)                                     {                                         details += " UsedFiles:" + string.Join("'"' usedFiles);                                     }                                 }                                 var trlog = fi.Value as IFileTransactionLog;                                 if (trlog != null)                                 {                                     details = string.Format("Previous File Id: {0}"' trlog.PreviousFileId);                                 }                                 Console.WriteLine("File {0} Guid:{3} Gen:{2} Type:{1} {4}"' fi.Key' fi.Value.FileType.ToString()' fi.Value.Generation' fi.Value.Guid' details);                             }                         }                         break;                     }                 case "compact":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc' new SnappyCompressionStrategy()' 100 * 1024 * 1024' null))                         {                             Console.WriteLine("Starting first compaction");                             while (kdb.Compact(new CancellationToken()))                             {                                 Console.WriteLine(kdb.CalcStats());                                 Console.WriteLine("Another compaction needed");                             }                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "export":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var tr = kdb.StartReadOnlyTransaction())                         using (var st = File.Create(Path.Combine(args[0]' "export.dat")))                         {                             KeyValueDBExportImporter.Export(tr' st);                         }                         break;                     }                 default:                     {                         Console.WriteLine($"Unknown action: {action}");                         break;                     }             }
Magic Number,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The following statement contains a magic number: switch (action)             {                 case "nicedump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitorNice();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dumpnull":                 case "null":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var tr = odb.StartTransaction())                             {                                 var visitor = new ToNullVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "stat":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         {                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "fileheaders":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         {                             var fcfi = new FileCollectionWithFileInfos(dfc);                             foreach (var fi in fcfi.FileInfos)                             {                                 var details = "";                                 var keyindex = fi.Value as IKeyIndex;                                 if (keyindex != null)                                 {                                     details = string.Format("KVCount:{0} CommitUlong:{1} TrLogFileId:{2} TrLogOffset:{3}"' keyindex.KeyValueCount' keyindex.CommitUlong' keyindex.TrLogFileId' keyindex.TrLogOffset);                                     var usedFiles = keyindex.UsedFilesInOlderGenerations;                                     if (usedFiles != null)                                     {                                         details += " UsedFiles:" + string.Join("'"' usedFiles);                                     }                                 }                                 var trlog = fi.Value as IFileTransactionLog;                                 if (trlog != null)                                 {                                     details = string.Format("Previous File Id: {0}"' trlog.PreviousFileId);                                 }                                 Console.WriteLine("File {0} Guid:{3} Gen:{2} Type:{1} {4}"' fi.Key' fi.Value.FileType.ToString()' fi.Value.Generation' fi.Value.Guid' details);                             }                         }                         break;                     }                 case "compact":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc' new SnappyCompressionStrategy()' 100 * 1024 * 1024' null))                         {                             Console.WriteLine("Starting first compaction");                             while (kdb.Compact(new CancellationToken()))                             {                                 Console.WriteLine(kdb.CalcStats());                                 Console.WriteLine("Another compaction needed");                             }                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "export":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var tr = kdb.StartReadOnlyTransaction())                         using (var st = File.Create(Path.Combine(args[0]' "export.dat")))                         {                             KeyValueDBExportImporter.Export(tr' st);                         }                         break;                     }                 default:                     {                         Console.WriteLine($"Unknown action: {action}");                         break;                     }             }
Magic Number,ODbDump,Program,C:\repos\Bobris_BTDB\ODbDump\Program.cs,Main,The following statement contains a magic number: switch (action)             {                 case "nicedump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitorNice();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dump":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var trkv = kdb.StartReadOnlyTransaction())                             using (var tr = odb.StartTransaction())                             {                                 Console.WriteLine("CommitUlong: " + tr.GetCommitUlong());                                 Console.WriteLine("Ulong[0] oid: " + trkv.GetUlong(0));                                 Console.WriteLine("Ulong[1] dictid: " + trkv.GetUlong(1));                                 var visitor = new ToConsoleVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "dumpnull":                 case "null":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var odb = new ObjectDB())                         {                             odb.Open(kdb' false);                             using (var tr = odb.StartTransaction())                             {                                 var visitor = new ToNullVisitor();                                 var iterator = new ODBIterator(tr' visitor);                                 iterator.Iterate();                             }                         }                         break;                     }                 case "stat":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         {                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "fileheaders":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         {                             var fcfi = new FileCollectionWithFileInfos(dfc);                             foreach (var fi in fcfi.FileInfos)                             {                                 var details = "";                                 var keyindex = fi.Value as IKeyIndex;                                 if (keyindex != null)                                 {                                     details = string.Format("KVCount:{0} CommitUlong:{1} TrLogFileId:{2} TrLogOffset:{3}"' keyindex.KeyValueCount' keyindex.CommitUlong' keyindex.TrLogFileId' keyindex.TrLogOffset);                                     var usedFiles = keyindex.UsedFilesInOlderGenerations;                                     if (usedFiles != null)                                     {                                         details += " UsedFiles:" + string.Join("'"' usedFiles);                                     }                                 }                                 var trlog = fi.Value as IFileTransactionLog;                                 if (trlog != null)                                 {                                     details = string.Format("Previous File Id: {0}"' trlog.PreviousFileId);                                 }                                 Console.WriteLine("File {0} Guid:{3} Gen:{2} Type:{1} {4}"' fi.Key' fi.Value.FileType.ToString()' fi.Value.Generation' fi.Value.Guid' details);                             }                         }                         break;                     }                 case "compact":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc' new SnappyCompressionStrategy()' 100 * 1024 * 1024' null))                         {                             Console.WriteLine("Starting first compaction");                             while (kdb.Compact(new CancellationToken()))                             {                                 Console.WriteLine(kdb.CalcStats());                                 Console.WriteLine("Another compaction needed");                             }                             Console.WriteLine(kdb.CalcStats());                         }                         break;                     }                 case "export":                     {                         using (var dfc = new OnDiskFileCollection(args[0]))                         using (var kdb = new KeyValueDB(dfc))                         using (var tr = kdb.StartReadOnlyTransaction())                         using (var st = File.Create(Path.Combine(args[0]' "export.dat")))                         {                             KeyValueDBExportImporter.Export(tr' st);                         }                         break;                     }                 default:                     {                         Console.WriteLine($"Unknown action: {action}");                         break;                     }             }
