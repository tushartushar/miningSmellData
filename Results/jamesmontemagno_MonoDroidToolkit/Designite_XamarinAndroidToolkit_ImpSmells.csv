Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,Cyclomatic complexity of the method is 8
Long Identifier,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,,The length of the parameter INSTANCE_STATE_MARKER_PROGRESS is 30.
Long Identifier,MonoDroidToolkit,SystemUiHider,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\SystemUiHider\SystemUiHider.cs,,The length of the parameter FLAG_LAYOUT_IN_SCREEN_OLDER_DEVICES is 35.
Long Statement,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The length of the statement  "                BitmapFactory.DecodeStream(new FileStream(file.Path' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite)' null' options);//FileStream? " is 148.
Long Statement,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The length of the statement  "                return BitmapFactory.DecodeStream(new FileStream(file.Path' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite)' null' options2);//FileStream? " is 156.
Long Statement,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The length of the statement  "                var getNetworkInterfacesMethod = JNIEnv.GetStaticMethodID(networkInterfaceClass' "getNetworkInterfaces"' "()Ljava/util/Enumeration;"); " is 134.
Long Statement,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The length of the statement  "                    var getInetAddressesMethod = JNIEnv.GetMethodID(networkInterfaceClass' "getInetAddresses"' "()Ljava/util/Enumeration;"); " is 120.
Long Statement,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The length of the statement  "                        //var getHostResult = new Java.Lang.Object(getHostResultPtr' JniHandleOwnership.TransferLocalRef).JavaCast<Java.Lang.String>(); " is 127.
Empty Catch Block,MonoDroidToolkit,FileCache,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\FileCache.cs,Clear,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,CopyStream,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,ImageViewReused,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetMacAddress,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetIPAddress,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetHostName,The method has an empty catch block.
Empty Catch Block,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The method has an empty catch block.
Magic Number,MonoDroidToolkit,GridViewNoScroll,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\GridViewNoScroll.cs,OnMeasure,The following statement contains a magic number: var expandSpec = MeasureSpec.MakeMeasureSpec(int.MaxValue >> 2' MeasureSpecMode.AtMost);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,HoloCircularProgressBar,The following statement contains a magic number: circleStrokeWidth = (int)a.GetDimension(Resource.Styleable.HoloCircularProgressBar_circular_stroke_width' 10);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,HoloCircularProgressBar,The following statement contains a magic number: thumbRadius = circleStrokeWidth * 2;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(circleBounds' 270' -(360 - progressRotation)' false' backgroundColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(circleBounds' 270' -(360 - progressRotation)' false' backgroundColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(circleBounds' 270' overdraw ? 360 : progressRotation' false' progressColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(circleBounds' 270' overdraw ? 360 : progressRotation' false' progressColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.Rotate(markerRotation - 90);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawLine(thumbPosX + thumbRadius / 2.0f * 1.4f' thumbPosY'                                  thumbPosX - thumbRadius / 2.0f * 1.4f' thumbPosY' markerColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawLine(thumbPosX + thumbRadius / 2.0f * 1.4f' thumbPosY'                                  thumbPosX - thumbRadius / 2.0f * 1.4f' thumbPosY' markerColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawLine(thumbPosX + thumbRadius / 2.0f * 1.4f' thumbPosY'                                  thumbPosX - thumbRadius / 2.0f * 1.4f' thumbPosY' markerColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.DrawLine(thumbPosX + thumbRadius / 2.0f * 1.4f' thumbPosY'                                  thumbPosX - thumbRadius / 2.0f * 1.4f' thumbPosY' markerColorPaint);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.Rotate(progressRotation - 90);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: canvas.Rotate(45' thumbPosX' thumbPosY);
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: rect.Left = thumbPosX - thumbRadius / 3.0f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: rect.Right = thumbPosX + thumbRadius / 3.0f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: rect.Top = thumbPosY - thumbRadius / 3.0f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnDraw,The following statement contains a magic number: rect.Bottom = thumbPosY + thumbRadius / 3.0f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,OnMeasure,The following statement contains a magic number: var halfWidth = min * .5f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,IndeterminateRunnable,The following statement contains a magic number: var newProgress = (Progress) + .5f;
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,ComputeInsets,The following statement contains a magic number: switch ((GravityFlags)(absoluteGravity & (long)GravityFlags.HorizontalGravityMask))              {                  case GravityFlags.Left:                      horizontalInset = 0;                      break;                  case GravityFlags.Right:                      horizontalInset = dx;                      break;                  case GravityFlags.CenterHorizontal:                  default:                      horizontalInset = dx / 2;                      break;              }
Magic Number,MonoDroidToolkit,HoloCircularProgressBar,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\HoloCircularProgressBar.cs,ComputeInsets,The following statement contains a magic number: switch ((GravityFlags)(absoluteGravity & (long)GravityFlags.VerticalGravityMask))              {                  case GravityFlags.Top:                      verticalInset = 0;                      break;                  case GravityFlags.Bottom:                      verticalInset = dy;                      break;                  case GravityFlags.CenterVertical:                  default:                      verticalInset = dy / 2;                      break;              }
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,CopyStream,The following statement contains a magic number: var buffer_size = 1024;
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,GetBitmap,The following statement contains a magic number: conn.ConnectTimeout = 5000;
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,GetBitmap,The following statement contains a magic number: conn.ReadTimeout = 5000;
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The following statement contains a magic number: tempWidth / 2 < requiredSize || tempHeight / 2 < requiredSize
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The following statement contains a magic number: tempWidth / 2 < requiredSize || tempHeight / 2 < requiredSize
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The following statement contains a magic number: tempWidth /= 2;
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The following statement contains a magic number: tempHeight /= 2;
Magic Number,MonoDroidToolkit,ImageLoader,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ImageLoader\ImageLoader.cs,DecodeFile,The following statement contains a magic number: scale *= 2;
Magic Number,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The following statement contains a magic number: moreInterfacesCount > 100
Magic Number,MonoDroidToolkit,NetworkUtils,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\NetworkUtils.cs,GetAllNetworkInterfaces,The following statement contains a magic number: moreInetCount > 100
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,Initialize,The following statement contains a magic number: max = a.GetInteger(Resource.Styleable.ProgressButton_max' 100);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRect.Offset((Width - drawableSize) / 2' (Height - drawableSize) / 2);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRect.Offset((Width - drawableSize) / 2' (Height - drawableSize) / 2);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Set(-0.5f' -0.5f' innerSize + 0.5f' innerSize + 0.5f);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Set(-0.5f' -0.5f' innerSize + 0.5f' innerSize + 0.5f);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Set(-0.5f' -0.5f' innerSize + 0.5f' innerSize + 0.5f);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Set(-0.5f' -0.5f' innerSize + 0.5f' innerSize + 0.5f);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Offset((Width - innerSize) / 2' (Height - innerSize) / 2);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: tempRectF.Offset((Width - innerSize) / 2' (Height - innerSize) / 2);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(tempRectF' 0' 360' true' CirclePaint);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(tempRectF'-90' 360 * Progress / Max' true' ProgressPaint);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnDraw,The following statement contains a magic number: canvas.DrawArc(tempRectF'-90' 360 * Progress / Max' true' ProgressPaint);
Magic Number,MonoDroidToolkit,ProgressButton,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ProgressButton.cs,OnRestoreInstanceState,The following statement contains a magic number: max = bundle.GetInt("max"' 100);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,SetFrame,The following statement contains a magic number: paddingWidth = (r - width) / 2;
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,SetFrame,The following statement contains a magic number: ZoomTo(scale' width / 2' height / 2);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,SetFrame,The following statement contains a magic number: ZoomTo(scale' width / 2' height / 2);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,MaxZoomTo,The following statement contains a magic number: this.minScale != this.Scale && (Scale - minScale) > 0.1f
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,ZoomTo,The following statement contains a magic number: matrix.PostTranslate(-(width * scale - width) / 2' -(height * scale - height) / 2);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,ZoomTo,The following statement contains a magic number: matrix.PostTranslate(-(width * scale - width) / 2' -(height * scale - height) / 2);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,ZoomTo,The following statement contains a magic number: matrix.PostTranslate(-(x - (width / 2)) * scale' 0);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,ZoomTo,The following statement contains a magic number: matrix.PostTranslate(0' -(y - (height / 2)) * scale);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,Cutting,The following statement contains a magic number: matrix.PostTranslate((this.width - width) / 2' 0);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,Cutting,The following statement contains a magic number: matrix.PostTranslate(0' (this.height - height) / 2);
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,The following statement contains a magic number: switch (e.Action)              {                  case MotionEventActions.Down:                  case MotionEventActions.Pointer1Down:                  case MotionEventActions.Pointer2Down:                      {                          if (touchCount >= 2)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              previousDistance = distance;                              isScaling = true;                          }                      }                      break;                                    case MotionEventActions.Move:                      {                          if (touchCount >= 2 && isScaling)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              var scale = (distance - previousDistance) / this.DispDistance();                              previousDistance = distance;                              scale += 1;                              scale = scale * scale;                              this.ZoomTo(scale' width / 2' height / 2);                              this.Cutting();                          }                          else if (!isScaling)                          {                              var distanceX = previousMoveX - (int)e.GetX();                              var distanceY = previousMoveY - (int)e.GetY();                              previousMoveX = (int)e.GetX();                              previousMoveY = (int)e.GetY();                                matrix.PostTranslate(-distanceX' -distanceY);                              this.Cutting();                          }                      }                      break;                  case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                  case MotionEventActions.Pointer2Up:                      {                          if (touchCount <= 1)                          {                              isScaling = false;                          }                      }                      break;              }
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,The following statement contains a magic number: switch (e.Action)              {                  case MotionEventActions.Down:                  case MotionEventActions.Pointer1Down:                  case MotionEventActions.Pointer2Down:                      {                          if (touchCount >= 2)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              previousDistance = distance;                              isScaling = true;                          }                      }                      break;                                    case MotionEventActions.Move:                      {                          if (touchCount >= 2 && isScaling)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              var scale = (distance - previousDistance) / this.DispDistance();                              previousDistance = distance;                              scale += 1;                              scale = scale * scale;                              this.ZoomTo(scale' width / 2' height / 2);                              this.Cutting();                          }                          else if (!isScaling)                          {                              var distanceX = previousMoveX - (int)e.GetX();                              var distanceY = previousMoveY - (int)e.GetY();                              previousMoveX = (int)e.GetX();                              previousMoveY = (int)e.GetY();                                matrix.PostTranslate(-distanceX' -distanceY);                              this.Cutting();                          }                      }                      break;                  case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                  case MotionEventActions.Pointer2Up:                      {                          if (touchCount <= 1)                          {                              isScaling = false;                          }                      }                      break;              }
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,The following statement contains a magic number: switch (e.Action)              {                  case MotionEventActions.Down:                  case MotionEventActions.Pointer1Down:                  case MotionEventActions.Pointer2Down:                      {                          if (touchCount >= 2)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              previousDistance = distance;                              isScaling = true;                          }                      }                      break;                                    case MotionEventActions.Move:                      {                          if (touchCount >= 2 && isScaling)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              var scale = (distance - previousDistance) / this.DispDistance();                              previousDistance = distance;                              scale += 1;                              scale = scale * scale;                              this.ZoomTo(scale' width / 2' height / 2);                              this.Cutting();                          }                          else if (!isScaling)                          {                              var distanceX = previousMoveX - (int)e.GetX();                              var distanceY = previousMoveY - (int)e.GetY();                              previousMoveX = (int)e.GetX();                              previousMoveY = (int)e.GetY();                                matrix.PostTranslate(-distanceX' -distanceY);                              this.Cutting();                          }                      }                      break;                  case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                  case MotionEventActions.Pointer2Up:                      {                          if (touchCount <= 1)                          {                              isScaling = false;                          }                      }                      break;              }
Magic Number,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,The following statement contains a magic number: switch (e.Action)              {                  case MotionEventActions.Down:                  case MotionEventActions.Pointer1Down:                  case MotionEventActions.Pointer2Down:                      {                          if (touchCount >= 2)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              previousDistance = distance;                              isScaling = true;                          }                      }                      break;                                    case MotionEventActions.Move:                      {                          if (touchCount >= 2 && isScaling)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              var scale = (distance - previousDistance) / this.DispDistance();                              previousDistance = distance;                              scale += 1;                              scale = scale * scale;                              this.ZoomTo(scale' width / 2' height / 2);                              this.Cutting();                          }                          else if (!isScaling)                          {                              var distanceX = previousMoveX - (int)e.GetX();                              var distanceY = previousMoveY - (int)e.GetY();                              previousMoveX = (int)e.GetX();                              previousMoveY = (int)e.GetY();                                matrix.PostTranslate(-distanceX' -distanceY);                              this.Cutting();                          }                      }                      break;                  case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                  case MotionEventActions.Pointer2Up:                      {                          if (touchCount <= 1)                          {                              isScaling = false;                          }                      }                      break;              }
Magic Number,MonoDroidToolkit,SystemUiHider,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\SystemUiHider\SystemUiHider.cs,GetInstance,The following statement contains a magic number: (int)Build.VERSION.SdkInt >= 11
Magic Number,MonoDroidToolkit,VerticalTextView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\VerticalTextView.cs,OnDraw,The following statement contains a magic number: canvas.Rotate(90.0f);
Missing Default,MonoDroidToolkit,ScaleImageView,D:\research\architectureSmells\repos\jamesmontemagno_MonoDroidToolkit\src\XamarinAndroidToolkit\Toolkit\ScaleImageView.cs,OnTouchEvent,The following switch statement is missing a default case: switch (e.Action)              {                  case MotionEventActions.Down:                  case MotionEventActions.Pointer1Down:                  case MotionEventActions.Pointer2Down:                      {                          if (touchCount >= 2)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              previousDistance = distance;                              isScaling = true;                          }                      }                      break;                                    case MotionEventActions.Move:                      {                          if (touchCount >= 2 && isScaling)                          {                              var distance = this.Distance(e.GetX(0)' e.GetX(1)' e.GetY(0)' e.GetY(1));                              var scale = (distance - previousDistance) / this.DispDistance();                              previousDistance = distance;                              scale += 1;                              scale = scale * scale;                              this.ZoomTo(scale' width / 2' height / 2);                              this.Cutting();                          }                          else if (!isScaling)                          {                              var distanceX = previousMoveX - (int)e.GetX();                              var distanceY = previousMoveY - (int)e.GetY();                              previousMoveX = (int)e.GetX();                              previousMoveY = (int)e.GetY();                                matrix.PostTranslate(-distanceX' -distanceY);                              this.Cutting();                          }                      }                      break;                  case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                  case MotionEventActions.Pointer2Up:                      {                          if (touchCount <= 1)                          {                              isScaling = false;                          }                      }                      break;              }
