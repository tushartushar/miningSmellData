Implementation smell,Namespace,Class,File,Method,Description
Long Method,SilentOrbit.ProtocolBuffers,ProtoCode,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\ProtoCode.cs,Save,The method has 108 lines of code.
Long Method,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The method has 206 lines of code.
Complex Method,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseField,Cyclomatic complexity of the method is 8
Complex Method,SilentOrbit.ProtocolBuffers,TokenReader,C:\repos\hultqvist_ProtoBuf\CodeGenerator\TokenReader.cs,ReadNextComment,Cyclomatic complexity of the method is 10
Complex Method,SilentOrbit.ProtocolBuffers,ProtoPrepare,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoPrepare.cs,DetectNameClash,Cyclomatic complexity of the method is 12
Complex Method,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,Cyclomatic complexity of the method is 30
Complex Method,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateWriter,Cyclomatic complexity of the method is 8
Complex Method,SilentOrbit.ProtocolBuffers,Options,C:\repos\hultqvist_ProtoBuf\CodeGenerator\Options.cs,Parse,Cyclomatic complexity of the method is 10
Long Parameter List,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriterType,The method has 5 parameters. Parameters: f' stream' binaryWriter' instance' cw
Long Statement,SilentOrbit.ProtocolBuffers,Program,C:\repos\hultqvist_ProtoBuf\CodeGenerator\Program.cs,Main,The length of the statement  "            string testBuildArgs = @"--fix-nameclash --ctor --utc --skip-default ..\..\..\TestProgram\ProtoSpec\ImportAll.proto --output ..\..\..\TestProgram\Generated\Generated.cs"; " is 170.
Long Statement,SilentOrbit.ProtocolBuffers,Program,C:\repos\hultqvist_ProtoBuf\CodeGenerator\Program.cs,Build,The length of the statement  "                Console.WriteLine(pfe.SourcePath.Path + "(" + pfe.SourcePath.Line + "'" + pfe.SourcePath.Column + "): error CS001: " + pfe.Message); " is 132.
Long Statement,SilentOrbit.ProtocolBuffers,ProtoPrepare,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoPrepare.cs,PrepareProtoType,The length of the statement  "                throw new ProtoFormatException("Field type \"" + f.ProtoTypeName + "\" not found for field " + f.ProtoName + " in message " + m.FullProtoName' f.Source); " is 153.
Long Statement,SilentOrbit.ProtocolBuffers,ProtoCode,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\ProtoCode.cs,ReadCode,The length of the statement  "            using (TextReader tr = new StreamReader(Assembly.GetExecutingAssembly().GetManifestResourceStream(name)' Encoding.UTF8)) " is 120.
Long Statement,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldReader,The length of the statement  "                    cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Read too many bytes in packed data\");"); " is 129.
Long Statement,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriter,The length of the statement  "                        cw.WriteLine(ProtocolParser.Base + ".WriteUInt32(stream' " + f.ProtoType.WireSize + "u * (uint)instance." + f.CsName + ".Count);"); " is 131.
Long Statement,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriter,The length of the statement  "                    cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"" + f.CsName + " is required by the proto specification.\");"); " is 151.
Long Statement,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriterType,The length of the statement  "                            cw.WriteLine(FieldWriterPrimitive(f' stream' binaryWriter' "(" + instance + ".Kind == DateTimeKind.Utc ? " + instance + " : " + instance + ".ToUniversalTime()).Ticks")); " is 169.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "            cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " Deserialize(byte[] buffer' " + refstr + m.FullCsType + " instance)"); " is 127.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                    cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)"); " is 130.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                    cw.Summary("Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance."); " is 127.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                    cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)"); " is 130.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                    cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' int length' " + refstr + m.FullCsType + " instance)"); " is 142.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                cw.WriteLine("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Invalid field id: 0' something went wrong in the stream\");"); " is 148.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The length of the statement  "                    cw.WriteLine("instance.PreservedFields.Add(new global::SilentOrbit.ProtocolBuffers.KeyValue(key' " + ProtocolParser.Base + ".ReadValueBytes(stream' key)));"); " is 158.
Long Statement,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateWriter,The length of the statement  "                cw.WriteLine("static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new " + options.ExperimentalStack + "();"); " is 126.
Long Statement,SilentOrbit.ProtocolBuffers,FileParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\FileParser.cs,Import,The length of the statement  "                Console.WriteLine(pfe.SourcePath.Path + "(" + pfe.SourcePath.Line + "'" + pfe.SourcePath.Column + "): error CS001: " + pfe.Message); " is 132.
Complex Conditional,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriter,The conditional expression  "options.Nullable ||                      f.ProtoType is ProtoMessage ||                      f.ProtoType.ProtoName == ProtoBuiltin.String ||                      f.ProtoType.ProtoName == ProtoBuiltin.Bytes"  is complex.
Complex Conditional,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriter,The conditional expression  "f.ProtoType is ProtoMessage && f.ProtoType.OptionType != "struct" ||                      f.ProtoType.ProtoName == ProtoBuiltin.String ||                      f.ProtoType.ProtoName == ProtoBuiltin.Bytes"  is complex.
Magic Number,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseComment,The following statement contains a magic number: if (token.StartsWith("/*"))              {                  lastComment.Add(token.Substring(2));                  return true;              }
Magic Number,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseField,The following statement contains a magic number: if (19000 <= f.ID && f.ID <= 19999)                  throw new ProtoFormatException("Can't use reserved field ID 19000-19999"' tr);
Magic Number,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseField,The following statement contains a magic number: if (19000 <= f.ID && f.ID <= 19999)                  throw new ProtoFormatException("Can't use reserved field ID 19000-19999"' tr);
Magic Number,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseField,The following statement contains a magic number: if (f.ID > (1 << 29) - 1)                  throw new ProtoFormatException("Maximum field id is 2^29 - 1"' tr);
Magic Number,SilentOrbit.ProtocolBuffers,ProtoParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\ProtoParser.cs,ParseInt,The following statement contains a magic number: if (text.StartsWith("0x"' StringComparison.CurrentCultureIgnoreCase))              {                  var hex = text.Substring(2);                    if (int.TryParse(hex' NumberStyles.HexNumber' CultureInfo.CurrentCulture' out val))                      return val;              }
Magic Number,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,KeyWriter,The following statement contains a magic number: uint n = ((uint)id << 3) | ((uint)wire);
Magic Number,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,VarintWriter,The following statement contains a magic number: while (true)              {                  byte b = (byte)(value & 0x7F);                  value = value >> 7;                  if (value == 0)                  {                      cw.WriteLine(stream + ".WriteByte(" + b + ");");                      break;                  }                    //Write part of value                  b |= 0x80;                  cw.WriteLine(stream + ".WriteByte(" + b + ");");              }
Magic Number,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The following statement contains a magic number: foreach (string method in methods)              {                  if (method == "Deserialize")                  {                      cw.Summary("Takes the remaining content of the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLengthDelimited")                  {                      cw.Summary("Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLength")                  {                      cw.Summary("Read the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' int length' " + refstr + m.FullCsType + " instance)");                  }                  else                      throw new NotImplementedException();                    if (m.IsUsingBinaryWriter)                      cw.WriteLine("var br = new BinaryReader(stream);");                    //Prepare List<> and default values                  foreach (Field f in m.Fields.Values)                  {                      if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (f.Rule == FieldRule.Repeated)                      {                          if (f.OptionReadOnly == false)                          {                              //Initialize lists of the custom DateTime or TimeSpan type.                              string csType = f.ProtoType.FullCsType;                              if (f.OptionCodeType != null)                                  csType = f.OptionCodeType;                                cw.WriteLine("if (instance." + f.CsName + " == null)");                              cw.WriteIndent("instance." + f.CsName + " = new List<" + csType + ">();");                          }                      }                      else if (f.OptionDefault != null)                      {                          cw.WriteLine("instance." + f.CsName + " = " + f.FormatDefaultForTypeAssignment() + ";");                      }                      else if ((f.Rule == FieldRule.Optional) && !options.Nullable)                      {                          if (f.ProtoType is ProtoEnum)                          {                              ProtoEnum pe = f.ProtoType as ProtoEnum;                              //the default value is the first value listed in the enum's type definition                              foreach (var kvp in pe.Enums)                              {                                  cw.WriteLine("instance." + f.CsName + " = " + pe.FullCsType + "." + kvp.Name + ";");                                  break;                              }                          }                      }                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                    if (method == "DeserializeLengthDelimited")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = " + ProtocolParser.Base + ".ReadUInt32(stream);");                      cw.WriteLine("limit += stream.Position;");                  }                  if (method == "DeserializeLength")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = stream.Position + length;");                  }                    cw.WhileBracket("true");                    if (method == "DeserializeLengthDelimited" || method == "DeserializeLength")                  {                      cw.IfBracket("stream.Position >= limit");                      cw.WriteLine("if (stream.Position == limit)");                      cw.WriteIndent("break;");                      cw.WriteLine("else");                      cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Read past max limit\");");                      cw.EndBracket();                  }                    cw.WriteLine("int keyByte = stream.ReadByte();");                  cw.WriteLine("if (keyByte == -1)");                  if (method == "Deserialize")                      cw.WriteIndent("break;");                  else                      cw.WriteIndent("throw new System.IO.EndOfStreamException();");                    //Determine if we need the lowID optimization                  bool hasLowID = false;                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                      {                          hasLowID = true;                          break;                      }                  }                    if (hasLowID)                  {                      cw.Comment("Optimized reading of known fields with field ID < 16");                      cw.Switch("keyByte");                      foreach (Field f in m.Fields.Values)                      {                          if (f.ID >= 16)                              continue;                            if (f.OptionDeprecated)                              cw.WritePragma("warning disable 612");                            cw.Dedent();                          cw.Comment("Field " + f.ID + " " + f.WireType);                          cw.Indent();                          cw.Case(((f.ID << 3) | (int)f.WireType));                          if (fieldSerializer.FieldReader(f))                              cw.WriteLine("continue;");                            if (f.OptionDeprecated)                              cw.WritePragma("warning restore 612");                      }                      cw.SwitchEnd();                      cw.WriteLine();                  }                  cw.WriteLine("var key = " + ProtocolParser.Base + ".ReadKey((byte)keyByte' stream);");                    cw.WriteLine();                    cw.Comment("Reading field ID > 16 and unknown field ID/wire type combinations");                  cw.Switch("key.Field");                  cw.Case(0);                  cw.WriteLine("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Invalid field id: 0' something went wrong in the stream\");");                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                          continue;                      cw.Case(f.ID);                      //Makes sure we got the right wire type                      cw.WriteLine("if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire." + f.WireType + ")");                      cw.WriteIndent("break;"); //This can be changed to throw an exception for unknown formats.                        if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (fieldSerializer.FieldReader(f))                          cw.WriteLine("continue;");                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                  cw.CaseDefault();                  if (m.OptionPreserveUnknown)                  {                      cw.WriteLine("if (instance.PreservedFields == null)");                      cw.WriteIndent("instance.PreservedFields = new List<global::SilentOrbit.ProtocolBuffers.KeyValue>();");                      cw.WriteLine("instance.PreservedFields.Add(new global::SilentOrbit.ProtocolBuffers.KeyValue(key' " + ProtocolParser.Base + ".ReadValueBytes(stream' key)));");                  }                  else                  {                      cw.WriteLine(ProtocolParser.Base + ".SkipKey(stream' key);");                  }                  cw.WriteLine("break;");                  cw.SwitchEnd();                  cw.EndBracket();                  cw.WriteLine();                    if (m.OptionTriggers)                      cw.WriteLine("instance.AfterDeserialize();");                  cw.WriteLine("return instance;");                  cw.EndBracket();                  cw.WriteLine();              }
Magic Number,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The following statement contains a magic number: foreach (string method in methods)              {                  if (method == "Deserialize")                  {                      cw.Summary("Takes the remaining content of the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLengthDelimited")                  {                      cw.Summary("Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLength")                  {                      cw.Summary("Read the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' int length' " + refstr + m.FullCsType + " instance)");                  }                  else                      throw new NotImplementedException();                    if (m.IsUsingBinaryWriter)                      cw.WriteLine("var br = new BinaryReader(stream);");                    //Prepare List<> and default values                  foreach (Field f in m.Fields.Values)                  {                      if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (f.Rule == FieldRule.Repeated)                      {                          if (f.OptionReadOnly == false)                          {                              //Initialize lists of the custom DateTime or TimeSpan type.                              string csType = f.ProtoType.FullCsType;                              if (f.OptionCodeType != null)                                  csType = f.OptionCodeType;                                cw.WriteLine("if (instance." + f.CsName + " == null)");                              cw.WriteIndent("instance." + f.CsName + " = new List<" + csType + ">();");                          }                      }                      else if (f.OptionDefault != null)                      {                          cw.WriteLine("instance." + f.CsName + " = " + f.FormatDefaultForTypeAssignment() + ";");                      }                      else if ((f.Rule == FieldRule.Optional) && !options.Nullable)                      {                          if (f.ProtoType is ProtoEnum)                          {                              ProtoEnum pe = f.ProtoType as ProtoEnum;                              //the default value is the first value listed in the enum's type definition                              foreach (var kvp in pe.Enums)                              {                                  cw.WriteLine("instance." + f.CsName + " = " + pe.FullCsType + "." + kvp.Name + ";");                                  break;                              }                          }                      }                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                    if (method == "DeserializeLengthDelimited")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = " + ProtocolParser.Base + ".ReadUInt32(stream);");                      cw.WriteLine("limit += stream.Position;");                  }                  if (method == "DeserializeLength")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = stream.Position + length;");                  }                    cw.WhileBracket("true");                    if (method == "DeserializeLengthDelimited" || method == "DeserializeLength")                  {                      cw.IfBracket("stream.Position >= limit");                      cw.WriteLine("if (stream.Position == limit)");                      cw.WriteIndent("break;");                      cw.WriteLine("else");                      cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Read past max limit\");");                      cw.EndBracket();                  }                    cw.WriteLine("int keyByte = stream.ReadByte();");                  cw.WriteLine("if (keyByte == -1)");                  if (method == "Deserialize")                      cw.WriteIndent("break;");                  else                      cw.WriteIndent("throw new System.IO.EndOfStreamException();");                    //Determine if we need the lowID optimization                  bool hasLowID = false;                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                      {                          hasLowID = true;                          break;                      }                  }                    if (hasLowID)                  {                      cw.Comment("Optimized reading of known fields with field ID < 16");                      cw.Switch("keyByte");                      foreach (Field f in m.Fields.Values)                      {                          if (f.ID >= 16)                              continue;                            if (f.OptionDeprecated)                              cw.WritePragma("warning disable 612");                            cw.Dedent();                          cw.Comment("Field " + f.ID + " " + f.WireType);                          cw.Indent();                          cw.Case(((f.ID << 3) | (int)f.WireType));                          if (fieldSerializer.FieldReader(f))                              cw.WriteLine("continue;");                            if (f.OptionDeprecated)                              cw.WritePragma("warning restore 612");                      }                      cw.SwitchEnd();                      cw.WriteLine();                  }                  cw.WriteLine("var key = " + ProtocolParser.Base + ".ReadKey((byte)keyByte' stream);");                    cw.WriteLine();                    cw.Comment("Reading field ID > 16 and unknown field ID/wire type combinations");                  cw.Switch("key.Field");                  cw.Case(0);                  cw.WriteLine("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Invalid field id: 0' something went wrong in the stream\");");                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                          continue;                      cw.Case(f.ID);                      //Makes sure we got the right wire type                      cw.WriteLine("if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire." + f.WireType + ")");                      cw.WriteIndent("break;"); //This can be changed to throw an exception for unknown formats.                        if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (fieldSerializer.FieldReader(f))                          cw.WriteLine("continue;");                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                  cw.CaseDefault();                  if (m.OptionPreserveUnknown)                  {                      cw.WriteLine("if (instance.PreservedFields == null)");                      cw.WriteIndent("instance.PreservedFields = new List<global::SilentOrbit.ProtocolBuffers.KeyValue>();");                      cw.WriteLine("instance.PreservedFields.Add(new global::SilentOrbit.ProtocolBuffers.KeyValue(key' " + ProtocolParser.Base + ".ReadValueBytes(stream' key)));");                  }                  else                  {                      cw.WriteLine(ProtocolParser.Base + ".SkipKey(stream' key);");                  }                  cw.WriteLine("break;");                  cw.SwitchEnd();                  cw.EndBracket();                  cw.WriteLine();                    if (m.OptionTriggers)                      cw.WriteLine("instance.AfterDeserialize();");                  cw.WriteLine("return instance;");                  cw.EndBracket();                  cw.WriteLine();              }
Magic Number,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The following statement contains a magic number: foreach (string method in methods)              {                  if (method == "Deserialize")                  {                      cw.Summary("Takes the remaining content of the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLengthDelimited")                  {                      cw.Summary("Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLength")                  {                      cw.Summary("Read the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' int length' " + refstr + m.FullCsType + " instance)");                  }                  else                      throw new NotImplementedException();                    if (m.IsUsingBinaryWriter)                      cw.WriteLine("var br = new BinaryReader(stream);");                    //Prepare List<> and default values                  foreach (Field f in m.Fields.Values)                  {                      if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (f.Rule == FieldRule.Repeated)                      {                          if (f.OptionReadOnly == false)                          {                              //Initialize lists of the custom DateTime or TimeSpan type.                              string csType = f.ProtoType.FullCsType;                              if (f.OptionCodeType != null)                                  csType = f.OptionCodeType;                                cw.WriteLine("if (instance." + f.CsName + " == null)");                              cw.WriteIndent("instance." + f.CsName + " = new List<" + csType + ">();");                          }                      }                      else if (f.OptionDefault != null)                      {                          cw.WriteLine("instance." + f.CsName + " = " + f.FormatDefaultForTypeAssignment() + ";");                      }                      else if ((f.Rule == FieldRule.Optional) && !options.Nullable)                      {                          if (f.ProtoType is ProtoEnum)                          {                              ProtoEnum pe = f.ProtoType as ProtoEnum;                              //the default value is the first value listed in the enum's type definition                              foreach (var kvp in pe.Enums)                              {                                  cw.WriteLine("instance." + f.CsName + " = " + pe.FullCsType + "." + kvp.Name + ";");                                  break;                              }                          }                      }                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                    if (method == "DeserializeLengthDelimited")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = " + ProtocolParser.Base + ".ReadUInt32(stream);");                      cw.WriteLine("limit += stream.Position;");                  }                  if (method == "DeserializeLength")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = stream.Position + length;");                  }                    cw.WhileBracket("true");                    if (method == "DeserializeLengthDelimited" || method == "DeserializeLength")                  {                      cw.IfBracket("stream.Position >= limit");                      cw.WriteLine("if (stream.Position == limit)");                      cw.WriteIndent("break;");                      cw.WriteLine("else");                      cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Read past max limit\");");                      cw.EndBracket();                  }                    cw.WriteLine("int keyByte = stream.ReadByte();");                  cw.WriteLine("if (keyByte == -1)");                  if (method == "Deserialize")                      cw.WriteIndent("break;");                  else                      cw.WriteIndent("throw new System.IO.EndOfStreamException();");                    //Determine if we need the lowID optimization                  bool hasLowID = false;                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                      {                          hasLowID = true;                          break;                      }                  }                    if (hasLowID)                  {                      cw.Comment("Optimized reading of known fields with field ID < 16");                      cw.Switch("keyByte");                      foreach (Field f in m.Fields.Values)                      {                          if (f.ID >= 16)                              continue;                            if (f.OptionDeprecated)                              cw.WritePragma("warning disable 612");                            cw.Dedent();                          cw.Comment("Field " + f.ID + " " + f.WireType);                          cw.Indent();                          cw.Case(((f.ID << 3) | (int)f.WireType));                          if (fieldSerializer.FieldReader(f))                              cw.WriteLine("continue;");                            if (f.OptionDeprecated)                              cw.WritePragma("warning restore 612");                      }                      cw.SwitchEnd();                      cw.WriteLine();                  }                  cw.WriteLine("var key = " + ProtocolParser.Base + ".ReadKey((byte)keyByte' stream);");                    cw.WriteLine();                    cw.Comment("Reading field ID > 16 and unknown field ID/wire type combinations");                  cw.Switch("key.Field");                  cw.Case(0);                  cw.WriteLine("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Invalid field id: 0' something went wrong in the stream\");");                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                          continue;                      cw.Case(f.ID);                      //Makes sure we got the right wire type                      cw.WriteLine("if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire." + f.WireType + ")");                      cw.WriteIndent("break;"); //This can be changed to throw an exception for unknown formats.                        if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (fieldSerializer.FieldReader(f))                          cw.WriteLine("continue;");                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                  cw.CaseDefault();                  if (m.OptionPreserveUnknown)                  {                      cw.WriteLine("if (instance.PreservedFields == null)");                      cw.WriteIndent("instance.PreservedFields = new List<global::SilentOrbit.ProtocolBuffers.KeyValue>();");                      cw.WriteLine("instance.PreservedFields.Add(new global::SilentOrbit.ProtocolBuffers.KeyValue(key' " + ProtocolParser.Base + ".ReadValueBytes(stream' key)));");                  }                  else                  {                      cw.WriteLine(ProtocolParser.Base + ".SkipKey(stream' key);");                  }                  cw.WriteLine("break;");                  cw.SwitchEnd();                  cw.EndBracket();                  cw.WriteLine();                    if (m.OptionTriggers)                      cw.WriteLine("instance.AfterDeserialize();");                  cw.WriteLine("return instance;");                  cw.EndBracket();                  cw.WriteLine();              }
Magic Number,SilentOrbit.ProtocolBuffers,MessageSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\MessageSerializer.cs,GenerateReader,The following statement contains a magic number: foreach (string method in methods)              {                  if (method == "Deserialize")                  {                      cw.Summary("Takes the remaining content of the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLengthDelimited")                  {                      cw.Summary("Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' " + refstr + m.FullCsType + " instance)");                  }                  else if (method == "DeserializeLength")                  {                      cw.Summary("Read the given number of bytes from the stream and deserialze it into the instance.");                      cw.Bracket(m.OptionAccess + " static " + m.FullCsType + " " + method + "(Stream stream' int length' " + refstr + m.FullCsType + " instance)");                  }                  else                      throw new NotImplementedException();                    if (m.IsUsingBinaryWriter)                      cw.WriteLine("var br = new BinaryReader(stream);");                    //Prepare List<> and default values                  foreach (Field f in m.Fields.Values)                  {                      if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (f.Rule == FieldRule.Repeated)                      {                          if (f.OptionReadOnly == false)                          {                              //Initialize lists of the custom DateTime or TimeSpan type.                              string csType = f.ProtoType.FullCsType;                              if (f.OptionCodeType != null)                                  csType = f.OptionCodeType;                                cw.WriteLine("if (instance." + f.CsName + " == null)");                              cw.WriteIndent("instance." + f.CsName + " = new List<" + csType + ">();");                          }                      }                      else if (f.OptionDefault != null)                      {                          cw.WriteLine("instance." + f.CsName + " = " + f.FormatDefaultForTypeAssignment() + ";");                      }                      else if ((f.Rule == FieldRule.Optional) && !options.Nullable)                      {                          if (f.ProtoType is ProtoEnum)                          {                              ProtoEnum pe = f.ProtoType as ProtoEnum;                              //the default value is the first value listed in the enum's type definition                              foreach (var kvp in pe.Enums)                              {                                  cw.WriteLine("instance." + f.CsName + " = " + pe.FullCsType + "." + kvp.Name + ";");                                  break;                              }                          }                      }                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                    if (method == "DeserializeLengthDelimited")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = " + ProtocolParser.Base + ".ReadUInt32(stream);");                      cw.WriteLine("limit += stream.Position;");                  }                  if (method == "DeserializeLength")                  {                      //Important to read stream position after we have read the length field                      cw.WriteLine("long limit = stream.Position + length;");                  }                    cw.WhileBracket("true");                    if (method == "DeserializeLengthDelimited" || method == "DeserializeLength")                  {                      cw.IfBracket("stream.Position >= limit");                      cw.WriteLine("if (stream.Position == limit)");                      cw.WriteIndent("break;");                      cw.WriteLine("else");                      cw.WriteIndent("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Read past max limit\");");                      cw.EndBracket();                  }                    cw.WriteLine("int keyByte = stream.ReadByte();");                  cw.WriteLine("if (keyByte == -1)");                  if (method == "Deserialize")                      cw.WriteIndent("break;");                  else                      cw.WriteIndent("throw new System.IO.EndOfStreamException();");                    //Determine if we need the lowID optimization                  bool hasLowID = false;                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                      {                          hasLowID = true;                          break;                      }                  }                    if (hasLowID)                  {                      cw.Comment("Optimized reading of known fields with field ID < 16");                      cw.Switch("keyByte");                      foreach (Field f in m.Fields.Values)                      {                          if (f.ID >= 16)                              continue;                            if (f.OptionDeprecated)                              cw.WritePragma("warning disable 612");                            cw.Dedent();                          cw.Comment("Field " + f.ID + " " + f.WireType);                          cw.Indent();                          cw.Case(((f.ID << 3) | (int)f.WireType));                          if (fieldSerializer.FieldReader(f))                              cw.WriteLine("continue;");                            if (f.OptionDeprecated)                              cw.WritePragma("warning restore 612");                      }                      cw.SwitchEnd();                      cw.WriteLine();                  }                  cw.WriteLine("var key = " + ProtocolParser.Base + ".ReadKey((byte)keyByte' stream);");                    cw.WriteLine();                    cw.Comment("Reading field ID > 16 and unknown field ID/wire type combinations");                  cw.Switch("key.Field");                  cw.Case(0);                  cw.WriteLine("throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException(\"Invalid field id: 0' something went wrong in the stream\");");                  foreach (Field f in m.Fields.Values)                  {                      if (f.ID < 16)                          continue;                      cw.Case(f.ID);                      //Makes sure we got the right wire type                      cw.WriteLine("if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire." + f.WireType + ")");                      cw.WriteIndent("break;"); //This can be changed to throw an exception for unknown formats.                        if (f.OptionDeprecated)                          cw.WritePragma("warning disable 612");                        if (fieldSerializer.FieldReader(f))                          cw.WriteLine("continue;");                        if (f.OptionDeprecated)                          cw.WritePragma("warning restore 612");                  }                  cw.CaseDefault();                  if (m.OptionPreserveUnknown)                  {                      cw.WriteLine("if (instance.PreservedFields == null)");                      cw.WriteIndent("instance.PreservedFields = new List<global::SilentOrbit.ProtocolBuffers.KeyValue>();");                      cw.WriteLine("instance.PreservedFields.Add(new global::SilentOrbit.ProtocolBuffers.KeyValue(key' " + ProtocolParser.Base + ".ReadValueBytes(stream' key)));");                  }                  else                  {                      cw.WriteLine(ProtocolParser.Base + ".SkipKey(stream' key);");                  }                  cw.WriteLine("break;");                  cw.SwitchEnd();                  cw.EndBracket();                  cw.WriteLine();                    if (m.OptionTriggers)                      cw.WriteLine("instance.AfterDeserialize();");                  cw.WriteLine("return instance;");                  cw.EndBracket();                  cw.WriteLine();              }
Magic Number,SilentOrbit.ProtocolBuffers,LocalParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\LocalParser.cs,ParseComments,The following statement contains a magic number: foreach (string s in comments)              {                  if (s.StartsWith(":"))                  {                      try                      {                          string line = s.Substring(1);                            //Remove comments after "//"                          int cpos = line.IndexOf("//");                          if (cpos >= 0)                              line = line.Substring(0' cpos);                            string[] parts = line.Split('=');                          if (parts.Length > 2)                              throw new ProtoFormatException("Bad option format' at most one '='' " + s' tr);                          string key = parts[0].Trim().ToLowerInvariant();                          if (parts.Length == 1)                          {                              //Parse flag                              if (message is ProtoMessage)                                  ParseMessageFlags((ProtoMessage)message' key);                              else if (message is Field)                                  ParseFieldFlags((Field)message' key);                              else if (message is ProtoEnum)                                  ParseEnumFlags((ProtoEnum)message' key);                              else                                  throw new NotImplementedException();                                continue;                          }                          else                          {                              string value = (parts.Length == 2) ? parts[1].Trim() : null;                                if (message is ProtoMessage)                                  ParseMessageOption((ProtoMessage)message' key' value);                              else if (message is Field)                                  ParseFieldOption((Field)message' key' value);                              else if (message is ProtoEnum)                                  ParseEnumOption((ProtoEnum)message' key' value);                              else                                  throw new NotImplementedException();                                continue;                          }                      }                      catch (Exception e)                      {                          throw new ProtoFormatException(e.Message' e' tr);                      }                  }                  else                  {                      message.Comments += s + "\n";                  }              }
Magic Number,SilentOrbit.ProtocolBuffers,LocalParser,C:\repos\hultqvist_ProtoBuf\CodeGenerator\LocalParser.cs,ParseComments,The following statement contains a magic number: foreach (string s in comments)              {                  if (s.StartsWith(":"))                  {                      try                      {                          string line = s.Substring(1);                            //Remove comments after "//"                          int cpos = line.IndexOf("//");                          if (cpos >= 0)                              line = line.Substring(0' cpos);                            string[] parts = line.Split('=');                          if (parts.Length > 2)                              throw new ProtoFormatException("Bad option format' at most one '='' " + s' tr);                          string key = parts[0].Trim().ToLowerInvariant();                          if (parts.Length == 1)                          {                              //Parse flag                              if (message is ProtoMessage)                                  ParseMessageFlags((ProtoMessage)message' key);                              else if (message is Field)                                  ParseFieldFlags((Field)message' key);                              else if (message is ProtoEnum)                                  ParseEnumFlags((ProtoEnum)message' key);                              else                                  throw new NotImplementedException();                                continue;                          }                          else                          {                              string value = (parts.Length == 2) ? parts[1].Trim() : null;                                if (message is ProtoMessage)                                  ParseMessageOption((ProtoMessage)message' key' value);                              else if (message is Field)                                  ParseFieldOption((Field)message' key' value);                              else if (message is ProtoEnum)                                  ParseEnumOption((ProtoEnum)message' key' value);                              else                                  throw new NotImplementedException();                                continue;                          }                      }                      catch (Exception e)                      {                          throw new ProtoFormatException(e.Message' e' tr);                      }                  }                  else                  {                      message.Comments += s + "\n";                  }              }
Missing Default,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldReaderType,The following switch statement is missing a default case: switch (f.ProtoType.ProtoName)                          {                              case ProtoBuiltin.UInt64:                              case ProtoBuiltin.Int64:                              case ProtoBuiltin.Fixed64:                              case ProtoBuiltin.SFixed64:                                  if (options.Utc)                                      return "new DateTime((long)" + FieldReaderPrimitive(f' stream' binaryReader' instance) + "' DateTimeKind.Utc)";                                  else                                      return "new DateTime((long)" + FieldReaderPrimitive(f' stream' binaryReader' instance) + ")";                          }
Missing Default,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldReaderType,The following switch statement is missing a default case: switch (f.ProtoType.ProtoName)                          {                              case ProtoBuiltin.UInt64:                              case ProtoBuiltin.Int64:                              case ProtoBuiltin.Fixed64:                              case ProtoBuiltin.SFixed64:                                  return "new TimeSpan((long)" + FieldReaderPrimitive(f' stream' binaryReader' instance) + ")";                          }
Missing Default,SilentOrbit.ProtocolBuffers,FieldSerializer,C:\repos\hultqvist_ProtoBuf\CodeGenerator\CodeGenerator\FieldSerializer.cs,FieldWriterPrimitive,The following switch statement is missing a default case: switch (f.ProtoType.ProtoName)              {                  case ProtoBuiltin.Double:                  case ProtoBuiltin.Float:                  case ProtoBuiltin.Fixed32:                  case ProtoBuiltin.Fixed64:                  case ProtoBuiltin.SFixed32:                  case ProtoBuiltin.SFixed64:                      return binaryWriter + ".Write(" + instance + ");";                  case ProtoBuiltin.Int32: //Serialized as 64 bit varint                      return ProtocolParser.Base + ".WriteUInt64(" + stream + "'(ulong)" + instance + ");";                  case ProtoBuiltin.Int64:                      return ProtocolParser.Base + ".WriteUInt64(" + stream + "'(ulong)" + instance + ");";                  case ProtoBuiltin.UInt32:                      return ProtocolParser.Base + ".WriteUInt32(" + stream + "' " + instance + ");";                  case ProtoBuiltin.UInt64:                      return ProtocolParser.Base + ".WriteUInt64(" + stream + "' " + instance + ");";                  case ProtoBuiltin.SInt32:                      return ProtocolParser.Base + ".WriteZInt32(" + stream + "' " + instance + ");";                  case ProtoBuiltin.SInt64:                      return ProtocolParser.Base + ".WriteZInt64(" + stream + "' " + instance + ");";                  case ProtoBuiltin.Bool:                      return ProtocolParser.Base + ".WriteBool(" + stream + "' " + instance + ");";                  case ProtoBuiltin.String:                      return ProtocolParser.Base + ".WriteBytes(" + stream + "' Encoding.UTF8.GetBytes(" + instance + "));";                  case ProtoBuiltin.Bytes:                      return ProtocolParser.Base + ".WriteBytes(" + stream + "' " + instance + ");";              }
