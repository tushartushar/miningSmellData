Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,AddData,Cyclomatic complexity of the method is 8
Complex Method,NChanges.Tool,ReportCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ReportCommand.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,Mono.Options,StringCoda,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,CreateWrappedLinesIterator,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Long Parameter List,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,ExcelCommand,The method has 61 parameters.
Long Parameter List,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,AddData,The method has 7 parameters.
Long Parameter List,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetOptionParts,The method has 5 parameters.
Long Statement,NChanges.Tool,Program,C:\repos\jdiamond_NChanges\NChanges.Tool\Program.cs,ShowHelp,The length of the statement  "	Console.Error.WriteLine ("Report will take the differences of the snapshots and put them into a xml file called: " + "[assembly name]-[highest version number]-report.xml"); " is 172.
Long Statement,Mono.Options,StringCoda,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetNextWidth,The length of the statement  "			throw new ArgumentOutOfRangeException ("widths"' string.Format ("Element must be >= {0}' was {1}."' minWidth.Length' curWidth)); " is 128.
Long Statement,Mono.Options,OptionValueCollection,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,Parse,The length of the statement  "	bool nullable = tt.IsValueType && tt.IsGenericType && !tt.IsGenericTypeDefinition && tt.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' c.Option.MaxValueCount - c.OptionValues.Count' StringSplitOptions.None) : new string[] { " is 184.
Long Statement,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,Mono.Options,Option,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: if (worksheet != null) {  	var hssfSheet = worksheet as HSSFSheet;  	if (hssfSheet != null) {  		hssfSheet.SetAutoFilter (new CellRangeAddress (0' _rowIndex - 1' 0' _splitColumns.Length - 1));  	}  	ForEachColumn ((i' f) =>  {  		worksheet.AutoSizeColumn (i);  		// Units are 256 per character.  		// Maximum width is 255 characters.  		var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  		worksheet.SetColumnWidth (i' width);  	});  }  
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: if (worksheet != null) {  	var hssfSheet = worksheet as HSSFSheet;  	if (hssfSheet != null) {  		hssfSheet.SetAutoFilter (new CellRangeAddress (0' _rowIndex - 1' 0' _splitColumns.Length - 1));  	}  	ForEachColumn ((i' f) =>  {  		worksheet.AutoSizeColumn (i);  		// Units are 256 per character.  		// Maximum width is 255 characters.  		var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  		worksheet.SetColumnWidth (i' width);  	});  }  
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: if (worksheet != null) {  	var hssfSheet = worksheet as HSSFSheet;  	if (hssfSheet != null) {  		hssfSheet.SetAutoFilter (new CellRangeAddress (0' _rowIndex - 1' 0' _splitColumns.Length - 1));  	}  	ForEachColumn ((i' f) =>  {  		worksheet.AutoSizeColumn (i);  		// Units are 256 per character.  		// Maximum width is 255 characters.  		var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  		worksheet.SetColumnWidth (i' width);  	});  }  
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: ForEachColumn ((i' f) =>  {  	worksheet.AutoSizeColumn (i);  	// Units are 256 per character.  	// Maximum width is 255 characters.  	var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  	worksheet.SetColumnWidth (i' width);  });  
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: ForEachColumn ((i' f) =>  {  	worksheet.AutoSizeColumn (i);  	// Units are 256 per character.  	// Maximum width is 255 characters.  	var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  	worksheet.SetColumnWidth (i' width);  });  
Magic Number,NChanges.Tool,ExcelCommand,C:\repos\jdiamond_NChanges\NChanges.Tool\ExcelCommand.cs,FinalizeWorkSheet,The following statement contains a magic number: ForEachColumn ((i' f) =>  {  	worksheet.AutoSizeColumn (i);  	// Units are 256 per character.  	// Maximum width is 255 characters.  	var width = Math.Min (worksheet.GetColumnWidth (i) + 1024' 255 * 256);  	worksheet.SetColumnWidth (i' width);  });  
Magic Number,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	bool indent = false;  	string prefix = new string (' '' OptionWidth + 2);  	foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {  		if (indent)  			o.Write (prefix);  		o.WriteLine (line);  		indent = true;  	}  }  
Magic Number,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description' 80 - OptionWidth' 80 - OptionWidth - 2);  
Magic Number,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description' 80 - OptionWidth' 80 - OptionWidth - 2);  
Magic Number,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description' 80 - OptionWidth' 80 - OptionWidth - 2);  
Missing Default,Mono.Options,OptionSet,C:\repos\jdiamond_NChanges\NChanges.Tool\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
