Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProcessInput,Cyclomatic complexity of the method is 8
Complex Method,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,GetFullAddressFromBuffer,Cyclomatic complexity of the method is 14
Long Parameter List,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,The method has 6 parameters.
Long Statement,Rhythm.SSIS.Pipeline,GeoCodingService,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GeoCodingService.cs,BuildGeoCodeUri,The length of the statement  "	// for additional documentation' see: https://developers.google.com/maps/documentation/geocoding/index#GeocodingRequests " is 120.
Long Statement,Rhythm.SSIS.Pipeline,GeoCodingService,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GeoCodingService.cs,BuildGeoCodeUri,The length of the statement  "	return string.Format ("{0}?address={1}&sensor={2}"' GEO_CODE_BASE_URI' HttpUtility.UrlEncode (address)' lowercaseSensorFlag); " is 125.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (fullAddressColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (fullAddressColumnName.ID)); " is 141.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (address1ColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (address1ColumnName.ID)); " is 135.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (address2ColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (address2ColumnName.ID)); " is 135.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (cityColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (cityColumnName.ID)); " is 127.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (stateColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (stateColumnName.ID)); " is 129.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (zipColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (zipColumnName.ID)); " is 125.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (latitudeColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (latitudeColumnName.ID)); " is 135.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (longitudeColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (longitudeColumnName.ID)); " is 137.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProvideComponentProperties,The length of the statement  "	_propertyIndices.Add (locationColumnName.Name' ComponentMetaData.CustomPropertyCollection.FindObjectIndexByID (locationColumnName.ID)); " is 135.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,The length of the statement  "			ComponentMetaData.FireError (0' GetType ().Name' String.Format ("Columns required' but not found: {0}"' string.Join ("'"' neededColumns))' ""' 0' out Cancel); " is 158.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,The length of the statement  "			ComponentMetaData.FireError (0' GetType ().Name' String.Format ("Columns required' but not found: {0}"' string.Join ("'"' neededColumns))' ""' 0' out Cancel); " is 158.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,The length of the statement  "			ComponentMetaData.FireError (0' inputColumn.IdentificationString' String.Format (ErrorInvalidUsageType' inputColumn.Name)' ""' 0' out Cancel); " is 142.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,Validate,The length of the statement  "			ComponentMetaData.FireError (0' inputColumn.IdentificationString' String.Format (ErrorInvalidUsageType' inputColumn.Name)' ""' 0' out Cancel); " is 142.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,SetUsageType,The length of the statement  "	IDTSVirtualInputColumn100 virtualInputColumn = virtualInput.VirtualInputColumnCollection.GetVirtualInputColumnByLineageID (lineageID); " is 134.
Long Statement,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,IsExpectedDataType,The length of the statement  "	if (columnName.Equals (FullAddressColumnName) || columnName.Equals (Address1ColumnName) || columnName.Equals (Address2ColumnName) || columnName.Equals (CityColumnName) || columnName.Equals (StateColumnName) || columnName.Equals (ZipColumnName)) { " is 246.
Complex Conditional,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,IsExpectedDataType,The conditional expression  "columnName.Equals (FullAddressColumnName) || columnName.Equals (Address1ColumnName) || columnName.Equals (Address2ColumnName) || columnName.Equals (CityColumnName) || columnName.Equals (StateColumnName) || columnName.Equals (ZipColumnName)"  is complex.
Magic Number,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,PreExecute,The following statement contains a magic number: _tmpMemoryStream = new MemoryStream (10000);  
Magic Number,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProcessInput,The following statement contains a magic number: while (buffer.NextRow ()) {  	bool modified = false;  	string address = GetFullAddressFromBuffer (buffer);  	if (!string.IsNullOrWhiteSpace (address)) {  		var coordinates = geoCodingService.GeoCodeAddress (address);  		if (coordinates != null) {  			if (_columnIndices.ContainsKey (LatitudeColumnName)) {  				buffer.SetDecimal (_columnIndices [LatitudeColumnName]' coordinates.Latitude);  				modified = true;  			}  			if (_columnIndices.ContainsKey (LongitudeColumnName)) {  				buffer.SetDecimal (_columnIndices [LongitudeColumnName]' coordinates.Longitude);  				modified = true;  			}  			if (_columnIndices.ContainsKey (LocationColumnName)) {  				var pointTaggedText = new SqlChars (string.Format ("POINT({0} {1})"' coordinates.Longitude' coordinates.Latitude));  				var sqlGeography = SqlGeography.STPointFromText (pointTaggedText' 4326);  				_tmpMemoryStream.SetLength (0);  				sqlGeography.Write (_tmpBinaryWriter);  				_tmpBinaryWriter.Flush ();  				buffer.AddBlobData (_columnIndices [LocationColumnName]' _tmpMemoryStream.GetBuffer ()' (int)_tmpMemoryStream.Length);  				modified = true;  			}  		}  	}  	if (modified) {  		// send buffered row to output  		buffer.DirectRow (output.ID);  	}  }  
Magic Number,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProcessInput,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (address)) {  	var coordinates = geoCodingService.GeoCodeAddress (address);  	if (coordinates != null) {  		if (_columnIndices.ContainsKey (LatitudeColumnName)) {  			buffer.SetDecimal (_columnIndices [LatitudeColumnName]' coordinates.Latitude);  			modified = true;  		}  		if (_columnIndices.ContainsKey (LongitudeColumnName)) {  			buffer.SetDecimal (_columnIndices [LongitudeColumnName]' coordinates.Longitude);  			modified = true;  		}  		if (_columnIndices.ContainsKey (LocationColumnName)) {  			var pointTaggedText = new SqlChars (string.Format ("POINT({0} {1})"' coordinates.Longitude' coordinates.Latitude));  			var sqlGeography = SqlGeography.STPointFromText (pointTaggedText' 4326);  			_tmpMemoryStream.SetLength (0);  			sqlGeography.Write (_tmpBinaryWriter);  			_tmpBinaryWriter.Flush ();  			buffer.AddBlobData (_columnIndices [LocationColumnName]' _tmpMemoryStream.GetBuffer ()' (int)_tmpMemoryStream.Length);  			modified = true;  		}  	}  }  
Magic Number,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProcessInput,The following statement contains a magic number: if (coordinates != null) {  	if (_columnIndices.ContainsKey (LatitudeColumnName)) {  		buffer.SetDecimal (_columnIndices [LatitudeColumnName]' coordinates.Latitude);  		modified = true;  	}  	if (_columnIndices.ContainsKey (LongitudeColumnName)) {  		buffer.SetDecimal (_columnIndices [LongitudeColumnName]' coordinates.Longitude);  		modified = true;  	}  	if (_columnIndices.ContainsKey (LocationColumnName)) {  		var pointTaggedText = new SqlChars (string.Format ("POINT({0} {1})"' coordinates.Longitude' coordinates.Latitude));  		var sqlGeography = SqlGeography.STPointFromText (pointTaggedText' 4326);  		_tmpMemoryStream.SetLength (0);  		sqlGeography.Write (_tmpBinaryWriter);  		_tmpBinaryWriter.Flush ();  		buffer.AddBlobData (_columnIndices [LocationColumnName]' _tmpMemoryStream.GetBuffer ()' (int)_tmpMemoryStream.Length);  		modified = true;  	}  }  
Magic Number,Rhythm.SSIS.Pipeline,GoogleGeoCodePipelineComponent,C:\repos\rhythmagency_rhythm.ssis\trunk\Rhythm.SSIS\Rhythm.SSIS.Pipeline\GoogleGeoCodePipelineComponent.cs,ProcessInput,The following statement contains a magic number: if (_columnIndices.ContainsKey (LocationColumnName)) {  	var pointTaggedText = new SqlChars (string.Format ("POINT({0} {1})"' coordinates.Longitude' coordinates.Latitude));  	var sqlGeography = SqlGeography.STPointFromText (pointTaggedText' 4326);  	_tmpMemoryStream.SetLength (0);  	sqlGeography.Write (_tmpBinaryWriter);  	_tmpBinaryWriter.Flush ();  	buffer.AddBlobData (_columnIndices [LocationColumnName]' _tmpMemoryStream.GetBuffer ()' (int)_tmpMemoryStream.Length);  	modified = true;  }  
