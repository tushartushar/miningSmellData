Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,Cyclomatic complexity of the method is 12
Complex Method,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,MergeRouteValues,Cyclomatic complexity of the method is 8
Long Parameter List,AttributeRouting.Web.Mvc.Constraints,InboundHttpMethodConstraint,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Constraints\InboundHttpMethodConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,AttributeRouting.Web.Mvc.Constraints,OptionalRouteConstraint,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Constraints\OptionalRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,SubdomainAction,The method has 5 parameters. Parameters: urlHelper' actionName' controllerName' routeValues' protocol
Long Parameter List,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The method has 6 parameters. Parameters: urlHelper' routeName' actionName' controllerName' routeValues' schema
Long Parameter List,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,MergeRouteValues,The method has 5 parameters. Parameters: actionName' controllerName' implicitRouteValues' routeValues' includeImplicitMvcValues
Long Parameter List,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,AttributeRoute,The method has 5 parameters. Parameters: url' defaults' constraints' dataTokens' configuration
Long Statement,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The length of the statement  "            RouteValueDictionary values = MergeRouteValues(actionName' controllerName' urlHelper.RequestContext.RouteData.Values' routeValues' true); " is 137.
Long Statement,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The length of the statement  "            VirtualPathData virtualPathForArea = urlHelper.RouteCollection.GetVirtualPathForArea(urlHelper.RequestContext' routeName' values); " is 130.
Long Statement,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The length of the statement  "                string host = currentUrl.GetLeftPart(UriPartial.Authority).Replace(currentUrl.GetLeftPart(UriPartial.Scheme)' string.Empty); " is 124.
Long Statement,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The length of the statement  "                    if (!host.Equals("localhost"' StringComparison.InvariantCultureIgnoreCase) && !string.IsNullOrWhiteSpace(defaultSubdomain)) " is 123.
Long Statement,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,GetRouteData,The length of the statement  "            var requestedPath = GetCachedValue(httpContext' RequestedPathKey' () => httpContext.Request.AppRelativeCurrentExecutionFilePath.Substring(2) + httpContext.Request.PathInfo); " is 173.
Long Statement,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,GetRouteData,The length of the statement  "            if (!_visitor.ProcessQueryStringConstraints((constraint' parameterName) => ProcessConstraint(httpContext' constraint' parameterName' routeData.Values' RouteDirection.IncomingRequest))) " is 184.
Long Statement,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,GetRouteData,The length of the statement  "            var requestedSubdomain = GetCachedValue(httpContext' RequestedSubdomainKey' () => _configuration.SubdomainParser(httpContext.SafeGet(c => c.Request.Headers["host"]))); " is 167.
Long Statement,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,GetRouteData,The length of the statement  "            var currentUICultureName = GetCachedValue(httpContext' CurrentUICultureNameKey' () => _configuration.CurrentUICultureResolver(httpContext' routeData)); " is 151.
Magic Number,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The following statement contains a magic number: if (route != null && currentUrl != null && !string.IsNullOrWhiteSpace(currentUrl.OriginalString))              {                  //get the current domain via the current Uri.                  string host = currentUrl.GetLeftPart(UriPartial.Authority).Replace(currentUrl.GetLeftPart(UriPartial.Scheme)' string.Empty);                    IPAddress ip;                  //if the port exists in the host remove it so that we don't run into trouble with the IPAddress parsing                  if (host.Contains(":"))                  {                      host = host.Substring(0' host.IndexOf(":"' StringComparison.Ordinal));                  }                    //if an ip then no point in building a subdomain for it                  if (IPAddress.TryParse(host' out ip))                  {                      return string.Empty;                  }                    //save the current host for comparisons later                  string currentHost = host;                    //which protocol schema to use. i.e. http' https                  string scheme = schema ?? currentUrl.Scheme;                    //what is the current port. needed if non-standard                  int port = currentUrl.Port;                    //is the port a standard port?                  bool useDefaultPort = port == 80 || port == 443;                    //need the default subdomain incase we are going from one subdomain method to a non-subdomain method                  string defaultSubdomain = string.Empty;                  if (route.DataTokens.Any(x => x.Key.Equals("defaultSubdomain")))                  {                      defaultSubdomain = route.DataTokens["defaultSubdomain"].ToString();                  }                    //if the host contains a dot we need to remove the subdomain if it is in the list of ones to remove                  if (host.Contains("."))                  {                      //get all registered subdomains                      List<string> subdomains =                          urlHelper.RouteCollection.Where(x => x is IAttributeRoute)                                   .Cast<IAttributeRoute>()                                   .Where(x => x.Subdomain.HasValue())                                   .Select(x => x.Subdomain)                                   .Distinct()                                   .ToList();                        //also add the default subdomain from the current route                      if (!string.IsNullOrWhiteSpace(defaultSubdomain) && !subdomains.Contains(defaultSubdomain))                      {                          subdomains.Add(defaultSubdomain);                      }                        //strips subdomain information off of current (if matching a current one)                      string subDomainSection = host.Split('.')[0];                      foreach (                          string subdomain in                              subdomains.Where(                                  subdomain =>                                  subDomainSection.Equals(subdomain' StringComparison.InvariantCultureIgnoreCase)))                      {                          host = host.Replace(string.Format("{0}."' subdomain)' string.Empty);                          break;                      }                  }                    //if not a subdomain then don't build the url. instead build it to the default subdomain                  if (!string.IsNullOrWhiteSpace(route.Subdomain))                  {                      //if host already starts with subdomain then skip building the url                      if (!currentHost.StartsWith(route.Subdomain))                      {                          baseUrl = string.Format("{0}://{1}.{2}"' scheme' route.Subdomain' host);                      }                  }                  else                  {                      //no subdomain so we should add the default subdomain unless it is localhost                       var gotoSubdomain = string.Empty;                      if (!host.Equals("localhost"' StringComparison.InvariantCultureIgnoreCase) && !string.IsNullOrWhiteSpace(defaultSubdomain))                      {                          gotoSubdomain = string.Format("{0}."' defaultSubdomain);                      }                      baseUrl = string.Format("{0}://{1}{2}"' scheme' gotoSubdomain' host);                  }                    //not using a standard port so if the baseurl has a value then append on the port                  if (!string.IsNullOrWhiteSpace(baseUrl) && !useDefaultPort)                  {                      baseUrl = string.Format("{0}:{1}"' baseUrl' port);                  }              }
Magic Number,AttributeRouting.Web.Mvc.Extensions,UrlHelperExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Extensions\UrlHelperExtensions.cs,GetDomainBase,The following statement contains a magic number: if (route != null && currentUrl != null && !string.IsNullOrWhiteSpace(currentUrl.OriginalString))              {                  //get the current domain via the current Uri.                  string host = currentUrl.GetLeftPart(UriPartial.Authority).Replace(currentUrl.GetLeftPart(UriPartial.Scheme)' string.Empty);                    IPAddress ip;                  //if the port exists in the host remove it so that we don't run into trouble with the IPAddress parsing                  if (host.Contains(":"))                  {                      host = host.Substring(0' host.IndexOf(":"' StringComparison.Ordinal));                  }                    //if an ip then no point in building a subdomain for it                  if (IPAddress.TryParse(host' out ip))                  {                      return string.Empty;                  }                    //save the current host for comparisons later                  string currentHost = host;                    //which protocol schema to use. i.e. http' https                  string scheme = schema ?? currentUrl.Scheme;                    //what is the current port. needed if non-standard                  int port = currentUrl.Port;                    //is the port a standard port?                  bool useDefaultPort = port == 80 || port == 443;                    //need the default subdomain incase we are going from one subdomain method to a non-subdomain method                  string defaultSubdomain = string.Empty;                  if (route.DataTokens.Any(x => x.Key.Equals("defaultSubdomain")))                  {                      defaultSubdomain = route.DataTokens["defaultSubdomain"].ToString();                  }                    //if the host contains a dot we need to remove the subdomain if it is in the list of ones to remove                  if (host.Contains("."))                  {                      //get all registered subdomains                      List<string> subdomains =                          urlHelper.RouteCollection.Where(x => x is IAttributeRoute)                                   .Cast<IAttributeRoute>()                                   .Where(x => x.Subdomain.HasValue())                                   .Select(x => x.Subdomain)                                   .Distinct()                                   .ToList();                        //also add the default subdomain from the current route                      if (!string.IsNullOrWhiteSpace(defaultSubdomain) && !subdomains.Contains(defaultSubdomain))                      {                          subdomains.Add(defaultSubdomain);                      }                        //strips subdomain information off of current (if matching a current one)                      string subDomainSection = host.Split('.')[0];                      foreach (                          string subdomain in                              subdomains.Where(                                  subdomain =>                                  subDomainSection.Equals(subdomain' StringComparison.InvariantCultureIgnoreCase)))                      {                          host = host.Replace(string.Format("{0}."' subdomain)' string.Empty);                          break;                      }                  }                    //if not a subdomain then don't build the url. instead build it to the default subdomain                  if (!string.IsNullOrWhiteSpace(route.Subdomain))                  {                      //if host already starts with subdomain then skip building the url                      if (!currentHost.StartsWith(route.Subdomain))                      {                          baseUrl = string.Format("{0}://{1}.{2}"' scheme' route.Subdomain' host);                      }                  }                  else                  {                      //no subdomain so we should add the default subdomain unless it is localhost                       var gotoSubdomain = string.Empty;                      if (!host.Equals("localhost"' StringComparison.InvariantCultureIgnoreCase) && !string.IsNullOrWhiteSpace(defaultSubdomain))                      {                          gotoSubdomain = string.Format("{0}."' defaultSubdomain);                      }                      baseUrl = string.Format("{0}://{1}{2}"' scheme' gotoSubdomain' host);                  }                    //not using a standard port so if the baseurl has a value then append on the port                  if (!string.IsNullOrWhiteSpace(baseUrl) && !useDefaultPort)                  {                      baseUrl = string.Format("{0}:{1}"' baseUrl' port);                  }              }
Magic Number,AttributeRouting.Web.Mvc.Framework,AttributeRoute,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting.Web.Mvc\Framework\AttributeRoute.cs,GetRouteData,The following statement contains a magic number: var requestedPath = GetCachedValue(httpContext' RequestedPathKey' () => httpContext.Request.AppRelativeCurrentExecutionFilePath.Substring(2) + httpContext.Request.PathInfo);
