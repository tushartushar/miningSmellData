Implementation smell,Namespace,Class,File,Method,Description
Long Method,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteConstraints,The method has 135 lines of code.
Long Method,AttributeRouting.Logging,RouteLoggingInfo,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\RouteLoggingInfo.cs,GetRouteInfo,The method has 102 lines of code.
Complex Method,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteConstraints,Cyclomatic complexity of the method is 13
Complex Method,AttributeRouting.Helpers,ParsingExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Helpers\ParsingExtensions.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,AttributeRouting.Logging,RouteLoggingInfo,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\RouteLoggingInfo.cs,GetRouteInfo,Cyclomatic complexity of the method is 9
Complex Method,AttributeRouting.Logging,LogWriter,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\LogWriter.cs,LogRoute,Cyclomatic complexity of the method is 8
Long Parameter List,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteUrl,The method has 5 parameters. Parameters: routeUrl' routePrefix' areaUrl' defaults' routeSpec
Long Parameter List,AttributeRouting.Logging,RouteLoggingInfo,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\RouteLoggingInfo.cs,GetRouteInfo,The method has 6 parameters. Parameters: url' defaults' queryStringDefaults' constraints' queryStringConstraints' dataTokens
Long Identifier,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,,The length of the parameter DetokenizeUrlParamContentsRegex is 31.
Long Identifier,AttributeRouting.Framework,AttributeReflector,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\AttributeReflector.cs,BuildRouteSpecifications,The length of the parameter inheritActionsFromBaseController is 32.
Long Identifier,AttributeRouting.Helpers,ReflectionExtensions,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Helpers\ReflectionExtensions.cs,GetActionMethods,The length of the parameter inheritActionsFromBaseController is 32.
Long Statement,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteConstraints,The length of the statement  "            // - and query string route constraints (which will not work perfectly with the MS bits' and need special treatment by IAttributeRoute impls)." is 142.
Long Statement,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteDefaults,The length of the statement  "            // - and query string route defaults (which will not work perfectly with the MS bits' and need special treatment by IAttributeRoute impls). " is 139.
Long Statement,AttributeRouting.Framework,AttributeReflector,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\AttributeReflector.cs,BuildRouteSpecifications,The length of the statement  "                from routePrefixAttribute in routePrefixAttributes.DefaultIfEmpty(null).Take(routeAttribute.IgnoreRoutePrefix ? 1 : int.MaxValue) " is 129.
Magic Number,AttributeRouting.Framework,ThreeSectionSubdomainParser,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\ThreeSectionSubdomainParser.cs,Execute,The following statement contains a magic number: return sections.Length < 3                         ? null                         : String.Join("."' sections.Take(sections.Length - 2));
Magic Number,AttributeRouting.Framework,ThreeSectionSubdomainParser,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\ThreeSectionSubdomainParser.cs,Execute,The following statement contains a magic number: return sections.Length < 3                         ? null                         : String.Join("."' sections.Take(sections.Length - 2));
Magic Number,AttributeRouting.Framework,RouteBuilder,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\RouteBuilder.cs,CreateRouteConstraints,The following statement contains a magic number: foreach (var parameter in urlParameters)             {                 // Keep track of whether this param is optional or in the querystring'                  // because we wrap the final constraint if so.                 var parameterIsOptional = parameter.EndsWith("?");                 var parameterIsInQueryString = queryStringParameters.Contains(parameter);                  // If this is a path parameter and doesn't have a constraint' then skip it.                 if (!parameterIsInQueryString && !parameter.Contains(":"))                 {                     continue;                 }                  // Strip off everything related to defaults and break into sections.                 var cleanParameter = parameter.TrimEnd('?').Split('=').FirstOrDefault();                 var sections = cleanParameter.SplitAndTrim(":");                                  // Do not override default constraints                 var parameterName = sections.First();                 if (constraints.ContainsKey(parameterName))                 {                     continue;                 }                  // Add constraints for each inline definition                 var inlineConstraints = new List<object>();                 var constraintDefinitions = sections.Skip(1);                 foreach (var definition in constraintDefinitions)                 {                     string constraintName;                     object constraint;                      if (ConstraintParamsRegex.IsMatch(definition))                     {                         // Constraint of the form "firstName:string(50)"                         var indexOfOpenParen = definition.IndexOf('(');                         constraintName = definition.Substring(0' indexOfOpenParen);                                                  // Parse constraint params.                          // NOTE: Splitting on commas only applies to non-regex constraints.                         var constraintParamsRaw = definition.Substring(indexOfOpenParen + 1' definition.Length - indexOfOpenParen - 2);                         var constraintParams = constraintName.ValueEquals("regex")                                                    ? new[] { constraintParamsRaw }                                                    : constraintParamsRaw.SplitAndTrim("'");                          constraint = _routeConstraintFactory.CreateInlineRouteConstraint(constraintName' constraintParams);                     }                     else                     {                         // Constraint of the form "id:int"                         constraintName = definition;                         constraint = _routeConstraintFactory.CreateInlineRouteConstraint(constraintName);                     }                      if (constraint == null)                     {                         throw new AttributeRoutingException(                             "Could not find an available inline constraint for \"{0}\".".FormatWith(constraintName));                     }                      inlineConstraints.Add(constraint);                 }                  // Wrap constraints in the following priority:                  object finalConstraint;                  // 1. If more than one constraint' wrap in a compound constraint.                 if (inlineConstraints.Count > 1)                 {                     finalConstraint = _routeConstraintFactory.CreateCompoundRouteConstraint(inlineConstraints.ToArray());                 }                 else                 {                     finalConstraint = inlineConstraints.FirstOrDefault();                 }                  // 2. If the constraint is in the querystring' wrap in a query string constraint.                 if (parameterIsInQueryString)                 {                     finalConstraint = _routeConstraintFactory.CreateQueryStringRouteConstraint(finalConstraint);                 }                  // 3. If the constraint is optional' wrap in an optional constraint.                 if (parameterIsOptional)                 {                     finalConstraint = _routeConstraintFactory.CreateOptionalRouteConstraint(finalConstraint);                 }                  // Add the constraints to the appropriate collection.                 if (parameterIsInQueryString)                  {                      queryStringConstraints.Add(parameterName' finalConstraint);                  }                  else                  {                      constraints.Add(parameterName' finalConstraint);                  }             }
Magic Number,AttributeRouting.Framework,AttributeReflector,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Framework\AttributeReflector.cs,GetActionName,The following statement contains a magic number: if (isAsyncController && actionName.EndsWith("Async"))              {                  actionName = actionName.Substring(0' actionName.Length - 5);              }
Magic Number,AttributeRouting.Logging,LogWriter,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\LogWriter.cs,LogNumberOfRoutes,The following statement contains a magic number: writer.WriteLine(new String('='' 40));
Magic Number,AttributeRouting.Logging,LogWriter,C:\repos\mccalltd_AttributeRouting\src\AttributeRouting\Logging\LogWriter.cs,LogRoute,The following statement contains a magic number: writer.WriteLine(new String('-'' 40));
