Implementation smell,Namespace,Class,File,Method,Description
Long Method,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The method has 121 lines of code.
Long Parameter List,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,Initialize,The method has 5 parameters. Parameters: config' configuredPath' baseLuceneDirectory' analyzer' localStorageType
Long Parameter List,Merchello.Examine.Providers,BaseMerchelloIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\BaseMerchelloIndexer.cs,BaseMerchelloIndexer,The method has 5 parameters. Parameters: indexerData' indexPath' dataService' analyzer' async
Long Parameter List,Merchello.Examine.Providers,BaseMerchelloIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\BaseMerchelloIndexer.cs,BaseMerchelloIndexer,The method has 5 parameters. Parameters: indexerData' luceneDirectory' dataService' analyzer' async
Long Parameter List,Merchello.Examine.Providers,ProductIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\ProductIndexer.cs,ProductIndexer,The method has 5 parameters. Parameters: indexerData' indexPath' dataService' analyzer' async
Long Parameter List,Merchello.Examine.Providers,ProductIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\ProductIndexer.cs,ProductIndexer,The method has 5 parameters. Parameters: indexerData' luceneDirectory' dataService' analyzer' async
Long Statement,Merchello.Examine.LocalStorage,DeletePolicyTracker,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\DeletePolicyTracker.cs,GetPolicy,The length of the statement  "            var resolved = _directories.GetOrAdd(directory.GetLockID()' s => new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())); " is 133.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,Initialize,The length of the statement  "                                string.Format("Could not open an index reader' local temp storage index is empty or corrupt... retrying... {0}"' configuredPath)' " is 129.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,Initialize,The length of the statement  "                                string.Format("Could not open an index reader' local temp storage index is empty or corrupt... attempting to clear index files in local temp storage' will operate from main storage only {0}"' configuredPath)); " is 209.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,ClearLuceneDirFiles,The length of the statement  "                                LogHelper.Warn<LocalTempStorageIndexer>("The lock file could not be deleted but should be removed when the writer is disposed"); " is 128.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,ClearLuceneDirFiles,The length of the statement  "                LogHelper.Error<LocalTempStorageIndexer>("Could not clear corrupt index from main index folder' the index cannot be used"' ex); " is 127.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryCreateWriter,The length of the statement  "                LogHelper.WarnWithException<LocalTempStorageIndexer>("Could not create index writer with snapshot policy for copying... retrying..."' ex); " is 138.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryWaitForDirectoryUnlock,The length of the statement  "                LogHelper.Info<LocalTempStorageIndexer>("Could not acquire directory lock for {0} writer' retrying ...."' dir.ToString); " is 120.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                    LogHelper.Error<LocalTempStorageIndexer>("Could not create index writer with snapshot policy for copying' the index cannot be used"' writerAttempt.Exception); " is 158.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                        string.Format("Could not open an index reader' {0} is empty or corrupt... attempting to clear index files in master folder"' configuredPath)' " is 141.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                        LogHelper.Error<LocalTempStorageIndexer>("Could not create index writer with snapshot policy for copying' the index cannot be used"' writerAttempt.Exception); " is 158.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                                            LogHelper.Warn<LocalTempStorageIndexer>("The lock file could not be deleted but should be removed when the writer is disposed"); " is 128.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                                        LogHelper.Debug<LocalTempStorageIndexer>("Could not delete non synced index file file' index sync will continue but old index files will remain - this shouldn't affect indexing/searching operations. {0}"' () => ex.ToString()); " is 226.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                                LogHelper.Warn<LocalTempStorageIndexer>("Cannot sync index files from main storage' the temp file index is currently locked"); " is 126.
Long Statement,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,InitializeLocalIndexAndDirectory,The length of the statement  "                LogHelper.Info<LocalTempStorageIndexer>("Successfully sync'd main index to local temp storage for index: {0}"' () => configuredPath); " is 133.
Long Statement,Merchello.Examine,SearchHelper,C:\repos\Merchello_Merchello\src\Merchello.Examine\SearchHelper.cs,BuildCriteria,The length of the statement  "            var criteria = ExamineManager.Instance.SearchProviderCollection[providerName].CreateSearchCriteria(BooleanOperation.Or); " is 120.
Long Statement,Merchello.Examine,SearchHelper,C:\repos\Merchello_Merchello\src\Merchello.Examine\SearchHelper.cs,ToSearchTerms,The length of the statement  "            if (searchString.Contains(@"""") && (searchString.Count(t => t == '"') % 2 == 0)) // even number of quotes' more than zero " is 122.
Long Statement,Merchello.Examine.Providers,BaseMerchelloIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\BaseMerchelloIndexer.cs,OnIndexDeleted,The length of the statement  "            DataService.LogService.AddVerboseLog(-1' string.Format("Index deleted for term: {0} with value {1}"' e.DeletedTerm.Key' e.DeletedTerm.Value)); " is 142.
Long Statement,Merchello.Examine.Providers,BaseMerchelloIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\Providers\BaseMerchelloIndexer.cs,OnDuplicateFieldWarning,The length of the statement  "            DataService.LogService.AddInfoLog(nodeId' "Field \"" + fieldName + "\" is listed multiple times in the index set \"" + indexSetName + "\". Please ensure all names are unique"); " is 176.
Magic Number,Merchello.Examine.DataServices,CustomerDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\CustomerDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.CustomerService.GetPage(1' 100).Items                         : new CustomerService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.DataServices,CustomerDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\CustomerDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.CustomerService.GetPage(1' 100).Items                         : new CustomerService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.DataServices,InvoiceDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\InvoiceDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.InvoiceService.GetPage(1' 100).Items                         : new InvoiceService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.DataServices,InvoiceDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\InvoiceDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.InvoiceService.GetPage(1' 100).Items                         : new InvoiceService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.DataServices,OrderDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\OrderDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.OrderService.GetPage(1' 100).Items                         : new OrderService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.DataServices,OrderDataService,C:\repos\Merchello_Merchello\src\Merchello.Examine\DataServices\OrderDataService.cs,GetAll,The following statement contains a magic number: return MerchelloContext.HasCurrent                         ? MerchelloContext.Current.Services.OrderService.GetPage(1' 100).Items                         : new OrderService(Logger.CreateWithDefaultLog4NetConfiguration()).GetPage(1' 100).Items;
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,Initialize,The following statement contains a magic number: switch (localStorageType)              {                  case LocalStorageType.Sync:                      var success = InitializeLocalIndexAndDirectory(baseLuceneDirectory' analyzer' configuredPath);                        //create the custom lucene directory which will keep the main and temp FS's in sync                      LuceneDirectory = LocalTempStorageDirectoryTracker.Current.GetDirectory(                          new DirectoryInfo(TempPath)'                          baseLuceneDirectory'                          //flag to disable the mirrored folder if not successful                          (int)success >= 100);                        //If the master index simply doesn't exist' we don't continue to try to open anything since there will                      // actually be nothing there.                      if (success == InitializeDirectoryFlags.SuccessNoIndexExists)                      {                          return;                      }                                            //Try to open the reader' this will fail if the index is corrupt and we'll need to handle that                      var result = DelegateExtensions.RetryUntilSuccessOrMaxAttempts(i =>                      {                          try                          {                              using (IndexReader.Open(                                  LuceneDirectory'                                  DeletePolicyTracker.Current.GetPolicy(LuceneDirectory)'                                  true))                              {                              }                                return Attempt.Succeed(true);                          }                          catch (Exception ex)                          {                              LogHelper.WarnWithException<LocalTempStorageIndexer>(                                  string.Format("Could not open an index reader' local temp storage index is empty or corrupt... retrying... {0}"' configuredPath)'                                  ex);                          }                          return Attempt.Fail(false);                      }' 5' TimeSpan.FromSeconds(1));                        if (result.Success == false)                      {                          LogHelper.Warn<LocalTempStorageIndexer>(                                  string.Format("Could not open an index reader' local temp storage index is empty or corrupt... attempting to clear index files in local temp storage' will operate from main storage only {0}"' configuredPath));                            ClearFilesInPath(TempPath);                            //create the custom lucene directory which will keep the main and temp FS's in sync                          LuceneDirectory = LocalTempStorageDirectoryTracker.Current.GetDirectory(                              new DirectoryInfo(TempPath)'                              baseLuceneDirectory'                              //Disable mirrored index' we're kind of screwed here only use master index                              true);                      }                        break;                  case LocalStorageType.LocalOnly:                      if (System.IO.Directory.Exists(TempPath) == false)                      {                          System.IO.Directory.CreateDirectory(TempPath);                      }                      LuceneDirectory = DirectoryTracker.Current.GetDirectory(new DirectoryInfo(TempPath));                      break;                  default:                      throw new ArgumentOutOfRangeException("localStorageType");              }
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,Initialize,The following statement contains a magic number: switch (localStorageType)              {                  case LocalStorageType.Sync:                      var success = InitializeLocalIndexAndDirectory(baseLuceneDirectory' analyzer' configuredPath);                        //create the custom lucene directory which will keep the main and temp FS's in sync                      LuceneDirectory = LocalTempStorageDirectoryTracker.Current.GetDirectory(                          new DirectoryInfo(TempPath)'                          baseLuceneDirectory'                          //flag to disable the mirrored folder if not successful                          (int)success >= 100);                        //If the master index simply doesn't exist' we don't continue to try to open anything since there will                      // actually be nothing there.                      if (success == InitializeDirectoryFlags.SuccessNoIndexExists)                      {                          return;                      }                                            //Try to open the reader' this will fail if the index is corrupt and we'll need to handle that                      var result = DelegateExtensions.RetryUntilSuccessOrMaxAttempts(i =>                      {                          try                          {                              using (IndexReader.Open(                                  LuceneDirectory'                                  DeletePolicyTracker.Current.GetPolicy(LuceneDirectory)'                                  true))                              {                              }                                return Attempt.Succeed(true);                          }                          catch (Exception ex)                          {                              LogHelper.WarnWithException<LocalTempStorageIndexer>(                                  string.Format("Could not open an index reader' local temp storage index is empty or corrupt... retrying... {0}"' configuredPath)'                                  ex);                          }                          return Attempt.Fail(false);                      }' 5' TimeSpan.FromSeconds(1));                        if (result.Success == false)                      {                          LogHelper.Warn<LocalTempStorageIndexer>(                                  string.Format("Could not open an index reader' local temp storage index is empty or corrupt... attempting to clear index files in local temp storage' will operate from main storage only {0}"' configuredPath));                            ClearFilesInPath(TempPath);                            //create the custom lucene directory which will keep the main and temp FS's in sync                          LuceneDirectory = LocalTempStorageDirectoryTracker.Current.GetDirectory(                              new DirectoryInfo(TempPath)'                              baseLuceneDirectory'                              //Disable mirrored index' we're kind of screwed here only use master index                              true);                      }                        break;                  case LocalStorageType.LocalOnly:                      if (System.IO.Directory.Exists(TempPath) == false)                      {                          System.IO.Directory.CreateDirectory(TempPath);                      }                      LuceneDirectory = DirectoryTracker.Current.GetDirectory(new DirectoryInfo(TempPath));                      break;                  default:                      throw new ArgumentOutOfRangeException("localStorageType");              }
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryCreateWriterWithRetry,The following statement contains a magic number: var maxTries = 5;
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryCreateWriterWithRetry,The following statement contains a magic number: var result = DelegateExtensions.RetryUntilSuccessOrMaxAttempts((currentTry) =>              {                  //last try...                  if (currentTry == maxTries)                  {                      LogHelper.Info<LocalTempStorageIndexer>("Could not acquire index lock' attempting to force unlock it...");                      //unlock it!                      IndexWriter.Unlock(baseLuceneDirectory);                  }                    var writerAttempt = TryCreateWriter(baseLuceneDirectory' analyzer);                  if (writerAttempt) return writerAttempt;                  LogHelper.Info<LocalTempStorageIndexer>("Could not create writer on {0}' retrying ...."' baseLuceneDirectory.ToString);                  return Attempt<IndexWriter>.Fail();              }' 5' TimeSpan.FromSeconds(1));
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryWaitForDirectoryUnlock,The following statement contains a magic number: var maxTries = 5;
Magic Number,Merchello.Examine.LocalStorage,LocalTempStorageIndexer,C:\repos\Merchello_Merchello\src\Merchello.Examine\LocalStorage\LocalTempStorageIndexer.cs,TryWaitForDirectoryUnlock,The following statement contains a magic number: var result = DelegateExtensions.RetryUntilSuccessOrMaxAttempts((currentTry) =>              {                  //last try...                  if (currentTry == maxTries)                  {                      LogHelper.Info<LocalTempStorageIndexer>("Could not acquire directory lock' attempting to force unlock it...");                      //unlock it!                      IndexWriter.Unlock(dir);                  }                    if (IndexWriter.IsLocked(dir) == false) return Attempt.Succeed(true);                  LogHelper.Info<LocalTempStorageIndexer>("Could not acquire directory lock for {0} writer' retrying ...."' dir.ToString);                  return Attempt<bool>.Fail();              }' 5' TimeSpan.FromSeconds(1));
Magic Number,Merchello.Examine,SearchHelper,C:\repos\Merchello_Merchello\src\Merchello.Examine\SearchHelper.cs,ToSearchTerms,The following statement contains a magic number: if (searchString.Contains(@"""") && (searchString.Count(t => t == '"') % 2 == 0)) // even number of quotes' more than zero              {                  // look for any content between quotes                  var quoteRegex = new Regex(@""".+?""");                    foreach (Match item in quoteRegex.Matches(searchString))                  {                      terms.Add(new SearchTerm() { Term = item.Value.Replace('"'' ' ').Trim()' SearchTermType = SearchTermType.MultiWord });                        // remove them from search string for subsequent parsing                      searchString = Regex.Replace(searchString' item.Value' string.Empty);                  }              }
Missing Default,Merchello.Examine,SearchHelper,C:\repos\Merchello_Merchello\src\Merchello.Examine\SearchHelper.cs,BuildQuery,The following switch statement is missing a default case: switch (t.SearchTermType)                  {                      case SearchTermType.SingleWord:                          criteria.GroupedOr(                              textFields'                              new[] { t.Term.Fuzzy() });                          break;                      case SearchTermType.MultiWord:                          criteria.GroupedOr(                              textFields'                              new[] { t.Term.MultipleCharacterWildcard() });                          break;                  }
