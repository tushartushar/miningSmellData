Implementation smell,Namespace,Class,File,Method,Description
Long Method,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,The method has 114 lines of code.
Long Method,Merchello.Core.Persistence.Querying,BaseExpressionHelper<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Querying\BaseExpressionHelper.cs,VisitMethodCall,The method has 139 lines of code.
Complex Method,Merchello.Core,ExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ExpressionHelper.cs,IsMethodSignatureEqualTo,Cyclomatic complexity of the method is 9
Complex Method,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,ExecuteBatchUpdate,Cyclomatic complexity of the method is 9
Complex Method,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,SafeRemoveSharedOptionsFromProduct,Cyclomatic complexity of the method is 10
Complex Method,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,SaveProductAttributes,Cyclomatic complexity of the method is 8
Complex Method,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,PersistNewItems,Cyclomatic complexity of the method is 9
Complex Method,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,Cyclomatic complexity of the method is 15
Complex Method,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveDetachedContents,Cyclomatic complexity of the method is 10
Complex Method,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,EnsureVariants,Cyclomatic complexity of the method is 8
Complex Method,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,Cyclomatic complexity of the method is 32
Complex Method,Merchello.Core.Services,ShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipmentService.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,Merchello.Core.Services,ShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipmentService.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,Merchello.Core.Gateways.Notification.Monitors,OrderConfirmationMonitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Monitors\OrderConfirmationMonitor.cs,OnNext,Cyclomatic complexity of the method is 10
Complex Method,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,Cyclomatic complexity of the method is 15
Complex Method,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,InitializeBaseData,Cyclomatic complexity of the method is 8
Complex Method,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,Cyclomatic complexity of the method is 10
Complex Method,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,Cyclomatic complexity of the method is 8
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CreateCustomerAddress,The method has 5 parameters. Parameters: customer' merchelloContext' address' label' addressType
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetPagedEntities,The method has 5 parameters. Parameters: collection' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetPagedEntities,The method has 5 parameters. Parameters: collection' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 5 parameters. Parameters: invoice' payment' paymentGatewayMethod' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 5 parameters. Parameters: invoice' payment' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 6 parameters. Parameters: invoice' merchelloContext' payment' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 5 parameters. Parameters: invoice' payment' paymentGatewayMethod' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 5 parameters. Parameters: invoice' payment' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 6 parameters. Parameters: invoice' merchelloContext' payment' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,VoidPayment,The method has 5 parameters. Parameters: invoice' merchelloContext' payment' paymentMethodKey' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddItem,The method has 6 parameters. Parameters: container' lineItemType' name' sku' quantity' amount
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddItem,The method has 7 parameters. Parameters: container' lineItemType' name' sku' quantity' amount' extendedData
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 5 parameters. Parameters: payment' invoice' paymentGatewayMethod' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 5 parameters. Parameters: payment' invoice' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,CapturePayment,The method has 6 parameters. Parameters: payment' merchelloContext' invoice' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 5 parameters. Parameters: payment' invoice' paymentGatewayMethod' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 5 parameters. Parameters: payment' invoice' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RefundPayment,The method has 6 parameters. Parameters: payment' merchelloContext' invoice' paymentMethodKey' amount' args
Long Parameter List,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,VoidPayment,The method has 5 parameters. Parameters: payment' merchelloContext' invoice' paymentMethodKey' args
Long Parameter List,Merchello.Core,TypeHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\TypeHelper.cs,GetProperty,The method has 6 parameters. Parameters: type' name' mustRead' mustWrite' includeIndexed' caseSensitive
Long Parameter List,Merchello.Core.Builders,ShipmentBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\ShipmentBuilderChain.cs,ShipmentBuilderChain,The method has 8 parameters. Parameters: merchelloContext' order' keysToShip' shipMethodKey' shipmentStatusKey' trackingNumber' trackingUrl' carrier
Long Parameter List,Merchello.Core.Cache,IPagedKeyQueryCache,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\IPagedKeyQueryCache.cs,GetPagedQueryCacheKey,The method has 6 parameters. Parameters: methodName' page' itemsPerPage' sortBy' sortDirection' args
Long Parameter List,Merchello.Core.Cache,PagedKeyQueryCache,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\PagedKeyQueryCache.cs,GetPagedQueryCacheKey,The method has 6 parameters. Parameters: methodName' page' itemsPerPage' sortBy' sortDirection' args
Long Parameter List,Merchello.Core.Cache,CacheKeys,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\CacheKeys.cs,GetPagedKeysCacheKey,The method has 6 parameters. Parameters: methodName' page' itemsPerPage' orderExpression' sortDirection' args
Long Parameter List,Merchello.Core.Cache,NullCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\NullCacheProvider.cs,GetCacheItem,The method has 7 parameters. Parameters: cacheKey' getCacheItem' timeout' isSliding' priority' removedCallback' dependentFiles
Long Parameter List,Merchello.Core.Cache,NullCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\NullCacheProvider.cs,InsertCacheItem,The method has 7 parameters. Parameters: cacheKey' getCacheItem' timeout' isSliding' priority' removedCallback' dependentFiles
Long Parameter List,Merchello.Core.Cache,ObjectCacheRuntimeCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\ObjectCacheRuntimeCacheProvider.cs,GetCacheItem,The method has 7 parameters. Parameters: cacheKey' getCacheItem' timeout' isSliding' priority' removedCallback' dependentFiles
Long Parameter List,Merchello.Core.Cache,ObjectCacheRuntimeCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\ObjectCacheRuntimeCacheProvider.cs,InsertCacheItem,The method has 7 parameters. Parameters: cacheKey' getCacheItem' timeout' isSliding' priority' removedCallback' dependentFiles
Long Parameter List,Merchello.Core.EntityCollections,CachedQueryableEntityCollectionProviderBase<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\CachedQueryableEntityCollectionProviderBase{T}.cs,GetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,CachedQueryableEntityCollectionProviderBase<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\CachedQueryableEntityCollectionProviderBase{T}.cs,GetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,CachedQueryableEntityCollectionProviderBase<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\CachedQueryableEntityCollectionProviderBase{T}.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,CachedQueryableEntityCollectionProviderBase<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\CachedQueryableEntityCollectionProviderBase{T}.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,EntityCollectionProviderAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\EntityCollectionProviderAttribute.cs,EntityCollectionProviderAttribute,The method has 7 parameters. Parameters: key' entityTfKey' name' description' managesUniqueCollection' localizedNameKey' editorView
Long Parameter List,Merchello.Core.EntityCollections,ICachedQueryableEntityCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ICachedQueryableEntityCollectionProvider.cs,GetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,ProductFilterGroupProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ProductFilterProviderBase.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,ProductFilterGroupProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ProductFilterProviderBase.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,StaticProductCollectionProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\StaticProductCollectionProviderBase.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections,StaticProductCollectionProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\StaticProductCollectionProviderBase.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicCancelledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicCancelledOrderCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicCancelledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicCancelledOrderCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicFulfilledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicFulfilledOrderCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicFulfilledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicFulfilledOrderCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicOpenOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicOpenOrderCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicOpenOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicOpenOrderCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicUnfulfilledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicUnfulfilledOrderCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicUnfulfilledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicUnfulfilledOrderCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicPartiallyPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPartiallyPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicPartiallyPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPartiallyPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicUnpaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicUnpaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,DynamicUnpaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicUnpaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,StaticCustomerCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticCustomerCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,StaticCustomerCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticCustomerCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,StaticInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticInvoiceCollectionProvider.cs,PerformGetPagedEntityKeys,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.EntityCollections.Providers,StaticInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The method has 5 parameters. Parameters: args' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Models,Invoice,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\Invoice.cs,Invoice,The method has 5 parameters. Parameters: invoiceStatus' billToAddress' lineItemCollection' orders' notes
Long Parameter List,Merchello.Core.Models,InvoiceLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\InvoiceLineItem.cs,InvoiceLineItem,The method has 5 parameters. Parameters: lineItemType' name' sku' quantity' price
Long Parameter List,Merchello.Core.Models,InvoiceLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\InvoiceLineItem.cs,InvoiceLineItem,The method has 6 parameters. Parameters: lineItemType' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,InvoiceLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\InvoiceLineItem.cs,InvoiceLineItem,The method has 6 parameters. Parameters: lineItemTfKey' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,ItemCacheLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ItemCacheLineItem.cs,ItemCacheLineItem,The method has 5 parameters. Parameters: lineItemType' name' sku' quantity' price
Long Parameter List,Merchello.Core.Models,ItemCacheLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ItemCacheLineItem.cs,ItemCacheLineItem,The method has 6 parameters. Parameters: lineItemType' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,ItemCacheLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ItemCacheLineItem.cs,ItemCacheLineItem,The method has 6 parameters. Parameters: lineItemTfKey' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,LineItemBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\LineItemBase.cs,LineItemBase,The method has 5 parameters. Parameters: lineItemType' name' sku' quantity' price
Long Parameter List,Merchello.Core.Models,LineItemBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\LineItemBase.cs,LineItemBase,The method has 6 parameters. Parameters: lineItemType' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,LineItemBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\LineItemBase.cs,LineItemBase,The method has 6 parameters. Parameters: lineItemTfKey' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,OrderLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\OrderLineItem.cs,OrderLineItem,The method has 5 parameters. Parameters: lineItemType' name' sku' quantity' price
Long Parameter List,Merchello.Core.Models,OrderLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\OrderLineItem.cs,OrderLineItem,The method has 6 parameters. Parameters: lineItemType' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,OrderLineItem,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\OrderLineItem.cs,OrderLineItem,The method has 6 parameters. Parameters: lineItemTfKey' name' sku' quantity' price' extendedData
Long Parameter List,Merchello.Core.Models,ProductBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductBase.cs,ProductBase,The method has 5 parameters. Parameters: name' sku' price' catalogInventoryCollection' detachedContents
Long Parameter List,Merchello.Core.Models,ProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductVariant.cs,ProductVariant,The method has 5 parameters. Parameters: productKey' attributes' name' sku' price
Long Parameter List,Merchello.Core.Models,ProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductVariant.cs,ProductVariant,The method has 6 parameters. Parameters: productKey' attributes' catalogInventoryCollection' name' sku' price
Long Parameter List,Merchello.Core.Models,ProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductVariant.cs,ProductVariant,The method has 7 parameters. Parameters: productKey' attributes' catalogInventoryCollection' master' name' sku' price
Long Parameter List,Merchello.Core.Models,ProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductVariant.cs,ProductVariant,The method has 8 parameters. Parameters: productKey' attributes' catalogInventoryCollection' detachedContents' master' name' sku' price
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysThatExistInAllCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysThatExistInAllCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysNotInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysNotInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysThatExistInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetKeysThatExistInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPortForwardProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPortForwardProductRepository.cs,GetByAdvancedSearch,The method has 8 parameters. Parameters: collectionKey' includeFields' term' manufacturer' page' itemsPerPage' orderExpression' direction
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetByAdvancedSearch,The method has 8 parameters. Parameters: collectionKey' includeFields' term' manufacturer' page' itemsPerPage' orderExpression' direction
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,ProductRepository,The method has 6 parameters. Parameters: work' cache' logger' sqlSyntax' productVariantRepository' productOptionRepository
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetPagedKeys,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionName' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceName' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionNames' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceNames' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInPriceRange,The method has 6 parameters. Parameters: min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInPriceRange,The method has 7 parameters. Parameters: min' max' taxModifier' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysByBarcode,The method has 5 parameters. Parameters: barcode' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysByBarcode,The method has 5 parameters. Parameters: barcodes' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInStock,The method has 5 parameters. Parameters: page' itemsPerPage' orderExpression' sortDirection' includeAllowOutOfStockPurchase
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetEntitiesThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetEntitiesThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetPagedKeys,The method has 5 parameters. Parameters: page' itemsPerPage' sql' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetDtoPage,The method has 5 parameters. Parameters: page' itemsPerPage' sql' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductOptionRepository.cs,GetPage,The method has 6 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,MerchelloBulkOperationRepository,The method has 5 parameters. Parameters: work' cache' logger' sqlSyntax' factory
Long Parameter List,Merchello.Core.Persistence.Repositories,NoteRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\NoteRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,AuditLogRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\AuditLogRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,EntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\EntityCollectionRepository.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IEntityCollectionRepository.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IOfferSettingsRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IOfferSettingsRepository.cs,Search,The method has 5 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPagedRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPagedRepository.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPagedRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPagedRepository.cs,GetPagedKeys,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IPagedRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IPagedRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetEntitiesThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetEntitiesThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysNotInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysNotInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysThatExistInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IStaticEntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IStaticEntityCollectionRepository{T}.cs,GetKeysThatExistInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,OfferRedeemedRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OfferRedeemedRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,OfferSettingsRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OfferSettingsRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,OfferSettingsRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OfferSettingsRepository.cs,Search,The method has 5 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetPagedKeys,The method has 5 parameters. Parameters: page' itemsPerPage' query' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetPagedDtoCacheKey,The method has 6 parameters. Parameters: methodName' page' itemsPerPage' orderExpression' sortDirection' args
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetPagedKeys,The method has 5 parameters. Parameters: page' itemsPerPage' sql' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetDtoPage,The method has 5 parameters. Parameters: page' itemsPerPage' sql' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,ProductOptionRepository,The method has 5 parameters. Parameters: work' cache' logger' sqlSyntax' detachedContentTypeRepository
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetPage,The method has 6 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Persistence.Repositories,OrderRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OrderRepository.cs,OrderRepository,The method has 5 parameters. Parameters: work' cache' orderLineItemRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,OrderRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OrderRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,CustomerRepository,The method has 6 parameters. Parameters: work' cache' customerAddressRepository' noteRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysNotInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysNotInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysThatExistInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetKeysThatExistInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetEntitiesThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetEntitiesThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoicesMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoicesMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoicesMatchingOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoicesMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoicesMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IInvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IInvoiceRepository.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IItemCacheRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IItemCacheRepository.cs,GetCustomerItemCachePage,The method has 7 parameters. Parameters: itemCacheTfKey' startDate' endDate' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionName' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceName' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceNames' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionNames' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysInPriceRange,The method has 6 parameters. Parameters: min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysInPriceRange,The method has 7 parameters. Parameters: min' max' taxModifier' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysByBarcode,The method has 5 parameters. Parameters: barcode' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysByBarcode,The method has 5 parameters. Parameters: barcodes' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysInStock,The method has 5 parameters. Parameters: page' itemsPerPage' orderExpression' sortDirection' includeAllowOutOfStockPurchase
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,InvoiceRepository,The method has 7 parameters. Parameters: work' cache' invoiceLineItemRepository' orderRepository' noteRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,SearchKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,SearchKeys,The method has 7 parameters. Parameters: searchTerm' startDate' endDate' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysNotInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysNotInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysThatExistInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetKeysThatExistInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetEntitiesThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetEntitiesThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoicesMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoicesMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoicesMatchingOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoicesMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoicesMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ItemCacheRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ItemCacheRepository.cs,ItemCacheRepository,The method has 5 parameters. Parameters: work' cache' itemCacheLineItemRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,ItemCacheRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ItemCacheRepository.cs,GetCustomerItemCachePage,The method has 7 parameters. Parameters: itemCacheTfKey' startDate' endDate' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ItemCacheRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ItemCacheRepository.cs,GetPageKeys,The method has 7 parameters. Parameters: itemCacheTfKey' startDate' endDate' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,ProductVariantRepository,The method has 5 parameters. Parameters: work' cache' logger' sqlSyntax' productOptionRepository
Long Parameter List,Merchello.Core.Persistence.Repositories,ShipCountryRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipCountryRepository.cs,ShipCountryRepository,The method has 5 parameters. Parameters: work' cache' storeSettingService' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,ShipmentRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipmentRepository.cs,ShipmentRepository,The method has 5 parameters. Parameters: work' cache' orderLineItemRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Persistence.Repositories,WarehouseRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\WarehouseRepository.cs,WarehouseRepository,The method has 5 parameters. Parameters: work' cache' warehouseCatalogRepository' logger' sqlSyntax
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysThatExistInAllCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysThatExistInAllCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysNotInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysNotInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysThatExistInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services.Interfaces,IProductQueryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductQueryService.cs,GetKeysThatExistInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The method has 7 parameters. Parameters: collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The method has 8 parameters. Parameters: collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetByAdvancedSearch,The method has 8 parameters. Parameters: collectionKey' includeFields' term' manufacturer' page' itemsPerPage' orderExpression' direction
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,ProductService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' productVariantService
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceNames' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionName' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysWithOption,The method has 6 parameters. Parameters: optionName' choiceName' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysWithOption,The method has 5 parameters. Parameters: optionNames' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysInPriceRange,The method has 6 parameters. Parameters: min' max' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysInPriceRange,The method has 7 parameters. Parameters: min' max' taxModifier' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsByBarcode,The method has 5 parameters. Parameters: barcode' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsByBarcode,The method has 5 parameters. Parameters: barcodes' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysByManufacturer,The method has 5 parameters. Parameters: manufacturer' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysInStock,The method has 5 parameters. Parameters: page' itemsPerPage' sortBy' sortDirection' includeAllowOutOfStockPurchase
Long Parameter List,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetPagedKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,AppliedPaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AppliedPaymentService.cs,CreateAppliedPaymentWithKey,The method has 6 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount' raiseEvents
Long Parameter List,Merchello.Core.Services,AppliedPaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AppliedPaymentService.cs,CreateAppliedPaymentWithKey,The method has 6 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentTfKey' description' amount' raiseEvents
Long Parameter List,Merchello.Core.Services,IProductOptionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductOptionService.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Services,IProductOptionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductOptionService.cs,GetPage,The method has 6 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Services,NoteService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\NoteService.cs,GetNotesByEntityTfKey,The method has 5 parameters. Parameters: entityTfKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The method has 5 parameters. Parameters: entityKey' entityType' message' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The method has 6 parameters. Parameters: entityKey' entityType' message' extendedData' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The method has 6 parameters. Parameters: entityKey' entityTfKey' message' extendedData' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,GetAuditLogsByEntityTfKey,The method has 5 parameters. Parameters: entityTfKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The method has 5 parameters. Parameters: entityKey' entityTfKey' message' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,EntityCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\EntityCollectionService.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IAppliedPaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IAppliedPaymentService.cs,CreateAppliedPaymentWithKey,The method has 6 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount' raiseEvents
Long Parameter List,Merchello.Core.Services,INoteService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\INoteService.cs,GetNotesByEntityTfKey,The method has 5 parameters. Parameters: entityTfKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IAuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IAuditLogService.cs,CreateAuditLogWithKey,The method has 5 parameters. Parameters: entityKey' entityType' message' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,IAuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IAuditLogService.cs,CreateAuditLogWithKey,The method has 6 parameters. Parameters: entityKey' entityType' message' extendedData' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,IAuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IAuditLogService.cs,CreateAuditLogWithKey,The method has 6 parameters. Parameters: entityKey' entityTfKey' message' extendedData' isError' raiseEvents
Long Parameter List,Merchello.Core.Services,IAuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IAuditLogService.cs,GetAuditLogsByEntityTfKey,The method has 5 parameters. Parameters: entityTfKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IEntityCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IEntityCollectionService.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,INotificationMessageService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\INotificationMessageService.cs,CreateNotificationMethodWithKey,The method has 7 parameters. Parameters: methodKey' name' description' fromAddress' recipients' bodyText' raiseEvents
Long Parameter List,Merchello.Core.Services,IOfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IOfferSettingsService.cs,CreateOfferSettings,The method has 5 parameters. Parameters: name' offerCode' offerProviderKey' componentDefinitions' raiseEvents
Long Parameter List,Merchello.Core.Services,IOfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IOfferSettingsService.cs,CreateOfferSettingsWithKey,The method has 5 parameters. Parameters: name' offerCode' offerProviderKey' componentDefinitions' raiseEvents
Long Parameter List,Merchello.Core.Services,IOfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IOfferSettingsService.cs,GetPage,The method has 5 parameters. Parameters: filterTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IPaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IPaymentService.cs,ApplyPaymentToInvoice,The method has 6 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount' raiseEvents
Long Parameter List,Merchello.Core.Services,IStaticCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IStaticCollectionService{T}.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IStaticCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IStaticCollectionService{T}.cs,GetProductsThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IStaticCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IStaticCollectionService{T}.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IStaticCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IStaticCollectionService{T}.cs,GetProductsThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,NotificationMessageService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\NotificationMessageService.cs,CreateNotificationMethodWithKey,The method has 7 parameters. Parameters: methodKey' name' description' fromAddress' recipients' bodyText' raiseEvents
Long Parameter List,Merchello.Core.Services,OfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OfferSettingsService.cs,CreateOfferSettings,The method has 5 parameters. Parameters: name' offerCode' offerProviderKey' componentDefinitions' raiseEvents
Long Parameter List,Merchello.Core.Services,OfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OfferSettingsService.cs,CreateOfferSettingsWithKey,The method has 5 parameters. Parameters: name' offerCode' offerProviderKey' componentDefinitions' raiseEvents
Long Parameter List,Merchello.Core.Services,OfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OfferSettingsService.cs,GetPage,The method has 6 parameters. Parameters: filterTerm' page' itemsPerPage' sortBy' sortDirection' activeOnly
Long Parameter List,Merchello.Core.Services,OfferSettingsService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OfferSettingsService.cs,GetPage,The method has 5 parameters. Parameters: filterTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,OrderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OrderService.cs,OrderService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' storeSettingService' shipmentService
Long Parameter List,Merchello.Core.Services,OrderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OrderService.cs,OrderService,The method has 6 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' storeSettingService' shipmentService
Long Parameter List,Merchello.Core.Services,OrderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OrderService.cs,GetPage,The method has 5 parameters. Parameters: query' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,PageCachedServiceBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PageCachedServiceBase.cs,GetPagedKeys,The method has 6 parameters. Parameters: repository' query' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,PageCachedServiceBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PageCachedServiceBase.cs,Search,The method has 6 parameters. Parameters: repository' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,PaymentMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentMethodService.cs,CreatePaymentMethodWithKey,The method has 5 parameters. Parameters: providerKey' name' description' paymentCode' raiseEvents
Long Parameter List,Merchello.Core.Services,PaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentService.cs,PaymentService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' appliedPaymentService
Long Parameter List,Merchello.Core.Services,PaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentService.cs,ApplyPaymentToInvoice,The method has 6 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount' raiseEvents
Long Parameter List,Merchello.Core.Services,ProductOptionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductOptionService.cs,GetPage,The method has 5 parameters. Parameters: page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Services,ProductOptionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductOptionService.cs,GetPage,The method has 6 parameters. Parameters: term' page' itemsPerPage' sortBy' sortDirection' sharedOnly
Long Parameter List,Merchello.Core.Services,TaxMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\TaxMethodService.cs,TaxMethodService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' storeSettingService
Long Parameter List,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,GatewayProviderService,The method has 13 parameters. Parameters: logger' repositoryFactory' shipMethodService' shipRateTierService' shipCountryService' invoiceService' orderService' taxMethodService' paymentService' paymentMethodService' notificationMethodService' notificationMessageService' warehouseService
Long Parameter List,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,GatewayProviderService,The method has 14 parameters. Parameters: provider' repositoryFactory' logger' shipMethodService' shipRateTierService' shipCountryService' invoiceService' orderService' taxMethodService' paymentService' paymentMethodService' notificationMethodService' notificationMessageService' warehouseService
Long Parameter List,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,GatewayProviderService,The method has 15 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' shipMethodService' shipRateTierService' shipCountryService' invoiceService' orderService' taxMethodService' paymentService' paymentMethodService' notificationMethodService' notificationMessageService' warehouseService
Long Parameter List,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,ApplyPaymentToInvoice,The method has 5 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount
Long Parameter List,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,CreateNotificationMessageWithKey,The method has 6 parameters. Parameters: methodKey' name' description' fromAddress' recipients' bodyText
Long Parameter List,Merchello.Core.Services,IGatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IGatewayProviderService.cs,ApplyPaymentToInvoice,The method has 5 parameters. Parameters: paymentKey' invoiceKey' appliedPaymentType' description' amount
Long Parameter List,Merchello.Core.Services,IGatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IGatewayProviderService.cs,CreateNotificationMessageWithKey,The method has 6 parameters. Parameters: methodKey' name' description' fromAddress' recipients' bodyText
Long Parameter List,Merchello.Core.Services,IItemCacheService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IItemCacheService.cs,GetCustomerItemCachePage,The method has 7 parameters. Parameters: itemCacheType' startDate' endDate' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,IProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IProductVariantService.cs,CreateProductVariantWithKey,The method has 6 parameters. Parameters: product' name' sku' price' attributes' raiseEvents
Long Parameter List,Merchello.Core.Services,IShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\Interfaces\IShipmentService.cs,CreateShipment,The method has 5 parameters. Parameters: shipmentStatus' origin' destination' items' raiseEvents
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,InvoiceService,The method has 5 parameters. Parameters: repositoryFactory' logger' appliedPaymentService' orderService' storeSettingService
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,InvoiceService,The method has 6 parameters. Parameters: provider' repositoryFactory' logger' appliedPaymentService' orderService' storeSettingService
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,InvoiceService,The method has 7 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' appliedPaymentService' orderService' storeSettingService
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetProductsThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetProductsThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingTermNotInvoiceStatus,The method has 6 parameters. Parameters: searchTerm' invoiceStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 5 parameters. Parameters: orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoiceKeysMatchingTermNotOrderStatus,The method has 6 parameters. Parameters: searchTerm' orderStatusKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetPagedKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetPagedKeys,The method has 7 parameters. Parameters: searchTerm' startDate' endDate' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetPagedKeys,The method has 5 parameters. Parameters: query' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ItemCacheService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ItemCacheService.cs,GetCustomerItemCachePage,The method has 7 parameters. Parameters: itemCacheType' startDate' endDate' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariantWithKey,The method has 6 parameters. Parameters: product' name' sku' price' attributes' raiseEvents
Long Parameter List,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The method has 6 parameters. Parameters: product' variants' name' sku' price' attributes
Long Parameter List,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,ShipCountryService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' storeSettingService
Long Parameter List,Merchello.Core.Services,ShipMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipMethodService.cs,CreateShipMethodWithKey,The method has 5 parameters. Parameters: providerKey' shipCountry' name' serviceCode' raiseEvents
Long Parameter List,Merchello.Core.Services,ShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipmentService.cs,ShipmentService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' storeSettingService
Long Parameter List,Merchello.Core.Services,ShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipmentService.cs,CreateShipment,The method has 5 parameters. Parameters: shipmentStatus' origin' destination' items' raiseEvents
Long Parameter List,Merchello.Core.Services,WarehouseCatalogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\WarehouseCatalogService.cs,WarehouseCatalogService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' productVariantService
Long Parameter List,Merchello.Core.Services,WarehouseService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\WarehouseService.cs,WarehouseService,The method has 5 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' warehouseCatalogService
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,CustomerService,The method has 6 parameters. Parameters: repositoryFactory' logger' anonymousCustomerService' customerAddressService' invoiceService' paymentService
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,CustomerService,The method has 7 parameters. Parameters: provider' repositoryFactory' logger' anonymousCustomerService' customerAddressService' invoiceService' paymentService
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,CustomerService,The method has 8 parameters. Parameters: provider' repositoryFactory' logger' eventMessagesFactory' anonymousCustomerService' customerAddressService' invoiceService' paymentService
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetProductsThatExistInAllCollections,The method has 5 parameters. Parameters: collectionKeys' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetProductsThatExistInAllCollections,The method has 6 parameters. Parameters: collectionKeys' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetKeysFromCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetKeysFromCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetKeysNotInCollection,The method has 5 parameters. Parameters: collectionKey' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetKeysNotInCollection,The method has 6 parameters. Parameters: collectionKey' searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetPagedKeys,The method has 5 parameters. Parameters: searchTerm' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Services,CustomerService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerService.cs,GetPagedKeys,The method has 5 parameters. Parameters: query' page' itemsPerPage' sortBy' sortDirection
Long Parameter List,Merchello.Core.Gateways.Payment,PaymentGatewayMethodAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodAttribute.cs,PaymentGatewayMethodAttribute,The method has 5 parameters. Parameters: title' authorizeEditorView' authorizeCaptureEditorView' includeInPaymentSelection' requiresCustomer
Long Parameter List,Merchello.Core.Gateways.Payment,PaymentGatewayMethodAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodAttribute.cs,PaymentGatewayMethodAttribute,The method has 6 parameters. Parameters: title' authorizeEditorView' authorizeCaptureEditorView' voidPaymentEditorView' includeInPaymentSelection' requiresCustomer
Long Parameter List,Merchello.Core.Gateways.Payment,PaymentGatewayMethodAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodAttribute.cs,PaymentGatewayMethodAttribute,The method has 7 parameters. Parameters: title' authorizeEditorView' authorizeCaptureEditorView' voidPaymentEditorView' refundPaymentEditorView' includeInPaymentSelection' requiresCustomer
Long Parameter List,Merchello.Core.Gateways.Payment,PaymentGatewayMethodAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodAttribute.cs,PaymentGatewayMethodAttribute,The method has 8 parameters. Parameters: title' authorizeEditorView' authorizeCaptureEditorView' voidPaymentEditorView' refundPaymentEditorView' capturePaymentEditorView' includeInPaymentSelection' requiresCustomer
Long Parameter List,Merchello.Core.Gateways.Taxation,ProductTaxCalculationResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\ProductTaxCalculationResult.cs,ProductTaxCalculationResult,The method has 6 parameters. Parameters: taxMethodName' originalPrice' modifiedPrice' originalSalePrice' modifiedSalePrice' baseTaxRate
Long Parameter List,Merchello.Core.Marketing.Offer,OfferComponentAttribute,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferComponentAttribute.cs,OfferComponentAttribute,The method has 5 parameters. Parameters: key' name' description' editorView' restrictToType
Long Parameter List,Merchello.Core.Models.MonitorModels,MonitorModelExtensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\MonitorModels\MonitorModelExtensions.cs,ToOrderConfirmationNotification,The method has 5 parameters. Parameters: paymentResult' contacts' shipment' shipMethod' currencySymbol
Long Parameter List,Merchello.Core.Gateways.Notification,INotificationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\INotificationGatewayMethod.cs,CreateNotificationMessage,The method has 5 parameters. Parameters: name' description' fromAddress' recipients' bodyText
Long Parameter List,Merchello.Core.Gateways.Notification,NotificationGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\NotificationGatewayMethodBase.cs,CreateNotificationMessage,The method has 5 parameters. Parameters: name' description' fromAddress' recipients' bodyText
Long Parameter List,Merchello.Core.Persistence,RepositoryFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\RepositoryFactory.cs,RepositoryFactory,The method has 5 parameters. Parameters: disableAllCache' nullCacheProvider' runtimeCacheProvider' logger' sqlSyntaxProvider
Long Parameter List,Merchello.Core.Persistence.Factories,ProductFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Factories\ProductFactory.cs,ProductFactory,The method has 5 parameters. Parameters: getProductAttributes' getCatalogInventories' getProductOptions' getProductVariantCollection' getDetachedContentCollection
Long Parameter List,Merchello.Core.Persistence.DatabaseModelDefinitions,DefinitionFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\DatabaseModelDefinitions\DefinitionFactory.cs,GetForeignKeyDefinition,The method has 5 parameters. Parameters: modelType' propertyInfo' attribute' columnName' tableName
Long Parameter List,Merchello.Core.Persistence.DatabaseModelDefinitions,DefinitionFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\DatabaseModelDefinitions\DefinitionFactory.cs,GetIndexDefinition,The method has 5 parameters. Parameters: modelType' propertyInfo' attribute' columnName' tableName
Long Identifier,Merchello.Core.EntityCollections,EntityCollectionProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\EntityCollectionProviderResolver.cs,,The length of the parameter _entityCollectionProviderCache is 30.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter ComponentDefinitionsChangedSelector is 35.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter AppliedPaymentTypeFieldSelector is 31.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter ProductVariantsChangedSelector is 30.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter ManufacturerModelNumberSelector is 31.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter WarehouseInventoryChangedSelector is 33.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter DetachedContentTypeKeySelector is 30.
Long Identifier,Merchello.Core.Models,PropertySelectors,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityCollection.cs,,The length of the parameter ProductAttributesChangedSelector is 32.
Long Identifier,Merchello.Core.Models,OfferSettings,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\OfferSettings.cs,ComponentDefinitionsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,Merchello.Core.Models,ProductBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\ProductBase.cs,DetachedContentsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInStock,The length of the parameter includeAllowOutOfStockPurchase is 30.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,AddToCollections,The length of the parameter allMerchProduct2EntityCollections is 33.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,,The length of the parameter _detachedContentTypeRepository is 30.
Long Identifier,Merchello.Core.Persistence.Repositories,IProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductRepository.cs,GetProductsKeysInStock,The length of the parameter includeAllowOutOfStockPurchase is 30.
Long Identifier,Merchello.Core.Persistence.Repositories,IProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\Interfaces\IProductVariantRepository.cs,PerformGet,The length of the parameter productVariantDetachedContents is 30.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetVariantsBulk,The length of the parameter productAttributeCollectionDictionary is 36.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetVariantsBulk,The length of the parameter catalogInventoryCollectionDictionary is 36.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetVariantsBulk,The length of the parameter variantsDetachedContentDictionary is 33.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetvariantsDetachedContentDictionary,The length of the parameter variantsDetachedContentDictionary is 33.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetCatalogInventoryCollectionDictionary,The length of the parameter catalogInventoryCollectionDtos is 30.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetCatalogInventoryCollectionDictionary,The length of the parameter catalogInventoryCollectionDtosLookUp is 36.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetCatalogInventoryCollectionDictionary,The length of the parameter catalogInventoryCollectionDictionary is 36.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the parameter productVariant2ProductAttributeDtos is 35.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the parameter productVariant2ProductAttributeDtosLookUp is 41.
Long Identifier,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the parameter productAttributeCollectionDictionary is 36.
Long Identifier,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsKeysInStock,The length of the parameter includeAllowOutOfStockPurchase is 30.
Long Identifier,Merchello.Core.Services,OrderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OrderService.cs,Save,The length of the parameter existingOrdersWithStatusChanges is 31.
Long Identifier,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,Save,The length of the parameter existingInvoicesWithStatusChanges is 33.
Long Identifier,Merchello.Core.Services,ShipmentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipmentService.cs,Save,The length of the parameter existingShipmentsWithStatusChanges is 34.
Long Identifier,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,,The length of the parameter _activatedGatewayProviderCache is 30.
Long Identifier,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The length of the parameter merchAppliedPaymentDescriptionSize is 34.
Long Identifier,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The length of the parameter merchProductAttributeDetachedContentValuesSize is 46.
Long Statement,Merchello.Core,ActivatorHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ActivatorHelper.cs,CreateInstance,The length of the statement  "            if (type == null || constructorArgumentValues == null) return Attempt<T>.Fail(new NullReferenceException("Failed to create Type due to null Type or null constructor args")); " is 173.
Long Statement,Merchello.Core,ActivatorHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ActivatorHelper.cs,CreateInstance,The length of the statement  "            var constructor = type.GetConstructor(BindingFlags' null' CallingConventions.Any' constructorArgumentTypes.ToArray()' null); " is 124.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetValue,The length of the statement  "                MultiLogHelper.WarnWithException(typeof(Extensions)' "Failed to deserialize value. Proceding with operation returning default T."' ex' logData); " is 144.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SetValue,The length of the statement  "                MultiLogHelper.WarnWithException(typeof(Extensions)' "Failed to serialize value. Proceding with operation."' ex' logData); " is 122.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetLineItemCollection,The length of the statement  "                    MultiLogHelper.Error<LineItemCollection>("Failed to instantiate a LineItemCollection from ExtendedData"' attempt.Exception); " is 124.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.CostOfGoods' productBase.CostOfGoods == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.CostOfGoods).ToString(CultureInfo.InvariantCulture)); " is 214.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.Weight' productBase.Weight == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.Weight).ToString(CultureInfo.InvariantCulture)); " is 199.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.Width' productBase.Width == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.Width).ToString(CultureInfo.InvariantCulture)); " is 196.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.Height' productBase.Height == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.Height).ToString(CultureInfo.InvariantCulture)); " is 199.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.Length' productBase.Length == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.Length).ToString(CultureInfo.InvariantCulture)); " is 199.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddBaseProductValues,The length of the statement  "            extendedData.SetValue(Constants.ExtendedDataKeys.SalePrice' productBase.SalePrice == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productBase.SalePrice).ToString(CultureInfo.InvariantCulture)); " is 208.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetShipment,The length of the statement  "            if (origin == null) throw new NullReferenceException("ExtendedDataCollection does not contain an 'origin shipping address'"); " is 125.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetShipment,The length of the statement  "            if (destination == null) throw new NullReferenceException("ExtendedDataCollection does not container a 'destination shipping address'"); " is 136.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetShipment,The length of the statement  "            if (lineItemCollection == null) throw new NullReferenceException("ExtendedDataCollection does not contain a 'line item collection'"); " is 133.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AsBool,The length of the statement  "            ////return "true" == value.ToLowerInvariant() || "y" == value.ToLowerInvariant() || "yes" == value.ToLowerInvariant() || value == "1"; " is 134.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AsDecimal,The length of the statement  "            return Decimal.TryParse(value' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out converted) ? converted : 0; " is 124.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetXmlValue,The length of the statement  "            return element.ToString().StartsWith("<" + Constants.ExtendedDataKeys.ExtendedData + ">") ? element.ToString() : element.Value; " is 127.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,Country,The length of the statement  "            return MerchelloConfiguration.Current.MerchelloCountries().Countries.FirstOrDefault(x => x.CountryCode.Equals(address.CountryCode' StringComparison.InvariantCultureIgnoreCase)); " is 177.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,DefaultCustomerAddress,The length of the statement  "            return ((ServiceContext)merchelloContext.Services).CustomerAddressService.GetDefaultCustomerAddress(customer.Key' addressType); " is 127.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SaveCustomerAddress,The length of the statement  "            Mandate.ParameterCondition(address.CustomerKey == customer.Key' "The customer address is not associated with this customer."); " is 126.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,DeleteCustomerAddress,The length of the statement  "            Mandate.ParameterCondition(address.CustomerKey == customer.Key' "The customer address is not associated with this customer."); " is 126.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,DeleteCustomerAddress,The length of the statement  "            if (addresses.Any(x => x.AddressType == address.AddressType) && address.IsDefault) addresses.First(x => x.AddressType == address.AddressType).IsDefault = true; " is 159.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetShippingAddresses,The length of the statement  "            var addresses = shippingLineItems.Select(item => item.ExtendedData.GetShipment<InvoiceLineItem>().GetDestinationAddress()).ToList(); " is 132.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalItemPlusCustom"' (invoice.TotalCustomItemPrice() + invoice.TotalItemPrice()).FormatAsPrice(currencySymbol))' " is 168.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalDiscountPrice"' invoice.TotalDiscounts().FormatAsPrice(currencySymbol))' " is 132.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalItemPrice"' invoice.TotalItemPrice().FormatAsPrice(currencySymbol))' " is 128.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalShippingPrice"' invoice.TotalShipping().FormatAsPrice(currencySymbol))' " is 131.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalCustomPrice"' invoice.TotalCustomItemPrice().FormatAsPrice(currencySymbol))' " is 136.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ReplaceablePatterns,The length of the statement  "                ReplaceablePattern.GetConfigurationReplaceablePattern("TotalTaxPrice"' invoice.TotalTax().FormatAsPrice(currencySymbol))' " is 121.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,LineItemReplaceablePatterns,The length of the statement  "                var sku = new ReplaceablePattern(string.Format("{0}.{1}.{2}"' token' "Sku"' i)' string.Format("{0}Item.Sku.{1}{2}"' "{{"' i' "}}")' iterateItems[i].LineItemType == LineItemType.Shipping ? string.Empty : iterateItems[i].Sku); " is 224.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,LineItemReplaceablePatterns,The length of the statement  "                var unitPrice = new ReplaceablePattern(string.Format("{0}.{1}.{2}"' token' "UnitPrice"' i)' string.Format("{0}Item.UnitPrice.{1}{2}"' "{{"' i' "}}")' iterateItems[i].Price.FormatAsPrice(currencySymbol)); " is 203.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,LineItemReplaceablePatterns,The length of the statement  "                var name = new ReplaceablePattern(string.Format("{0}.{1}.{2}"' token' "Name"' i)' string.Format("{0}Item.Name.{1}{2}"' "{{"' i' "}}")' iterateItems[i].Name); " is 157.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,LineItemReplaceablePatterns,The length of the statement  "                var qty = new ReplaceablePattern(string.Format("{0}.{1}.{2}"' token' "Quantity"' i)' string.Format("{0}Item.Quantity.{1}{2}"' "{{"' i' "}}")' iterateItems[i].Quantity.ToString(CultureInfo.InvariantCulture)); " is 207.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,LineItemReplaceablePatterns,The length of the statement  "                var totalPrice = new ReplaceablePattern(string.Format("{0}.{1}.{2}"' token' "TotalPrice"' i)' string.Format("{0}Item.TotalPrice.{1}{2}"' "{{"' i' "}}")' iterateItems[i].TotalPrice.FormatAsPrice(currencySymbol)); " is 211.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AddItem,The length of the statement  "            container.AddItem(LineItemType.Product' productVariant.Name' productVariant.Sku' quantity' productVariant.Price' extendedData); " is 127.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ItemizeItems,The length of the statement  "            var type = MerchelloConfiguration.Current.GetStrategyElement(Constants.StrategyTypeAlias.InvoiceItemizationStrategy).Type; " is 122.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,As,The length of the statement  "                var failed = Attempt<IOfferResult<TConstraint' TAward>>.Fail(new OfferResult<TConstraint' TAward>()' attempt.Exception); " is 120.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,UnfulfilledItems,The length of the statement  "            var variants = merchelloContext.Services.ProductVariantService.GetByKeys(inventoryItems.Select(x => x.ExtendedData.GetProductVariantKey())).ToArray(); " is 150.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,UnfulfilledItems,The length of the statement  "                //var inventory = variant.CatalogInventories.FirstOrDefault(x => x.CatalogKey == item.ExtendedData.GetWarehouseCatalogKey()); " is 125.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,InventoryTrackedItems,The length of the statement  "            return order.Items.Where(x => x.ExtendedData.GetTrackInventoryValue() && x.ExtendedData.ContainsWarehouseCatalogKey()).Select(x => (OrderLineItem)x); " is 149.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,RemoveFromCatalogInventory,The length of the statement  "            ((CatalogInventoryCollection)productVariant.CatalogInventories).RemoveAt(productVariant.CatalogInventories.FindIndex(x => x.CatalogKey == catalogKey)); " is 151.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "            doc.Root.Add(((Product)product).MasterVariant.SerializeToXml(product.ProductOptions' product.GetCollectionsContaining().Select(x => x.Key)).Root); " is 146.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("costOfGoods"' productVariant.CostOfGoods == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.CostOfGoods).ToString(CultureInfo.InvariantCulture)); " is 201.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("salePrice"' productVariant.SalePrice == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.SalePrice).ToString(CultureInfo.InvariantCulture)); " is 195.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("weight"' productVariant.Weight == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.Weight).ToString(CultureInfo.InvariantCulture)); " is 186.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("length"' productVariant.Length == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.Length).ToString(CultureInfo.InvariantCulture)); " is 186.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("width"' productVariant.Width == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.Width).ToString(CultureInfo.InvariantCulture)); " is 183.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("height"' productVariant.Height == null ? 0.ToString(CultureInfo.InvariantCulture) : ((decimal)productVariant.Height).ToString(CultureInfo.InvariantCulture)); " is 186.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("totalInventoryCount"' productVariant.TotalInventoryCount.ToString(CultureInfo.InvariantCulture)); " is 126.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,SerializeToXml,The length of the statement  "                    writer.WriteAttributeString("detachedContents"' GetDetachedContentsJson(((ProductVariant)productVariant).DetachedContents)); " is 124.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetValidatedShipCountry,The length of the statement  "                MultiLogHelper.Error<ShippingGatewayProviderBase>("ShipMethods could not be determined for Shipment passed to GetAvailableShipMethodsForDestination method. Validator returned: " + visitor.CatalogCatalogValidationStatus' new ArgumentException("merchWarehouseCatalogKey")); " is 271.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetValidatedShipCountry,The length of the statement  "            return Attempt<IShipCountry>.Succeed(gatewayProviderService.GetShipCountry(visitor.WarehouseCatalogKey' shipment.ToCountryCode)); " is 129.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ShipmentLineItemName,The length of the statement  "            return string.Format("Shipment - {0} - {1} items"' shipmentRateQuote.ShipMethod.Name' shipmentRateQuote.Shipment.Items.Count); " is 126.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ShipmentRateQuoteByShipMethod,The length of the statement  "            var gatewayShipMethod = provider.GetShippingGatewayMethodsForShipment(shipment).FirstOrDefault(x => x.ShipMethod.Key == shipMethodKey); " is 135.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,ShipmentRateQuoteByShipMethod,The length of the statement  "            return gatewayShipMethod == null ? null : provider.QuoteShipMethodForShipment(shipment' gatewayShipMethod' tryGetCached); " is 121.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AsOfferComponentConfiguration,The length of the statement  "            if (!OfferComponentResolver.HasCurrent) throw new NullReferenceException("The OfferComponentResolver singleton has not been instantiated"); " is 139.
Long Statement,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AsOfferComponentConfiguration,The length of the statement  "            var nullRef = new NullReferenceException("Was not able to resolve the OfferComponentType with key: " + definition.ComponentKey); " is 128.
Long Statement,Merchello.Core,SkuHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\SkuHelper.cs,GenerateSkuForVariant,The length of the statement  "            var optionIds = product.ProductOptionsForAttributes(attributes).OrderBy(x => x.SortOrder).Select(x => x.Key).Distinct(); " is 120.
Long Statement,Merchello.Core,SkuHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\SkuHelper.cs,GenerateSkuForVariant,The length of the statement  "            foreach (var att in optionIds.Select(key => attributes.FirstOrDefault(x => x.OptionKey == key)).Where(att => att != null)) " is 122.
Long Statement,Merchello.Core,SkuHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\SkuHelper.cs,GenerateSkuForVariant,The length of the statement  "                sku += skuSeparator + (string.IsNullOrEmpty(att.Sku) ? Regex.Replace(att.Name' "[^0-9a-zA-Z]+"' string.Empty) : att.Sku); " is 121.
Long Statement,Merchello.Core,Ensure,C:\repos\Merchello_Merchello\src\Merchello.Core\Ensure.cs,ParameterCondition,The length of the statement  "            // Warning: don't make this method have an optional message parameter (removing the other ParameterCondition overload) as it will " is 129.
Long Statement,Merchello.Core,PathHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\PathHelper.cs,RemoveSpecialCharacters,The length of the statement  "            var regex = new Regex("(?:[^a-z0-9 ]|(?<=['\"])s)"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled); " is 133.
Long Statement,Merchello.Core,CoreBootManager,C:\repos\Merchello_Merchello\src\Merchello.Core\CoreBootManager.cs,Initialize,The length of the statement  "            var serviceContext = new ServiceContext(new RepositoryFactory(cache' logger' _sqlSyntaxProvider)' _unitOfWorkProvider' logger' new TransientMessageFactory()); " is 158.
Long Statement,Merchello.Core,CoreBootManager,C:\repos\Merchello_Merchello\src\Merchello.Core\CoreBootManager.cs,InitializeValueConverters,The length of the statement  "                DetachedValuesConverter.Current = new DetachedValuesConverter(ApplicationContext.Current' PluginManager.Current.ResolveDetachedValueOverriders()); " is 146.
Long Statement,Merchello.Core,CoreBootManager,C:\repos\Merchello_Merchello\src\Merchello.Core\CoreBootManager.cs,InitializeResolvers,The length of the statement  "            MonitorResolver.Current = new MonitorResolver(MerchelloContext.Current.Gateways.Notification' PluginManager.Current.ResolveObserverMonitors());             " is 143.
Long Statement,Merchello.Core,CoreBootManager,C:\repos\Merchello_Merchello\src\Merchello.Core\CoreBootManager.cs,SetUnitOfWorkProvider,The length of the statement  "            var connString = ConfigurationManager.ConnectionStrings[MerchelloConfiguration.Current.Section.DefaultConnectionStringName].ConnectionString; " is 141.
Long Statement,Merchello.Core,CoreBootManager,C:\repos\Merchello_Merchello\src\Merchello.Core\CoreBootManager.cs,SetUnitOfWorkProvider,The length of the statement  "            var providerName = ConfigurationManager.ConnectionStrings[MerchelloConfiguration.Current.Section.DefaultConnectionStringName].ProviderName; " is 139.
Long Statement,Merchello.Core,ExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ExpressionHelper.cs,GetPropertyInfo,The length of the statement  "										throw new ArgumentException("The type of property could not be infered' try specifying the type parameters explicitly. This can happen if you have tried to access PropertyInfo where the property's return type is a value type' but the expression is trying to convert it to an object"); " is 284.
Long Statement,Merchello.Core,ExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ExpressionHelper.cs,GetPropertyInfo,The length of the statement  "							else throw new ArgumentException(string.Format("Expression '{0}' refers to a method' not a property."' propertyLambda)); " is 120.
Long Statement,Merchello.Core,ExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ExpressionHelper.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member and not any child object's properties. Use a custom resolver on the child type or the AfterMap option instead."' lambdaExpression)' "lambdaExpression"); " is 245.
Long Statement,Merchello.Core,ExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\ExpressionHelper.cs,IsMethodSignatureEqualTo,The length of the statement  "				if (typeof(Delegate).IsAssignableFrom(leftParams[i].ParameterType) && typeof(Delegate).IsAssignableFrom(rightParams[i].ParameterType)) " is 134.
Long Statement,Merchello.Core.Configuration,MerchelloConfiguration,C:\repos\Merchello_Merchello\src\Merchello.Core\Configuration\MerchelloConfiguration.cs,GetRootDirectorySafe,The length of the statement  "                throw new Exception("No root directory could be resolved. Please ensure that your Umbraco solution is correctly configured."); " is 126.
Long Statement,Merchello.Core.Builders,CheckoutInvoiceBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\CheckoutInvoiceBuilderChain.cs,Build,The length of the statement  "            attempt.Result.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2); " is 223.
Long Statement,Merchello.Core.Builders,InvoiceBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\InvoiceBuilderChain.cs,Build,The length of the statement  "            attempt.Result.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2); " is 223.
Long Statement,Merchello.Core.Builders,ShipmentBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\ShipmentBuilderChain.cs,Build,The length of the statement  "            if (invoice == null) return Attempt<IShipment>.Fail(new NullReferenceException("An invoice could not be found for the order passed")); " is 134.
Long Statement,Merchello.Core.Builders,ShipmentBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\ShipmentBuilderChain.cs,Build,The length of the statement  "            if (shipmentLineItem == null) return Attempt<IShipment>.Fail(new NullReferenceException("An shipment could not be found in the invoice assoiciated with the order passed")); " is 172.
Long Statement,Merchello.Core.Builders,ShipmentBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\ShipmentBuilderChain.cs,Build,The length of the statement  "            if (quoted == null) return Attempt<IShipment>.Fail(new NullReferenceException("An shipment could not be found in the invoice assoiciated with the order passed")); " is 162.
Long Statement,Merchello.Core.Builders,ShipmentBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\ShipmentBuilderChain.cs,Build,The length of the statement  "                : Attempt<IShipment>.Fail(new InvalidOperationException("The configuration Chain Task List could not be instantiated.")); " is 121.
Long Statement,Merchello.Core.Cache,CacheKeys,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\CacheKeys.cs,ShippingGatewayProviderShippingRateQuoteCacheKey,The length of the statement  "            return string.Format("merchello.shippingratequote.{0}.{1}.{2}.{3}"' shipmentKey' shipMethodKey' versionKey' addressArgs); " is 121.
Long Statement,Merchello.Core.Cache,ObjectCacheRuntimeCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\ObjectCacheRuntimeCacheProvider.cs,GetCacheItem,The length of the statement  "                if (result == null || GetSafeLazyValue(result' true) == null) // get non-created as NonCreatedValue & exceptions as null " is 120.
Long Statement,Merchello.Core.Cache,ObjectCacheRuntimeCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\ObjectCacheRuntimeCacheProvider.cs,GetPolicy,The length of the statement  "            var absolute = isSliding ? ObjectCache.InfiniteAbsoluteExpiration : (timeout == null ? ObjectCache.InfiniteAbsoluteExpiration : DateTime.Now.Add(timeout.Value)); " is 161.
Long Statement,Merchello.Core.Chains,ConfigurationChainBase<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ConfigurationChainBase.cs,ResolveChain,The length of the statement  "            foreach (var taskHandler in TaskHandlers.Where(task => TaskHandlers.IndexOf(task) != TaskHandlers.IndexOf(TaskHandlers.Last()))) " is 128.
Long Statement,Merchello.Core.Chains,ChainTaskResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ChainTaskResolver.cs,ResolveAttemptChainByAlias,The length of the statement  "                    MultiLogHelper.Error<ChainTaskResolver>("ResolveAttemptByAlias<T> failed to resolve type " + typeName' attempt.Exception); " is 122.
Long Statement,Merchello.Core.Chains.CopyEntity.Product,AddProductToWarehouseCatalogsTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\CopyEntity\Product\AddProductToWarehouseCatalogsTask.cs,Initialize,The length of the statement  "             _warehouseCatalogs = new Lazy<IEnumerable<IWarehouseCatalog>>(() => Services.WarehouseService.GetAllWarehouseCatalogs().ToArray()); " is 131.
Long Statement,Merchello.Core.Chains.CopyEntity.Product,CopyDetachedContentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\CopyEntity\Product\CopyDetachedContentTask.cs,PerformTask,The length of the statement  "                        matchingClonedVariant.DetachedContents.Add(this.BuildDetachedContent(matchingClonedVariant.Key' matchingClonedVariant.Name' originalVariantContent)); " is 149.
Long Statement,Merchello.Core.Chains.CopyEntity.Product,CopyProductTaskChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\CopyEntity\Product\CopyProductTaskChain.cs,Copy,The length of the statement  "            if (!this.ValidateSku()) return Attempt<IProduct>.Fail(new InvalidSkuException("A product or product variant already exists with the sku: " + _sku + ". SKUs must be unique.")); " is 176.
Long Statement,Merchello.Core.Chains.InvoiceCreation.CheckoutManager,AddBillingInfoToInvoiceTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\InvoiceCreation\CheckoutManager\AddBillingInfoToInvoiceTask.cs,PerformTask,The length of the statement  "            var address = this.CheckoutManager.Context.Customer.ExtendedData.GetAddress(Core.Constants.ExtendedDataKeys.BillingAddress); " is 124.
Long Statement,Merchello.Core.Chains.InvoiceCreation.CheckoutManager,AddBillingInfoToInvoiceTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\InvoiceCreation\CheckoutManager\AddBillingInfoToInvoiceTask.cs,PerformTask,The length of the statement  "            if (address == null) return Attempt<IInvoice>.Fail(new InvalidDataException("Billing information could not be retrieved from the Checkout")); " is 141.
Long Statement,Merchello.Core.Chains.InvoiceCreation.CheckoutManager,ValidateCommonCurrency,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\InvoiceCreation\CheckoutManager\ValidateCommonCurrency.cs,PerformTask,The length of the statement  "                       : Attempt<IInvoice>.Fail(new InvalidDataException("Invoice is being created with line items costed in different currencies.")); " is 127.
Long Statement,Merchello.Core.Chains.OfferConstraints,OfferProcessorBase<TConstraint;TAward>,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\OfferConstraints\OfferProcessorBase.cs,TryAward,The length of the statement  "                MultiLogHelper.Error(typeof(OfferProcessorBase<TConstraint' TAward>)' "Failed to convert validation object"' converted.Exception); " is 130.
Long Statement,Merchello.Core.Chains.OfferConstraints,OfferProcessorBase<TConstraint;TAward>,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\OfferConstraints\OfferProcessorBase.cs,Initialize,The length of the statement  "                converted.AddRange(constraints.ToArray().Select(constraint => constraint as OfferConstraintComponentBase<TConstraint>)); " is 120.
Long Statement,Merchello.Core.Chains.OfferConstraints,OfferProcessorBase<TConstraint;TAward>,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\OfferConstraints\OfferProcessorBase.cs,Initialize,The length of the statement  "                MultiLogHelper.Error<OfferProcessorBase<TConstraint' TAward>>("Failed to convert offer constraint to typed version."' ex); " is 122.
Long Statement,Merchello.Core.Chains.OfferConstraints,OfferProcessorBase<TConstraint;TAward>,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\OfferConstraints\OfferProcessorBase.cs,BuildConstraintChain,The length of the statement  "            foreach (var taskHandler in TaskHandlers.Where(task => TaskHandlers.IndexOf(task) != TaskHandlers.IndexOf(TaskHandlers.Last()))) " is 128.
Long Statement,Merchello.Core.Checkout,CheckoutContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutContext.cs,CreateCheckoutContext,The length of the statement  "            itemCache = merchelloContext.Services.ItemCacheService.GetItemCacheWithKey(customer' ItemCacheType.Checkout' versionKey); " is 121.
Long Statement,Merchello.Core.Checkout,CheckoutCustomerDataManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutCustomerDataManagerBase.cs,SaveCustomer,The length of the statement  "                ((CustomerService)Context.Services.CustomerService).Save(Context.Customer as Customer' Context.Settings.RaiseCustomerEvents); " is 125.
Long Statement,Merchello.Core.Checkout,CheckoutCustomerDataManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutCustomerDataManagerBase.cs,BuildVersionedCustomerTempData,The length of the statement  "                MultiLogHelper.Error<CheckoutCustomerDataManagerBase>("Failed to deserialize CheckoutCustomerTempData.  Returned empty offer code list instead."' ex); " is 150.
Long Statement,Merchello.Core.Checkout,CheckoutExtendedManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutExtendedManagerBase.cs,AddItem,The length of the statement  "                    MultiLogHelper.Error<CheckoutContextManagerBase>("The LineItemTfKey was not found in merchello.config custom type fields"' argError); " is 133.
Long Statement,Merchello.Core.Checkout,CheckoutOfferManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutOfferManagerBase.cs,Initialize,The length of the statement  "            this._offerCodeTempData = new Lazy<List<string>>(() => BuildVersionedCustomerTempData(Core.Constants.ExtendedDataKeys.OfferCodeTempData)); " is 138.
Long Statement,Merchello.Core.Checkout,CheckoutPaymentManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutPaymentManagerBase.cs,PrepareInvoice,The length of the statement  "            MultiLogHelper.Error<CheckoutPaymentManagerBase>("The invoice builder failed to generate an invoice."' attempt.Exception); " is 122.
Long Statement,Merchello.Core.Checkout,CheckoutShippingManagerBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Checkout\CheckoutShippingManagerBase.cs,Initialize,The length of the statement  "            _shippingTaxable = new Lazy<bool>(() => Convert.ToBoolean(Context.Services.StoreSettingService.GetByKey(Constants.StoreSetting.GlobalShippingIsTaxableKey).Value)); " is 163.
Long Statement,Merchello.Core.EntityCollections,EntityCollectionProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\EntityCollectionProviderBase.cs,ValidateType,The length of the statement  "            var invalidType = new InvalidCastException("Cannot cast " + type.FullName + " to " + EntityCollection.TypeOfEntities().FullName); " is 129.
Long Statement,Merchello.Core.EntityCollections,EntityCollectionProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\EntityCollectionProviderResolver.cs,RemoveFromCache,The length of the statement  "                LogHelper.Info<EntityCollectionProviderResolver>("Failed to remove provider associated with collect " + collectionKey + " from cache"); " is 135.
Long Statement,Merchello.Core.EntityCollections,EntityCollectionProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\EntityCollectionProviderResolver.cs,EnusureUniqueProvider,The length of the statement  "            //if (_entityCollectionProviderCache.Any(x => x.Value.GetCustomAttribute<EntityCollectionProviderAttribute>(false).Key == providerKey)) return false; " is 149.
Long Statement,Merchello.Core.EntityCollections,ProductFilterGroupProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ProductFilterProviderBase.cs,PerformGetPagedEntities,The length of the statement  "                MerchelloContext.Services.ProductService.GetProductsThatExistInAllCollections(keys' page' itemsPerPage' sortBy' sortDirection) : " is 128.
Long Statement,Merchello.Core.EntityCollections,ProductFilterGroupProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ProductFilterProviderBase.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections,ProductFilterGroupProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\ProductFilterProviderBase.cs,GetAttributeCollectionKeys,The length of the statement  "                MultiLogHelper.Info<ProductFilterGroupProvider>("ProductSpecificationCollection does not have any child collections. Returning null."); " is 135.
Long Statement,Merchello.Core.EntityCollections,StaticProductCollectionProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\StaticProductCollectionProviderBase.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections.Providers,DynamicCancelledOrderCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicCancelledOrderCollectionProvider.cs,PerformExists,The length of the statement  "            return !entity.Orders.Any() || entity.Orders.All(x => x.OrderStatusKey == Constants.OrderStatus.Cancelled) || entity.InvoiceStatusKey == Constants.InvoiceStatus.Cancelled; " is 171.
Long Statement,Merchello.Core.EntityCollections.Providers,DynamicPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections.Providers,DynamicPartiallyPaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicPartiallyPaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections.Providers,DynamicUnpaidInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\DynamicUnpaidInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections.Providers,StaticCustomerCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticCustomerCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.EntityCollections.Providers,StaticInvoiceCollectionProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\EntityCollections\Providers\StaticInvoiceCollectionProvider.cs,PerformGetPagedEntityKeysNotInCollection,The length of the statement  "            if (!args.ContainsKey("searchTerm")) return PerformGetPagedEntityKeysNotInCollection(page' itemsPerPage' sortBy' sortDirection); " is 128.
Long Statement,Merchello.Core.Logging,MultiLogger,C:\repos\Merchello_Merchello\src\Merchello.Core\Logging\MultiLogger.cs,Error,The length of the statement  "            if (_hasRemoteLogger && this._remoteLogger.IsReady) _remoteLogger.Error(callingType' message' exception' GetBaseLoggingData()); " is 127.
Long Statement,Merchello.Core.Logging,MultiLogger,C:\repos\Merchello_Merchello\src\Merchello.Core\Logging\MultiLogger.cs,WarnWithException,The length of the statement  "            if (_hasRemoteLogger && this._remoteLogger.IsReady) _remoteLogger.WarnWithException(callingType' message' e' GetBaseLoggingData()); " is 131.
Long Statement,Merchello.Core.Logging,MultiLogger,C:\repos\Merchello_Merchello\src\Merchello.Core\Logging\MultiLogger.cs,Info,The length of the statement  "            if (_hasRemoteLogger && this._remoteLogger.IsReady) _remoteLogger.Info(callingType' generateMessage.Invoke()' GetBaseLoggingData()); " is 132.
Long Statement,Merchello.Core.Logging,MultiLogger,C:\repos\Merchello_Merchello\src\Merchello.Core\Logging\MultiLogger.cs,Debug,The length of the statement  "            if (_hasRemoteLogger && this._remoteLogger.IsReady) _remoteLogger.Debug(callingType' generateMessage.Invoke()' GetBaseLoggingData()); " is 133.
Long Statement,Merchello.Core.Models.EntityBase,Entity,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityBase\Entity.cs,SetPropertyValueAndDetectChanges,The length of the statement  "                throw new InvalidOperationException("This method does not support IEnumerable instances. For IEnumerable instances a manual custom equality check will be required"); " is 165.
Long Statement,Merchello.Core.Models.Rdbms,DtoExtensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\Rdbms\DtoExtensions.cs,GetColumnProperties,The length of the statement  "            return dto.GetType().GetProperties().Where(x => Attribute.IsDefined(x' typeof(ColumnAttribute)' false) && x.GetCustomAttribute<ColumnAttribute>().GetType() != typeof(ResultColumnAttribute)); " is 190.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero,AddDigitalMediaTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFiveZero\AddDigitalMediaTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.5.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero,AddIndexesToInvoice,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFiveZero\AddIndexesToInvoice.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.5.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero,AddIndexesToInvoice,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFiveZero\AddIndexesToInvoice.cs,CreateIndex,The length of the statement  "                Logger.Info(typeof(AddIndexesToProductVariant)' "Adding nonclustered index to " + columnName + " column on merchInvoice table."); " is 129.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero,AddIndexesToProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFiveZero\AddIndexesToProductVariant.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.5.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero,AddIndexesToProductVariant,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFiveZero\AddIndexesToProductVariant.cs,CreateIndex,The length of the statement  "                Logger.Info(typeof(AddIndexesToProductVariant)' "Adding nonclustered index to " + columnName + " column on merchProductVariant table."); " is 136.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFourZero,AddShipmentTrackingUrlColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFourZero\AddShipmentTrackingUrlColumns.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.4.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeOne,AlterProductAttributeColumnToNtext,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeOne\AlterProductAttributeColumnToNtext.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.3.1 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The length of the statement  "               .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The length of the statement  "              .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The length of the statement  "                .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAllCollections,The length of the statement  "                .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The length of the statement  "               .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The length of the statement  "               .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The length of the statement  "                .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysNotInAnyCollections,The length of the statement  "                .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The length of the statement  "               .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The length of the statement  "               .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                .Append("AND (([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 142.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min' @high = max }) " is 141.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetKeyForSlug,The length of the statement  "                    "JOIN [merchProductVariantDetachedContent] ON [merchProductVariant].[pk] = [merchProductVariantDetachedContent].[productVariantKey]") " is 133.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInPriceRange,The length of the statement  "              .Append("WHERE ([merchProductVariant].[onSale] = 0 AND [merchProductVariant].[price] BETWEEN @low AND @high)"' new { @low = min * modifier' @high = max * modifier }) " is 165.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInPriceRange,The length of the statement  "              .Append("([merchProductVariant].[onSale] = 1 AND [merchProductVariant].[salePrice] BETWEEN @low AND @high)"' new { @low = min * modifier' @high = max * modifier }) " is 163.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchProduct2EntityCollection].[productKey] = @pkey AND [merchProduct2EntityCollection].[entityCollectionKey] = @eckey"' " is 128.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchProduct2EntityCollection].[productKey] = @pkey AND [merchProduct2EntityCollection].[entityCollectionKey] IN (@eckeys)"' " is 132.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,RemoveFromCollections,The length of the statement  "                    "DELETE [merchProduct2EntityCollection] WHERE [merchProduct2EntityCollection].[productKey] = @pkey AND [merchProduct2EntityCollection].[entityCollectionKey] = @eckey"' " is 167.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,RemoveFromCollection,The length of the statement  "                "DELETE [merchProduct2EntityCollection] WHERE [merchProduct2EntityCollection].[productKey] = @pkey AND [merchProduct2EntityCollection].[entityCollectionKey] = @eckey"' " is 167.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,CountKeysThatExistInAllCollections,The length of the statement  "                sql.Append(string.Format("SELECT {0} as Hash"' group.GetHashCode())) // can't paramertize this SqlCE chokes but it should not matter since it's just a value. " is 157.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetEntitiesThatExistInAllCollections,The length of the statement  "            var p = this.GetKeysThatExistInAllCollections(collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection); " is 120.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetDeleteClauses,The length of the statement  "                    "DELETE FROM merchCatalogInventory WHERE productVariantKey IN (SELECT pk FROM merchProductVariant WHERE productKey = @Key)"' " is 124.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetDeleteClauses,The length of the statement  "                    "DELETE FROM merchProductVariantDetachedContent WHERE productVariantKey IN (SELECT pk FROM merchProductVariant WHERE productKey = @Key)"' " is 137.
Long Statement,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetDeleteClauses,The length of the statement  "                    "DELETE FROM merchProductVariantIndex WHERE productVariantKey IN (SELECT pk FROM merchProductVariant WHERE productKey = @Key)"'                     " is 127.
Long Statement,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,GenerateBulkInsertCommand,The length of the statement  "            //A filter used below a few times to get all columns except result cols and not the primary key if it is auto-incremental " is 121.
Long Statement,Merchello.Core.Persistence.Repositories,DetachedContentTypeRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\DetachedContentTypeRepository.cs,GetDeleteClauses,The length of the statement  "                    "DELETE FROM merchProductVariantDetachedContent WHERE merchProductVariantDetachedContent.detachedContentTypeKey = @Key"' " is 120.
Long Statement,Merchello.Core.Persistence.Repositories,EntityCollectionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\EntityCollectionRepository.cs,PersistNewItem,The length of the statement  "                            ? Querying.Query<IEntityCollection>.Builder.Where(x => x.ProviderKey == entity.ProviderKey && x.EntityTfKey == entity.EntityTfKey) " is 130.
Long Statement,Merchello.Core.Persistence.Repositories,OfferSettingsRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OfferSettingsRepository.cs,BuildOfferSearchSql,The length of the statement  "                sql.Where("name LIKE @term OR offerCode LIKE @offerCode"' new { @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()' offerCode = string.Format("%{0}%"' string.Join("% "' terms)).Trim() }); " is 200.
Long Statement,Merchello.Core.Persistence.Repositories,OfferSettingsRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\OfferSettingsRepository.cs,BuildOfferSearchSql,The length of the statement  "                sql.Where("name LIKE @term OR offerCode LIKE @term"' new { @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim() }); " is 126.
Long Statement,Merchello.Core.Persistence.Repositories,PagedRepositoryBase<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\PagedRepositoryBase.cs,GetPagedDtoCacheKey,The length of the statement  "            return Core.Cache.CacheKeys.GetPagedKeysCacheKey<TDto>(methodName' page' itemsPerPage' orderExpression' sortDirection' args); " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,DeleteAllProductVariantAttributes,The length of the statement  "            Database.Execute("DELETE FROM merchProductVariant2ProductAttribute WHERE productVariantKey = @key"' new { @key = variant.Key }); " is 128.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetProductAttributeCollectionForVariant,The length of the statement  "                .On<ProductVariant2ProductAttributeDto' ProductAttributeDto>(SqlSyntax' left => left.ProductAttributeKey' right => right.Key) " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,SaveForProduct,The length of the statement  "                // Remove any options that previously existed in the product option collection that are not present in the new collection " is 121.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetDeleteClauses,The length of the statement  "                    "DELETE FROM merchProductVariant2ProductAttribute WHERE productVariantKey IN (SELECT productVariantKey FROM merchProductVariant2ProductAttribute WHERE optionKey = @Key)"' " is 170.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,DeleteProductAttribute,The length of the statement  "            //// EnsureProductVariantsHaveAttributes called in the ProductVariantService cleans up the orphaned variants and fires off " is 122.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,DeleteProductAttribute,The length of the statement  "                "DELETE FROM merchProductVariant2ProductAttribute WHERE productVariantKey IN (SELECT productVariantKey FROM merchProductVariant2ProductAttribute WHERE productAttributeKey = @Key)"' " is 180.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveAttributeFromSharedProductOptionSql,The length of the statement  "                    "SELECT * FROM merchProductVariant T1 INNER JOIN merchProductVariant2ProductAttribute T2 ON T1.pk = T2.productVariantKey WHERE T1.productKey = @pk AND T1.master = 0 AND T2.optionKey = @ok AND T2.productAttributeKey = @ak"' " is 222.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveAllProductVariantProductAttributeSql,The length of the statement  "                new Sql("DELETE FROM merchProductVariant2ProductAttribute WHERE productVariantKey IN (SELECT [merchProductVariant].pk FROM merchProductVariant WHERE productKey = @pk)"' new { @pk = product.Key }) " is 195.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveAllProductVariantProductAttributeSql,The length of the statement  "            if (optionKeys.Any()) list.Add(new Sql("DELETE FROM merchProductAttribute WHERE optionKey IN (@okeys)"' new { @okeys = optionKeys })); " is 134.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveShareProductOptionFromProductSql,The length of the statement  "                new Sql("DELETE FROM merchProductOptionAttributeShare WHERE optionKey = @ok AND productKey = @pk"' new { @ok = option.Key' @pk = productKey })' " is 143.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveShareProductOptionFromProductSql,The length of the statement  "                new Sql("DELETE FROM merchProduct2ProductOption WHERE optionKey = @ok AND productKey = @pk"' new { @ok = option.Key' @pk = productKey })' " is 137.
Long Statement,Merchello.Core.Persistence.Repositories,ProductOptionRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductOptionRepository.cs,GetRemoveShareProductOptionFromProductSql,The length of the statement  "                new Sql("UPDATE merchProduct2ProductOption SET sortOrder = sortOrder -1 WHERE sortOrder > @so"' new { @so = sortOrder })' " is 121.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchCustomer2EntityCollection].[customerKey] = @ekey AND [merchCustomer2EntityCollection].[entityCollectionKey] = @eckey"' " is 131.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchCustomer2EntityCollection].[customerKey] = @ekey AND [merchCustomer2EntityCollection].[entityCollectionKey] IN(@eckeys)"' " is 134.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,RemoveFromCollection,The length of the statement  "            "DELETE [merchCustomer2EntityCollection] WHERE [merchCustomer2EntityCollection].[customerKey] = @ekey AND [merchCustomer2EntityCollection].[entityCollectionKey] = @eckey"' " is 171.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetEntitiesThatExistInAllCollections,The length of the statement  "            var p = this.GetKeysThatExistInAllCollections(collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection); " is 120.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,BuildCustomerSearchSql,The length of the statement  "                sql.Where("lastName LIKE @ln OR firstName LIKE @fn OR email LIKE @email"' new { @ln = preparedTerms' @fn = preparedTerms' @email = preparedTerms }); " is 148.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,SaveNotes,The length of the statement  "            var query = Querying.Query<INote>.Builder.Where(x => x.EntityKey == entity.Key && x.EntityTfKey == Core.Constants.TypeFieldKeys.Entity.CustomerKey); " is 148.
Long Statement,Merchello.Core.Persistence.Repositories,CustomerRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\CustomerRepository.cs,GetNotes,The length of the statement  "            var query = Querying.Query<INote>.Builder.Where(x => x.EntityKey == customerKey && x.EntityTfKey == Core.Constants.TypeFieldKeys.Entity.CustomerKey); " is 149.
Long Statement,Merchello.Core.Persistence.Repositories,GatewayProviderRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\GatewayProviderRepository.cs,GetGatewayProvidersByShipCountryKey,The length of the statement  "            return dtos.DistinctBy(x => x.GatewayProviderSettingsDto.Key).Select(dto => factory.BuildEntity(dto.GatewayProviderSettingsDto)); " is 129.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchInvoice2EntityCollection].[invoiceKey] = @ikey AND [merchInvoice2EntityCollection].[entityCollectionKey] = @eckey"' " is 128.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,ExistsInCollection,The length of the statement  "                    "WHERE [merchInvoice2EntityCollection].[invoiceKey] = @ikey AND [merchInvoice2EntityCollection].[entityCollectionKey] IN (@eckeys)"' " is 132.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,RemoveFromCollection,The length of the statement  "                "DELETE [merchInvoice2EntityCollection] WHERE [merchInvoice2EntityCollection].[invoiceKey] = @ikey AND [merchInvoice2EntityCollection].[entityCollectionKey] = @eckey"' " is 167.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetEntitiesThatExistInAllCollections,The length of the statement  "            var p = this.GetKeysThatExistInAllCollections(collectionKeys' term' page' itemsPerPage' orderExpression' sortDirection); " is 120.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,SumInvoiceTotals,The length of the statement  "                    @"SELECT SUM([merchInvoice].total) FROM merchInvoice WHERE [merchInvoice].invoiceDate BETWEEN @starts and @ends AND [merchInvoice].currencyCode = @cc"; " is 151.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,SumInvoiceTotals,The length of the statement  "                return Database.ExecuteScalar<decimal>(SQL' new { @starts = startDate.ToIsoString()' @ends = endDate.ToIsoString()' @cc = currencyCode }); " is 138.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The length of the statement  "                    "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"' " is 170.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The length of the statement  "						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'  " is 371.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The length of the statement  "					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() }); " is 138.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The length of the statement  "                    "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"' " is 140.
Long Statement,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,GetNotes,The length of the statement  "            var query = Querying.Query<INote>.Builder.Where(x => x.EntityKey == invoiceKey && x.EntityTfKey == Core.Constants.TypeFieldKeys.Entity.InvoiceKey); " is 147.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductVariantWithAttributes,The length of the statement  "            return variants.FirstOrDefault(x => x.Attributes.Count() == attributeKeys.Count() && attributeKeys.All(key => x.Attributes.FirstOrDefault(att => att.Key == key) != null)); " is 171.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetByProductKey,The length of the statement  "            var query = Querying.Query<IProductVariant>.Builder.Where(x => x.ProductKey == productKey && ((ProductVariant)x).Master == false); " is 130.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,The length of the statement  "            foreach (var inv in existing.Where(inv => !((ProductVariant)productVariant).CatalogInventoryCollection.Contains(inv.CatalogKey))) " is 129.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,The length of the statement  "                            sqlStatement += string.Format(" DELETE FROM merchCatalogInventory WHERE productVariantKey = @{0} AND catalogKey = @{1}"' paramIndex++' paramIndex++); " is 149.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,The length of the statement  "                            sqlStatement += string.Format(" UPDATE merchCatalogInventory SET Count = @{0}' LowCount = @{1}' Location = @{2}' UpdateDate = @{3} WHERE catalogKey = @{4} AND productVariantKey = @{5}"' paramIndex++' paramIndex++' paramIndex++' paramIndex++' paramIndex++' paramIndex++); " is 270.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SqlCeUpdateCatalogInventory,The length of the statement  "                    "UPDATE merchCatalogInventory SET Count = @ct' LowCount = @lct' Location = @loc' UpdateDate = @ud WHERE catalogKey = @ck AND productVariantKey = @pvk"' " is 151.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SqlCeDeleteCatalogInventory,The length of the statement  "            var sql = new Sql("DELETE FROM merchCatalogInventory WHERE productVariantKey = @pvk AND catalogKey = @ck"' new { @pvk = productVariantKey' @ck = catalogKey }); " is 159.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveDetachedContents,The length of the statement  "                        sqlStatement += string.Format(" DELETE [merchProductVariantDetachedContent] WHERE [productVariantKey] = @{0}"' paramIndex++); " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveDetachedContents,The length of the statement  "                                    " UPDATE [merchProductVariantDetachedContent] SET [merchProductVariantDetachedContent].[detachedContentTypeKey] = @{0}' [merchProductVariantDetachedContent].[templateId] = @{1}' [merchProductVariantDetachedContent].[slug] = @{2}' [merchProductVariantDetachedContent].[values] = @{3}' [merchProductVariantDetachedContent].[canBeRendered] = @{4}' [merchProductVariantDetachedContent].[updateDate] = @{5} WHERE [merchProductVariantDetachedContent].[cultureName] = @{6} AND [merchProductVariantDetachedContent].[productVariantKey] = @{7}"' " is 535.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveDetachedContent,The length of the statement  "                    "UPDATE [merchProductVariantDetachedContent] SET [merchProductVariantDetachedContent].[detachedContentTypeKey] = @Dctk' [merchProductVariantDetachedContent].[templateId] = @Tid' [merchProductVariantDetachedContent].[slug] = @Slug' [merchProductVariantDetachedContent].[values] = @Vals' [merchProductVariantDetachedContent].[canBeRendered] = @Cbr' [merchProductVariantDetachedContent].[updateDate] = @Ud WHERE [merchProductVariantDetachedContent].[cultureName] = @Cn AND [merchProductVariantDetachedContent].[productVariantKey] = @Pvk"; " is 535.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductVariantDetachedContents,The length of the statement  "                dtos.AddRange(Database.Fetch<ProductVariantDetachedContentDto' DetachedContentTypeDto>(sql).Select(factory.BuildEntity)); " is 121.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,PerformGet,The length of the statement  "            var productAttributeCollection = _productOptionRepository.GetProductAttributeCollectionForVariant(dto.ProductVariantDto.Key); " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,PerformGet,The length of the statement  "            var factory = new ProductVariantFactory(productAttributeCollection' catalogInventoryCollection' detachedContentCollection); " is 123.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetvariantsDetachedContentDictionary,The length of the statement  "            var variantsDetachedContent = GetProductVariantDetachedContents(variantKeyLists).Where(x => x != null).GroupBy(x => x.ProductVariantKey); " is 137.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetvariantsDetachedContentDictionary,The length of the statement  "            var variantsDetachedContentDictionary = new Dictionary<Guid' DetachedContentCollection<IProductVariantDetachedContent>>(); " is 122.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetCatalogInventoryCollectionDictionary,The length of the statement  "                catalogInventoryCollectionDtos.AddRange(Database.Fetch<CatalogInventoryDto' WarehouseCatalogDto>(catalogInventoryCollectionSql)); " is 129.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the statement  "                    .On<ProductVariant2ProductAttributeDto' ProductAttributeDto>(SqlSyntax' left => left.ProductAttributeKey' right => right.Key) " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the statement  "                    .WhereIn<ProductVariant2ProductAttributeDto>(x => x.ProductVariantKey' variantKeys' SqlSyntax); // New Where in returns many " is 124.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the statement  "                productVariant2ProductAttributeDtos.AddRange(Database.Fetch<ProductVariant2ProductAttributeDto' ProductAttributeDto>(prodAttrCollForVariantSql)); " is 145.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,GetProductAttributeCollectionDictionary,The length of the statement  "                    //var attribute = (IProductAttribute)RuntimeCache.GetCacheItem(Cache.CacheKeys.GetEntityCacheKey<IProductAttribute>(dto.Key)' " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,MandateProductVariantRules,The length of the statement  "            // TODO these checks can probably be moved somewhere else but are here at the moment to enforce the rules as the API develops " is 125.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,UpdateCatalogInventory,The length of the statement  "                "UPDATE merchCatalogInventory SET Count = @invCount' LowCount = @invLowCount' Location = @invLocation' UpdateDate = @invUpdateDate WHERE catalogKey = @catalogKey AND productVariantKey = @productVariantKey"' " is 206.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SkuExists,The length of the statement  "            var whereClauses = entities.Select(entity => string.Format("(Sku = '{0}' and pk != '{1}')"' entity.Sku' entity.Key)).ToList(); " is 126.
Long Statement,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,EnsureSlug,The length of the statement  "            var count = Database.ExecuteScalar<int>("SELECT COUNT(slug) FROM [merchProductVariantDetachedContent] WHERE [merchProductVariantDetachedContent].[slug] = @Slug AND [merchProductVariantDetachedContent].[productVariantKey] != @Pvk"' new { @Slug = modSlug' @Pvk = detachedContent.ProductVariantKey }); " is 298.
Long Statement,Merchello.Core.Persistence.Repositories,ShipCountryRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipCountryRepository.cs,GetDeleteClauses,The length of the statement  "                "UPDATE merchShipment SET shipMethodKey = NULL WHERE shipMethodKey IN (SELECT pk FROM merchShipMethod WHERE shipCountryKey = @Key)"' " is 132.
Long Statement,Merchello.Core.Persistence.Repositories,ShipCountryRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipCountryRepository.cs,PersistNewItem,The length of the statement  "            if(Exists(entity.CatalogKey' entity.CountryCode)) throw new ConstraintException("A merchShipCountry record already exists with the CatalogKey and CountryCode"); " is 160.
Long Statement,Merchello.Core.Persistence.Repositories,ShipmentRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipmentRepository.cs,GetMaxDocumentNumber,The length of the statement  "            var value = Database.ExecuteScalar<object>("SELECT TOP 1 shipmentNumber FROM merchShipment ORDER BY shipmentNumber DESC"); " is 122.
Long Statement,Merchello.Core.Persistence.Repositories,ShipMethodRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ShipMethodRepository.cs,PersistNewItem,The length of the statement  "            if(GetByQuery(query).Any()) throw new ConstraintException("A Shipmethod already exists for this ShipCountry with this ServiceCode"); " is 132.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The length of the statement  "                return repository.GetKeysThatExistInAllCollections(collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 129.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The length of the statement  "                return repository.GetKeysThatExistInAllCollections(collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 135.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The length of the statement  "                return repository.GetKeysNotInAnyCollections(collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 123.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The length of the statement  "                return repository.GetKeysNotInAnyCollections(collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 129.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                return repository.GetKeysThatExistInAnyCollections(collectionKeys' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 129.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                return repository.GetKeysThatExistInAnyCollections(collectionKeys' term' min' max' page' itemsPerPage' orderExpression' sortDirection); " is 135.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetByAdvancedSearch,The length of the statement  "                return repository.GetByAdvancedSearch(collectionKey' includeFields' term' manufacturer' page' itemsPerPage' orderExpression' direction); " is 136.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetFromCollection,The length of the statement  "                return repository.GetFromCollection(collectionKey' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 120.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsThatExistInAllCollections,The length of the statement  "                return repository.GetEntitiesThatExistInAllCollections(collectionKeys.ToArray()' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 150.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetFromCollection,The length of the statement  "                return repository.GetFromCollection(collectionKey' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 132.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetProductsThatExistInAllCollections,The length of the statement  "                return repository.GetEntitiesThatExistInAllCollections(collectionKeys.ToArray()' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 162.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                        return repository.GetKeysThatExistInAnyCollections(collectionKeys.ToArray()' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 146.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysFromCollection,The length of the statement  "                return repository.GetKeysFromCollection(collectionKey' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 124.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The length of the statement  "                return repository.GetKeysThatExistInAllCollections(collectionKeys.ToArray()' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 146.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysFromCollection,The length of the statement  "                return repository.GetKeysFromCollection(collectionKey' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 136.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAllCollections,The length of the statement  "                return repository.GetKeysThatExistInAllCollections(collectionKeys.ToArray()' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 158.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInCollection,The length of the statement  "                return repository.GetKeysNotInCollection(collectionKey' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 125.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The length of the statement  "                return repository.GetKeysNotInAnyCollections(collectionKeys.ToArray()' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 140.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInCollection,The length of the statement  "                return repository.GetKeysNotInCollection(collectionKey' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 137.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysNotInAnyCollections,The length of the statement  "                return repository.GetKeysNotInAnyCollections(collectionKeys.ToArray()' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 152.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,GetKeysThatExistInAnyCollections,The length of the statement  "                return repository.GetKeysThatExistInAnyCollections(collectionKeys.ToArray()' searchTerm' page' itemsPerPage' this.ValidateSortByField(sortBy)' sortDirection); " is 158.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,EnsureVariants,The length of the statement  "                var variant = ((ProductVariantService)_productVariantService).CreateProductVariant(product' variantsToCheck' productAttributes.ToProductAttributeCollection()); " is 159.
Long Statement,Merchello.Core.Services,ProductService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductService.PortForward.cs,RemoveDetachedContentFromProduct,The length of the statement  "            foreach (var variant in product.ProductVariants.ToArray().Where(variant => variant.DetachedContents.Any(x => x.DetachedContentType.Key == detachedContentTypeKey))) " is 163.
Long Statement,Merchello.Core.Services,NoteService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\NoteService.cs,CreateNoteWithKey,The length of the statement  "            return CreateNoteWithKey(entityKey' EnumTypeFieldConverter.EntityType.GetTypeField(entityType).TypeKey' message' raiseEvents); " is 126.
Long Statement,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The length of the statement  "            return CreateAuditLogWithKey(entityKey' EnumTypeFieldConverter.EntityType.GetTypeField(entityType).TypeKey' message' new ExtendedDataCollection()' isError' raiseEvents); " is 169.
Long Statement,Merchello.Core.Services,AuditLogService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\AuditLogService.cs,CreateAuditLogWithKey,The length of the statement  "            return CreateAuditLogWithKey(entityKey' EnumTypeFieldConverter.EntityType.GetTypeField(entityType).TypeKey' message' extendedData' isError' raiseEvents); " is 153.
Long Statement,Merchello.Core.Services,CustomerAddressService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerAddressService.cs,GetDefaultCustomerAddress,The length of the statement  "                var query = Query<ICustomerAddress>.Builder.Where(x => x.CustomerKey == customerKey && x.AddressTypeFieldKey == typeFieldKey && x.IsDefault == true); " is 149.
Long Statement,Merchello.Core.Services,CustomerAddressService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerAddressService.cs,GetByCustomerKey,The length of the statement  "                var query = Query<ICustomerAddress>.Builder.Where(x => x.CustomerKey == customerKey && x.AddressTypeFieldKey == typeFieldKey); " is 126.
Long Statement,Merchello.Core.Services,CustomerAddressService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\CustomerAddressService.cs,GetCustomerAddressCount,The length of the statement  "                var query = Query<ICustomerAddress>.Builder.Where(x => x.CustomerKey == customerKey && x.AddressTypeFieldKey == typeFieldKey); " is 126.
Long Statement,Merchello.Core.Services,DetachedContentTypeService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\DetachedContentTypeService.cs,CreateDetachedContentType,The length of the statement  "            var dt = new DetachedContentType(entityTfKey' contentTypeKey.Equals(Guid.Empty) ? (Guid?)null : contentTypeKey) { Name = name }; " is 128.
Long Statement,Merchello.Core.Services,EntityCollectionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\EntityCollectionService.cs,GetRootLevelEntityCollections,The length of the statement  "                var query = Query<IEntityCollection>.Builder.Where(x => x.ParentKey == null && x.EntityTfKey == entityTfKey && x.ProviderKey == providerKey); " is 141.
Long Statement,Merchello.Core.Services,OfferRedeemedService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OfferRedeemedService.cs,GetByOfferSettingsKeyAndCustomerKey,The length of the statement  "                var query = Query<IOfferRedeemed>.Builder.Where(x => x.OfferSettingsKey == offerSettingsKey && x.CustomerKey == customerKey); " is 125.
Long Statement,Merchello.Core.Services,OrderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\OrderService.cs,DeleteShipments,The length of the statement  "            var shipmentKeys = order.Items.Select(x => ((IOrderLineItem)x).ShipmentKey).Where(x => x != null).Distinct().Select(x => x.Value).ToArray(); " is 140.
Long Statement,Merchello.Core.Services,PaymentMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentMethodService.cs,CreatePaymentMethodWithKey,The length of the statement  "            if (GetPaymentMethodByPaymentCode(providerKey' paymentCode) != null) return Attempt<IPaymentMethod>.Fail(new ConstraintException("A PaymentMethod already exists for the provider for the paymentCode '" + paymentCode + "'")); " is 223.
Long Statement,Merchello.Core.Services,PaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentService.cs,CreatePaymentWithKey,The length of the statement  "            return CreatePaymentWithKey(EnumTypeFieldConverter.PaymentMethod.GetTypeField(paymentMethodType).TypeKey' amount' paymentMethodKey); " is 132.
Long Statement,Merchello.Core.Services,PaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentService.cs,GetPaymentsByInvoiceKey,The length of the statement  "            var paymentKeys = _appliedPaymentService.GetAppliedPaymentsByInvoiceKey(invoiceKey).Select(x => x.PaymentKey).Distinct().ToArray(); " is 131.
Long Statement,Merchello.Core.Services,PaymentService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\PaymentService.cs,ApplyPaymentToInvoice,The length of the statement  "            return _appliedPaymentService.CreateAppliedPaymentWithKey(paymentKey' invoiceKey' appliedPaymentType' description' amount' raiseEvents); " is 136.
Long Statement,Merchello.Core.Services,ProductOptionService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductOptionService.cs,Delete,The length of the statement  "                MultiLogHelper.Warn<ProductOptionService>("A ProductOption delete attempt was aborted.  The option cannot be deleted due to it being shared with one or more products."); " is 169.
Long Statement,Merchello.Core.Services,TaxMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\TaxMethodService.cs,GetTaxMethodByCountryCode,The length of the statement  "                var specific = allTaxMethods.FirstOrDefault(x => x.ProviderKey.Equals(providerKey) && x.CountryCode.Equals(countryCode)); " is 121.
Long Statement,Merchello.Core.Services,TaxMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\TaxMethodService.cs,GetTaxMethodsByCountryCode,The length of the statement  "                    Query<ITaxMethod>.Builder.Where(x => x.CountryCode == countryCode || x.CountryCode == Constants.CountryCodes.EverywhereElse); " is 125.
Long Statement,Merchello.Core.Services,TaxMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\TaxMethodService.cs,CreateTaxMethodWithKey,The length of the statement  "            if (CountryTaxRateExists(providerKey' country.CountryCode)) return Attempt<ITaxMethod>.Fail(new ConstraintException("A TaxMethod already exists for the provider for the countryCode '" + country.CountryCode + "'")); " is 214.
Long Statement,Merchello.Core.Services,TaxMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\TaxMethodService.cs,CountryTaxRateExists,The length of the statement  "                return allTaxMethods.FirstOrDefault(x => x.ProviderKey.Equals(providerKey) && x.CountryCode.Equals(countryCode)) != null; " is 121.
Long Statement,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,CreatePaymentMethodWithKey,The length of the statement  "            return ((PaymentMethodService)_paymentMethodService).CreatePaymentMethodWithKey(providerKey' name' description' paymentCode); " is 125.
Long Statement,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,CreateNotificationMessageWithKey,The length of the statement  "            return _notificationMessageService.CreateNotificationMethodWithKey(methodKey' name' description' fromAddress' recipients' bodyText); " is 132.
Long Statement,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesByPaymentKey,The length of the statement  "            var invoiceKeys = _appliedPaymentService.GetAppliedPaymentsByPaymentKey(paymentKey).Select(x => x.InvoiceKey).ToArray(); " is 120.
Long Statement,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,GetInvoicesByDateRange,The length of the statement  "                var query = Persistence.Querying.Query<IInvoice>.Builder.Where(x => x.InvoiceDate >= correctStart && x.InvoiceDate <= correctEnd); " is 130.
Long Statement,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,AdjustInvoice,The length of the statement  "                var existing = invoice.Items.Where(x => x.LineItemType == LineItemType.Adjustment || x.ExtendedData != null && x.ExtendedData.ContainsKey(Constants.ExtendedDataKeys.Adjustment)).ToArray(); " is 188.
Long Statement,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,AdjustInvoice,The length of the statement  "                var removers = existing.Any() && !invoiceLineItems.Any() ? existing : existing.Where(x => goodKeys.All(y => y != x.Key)); " is 121.
Long Statement,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,ReSyncInvoiceTotal,The length of the statement  "            invoice.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2); " is 216.
Long Statement,Merchello.Core.Services,ItemCacheService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ItemCacheService.cs,GetCustomerItemCachePage,The length of the statement  "                return repository.GetCustomerItemCachePage(itemCacheTfKey' startDate' endDate' page' itemsPerPage' sortBy' sortDirection); " is 122.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariantWithKey,The length of the statement  "            var optionIds = product.ProductOptionsForAttributes(attributes).OrderBy(x => x.SortOrder).Select(x => x.Key).Distinct(); " is 120.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariantWithKey,The length of the statement  "            foreach (var att in optionIds.Select(key => attributes.FirstOrDefault(x => x.OptionKey == key)).Where(att => att != null)) " is 122.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariantWithKey,The length of the statement  "                sku += skuSeparator + (string.IsNullOrEmpty(att.Sku) ? Regex.Replace(att.Name' "[^0-9a-zA-Z]+"' string.Empty) : att.Sku); " is 121.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariantWithKey,The length of the statement  "            var productVariant = CreateProductVariant(product' GetByProductKey(product.Key).ToList()' name' sku' price' attributes); " is 120.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "            var optionIds = product.ProductOptionsForAttributes(attributes).OrderBy(x => x.SortOrder).Select(x => x.Key).Distinct(); " is 120.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "            foreach (var att in optionIds.Select(key => attributes.FirstOrDefault(x => x.OptionKey == key)).Where(att => att != null)) " is 122.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "                sku += skuSeparator + (string.IsNullOrEmpty(att.Sku) ? Regex.Replace(att.Name' "[^0-9a-zA-Z]+"' string.Empty) : att.Sku); " is 121.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "            Mandate.ParameterCondition(attributes.Count >= product.ProductOptions.Count(x => x.Required)' "An attribute must be assigned for every required option"); " is 153.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "            ////Mandate.ParameterCondition(false == ProductVariantWithAttributesExists(product' attributes)' "A ProductVariant already exists for the ProductAttributeCollection"); " is 167.
Long Statement,Merchello.Core.Services,ProductVariantService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ProductVariantService.cs,CreateProductVariant,The length of the statement  "                LogHelper.Debug<ProductVariantService>("Attempt to create a new variant that already exists.  Returning existing variant."); " is 124.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _anonymousCustomerService = new Lazy<IAnonymousCustomerService>(() => new AnonymousCustomerService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 179.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _appliedPaymentService = new Lazy<IAppliedPaymentService>(() => new AppliedPaymentService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 170.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _auditLogService = new Lazy<IAuditLogService>(() => new AuditLogService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 152.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _noteService = new Lazy<INoteService>(() => new NoteService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 140.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _customerAddressService = new Lazy<ICustomerAddressService>(() => new CustomerAddressService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 173.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _customerService = new Lazy<ICustomerService>(() => new CustomerService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _anonymousCustomerService.Value' _customerAddressService.Value' _invoiceService.Value' _paymentService.Value)); " is 262.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _detachedContentTypeService = new Lazy<IDetachedContentTypeService>(() => new DetachedContentTypeService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 185.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _digitalMediaService = new Lazy<IDigitalMediaService>(() => new DigitalMediaService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 164.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _entityCollectionService = new Lazy<IEntityCollectionService>(() => new EntityCollectionService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 176.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _itemCacheService = new Lazy<IItemCacheService>(() => new ItemCacheService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 155.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _notificationMethodService = new Lazy<INotificationMethodService>(() => new NotificationMethodService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 182.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _notificationMessageService = new Lazy<INotificationMessageService>(() => new NotificationMessageService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 185.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _offerSettingsService = new Lazy<IOfferSettingsService>(() => new OfferSettingsService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 167.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _offerRedeemedService = new Lazy<IOfferRedeemedService>(() => new OfferRedeemedService(DatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 165.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _paymentService = new Lazy<IPaymentService>(() => new PaymentService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _appliedPaymentService.Value)); " is 179.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _paymentMethodService = new Lazy<IPaymentMethodService>(() => new PaymentMethodService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 167.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _productVariantService = new Lazy<IProductVariantService>(() => new ProductVariantService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 170.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _productService = new Lazy<IProductService>(() => new ProductService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _productVariantService.Value)); " is 179.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _productOptionService = new Lazy<IProductOptionService>(() => new ProductOptionService(DatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 165.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _storeSettingsService = new Lazy<IStoreSettingService>(() => new StoreSettingService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 165.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _shipCountryService = new Lazy<IShipCountryService>(() => new ShipCountryService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _storeSettingsService.Value)); " is 190.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _shipMethodService = new Lazy<IShipMethodService>(() => new ShipMethodService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 158.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _shipRateTierService = new Lazy<IShipRateTierService>(() => new ShipRateTierService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 164.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _shipmentService = new Lazy<IShipmentService>(() => new ShipmentService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _storeSettingsService.Value)); " is 181.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _orderService = new Lazy<IOrderService>(() => new OrderService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _storeSettingsService.Value' _shipmentService.Value)); " is 196.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _invoiceService = new Lazy<IInvoiceService>(() => new InvoiceService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _appliedPaymentService.Value' _orderService.Value' _storeSettingsService.Value)); " is 229.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _countryTaxRateService = new Lazy<ITaxMethodService>(() => new TaxMethodService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _storeSettingsService.Value)); " is 189.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _gatewayProviderService = new Lazy<IGatewayProviderService>(() => new GatewayProviderService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _shipMethodService.Value' _shipRateTierService.Value' _shipCountryService.Value' _invoiceService.Value' _orderService.Value' _countryTaxRateService.Value' _paymentService.Value' _paymentMethodService.Value' _notificationMethodService.Value' _notificationMessageService.Value' _warehouseService.Value)); " is 474.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _warehouseCatalogService = new Lazy<IWarehouseCatalogService>(() => new WarehouseCatalogService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _productVariantService.Value)); " is 206.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _warehouseService = new Lazy<IWarehouseService>(() => new WarehouseService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory' _warehouseCatalogService.Value)); " is 187.
Long Statement,Merchello.Core.Services,ServiceContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ServiceContext.cs,BuildServiceContext,The length of the statement  "                _notificationMessageService = new Lazy<INotificationMessageService>(() => new NotificationMessageService(dbDatabaseUnitOfWorkProvider' repositoryFactory' logger' eventMessagesFactory)); " is 185.
Long Statement,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,CreateShipCountryWithKey,The length of the statement  "                ? Attempt<IShipCountry>.Fail(new ArgumentException("Could not create a country for country code '" + countryCode + "'"))  " is 120.
Long Statement,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,CreateShipCountryWithKey,The length of the statement  "            var sc = GetShipCountriesByCatalogKey(warehouseCatalogKey).FirstOrDefault(x => x.CountryCode.Equals(country.CountryCode)); " is 122.
Long Statement,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,GetShipCountriesByCatalogKey,The length of the statement  "            using (var repository = RepositoryFactory.CreateShipCountryRepository(UowProvider.GetUnitOfWork()' _storeSettingService)) " is 121.
Long Statement,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,GetByKey,The length of the statement  "            using (var repository = RepositoryFactory.CreateShipCountryRepository(UowProvider.GetUnitOfWork()' _storeSettingService)) " is 121.
Long Statement,Merchello.Core.Services,ShipCountryService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipCountryService.cs,GetAllShipCountries,The length of the statement  "            using (var repository = RepositoryFactory.CreateShipCountryRepository(UowProvider.GetUnitOfWork()' _storeSettingService)) " is 121.
Long Statement,Merchello.Core.Services,ShipMethodService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\ShipMethodService.cs,CreateShipMethodWithKey,The length of the statement  "                return Attempt<IShipMethod>.Fail(new ConstraintException("A Shipmethod already exists for this ShipCountry with this ServiceCode")); " is 132.
Long Statement,Merchello.Core.Services,StoreSettingService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\StoreSettingService.cs,GetNextInvoiceNumber,The length of the statement  "                        invoiceNumber = repository.GetNextInvoiceNumber(Core.Constants.StoreSetting.NextInvoiceNumberKey' validationRepository.GetMaxDocumentNumber' invoicesCount); " is 156.
Long Statement,Merchello.Core.Services,StoreSettingService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\StoreSettingService.cs,GetNextOrderNumber,The length of the statement  "                        orderNumber = repository.GetNextOrderNumber(Core.Constants.StoreSetting.NextOrderNumberKey' validationRepository.GetMaxDocumentNumber' ordersCount); " is 148.
Long Statement,Merchello.Core.Services,StoreSettingService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\StoreSettingService.cs,GetNextShipmentNumber,The length of the statement  "                        shipmentNumber = repository.GetNextShipmentNumber(Core.Constants.StoreSetting.NextShipmentNumberKey' validationRepository.GetMaxDocumentNumber' shipmentsCount); " is 160.
Long Statement,Merchello.Core.Services,StoreSettingService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\StoreSettingService.cs,GetCountryFromConfig,The length of the statement  "            return MerchelloConfiguration.Current.MerchelloCountries().Countries.FirstOrDefault(x => x.CountryCode.Equals(countryCode' StringComparison.InvariantCultureIgnoreCase)); " is 169.
Long Statement,Merchello.Core.Strategies.Itemization,InvoiceItemizationStrategyBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Itemization\InvoiceItemizationStrategyBase.cs,Itemize,The length of the statement  "                MultiLogHelper.Warn<InvoiceItemizationStrategyBase>("Reconciliation of invoice total failed in the itemization strategy"); " is 122.
Long Statement,Merchello.Core.Strategies.Itemization,InvoiceItemizationStrategyBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Itemization\InvoiceItemizationStrategyBase.cs,GetLineItemCollection,The length of the statement  "            return this.Invoice.Items.Where(x => x.LineItemType == lineItemType).Select(x => x.AsLineItemWithKeyOf<InvoiceLineItem>()); " is 123.
Long Statement,Merchello.Core.Strategies.Itemization,ProductBasedTaxationVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Itemization\ProductBasedTaxationVisitor.cs,Visit,The length of the statement  "            var taxesIncludedInPrice = bool.Parse(item.ExtendedData.GetValue(Constants.ExtendedDataKeys.TaxIncludedInProductPrice)); " is 120.
Long Statement,Merchello.Core.Strategies.Itemization,ProductBasedTaxationVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Itemization\ProductBasedTaxationVisitor.cs,Visit,The length of the statement  "                var taxItem = new InvoiceLineItem(LineItemType.Tax' string.Format("{0} Tax"' item.Name)' string.Format("{0}-Tax"' item.Sku)' item.Quantity' ConvertToDecimal(item.ExtendedData.GetValue(taxKey))); " is 194.
Long Statement,Merchello.Core.Strategies.Itemization,ProductBasedTaxationVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Itemization\ProductBasedTaxationVisitor.cs,ConvertToDecimal,The length of the statement  "            return decimal.TryParse(value' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out converted) ? converted : 0; " is 124.
Long Statement,Merchello.Core.Gateways.Payment,PaymentGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodBase.cs,RefundPayment,The length of the statement  "            if (!invoice.HasIdentity) return new PaymentResult(Attempt<IPayment>.Fail(new InvalidOperationException("Cannot refund a payment on an invoice that cannot have payments"))' invoice' false); " is 189.
Long Statement,Merchello.Core.Gateways.Payment,PaymentGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodBase.cs,VoidPayment,The length of the statement  "            if (!invoice.HasIdentity) return new PaymentResult(Attempt<IPayment>.Fail(new InvalidOperationException("Cannot void a payment on an invoice that cannot have payments"))' invoice' false); " is 187.
Long Statement,Merchello.Core.Gateways.Payment,PaymentGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentGatewayMethodBase.cs,AssertPaymentApplied,The length of the statement  "                GatewayProviderService.ApplyPaymentToInvoice(payment.Key' invoice.Key' AppliedPaymentType.Debit' PaymentMethod.Name' payment.Amount); " is 133.
Long Statement,Merchello.Core.Gateways.Payment,PaymentContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\PaymentContext.cs,GetPaymentGatewayMethods,The length of the statement  "            var paymentProviders = GatewayProviderResolver.GetActivatedProviders<PaymentGatewayProviderBase>() as IEnumerable<PaymentGatewayProviderBase>; " is 142.
Long Statement,Merchello.Core.Gateways.Taxation,TaxableLineItemVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\TaxableLineItemVisitor.cs,Visit,The length of the statement  "                lineItem.ExtendedData.SetValue(Constants.ExtendedDataKeys.LineItemTaxAmount' (-lineItem.TotalPrice * this._taxRate).ToString(CultureInfo.InvariantCulture)); " is 156.
Long Statement,Merchello.Core.Gateways.Taxation,TaxableLineItemVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\TaxableLineItemVisitor.cs,Visit,The length of the statement  "                lineItem.ExtendedData.SetValue(Constants.ExtendedDataKeys.LineItemTaxAmount' (lineItem.TotalPrice * this._taxRate).ToString(CultureInfo.InvariantCulture)); " is 155.
Long Statement,Merchello.Core.Gateways.Taxation,TaxationContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\TaxationContext.cs,GetTaxationByProductMethod,The length of the statement  "                var error = new NullReferenceException("Could not reTaxationGatewayProvider for CalculateTaxForProduct could not be resolved"); " is 127.
Long Statement,Merchello.Core.Marketing.Offer,OfferBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferBase.cs,EnsureValidOffer,The length of the statement  "                return Attempt<IOfferResult<object' object>>.Fail(seed' new OfferRedemptionException("Offer does not have a configured award")); " is 128.
Long Statement,Merchello.Core.Marketing.Offer,OfferBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferBase.cs,EnsureValidOffer,The length of the statement  "                seed.Messages.Add("An offer processor could not be resolved for this offer.  Custom offers must have custom offer processors defined."); " is 136.
Long Statement,Merchello.Core.Marketing.Offer,OfferBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferBase.cs,EnsureValidOffer,The length of the statement  "                return Attempt<IOfferResult<object' object>>.Fail(seed' new OfferRedemptionException("Offer processor was not resolved")); " is 122.
Long Statement,Merchello.Core.Marketing.Offer,OfferManagerBase<TOffer>,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferManagerBase.cs,GetByOfferCode,The length of the statement  "            if (string.IsNullOrEmpty(offerCode)) return Attempt<TOffer>.Fail(new OfferRedemptionException("Offer code was not provided")); " is 126.
Long Statement,Merchello.Core.Marketing.Offer,OfferProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Marketing\Offer\OfferProviderResolver.cs,GetOfferProvider,The length of the statement  "            return (T)(from value in _offerProviderCache.Values let t = value.GetType() where typeof(T).IsAssignableFrom(t) select value).FirstOrDefault(); " is 143.
Long Statement,Merchello.Core.Formatters,PatternReplaceFormatter,C:\repos\Merchello_Merchello\src\Merchello.Core\Formatters\PatternReplaceFormatter.cs,Format,The length of the statement  "            return _patterns.Aggregate(value' (current' search) => current.Replace(search.Value.Pattern' search.Value.Replacement)); " is 120.
Long Statement,Merchello.Core.Formatters,PatternReplaceFormatter,C:\repos\Merchello_Merchello\src\Merchello.Core\Formatters\PatternReplaceFormatter.cs,GetPatternReplaceFormatter,The length of the statement  "            foreach (var replacement in MerchelloConfiguration.Current.PatternFormatter.GetReplacements().Where(x => x.ReplacementInMonitor).Select(config => new ReplaceablePattern(config)).Where(replacement => !dictionary.ContainsKey(replacement.Alias))) " is 243.
Long Statement,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,GetActivatedProviders,The length of the statement  "            return (from value in _activatedGatewayProviderCache.Values let t = value.GetType() where typeof(T).IsAssignableFrom(t) select value as T).ToList(); " is 148.
Long Statement,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,BuildActivatedGatewayProviderCache,The length of the statement  "                    MultiLogHelper.Error<GatewayProviderResolver>(string.Format("Failed to create instance of type {0}"' provider.Name)' attempt.Exception); " is 136.
Long Statement,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,CreateInstance,The length of the statement  "            var providerType = InstanceTypes.FirstOrDefault(x => x.GetCustomAttribute<GatewayProviderActivationAttribute>(false).Key == providerSettings.Key); " is 146.
Long Statement,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,CreateInstance,The length of the statement  "                Attempt<GatewayProviderBase>.Fail(new Exception(string.Format("Failed to find type for provider {0}"' providerSettings.Name))) : " is 128.
Long Statement,Merchello.Core.Gateways,GatewayProviderResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayProviderResolver.cs,CreateInstance,The length of the statement  "                ActivatorHelper.CreateInstance<GatewayProviderBase>(providerType' new object[] { _gatewayProviderService' providerSettings' _runtimeCache }); " is 141.
Long Statement,Merchello.Core.Gateways,GatewayContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayContext.cs,BuildGatewayContext,The length of the statement  "                _shipping = new Lazy<IShippingContext>(() => new ShippingContext(gatewayProviderService' storeSettingService' _resolver)); " is 122.
Long Statement,Merchello.Core.Gateways,GatewayContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\GatewayContext.cs,BuildGatewayContext,The length of the statement  "                _taxation = new Lazy<ITaxationContext>(() => new TaxationContext(gatewayProviderService' storeSettingService' _resolver)); " is 122.
Long Statement,Merchello.Core.Observation,TriggerResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Observation\TriggerResolver.cs,GetTriggersByAlias,The length of the statement  "                                      String.Equals(x.GetType().GetCustomAttribute<TriggerForAttribute>(false).Alias' alias' StringComparison.InvariantCultureIgnoreCase) && " is 134.
Long Statement,Merchello.Core.Chains.InvoiceCreation.SalesPreparation,AddBillingInfoToInvoiceTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\InvoiceCreation\SalesPreparation\AddBillingInfoToInvoiceTask.cs,PerformTask,The length of the statement  "            if (address == null) return Attempt<IInvoice>.Fail(new InvalidDataException("Billing information could not be retrieved from the Checkout")); " is 141.
Long Statement,Merchello.Core.Chains.InvoiceCreation.SalesPreparation,ValidateCommonCurrency,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\InvoiceCreation\SalesPreparation\ValidateCommonCurrency.cs,PerformTask,The length of the statement  "                       : Attempt<IInvoice>.Fail(new InvalidDataException("Invoice is being created with line items costed in different currencies.")); " is 127.
Long Statement,Merchello.Core.Chains.ShipmentCreation,AddShippableOrderLineItemsToShipmentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ShipmentCreation\AddShippableOrderLineItemsToShipmentTask.cs,PerformTask,The length of the statement  "            var unfulfilled = Order.UnfulfilledItems(MerchelloContext).Where(x => x.BackOrder == false && KeysToShip.Contains(x.Key)).ToArray(); " is 132.
Long Statement,Merchello.Core.Chains.ShipmentCreation,AddShippableOrderLineItemsToShipmentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ShipmentCreation\AddShippableOrderLineItemsToShipmentTask.cs,PerformTask,The length of the statement  "            if (unfulfilled.Count() != Order.Items.Count(x => KeysToShip.Contains(x.Key))) return Attempt<IShipment>.Fail(new InvalidOperationException("The order contains items that are either on back order or cannot be shipped.")); " is 221.
Long Statement,Merchello.Core.Chains.ShipmentCreation,RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ShipmentCreation\RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask.cs,PerformTask,The length of the statement  "                    if (variant == null) return Attempt<IShipment>.Fail(new NullReferenceException("A ProductVariant reference in the order could not be found")); " is 142.
Long Statement,Merchello.Core.Chains.ShipmentCreation,RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ShipmentCreation\RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask.cs,PerformTask,The length of the statement  "                    var inventory = variant.CatalogInventories.FirstOrDefault(x => x.CatalogKey == item.ExtendedData.GetWarehouseCatalogKey()); " is 123.
Long Statement,Merchello.Core.Chains.ShipmentCreation,RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask,C:\repos\Merchello_Merchello\src\Merchello.Core\Chains\ShipmentCreation\RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask.cs,PerformTask,The length of the statement  "                    if (inventory == null) return Attempt<IShipment>.Fail(new NullReferenceException("An inventory record could not be found for an order line item")); " is 147.
Long Statement,Merchello.Core.Gateways.Notification,NotificationContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\NotificationContext.cs,Send,The length of the statement  "            var provider = activeProviders.FirstOrDefault(x => ((NotificationGatewayProviderBase)x).NotificationMethods.Any(y => y.Key == message.MethodKey)) as NotificationGatewayProviderBase; " is 181.
Long Statement,Merchello.Core.Gateways.Notification,NotificationGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\NotificationGatewayMethodBase.cs,CreateNotificationMessage,The length of the statement  "            var attempt = GatewayProviderService.CreateNotificationMessageWithKey(_notificationMethod.Key' name'description' fromAddress' recipients' bodyText); " is 148.
Long Statement,Merchello.Core.Gateways.Notification,NotificationGatewayProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\NotificationGatewayProviderBase.cs,GetNotificationGatewayMethodByKey,The length of the statement  "            return GetAllNotificationGatewayMethods().FirstOrDefault(x => x.NotificationMethod.Key == notificationGatewayMethodKey); " is 120.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayMethod.cs,Send,The length of the statement  "                LogHelper.Error<SmtpNotificationGatewayMethod>("Merchello.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod  failed sending email"' ex); " is 148.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayMethod.cs,SendAsync,The length of the statement  "            //// See http://blogs.msdn.com/b/webdev/archive/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-long-background-process-in-asp-net.aspx " is 151.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayMethod.cs,SendAsync,The length of the statement  "                MultiLogHelper.Error<SmtpNotificationGatewayMethod>("Merchello.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod  failed sending email"' ex); " is 153.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayProvider.cs,CreateNotificationMethod,The length of the statement  "            if (attempt.Success) return new SmtpNotificationGatewayMethod(GatewayProviderService' attempt.Result' GatewayProviderSettings.ExtendedData); " is 140.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayProvider.cs,CreateNotificationMethod,The length of the statement  "            LogHelper.Error<NotificationGatewayProviderBase>(string.Format("Failed to create NotificationGatewayMethod GatewayResource: {0} ' {1}"' gatewayResource.Name' gatewayResource.ServiceCode)' attempt.Exception); " is 207.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayProvider.cs,GetAllNotificationGatewayMethods,The length of the statement  "             return NotificationMethods.Select(method => new SmtpNotificationGatewayMethod(GatewayProviderService' method' ExtendedData)); " is 125.
Long Statement,Merchello.Core.Gateways.Notification.Smtp,SmtpProviderExtendedDataExtensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpProviderExtendedDataExtensions.cs,GetSmtpProviderSettings,The length of the statement  "            if(!extendedData.ContainsKey(Constants.ExtendedDataKeys.SmtpProviderSettings)) return new SmtpNotificationGatewayProviderSettings(); " is 132.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformAuthorizePayment,The length of the statement  "            // so we create an applied payment with a 0 amount.  Once the payment has been "collected"' another Applied Payment record will " is 127.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformAuthorizePayment,The length of the statement  "            GatewayProviderService.ApplyPaymentToInvoice(payment.Key' invoice.Key' AppliedPaymentType.Debit' string.Format("To show promise of a {0} payment"' PaymentMethod.Name)' 0); " is 171.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformAuthorizeCapturePayment,The length of the statement  "            GatewayProviderService.ApplyPaymentToInvoice(payment.Key' invoice.Key' AppliedPaymentType.Debit' "Cash payment"' amount); " is 121.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformAuthorizeCapturePayment,The length of the statement  "            return new PaymentResult(Attempt<IPayment>.Succeed(payment)' invoice' CalculateTotalOwed(invoice).CompareTo(amount) <= 0); " is 122.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformCapturePayment,The length of the statement  "            GatewayProviderService.ApplyPaymentToInvoice(payment.Key' invoice.Key' AppliedPaymentType.Debit' "Cash payment"' amount); " is 121.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformCapturePayment,The length of the statement  "            return new PaymentResult(Attempt<IPayment>.Succeed(payment)' invoice' CalculateTotalOwed(invoice).CompareTo(amount) <= 0); " is 122.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayMethod.cs,PerformRefundPayment,The length of the statement  "                GatewayProviderService.ApplyPaymentToInvoice(payment.Key' invoice.Key' AppliedPaymentType.Debit' "To show partial payment remaining after refund"' payment.Amount); " is 163.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayProvider.cs,CreatePaymentMethod,The length of the statement  "            var attempt = GatewayProviderService.CreatePaymentMethodWithKey(GatewayProviderSettings.Key' name' description' paymentCode); " is 125.
Long Statement,Merchello.Core.Gateways.Payment.Cash,CashPaymentGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Payment\Cash\CashPaymentGatewayProvider.cs,CreatePaymentMethod,The length of the statement  "            MultiLogHelper.Error<CashPaymentGatewayProvider>(string.Format("Failed to create a payment method name: {0}' description {1}' paymentCode {2}"' name' description' paymentCode)' attempt.Exception); " is 196.
Long Statement,Merchello.Core.Persistence,DatabaseExtensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\DatabaseExtensions.cs,GetDbTableColumnSize,The length of the statement  "            var sql = new Sql("SELECT character_maximum_length FROM information_schema.columns WHERE table_name = @table AND column_name = @column"' new { @table = tableName' @column = columnName }); " is 187.
Long Statement,Merchello.Core.Persistence,RepositoryFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\RepositoryFactory.cs,CreateCustomerRepository,The length of the statement  "            return new CustomerRepository(uow' _cacheHelper' CreateCustomerAddressRepository(uow)' CreateNoteRepository(uow)' _logger' _sqlSyntax); " is 135.
Long Statement,Merchello.Core.Persistence,RepositoryFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\RepositoryFactory.cs,CreateProductRepository,The length of the statement  "            return new ProductRepository(uow' _cacheHelper' _logger' _sqlSyntax' CreateProductVariantRepository(uow)' CreateProductOptionRepository(uow)); " is 142.
Long Statement,Merchello.Core.Persistence.Factories,GatewayProviderSettingsFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Factories\GatewayProviderSettingsFactory.cs,BuildEntity,The length of the statement  "            Mandate.ParameterCondition(t.GetCustomAttribute<GatewayProviderActivationAttribute>(false) != null' "Type t must have a GatewayProviderActivationAttribute"); " is 157.
Long Statement,Merchello.Core.Persistence.Factories,PaymentFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Factories\PaymentFactory.cs,BuildEntity,The length of the statement  "            var payment = new Payment(dto.PaymentTfKey' dto.Amount' dto.PaymentMethodKey' new ExtendedDataCollection(dto.ExtendedData)) " is 123.
Long Statement,Merchello.Core.Persistence.Mappers,GatewayProviderMapper,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Mappers\GatewayProviderMapper.cs,BuildMap,The length of the statement  "            CacheMap<GatewayProviderSettings' GatewayProviderSettingsDto>(src => src.EncryptExtendedData' dto => dto.EncryptExtendedData); " is 126.
Long Statement,Merchello.Core.Persistence.Migrations,CoreMigrationManager,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\CoreMigrationManager.cs,EnsureDatabase,The length of the statement  "            var databaseSchemaCreation = new DatabaseSchemaCreation(_database' _logger' new DatabaseSchemaHelper(_database' _logger' _sqlSyntaxProvider)' _sqlSyntaxProvider); " is 162.
Long Statement,Merchello.Core.Persistence.Migrations,CoreMigrationManager,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\CoreMigrationManager.cs,UpgradeMerchello,The length of the statement  "            var databaseSchemaCreation = new DatabaseSchemaCreation(_database' _logger' new DatabaseSchemaHelper(_database' _logger' _sqlSyntaxProvider)' _sqlSyntaxProvider); " is 162.
Long Statement,Merchello.Core.Persistence.Migrations,CoreMigrationManager,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\CoreMigrationManager.cs,InitializeMigrations,The length of the statement  "                        _logger.Info<CoreMigrationManager>(string.Format("Added UPGRADE migration '{0}' to context"' baseMigration.GetType().Name)); " is 124.
Long Statement,Merchello.Core.Persistence.Migrations,CoreMigrationManager,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\CoreMigrationManager.cs,InitializeMigrations,The length of the statement  "                        _logger.Info<CoreMigrationManager>(string.Format("Added DOWNGRADE migration '{0}' to context"' baseMigration.GetType().Name)); " is 126.
Long Statement,Merchello.Core.Persistence.Migrations,CoreMigrationManager,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\CoreMigrationManager.cs,InsertMigrationKey,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.MigrationKey' Name = "migration"' Value = migrationKey' TypeName = "System.Guid"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 241.
Long Statement,Merchello.Core.Persistence.Migrations,MigrationResolver,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\MigrationResolver.cs,OrderedUpgradeMigrations,The length of the statement  "                                    (migrationAttribute.MinimumCurrentVersion == null || currentVersionToCompare >= migrationAttribute.MinimumCurrentVersion) " is 121.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero,AddEntityCollectionColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeZero\AddEntityCollectionColumns.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.3.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero,AlterAppliedPaymentDescriptionFieldSize,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeZero\AlterAppliedPaymentDescriptionFieldSize.cs,Down,The length of the statement  "			throw new DataLossException("Cannot downgrade from a version 2.3.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,AddEntityCollectionTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\AddEntityCollectionTypeField.cs,Up,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.EntityCollection.TypeKey' Alias = entity.EntityCollection.Alias' Name = entity.EntityCollection.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 234.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,AddEntityCollectionTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\AddEntityCollectionTypeField.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.9.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,CreateCustomer2EntityCollectionTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\CreateCustomer2EntityCollectionTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.11.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,CreateInvoice2EntityCollectionTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\CreateInvoice2EntityCollectionTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.11.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,CreateProduct2EntityCollectionTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\CreateProduct2EntityCollectionTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.11.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero,CreateEntityCollectionTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneElevenZero\CreateEntityCollectionTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.11.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero,AddIndexToProductVariantSku,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneFourteenZero\AddIndexToProductVariantSku.cs,Up,The length of the statement  "                Logger.Info(typeof(AddInvoiceCurrencyCodeColumn)' "Adding unique nonclustered index to sku column on merchProductVariant table."); " is 130.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero,AddInvoiceCurrencyCodeColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneFourteenZero\AddInvoiceCurrencyCodeColumn.cs,Up,The length of the statement  "                //    PATINDEX('%<merchCurrencyCode>%'' (SELECT TOP 1 extendedData FROM merchInvoiceItem WHERE invoiceKey = T1.pk)) + 19 " is 120.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero,AddInvoiceCurrencyCodeColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneFourteenZero\AddInvoiceCurrencyCodeColumn.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.14.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero,InsertNewMerchelloSettingsGlobalTaxationApplicationKey,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneTenZero\InsertNewMerchelloSettingsGlobalTaxationApplicationKey.cs,Up,The length of the statement  "            this._database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.GlobalTaxationApplicationKey' Name = "globalTaxationApplication"' Value = TaxationApplication.Invoice.ToString()' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 306.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo,InsertNewMerchelloSettingsMigrationKey,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneEightTwo\InsertNewMerchelloSettingsMigrationKey.cs,Up,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.MigrationKey' Name = "migration"' Value = Guid.NewGuid().ToString()' TypeName = "System.Guid"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 254.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo,InsertNewMerchelloSettingsMigrationKey,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneEightTwo\InsertNewMerchelloSettingsMigrationKey.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.8.2 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero,CreateOneNineZeroTables,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneNineZero\CreateOneNineZeroTables.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.9.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero,InsertNewTypeFieldData,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneNineZero\InsertNewTypeFieldData.cs,Up,The length of the statement  "            database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.CustomerCredit.TypeKey' Alias = entity.CustomerCredit.Alias' Name = entity.CustomerCredit.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 227.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero,InsertNewTypeFieldData,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneNineZero\InsertNewTypeFieldData.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.9.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne,CreateNoteTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneThirteenOne\CreateNoteTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.13.1 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero,CreateDetachedPublishedContentTypeTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneTwelveZero\CreateDetachedPublishedContentTypeTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.12.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero,CreateProductVariantDetachedContentTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneTwelveZero\CreateProductVariantDetachedContentTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 1.12.0 database to a prior version' the database schema has already been modified"); " is 145.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero,InsertNewMerchelloSettingDefaultExtendedContentCulture,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneTwelveZero\InsertNewMerchelloSettingDefaultExtendedContentCulture.cs,Up,The length of the statement  "            this._database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.DefaultExtendedContentCulture' Name = "defaultExtendedContentCulture"' Value = "en-US"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 280.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProduct2ProductOptionColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProduct2ProductOptionColumns.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.2.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductAttributeColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductAttributeColumns.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.2.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionColumns.cs,Up,The length of the statement  "            if (columns.Any(x => x.TableName.InvariantEquals("merchProductOption") && x.ColumnName.InvariantEquals("detachedContentTypeKey")) " is 129.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionColumns.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.2.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionTypeField.cs,Up,The length of the statement  "            var dtos = database.Fetch<TypeFieldDto>("SELECT * FROM merchTypeField WHERE merchTypeField.pk = @key"' new { @key = entity.ProductOption.TypeKey }); " is 148.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionTypeField.cs,Up,The length of the statement  "            database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.ProductOption.TypeKey' Alias = entity.ProductOption.Alias' Name = entity.ProductOption.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 224.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionTypeField.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.2.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,CreateProductOptionAttributeShareTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\CreateProductOptionAttributeShareTable.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.2.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,AddNoteAuthorColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\AddNoteAuthorColumn.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.0.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,AddNoteInternalOnlyColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\AddNoteInternalOnlyColumn.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.0.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,AddRedirectPaymentMethodType,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\AddRedirectPaymentMethodType.cs,Up,The length of the statement  "            this._database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Redirect.TypeKey' Alias = entity.Redirect.Alias' Name = entity.Redirect.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 215.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,AddRedirectPaymentMethodType,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\AddRedirectPaymentMethodType.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.0.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,AddStoreSettingHasDomainRecord,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\AddStoreSettingHasDomainRecord.cs,Up,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.HasDomainRecordKey' Name = "hasDomainRecord"' Value = false.ToString()' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 260.
Long Statement,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero,CopyOriginalCustomerNotesToFirstNote,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoZeroZero\CopyOriginalCustomerNotesToFirstNote.cs,Down,The length of the statement  "            throw new DataLossException("Cannot downgrade from a version 2.0.0 database to a prior version' the database schema has already been modified"); " is 144.
Long Statement,Merchello.Core.Persistence.Querying,BaseExpressionHelper<T>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Querying\BaseExpressionHelper.cs,VisitMethodCall,The length of the statement  "            //          m.Arguments.Length == 3' therefor' m.Arguments[0] == x.Path' m.Arguments[1] == content.Path' m.Arguments[2] == TextColumnType.NVarchar  " is 146.
Long Statement,Merchello.Core.Persistence.UnitOfWork,PetaPocoUnitOfWork,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\UnitOfWork\PetaPocoUnitOfWork.cs,CommitBulk,The length of the statement  "                            ((IBulkOperationRepository<TEntity>)operationGroup.Key.Repository).PersistNewItems(operationGroup.Select(o => (TEntity)o.Entity)); " is 130.
Long Statement,Merchello.Core.Persistence.UnitOfWork,PetaPocoUnitOfWork,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\UnitOfWork\PetaPocoUnitOfWork.cs,CommitBulk,The length of the statement  "                            ((IBulkOperationRepository<TEntity>)operationGroup.Key.Repository).PersistUpdatedItems(operationGroup.Select(o => (TEntity)o.Entity)); " is 134.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayMethod.cs,QuoteShipment,The length of the statement  "            var visitor = new FixedRateShipmentLineItemVisitor { UseOnSalePriceIfOnSale = MerchelloConfiguration.Current.QuoteShipmentUsingOnSalePrice }; " is 141.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayMethod.cs,CalculateVaryByWeight,The length of the statement  "                return Attempt<IShipmentRateQuote>.Succeed(new ShipmentRateQuote(shipment' ShipMethod) { Rate = AdjustedRate(tier.Rate' province) }); " is 133.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayMethod.cs,CalculateVaryByPrice,The length of the statement  "            return Attempt<IShipmentRateQuote>.Succeed(new ShipmentRateQuote(shipment' ShipMethod) { Rate = AdjustedRate(tier.Rate' province) }); " is 133.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayProvider.cs,CreateShippingGatewayMethod,The length of the statement  "            var attempt = GatewayProviderService.CreateShipMethodWithKey(GatewayProviderSettings.Key' shipCountry' name' gatewayResource.ServiceCode + string.Format("-{0}"' Guid.NewGuid())); " is 178.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayProvider.cs,SaveShippingGatewayMethod,The length of the statement  "            ShippingFixedRateTable.Save(GatewayProviderService' RuntimeCache' ((FixedRateShippingGatewayMethod) shippingGatewayMethod).RateTable); " is 134.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,FixedRateShippingGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\FixedRateShippingGatewayProvider.cs,GetAllShippingGatewayMethods,The length of the statement  "                shipMethod => new FixedRateShippingGatewayMethod(AvailableResources.FirstOrDefault(x => shipMethod.ServiceCode.StartsWith(x.ServiceCode))' shipMethod' shipCountry' ShippingFixedRateTable.GetShipRateTable(GatewayProviderService' RuntimeCache' shipMethod.Key))) " is 259.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,ShippingFixedRateTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\ShippingFixedRateTable.cs,DeleteRow,The length of the statement  "            if (!IsTest) DeleteRow(MerchelloContext.Current.Services.GatewayProviderService' MerchelloContext.Current.Cache.RuntimeCache' this' shipRateTier); " is 146.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,ShippingFixedRateTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\ShippingFixedRateTable.cs,AddRow,The length of the statement  "                if (Rows.FirstOrDefault(x => x.RangeLow == shipRateTier.RangeLow && x.RangeHigh == shipRateTier.RangeHigh) != null) return; " is 123.
Long Statement,Merchello.Core.Gateways.Shipping.FixedRate,ShippingFixedRateTable,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\FixedRate\ShippingFixedRateTable.cs,AddRow,The length of the statement  "                var index = Rows.IndexOf(Rows.Where(y => y.RangeHigh >= shipRateTier.RangeLow).OrderBy(z => z.RangeLow).FirstOrDefault()); " is 122.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixedRateTaxationGatewayProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixedRateTaxationGatewayProvider.cs,CreateTaxMethod,The length of the statement  "                : Attempt<ITaxMethod>.Fail(new ConstraintException("A fixed tax rate method has already been defined for " + countryCode)); " is 123.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixedRateTaxCalculationStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixedRateTaxCalculationStrategy.cs,CalculateTaxesForInvoice,The length of the statement  "                    baseTaxRate = AdjustedRate(baseTaxRate' _taxMethod.Provinces.FirstOrDefault(x => x.Code == TaxAddress.Region)' extendedData); " is 125.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixedRateTaxCalculationStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixedRateTaxCalculationStrategy.cs,CalculateTaxesForInvoice,The length of the statement  "                var totalTax = visitor.TaxableLineItems.Sum(x => decimal.Parse(x.ExtendedData.GetValue(Core.Constants.ExtendedDataKeys.LineItemTaxAmount)' CultureInfo.InvariantCulture)); " is 170.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixedRateTaxCalculationStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixedRateTaxCalculationStrategy.cs,AdjustedRate,The length of the statement  "            extendedData.SetValue(Core.Constants.ExtendedDataKeys.ProviceTaxRate' province.PercentAdjustment.ToString(CultureInfo.InvariantCulture)); " is 137.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixRateTaxationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixRateTaxationGatewayMethod.cs,CalculateTaxForInvoice,The length of the statement  "            var typeName = MerchelloConfiguration.Current.GetStrategyElement(Constants.StrategyTypeAlias.DefaultInvoiceTaxRateQuote).Type; " is 126.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixRateTaxationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixRateTaxationGatewayMethod.cs,CalculateTaxForInvoice,The length of the statement  "                LogHelper.Error<FixedRateTaxationGatewayProvider>("Failed to instantiate the tax calculation strategy '" + typeName + "'"' attempt.Exception); " is 142.
Long Statement,Merchello.Core.Gateways.Taxation.FixedRate,FixRateTaxationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixRateTaxationGatewayMethod.cs,CalculateTaxForProduct,The length of the statement  "            return new ProductTaxCalculationResult(TaxMethod.Name' product.Price' priceCalc' product.SalePrice' salePriceCalc' baseTaxRate); " is 128.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.CampaignOffer' new TypeField("CampaignActivity"' "CampaignActivity"' Constants.TypeFieldKeys.Entity.CampaignOfferKey)); " is 145.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.GatewayProvider' new TypeField("GatewayProvider"' "GatewayProvider"' Constants.TypeFieldKeys.Entity.GatewayProviderKey)); " is 147.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.ItemCache' new TypeField("ItemCache"' "ItemCache"' Constants.TypeFieldKeys.Entity.ItemCacheKey)); " is 123.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.ProductOption' new TypeField("ProductOption"' "ProductOption"' Constants.TypeFieldKeys.Entity.ProductOptionKey)); " is 139.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.Warehouse' new TypeField("Warehouse"' "Warehouse"' Constants.TypeFieldKeys.Entity.WarehouseKey)); " is 123.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.WarehouseCatalog' new TypeField("WarehouseCatalog"' "WarehouseCatalog"' Constants.TypeFieldKeys.Entity.WarehouseCatalogKey)); " is 151.
Long Statement,Merchello.Core.Models.TypeFields,EntityTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\EntityTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(EntityType.EntityCollection' new TypeField("EntityCollection"' "EntityCollection"' Constants.TypeFieldKeys.Entity.EntityCollectionKey)); " is 151.
Long Statement,Merchello.Core.Models.TypeFields,AppliedPaymentTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AppliedPaymentTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AppliedPaymentType.Credit' new TypeField("Credit"' "Credit"' Constants.TypeFieldKeys.AppliedPayment.CreditRecordKey)); " is 133.
Long Statement,Merchello.Core.Models.TypeFields,AppliedPaymentTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AppliedPaymentTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AppliedPaymentType.Debit' new TypeField("Debit"' "Debit"' Constants.TypeFieldKeys.AppliedPayment.DebitRecordKey)); " is 129.
Long Statement,Merchello.Core.Models.TypeFields,AppliedPaymentTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AppliedPaymentTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AppliedPaymentType.Void' new TypeField("Void"' "Void"' Constants.TypeFieldKeys.AppliedPayment.VoidRecordKey)); " is 125.
Long Statement,Merchello.Core.Models.TypeFields,AppliedPaymentTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AppliedPaymentTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AppliedPaymentType.Refund' new TypeField("Refund"' "Refund"' Constants.TypeFieldKeys.AppliedPayment.RefundRecordKey)); " is 133.
Long Statement,Merchello.Core.Models.TypeFields,AppliedPaymentTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AppliedPaymentTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AppliedPaymentType.Denied' new TypeField("Denied"' "Denied"' Constants.TypeFieldKeys.AppliedPayment.DeniedRecordKey)); " is 133.
Long Statement,Merchello.Core.Models.TypeFields,GatewayProviderTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\GatewayProviderTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(GatewayProviderType.Payment' new TypeField("Payment"' "Payment"' Constants.TypeFieldKeys.GatewayProvider.PaymentProviderKey)); " is 141.
Long Statement,Merchello.Core.Models.TypeFields,GatewayProviderTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\GatewayProviderTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(GatewayProviderType.Notification' new TypeField("Notification"' "Notification"' Constants.TypeFieldKeys.GatewayProvider.NotificationProviderKey)); " is 161.
Long Statement,Merchello.Core.Models.TypeFields,GatewayProviderTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\GatewayProviderTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(GatewayProviderType.Shipping' new TypeField("Shipping"' "Shipping"' Constants.TypeFieldKeys.GatewayProvider.ShippingProviderKey)); " is 145.
Long Statement,Merchello.Core.Models.TypeFields,GatewayProviderTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\GatewayProviderTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(GatewayProviderType.Taxation' new TypeField("Taxation"' "Taxation"' Constants.TypeFieldKeys.GatewayProvider.TaxationProviderKey)); " is 145.
Long Statement,Merchello.Core.Models.TypeFields,LineItemTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\LineItemTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(LineItemType.Shipping' new TypeField("Shipping"' "Shipping"' Constants.TypeFieldKeys.LineItem.ShippingKey)); " is 123.
Long Statement,Merchello.Core.Models.TypeFields,LineItemTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\LineItemTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(LineItemType.Discount' new TypeField("Discount"' "Discount"' Constants.TypeFieldKeys.LineItem.DiscountKey)); " is 123.
Long Statement,Merchello.Core.Models.TypeFields,LineItemTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\LineItemTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(LineItemType.Adjustment' new TypeField("Adjustment"' "Adjustment"' Constants.TypeFieldKeys.LineItem.AdjustmentKey)); " is 131.
Long Statement,Merchello.Core.Models.TypeFields,AddressTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AddressTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AddressType.Shipping' new TypeField("Shipping"' "Shipping"' Constants.TypeFieldKeys.Address.ShippingAddressKey)); " is 128.
Long Statement,Merchello.Core.Models.TypeFields,AddressTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\AddressTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(AddressType.Billing'  new TypeField("Billing"' "Billing"' Constants.TypeFieldKeys.Address.BillingAddressKey)); " is 125.
Long Statement,Merchello.Core.Models.TypeFields,ItemCacheTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\ItemCacheTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(ItemCacheType.Basket' new TypeField("Basket"' "Standard Basket"' Constants.TypeFieldKeys.ItemCache.BasketKey));     " is 126.
Long Statement,Merchello.Core.Models.TypeFields,ItemCacheTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\ItemCacheTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(ItemCacheType.Backoffice' new TypeField("Backoffice"' "Standard Backoffice"' Constants.TypeFieldKeys.ItemCache.BackofficeKey)); " is 142.
Long Statement,Merchello.Core.Models.TypeFields,ItemCacheTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\ItemCacheTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(ItemCacheType.Wishlist' new TypeField("Wishlist"' "Wishlist"' Constants.TypeFieldKeys.ItemCache.WishlistKey)); " is 125.
Long Statement,Merchello.Core.Models.TypeFields,ItemCacheTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\ItemCacheTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(ItemCacheType.Checkout' new TypeField("Checkout"' "Checkout"' Constants.TypeFieldKeys.ItemCache.CheckoutKey)); " is 125.
Long Statement,Merchello.Core.Models.TypeFields,PaymentMethodTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\PaymentMethodTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(PaymentMethodType.Redirect' new TypeField("Redirect"' "Redirect"' Constants.TypeFieldKeys.PaymentMethod.RedirectKey)); " is 133.
Long Statement,Merchello.Core.Models.TypeFields,PaymentMethodTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\PaymentMethodTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(PaymentMethodType.CreditCard' new TypeField("CreditCard"' "Credit Card"' Constants.TypeFieldKeys.PaymentMethod.CreditCardKey)); " is 142.
Long Statement,Merchello.Core.Models.TypeFields,PaymentMethodTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\PaymentMethodTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(PaymentMethodType.PurchaseOrder' new TypeField("PurchaseOrder"' "Purchase Order"' Constants.TypeFieldKeys.PaymentMethod.PurchaseOrderKey)); " is 154.
Long Statement,Merchello.Core.Models.TypeFields,PaymentMethodTypeField,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\TypeFields\PaymentMethodTypeField.cs,BuildCache,The length of the statement  "            AddUpdateCache(PaymentMethodType.CustomerCredit' new TypeField("CustomerCreditKey"' "Customer Credit"' Constants.TypeFieldKeys.PaymentMethod.CustomerCreditKey)); " is 161.
Long Statement,Merchello.Core.Persistence.DatabaseModelDefinitions,DefinitionFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\DatabaseModelDefinitions\DefinitionFactory.cs,GetTableDefinition,The length of the statement  "                        var foreignKeyDefinition = GetForeignKeyDefinition(modelType' propertyInfo' foreignKeyAttribute' columnName' tableName); " is 120.
Long Statement,Merchello.Core.Persistence.DatabaseModelDefinitions,DefinitionFactory,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\DatabaseModelDefinitions\DefinitionFactory.cs,GetColumnDefinition,The length of the statement  "            var definition = new ColumnDefinition{ Name = columnName' TableName = tableName' ModificationType = ModificationType.Create }; " is 126.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,AddItem,The length of the statement  "                    LogHelper.Error<SalePreparationBase>("The LineItemTfKey was not found in merchello.config custom type fields"' argError); " is 121.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,AuthorizePayment,The length of the statement  "            if (!IsReadyToInvoice()) return new PaymentResult(Attempt<IPayment>.Fail(new InvalidOperationException("SalesPreparation is not ready to invoice"))' null' false); " is 162.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,AuthorizePayment,The length of the statement  "            var paymentMethod = _merchelloContext.Gateways.Payment.GetPaymentGatewayMethods().FirstOrDefault(x => x.PaymentMethod.Key.Equals(paymentMethodKey)); " is 148.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,AuthorizeCapturePayment,The length of the statement  "            if (!IsReadyToInvoice()) return new PaymentResult(Attempt<IPayment>.Fail(new InvalidOperationException("SalesPreparation is not ready to invoice"))' null' false); " is 162.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,AuthorizeCapturePayment,The length of the statement  "            var paymentMethod = _merchelloContext.Gateways.Payment.GetPaymentGatewayMethods().FirstOrDefault(x => x.PaymentMethod.Key.Equals(paymentMethodKey)); " is 148.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,GetItemCache,The length of the statement  "            itemCache = merchelloContext.Services.ItemCacheService.GetItemCacheWithKey(customer' ItemCacheType.Checkout' versionKey); " is 121.
Long Statement,Merchello.Core.Sales,SalePreparationBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Sales\SalePreparationBase.cs,BuildOfferCodeList,The length of the statement  "                LogHelper.Error<SalePreparationBase>("Failed to deserialize OfferCodeTempData.  Returned empty offer code list instead."' ex); " is 126.
Long Statement,Merchello.Core.Gateways.Shipping,DefaultShipmentRateQuoteStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\DefaultShipmentRateQuoteStrategy.cs,GetShipmentRateQuotes,The length of the statement  "                        RuntimeCache.GetCacheItem(GetShipmentRateQuoteCacheKey(Shipment' gwShipMethod)' () => rateQuote' TimeSpan.FromMinutes(5)); " is 122.
Long Statement,Merchello.Core.Gateways.Shipping,ShipmentRateQuoteStrategyBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShipmentRateQuoteStrategyBase.cs,GetShipmentRateQuoteCacheKey,The length of the statement  "            return Cache.CacheKeys.ShippingGatewayProviderShippingRateQuoteCacheKey(shipment.Key' shippingGatewayMethod.ShipMethod.Key' shipment.VersionKey' args); " is 151.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingContext.cs,GetShipRateQuotesForShipment,The length of the statement  "            var providers = GatewayProviderResolver.GetActivatedProviders<ShippingGatewayProviderBase>() as IEnumerable<ShippingGatewayProviderBase>; " is 137.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingContext,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingContext.cs,GetAllowedShipmentDestinationCountries,The length of the statement  "            var countries = GatewayProviderService.GetAllShipCountries().Where(x => x.CountryCode != "ELSE").Select(x => _storeSettingService.GetCountryByCode(x.CountryCode)).Where(x => x != null); " is 185.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingGatewayProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingGatewayProviderBase.cs,GetShippingGatewayMethodsForShipment,The length of the statement  "                MultiLogHelper.Error<ShippingGatewayProviderBase>("ShipMethods could not be determined for Shipment passed to GetAvailableShipMethodsForDestination method. Attempt message: " + attempt.Exception.Message' new ArgumentException("merchWarehouseCatalogKey")); " is 255.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingGatewayProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingGatewayProviderBase.cs,GetShippingGatewayMethodsForShipment,The length of the statement  "                    LogHelper.Debug<ShippingGatewayProviderBase>("Province code '" + shipment.ToRegion + "' was not found in ShipCountry with code : " + shipCountry.CountryCode); " is 158.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingGatewayProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingGatewayProviderBase.cs,QuoteShippingGatewayMethodsForShipment,The length of the statement  "            var typeName = MerchelloConfiguration.Current.GetStrategyElement(Constants.StrategyTypeAlias.DefaultShipmentRateQuote).Type; " is 124.
Long Statement,Merchello.Core.Gateways.Shipping,ShippingGatewayProviderBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingGatewayProviderBase.cs,QuoteShipMethodForShipment,The length of the statement  "            var typeName = MerchelloConfiguration.Current.GetStrategyElement(Constants.StrategyTypeAlias.DefaultShipmentRateQuote).Type; " is 124.
Long Statement,Merchello.Core.Strategies.Packaging,DefaultWarehousePackagingStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Packaging\DefaultWarehousePackagingStrategy.cs,PackageShipments,The length of the statement  "            // All packaged shipments will start with a shipment status of "Quoted" as these are being used for the Shipment Rate Quote " is 123.
Long Statement,Merchello.Core.Strategies.Packaging,ShippableProductVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Strategies\Packaging\ShippableProductVisitor.cs,Visit,The length of the statement  "            if (lineItem.ExtendedData.ContainsProductVariantKey() && lineItem.ExtendedData.GetShippableValue() && lineItem.LineItemType == LineItemType.Product) " is 148.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The length of the statement  "                var merchProductAttributeDetachedContentValuesSize = _database.GetDbTableColumnSize("merchProductAttribute"' "detachedContentValues"); " is 134.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The length of the statement  "	        // If Errors is empty or if TableDefinitions tables + columns correspond to valid tables + columns then we're at current version " is 128.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = address.Shipping.TypeKey' Alias = address.Shipping.Alias' Name = address.Shipping.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now}); " is 212.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = address.Billing.TypeKey' Alias = address.Billing.Alias' Name = address.Billing.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 210.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = itemcCache.Basket.TypeKey' Alias = itemcCache.Basket.Alias' Name = itemcCache.Basket.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 216.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = itemcCache.Backoffice.TypeKey' Alias = itemcCache.Backoffice.Alias' Name = itemcCache.Backoffice.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 228.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = itemcCache.Wishlist.TypeKey' Alias = itemcCache.Wishlist.Alias' Name = itemcCache.Wishlist.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 222.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = itemcCache.Checkout.TypeKey' Alias = itemcCache.Checkout.Alias' Name = itemcCache.Checkout.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 222.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = litf.Product.TypeKey' Alias = litf.Product.Alias' Name = litf.Product.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 201.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = litf.Shipping.TypeKey' Alias = litf.Shipping.Alias' Name = litf.Shipping.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 204.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = litf.Tax.TypeKey' Alias = litf.Tax.Alias' Name = litf.Tax.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 189.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = litf.Discount.TypeKey' Alias = litf.Discount.Alias' Name = litf.Discount.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 204.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = ptf.Cash.TypeKey' Alias = ptf.Cash.Alias' Name = ptf.Cash.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 189.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = ptf.CreditCard.TypeKey' Alias = ptf.CreditCard.Alias' Name = ptf.CreditCard.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 207.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = ptf.PurchaseOrder.TypeKey' Alias = ptf.PurchaseOrder.Alias' Name = ptf.PurchaseOrder.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 216.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = ptf.Redirect.TypeKey' Alias = ptf.Redirect.Alias' Name = ptf.Redirect.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 201.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = apf.Debit.TypeKey' Alias = apf.Debit.Alias' Name = apf.Debit.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 192.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = apf.Credit.TypeKey' Alias = apf.Credit.Alias' Name = apf.Credit.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 195.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = apf.Void.TypeKey' Alias = apf.Void.Alias' Name = apf.Void.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 189.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = apf.Denied.TypeKey' Alias = apf.Denied.Alias' Name = apf.Denied.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 195.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = apf.Refund.TypeKey' Alias = apf.Refund.Alias' Name = apf.Refund.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 195.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = gwp.Payment.TypeKey' Alias = gwp.Payment.Alias' Name = gwp.Payment.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 198.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = gwp.Shipping.TypeKey' Alias = gwp.Shipping.Alias' Name = gwp.Shipping.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 201.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = gwp.Taxation.TypeKey' Alias = gwp.Taxation.Alias' Name = gwp.Taxation.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 201.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = gwp.Notification.TypeKey' Alias = gwp.Notification.Alias' Name = gwp.Notification.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 213.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Customer.TypeKey' Alias = entity.Customer.Alias' Name = entity.Customer.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 210.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.GatewayProvider.TypeKey' Alias = entity.GatewayProvider.Alias' Name = entity.GatewayProvider.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 231.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Invoice.TypeKey' Alias = entity.Invoice.Alias' Name = entity.Invoice.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 207.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.ItemCache.TypeKey' Alias = entity.ItemCache.Alias' Name = entity.ItemCache.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 213.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Order.TypeKey' Alias = entity.Order.Alias' Name = entity.Order.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 201.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Payment.TypeKey' Alias = entity.Payment.Alias' Name = entity.Payment.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 207.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Product.TypeKey' Alias = entity.Product.Alias' Name = entity.Product.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 207.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.ProductOption.TypeKey' Alias = entity.ProductOption.Alias' Name = entity.ProductOption.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 225.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Shipment.TypeKey' Alias = entity.Shipment.Alias' Name = entity.Shipment.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 210.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.Warehouse.TypeKey' Alias = entity.Warehouse.Alias' Name = entity.Warehouse.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 213.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.WarehouseCatalog.TypeKey' Alias = entity.WarehouseCatalog.Alias' Name = entity.WarehouseCatalog.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 234.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateDbTypeFieldData,The length of the statement  "            _database.Insert("merchTypeField"' "Key"' new TypeFieldDto() { Key = entity.EntityCollection.TypeKey' Alias = entity.EntityCollection.Alias' Name = entity.EntityCollection.Name' UpdateDate = DateTime.Now' CreateDate = DateTime.Now }); " is 234.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The length of the statement  "            _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Unpaid' Alias = "unpaid"' Name = "Unpaid"' Active = true' Reportable = true' SortOrder = 1' CreateDate = DateTime.Now' UpdateDate = DateTime.Now}); " is 248.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The length of the statement  "            _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Paid' Alias = "paid"' Name = "Paid"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 243.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The length of the statement  "            _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Partial' Alias = "partial"' Name = "Partial"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 252.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The length of the statement  "            _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Cancelled' Alias = "cancelled"' Name = "Cancelled"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 258.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The length of the statement  "            _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Fraud' Alias = "fraud"' Name = "Fraud"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 246.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The length of the statement  "            _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.NotFulfilled' Alias = "notfulfilled"' Name = "Not Fulfilled"' Active = true' Reportable = true' SortOrder = 1' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 262.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The length of the statement  "            _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Open' Alias = "open"' Name = "Open"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 237.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The length of the statement  "            _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Fulfilled' Alias = "fulfilled"' Name = "Fulfilled"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 252.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The length of the statement  "            _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.BackOrder' Alias = "backOrder"' Name = "BackOrder"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 252.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The length of the statement  "            _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Cancelled' Alias = "cancelled"' Name = "Cancelled"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });             " is 252.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The length of the statement  "            _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Quoted' Alias = "quoted"' Name = "Quoted"' Active = true' Reportable = true' SortOrder = 1' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 252.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The length of the statement  "            _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Packaging' Alias = "packaging"' Name = "Packaging"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 261.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The length of the statement  "            _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Ready' Alias = "ready"' Name = "Ready"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 249.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The length of the statement  "            _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Shipped' Alias = "shipped"' Name = "Shipped"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 255.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The length of the statement  "            _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Delivered' Alias = "delivered"' Name = "Delivered"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 261.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateWarehouseData,The length of the statement  "            _database.Insert("merchWarehouse"' "Key"' new WarehouseDto() { Key = Constants.Warehouse.DefaultWarehouseKey' Name = "Default Warehouse"' CountryCode = string.Empty' IsDefault = true' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 240.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateWarehouseData,The length of the statement  "            _database.Insert("merchWarehouseCatalog"' "Key"' new WarehouseCatalogDto() { Key = Constants.Warehouse.DefaultWarehouseCatalogKey' WarehouseKey = Constants.Warehouse.DefaultWarehouseKey' Name = "Default Catalog"' Description = null' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 289.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateGatewayProviderSettingsData,The length of the statement  "            _database.Insert("merchGatewayProviderSettings"' "Key"' new GatewayProviderSettingsDto() { Key = Constants.ProviderKeys.Shipping.FixedRateShippingProviderKey' Name = "Fixed Rate Shipping Provider"' ProviderTfKey = EnumTypeFieldConverter.GatewayProvider.GetTypeField(GatewayProviderType.Shipping).TypeKey' ExtendedData = new ExtendedDataCollection().SerializeToXml()' EncryptExtendedData = false' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 452.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateGatewayProviderSettingsData,The length of the statement  "            _database.Insert("merchGatewayProviderSettings"' "Key"' new GatewayProviderSettingsDto() { Key = Constants.ProviderKeys.Taxation.FixedRateTaxationProviderKey' Name = "Fixed Rate Tax Provider"' ProviderTfKey = EnumTypeFieldConverter.GatewayProvider.GetTypeField(GatewayProviderType.Taxation).TypeKey' ExtendedData = new ExtendedDataCollection().SerializeToXml()' EncryptExtendedData = false' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 447.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateGatewayProviderSettingsData,The length of the statement  "            _database.Insert("merchGatewayProviderSettings"' "Key"' new GatewayProviderSettingsDto() { Key = Constants.ProviderKeys.Payment.CashPaymentProviderKey' Name = "Cash Payment Provider"' ProviderTfKey = EnumTypeFieldConverter.GatewayProvider.GetTypeField(GatewayProviderType.Payment).TypeKey' ExtendedData = new ExtendedDataCollection().SerializeToXml()' EncryptExtendedData = false' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 437.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.CurrencyCodeKey' Name = "currencyCode"' Value = "USD"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now}); " is 236.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.NextOrderNumberKey' Name = "nextOrderNumber"' Value = "1"' TypeName = "System.Int32"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now}); " is 239.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.NextInvoiceNumberKey' Name = "nextInvoiceNumber"' Value = "1"' TypeName = "System.Int32"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 244.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.NextShipmentNumberKey' Name = "nextShipmentNumber"' Value = "1"' TypeName = "System.Int32"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 246.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.DateFormatKey' Name = "dateFormat"' Value = "dd-MM-yyyy"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 240.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.TimeFormatKey' Name = "timeFormat"' Value = "am-pm"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 235.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.UnitSystemKey' Name = "unitSystem"' Value = "Imperial"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 238.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.GlobalShippableKey' Name = "globalShippable"' Value = "true"' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 245.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.GlobalTaxableKey' Name = "globalTaxable"' Value = "true"' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 241.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.GlobalTrackInventoryKey' Name = "globalTrackInventory"' Value = "false"' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 256.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.GlobalShippingIsTaxableKey' Name = "globalShippingIsTaxable"' Value = "false"' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 262.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.MigrationKey' Name = "migration"' Value = Guid.NewGuid().ToString()' TypeName = "System.Guid"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 249.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Constants.StoreSetting.GlobalTaxationApplicationKey' Name = "globalTaxationApplication"' Value = "Invoice"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 267.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.DefaultExtendedContentCulture' Name = "defaultExtendedContentCulture"' Value = "en-US"' TypeName = "System.String"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 275.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateStoreSettingData,The length of the statement  "            _database.Insert("merchStoreSetting"' "Key"' new StoreSettingDto() { Key = Core.Constants.StoreSetting.HasDomainRecordKey' Name = "hasDomainRecord"' Value = false.ToString()' TypeName = "System.Boolean"' CreateDate = DateTime.Now' UpdateDate = DateTime.Now }); " is 260.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            //TODO: At a later point we do other checks for MySql' but ideally it should be necessary to do special checks for different providers. " is 135.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            var foreignKeysInDatabase = constraintsInDatabase.Where(x => x.Item3.InvariantStartsWith("FK_")).Select(x => x.Item3).ToList(); " is 127.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            var primaryKeysInDatabase = constraintsInDatabase.Where(x => x.Item3.InvariantStartsWith("PK_")).Select(x => x.Item3).ToList(); " is 127.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            var indexesInDatabase = constraintsInDatabase.Where(x => x.Item3.InvariantStartsWith("IX_")).Select(x => x.Item3).ToList(); " is 123.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "                if (foreignKeysInSchema.InvariantContains(unknown) || primaryKeysInSchema.InvariantContains(unknown) || indexesInSchema.InvariantContains(unknown)) " is 147.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            var validForeignKeyDifferences = foreignKeysInDatabase.Intersect(foreignKeysInSchema' StringComparer.InvariantCultureIgnoreCase); " is 129.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            var validPrimaryKeyDifferences = primaryKeysInDatabase.Intersect(primaryKeysInSchema' StringComparer.InvariantCultureIgnoreCase); " is 129.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbConstraints,The length of the statement  "            //NOTE: SD: The colIndex checks above should really take care of this but I need to keep this here because it was here before " is 125.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbColumns,The length of the statement  "            var columnsPerTableInSchema = result.TableDefinitions.SelectMany(x => x.Columns.Select(y => string.Concat(y.TableName' "'"' y.Name))).ToList(); " is 143.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbColumns,The length of the statement  "            var validColumnDifferences = columnsPerTableInDatabase.Intersect(columnsPerTableInSchema' StringComparer.InvariantCultureIgnoreCase); " is 133.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbIndexes,The length of the statement  "            //var colIndexesInDatabase = result.DbIndexDefinitions.Where(x => x.IndexName.InvariantStartsWith("IX_")).Select(x => x.IndexName).ToList(); " is 140.
Long Statement,Merchello.Core.Persistence.Migrations.Initial,DatabaseSchemaCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\DatabaseSchemaCreation.cs,ValidateDbIndexes,The length of the statement  "            var validColIndexDifferences = colIndexesInDatabase.Intersect(indexesInSchema' StringComparer.InvariantCultureIgnoreCase); " is 122.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "            ////From Wikipedia: "Permitted IBAN characters are the digits 0 to 9 and the 26 upper-case Latin alphabetic characters A to Z. " is 126.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "            if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}"))) " is 133.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "                    { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 } " is 922.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "                    //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo. " is 177.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "                        ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it. " is 131.
Long Statement,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The length of the statement  "                        ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97 " is 135.
Long Statement,Merchello.Core.ValueConverters,DetachedValuesConverter,C:\repos\Merchello_Merchello\src\Merchello.Core\ValueConverters\DetachedValuesConverter.cs,ConvertDbForContent,The length of the statement  "            var value = _corrector.CorrectedValue(publishedPropertyType.PropertyEditorAlias' JsonConvert.DeserializeObject(dcv.Value)); " is 123.
Long Statement,Merchello.Core.ValueConverters,DetachedValuesConverter,C:\repos\Merchello_Merchello\src\Merchello.Core\ValueConverters\DetachedValuesConverter.cs,ConvertEditorToDb,The length of the statement  "            return detachedContentValues.ToArray().Select(dcv => this.ConvertEditorToDb(contentType' dcv' additionalData)).ToList(); " is 120.
Long Statement,Merchello.Core.ValueConverters,DetachedValueCorrector,C:\repos\Merchello_Merchello\src\Merchello.Core\ValueConverters\DetachedValuesConverter.cs,BuildCache,The length of the statement  "                foreach (var attempt in values.Select(type => ActivatorHelper.CreateInstance<DetachedValueCorrectionBase>(type' new object[] { })).Where(attempt => attempt.Success)) " is 165.
Complex Conditional,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,IsValidJson,The conditional expression  "strInput.StartsWith("{") && strInput.EndsWith("}") || //For object                  strInput.StartsWith("[") && strInput.EndsWith("]")"  is complex.
Complex Conditional,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,SumInvoiceTotals,The conditional expression  "startDate != DateTime.MinValue && startDate != DateTime.MaxValue &&                  endDate != DateTime.MinValue && endDate != DateTime.MaxValue &&                  endDate > startDate"  is complex.
Complex Conditional,Merchello.Core.Persistence.Querying,BaseExpressionHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Querying\BaseExpressionHelper.cs,RemoveQuote,The conditional expression  "(exp.StartsWith("\"") || exp.StartsWith("`") || exp.StartsWith("'"))                  &&                  (exp.EndsWith("\"") || exp.EndsWith("`") || exp.EndsWith("'"))"  is complex.
Complex Conditional,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The conditional expression  "!this.ValidColumns.Contains("merchNote'internalOnly") ||                  StoreSettings.All(x => x.Key != Constants.StoreSetting.HasDomainRecordKey) ||                  !this.ValidColumns.Contains("merchNote'author") ||                  !this.ValidColumns.Contains("merchCustomer'notes") ||                  this.TypeFields.All(x => x.Key != Constants.TypeFieldKeys.PaymentMethod.RedirectKey)"  is complex.
Complex Conditional,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The conditional expression  "!this.ValidColumns.Contains("merchProductOption'shared") ||                  !this.ValidColumns.Contains("merchProductOption'detachedContentTypeKey") ||                  !this.ValidColumns.Contains("merchProductOption'uiOption") ||                  !this.ValidColumns.Contains("merchProductAttribute'detachedContentValues") ||                  !this.ValidColumns.Contains("merchProductAttribute'isDefaultChoice") ||                  !this.ValidColumns.Contains("merchProduct2ProductOption'useName") ||                  !this.ValidTables.Contains("merchProductOptionAttributeShare") ||                  this.TypeFields.All(x => x.Key != Constants.TypeFieldKeys.Entity.ProductOptionKey)"  is complex.
Complex Conditional,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The conditional expression  "!this.ValidIndexes.Contains("IX_merchProductVariantName") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantPrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantSalePrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantBarcode") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantManufacturer") ||                  !this.ValidIndexes.Contains("IX_merchInvoiceBillToPostalCode") ||                  !this.ValidTables.Contains("merchDigitalMedia")"  is complex.
Virtual Method Call from Constructor,Merchello.Core.Models,EntityFilterGroup,C:\repos\Merchello_Merchello\src\Merchello.Core\Models\EntityFilterGroup.cs,EntityFilterGroup,The constructor "EntityFilterGroup" calls a virtual method "ResetDirtyProperties".
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,StartOfWeek,The following statement contains a magic number: if (diff < 0)              {                  diff += 7;              }
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AllCombinationsOf,The following statement contains a magic number: var count = Math.Pow(2' collectionArray.Count());
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,AllCombinationsOf,The following statement contains a magic number: for (var i = 1; i <= count - 1; i++)              {                  var str = Convert.ToString(i' 2).PadLeft(collectionArray.Count()' '0');                  var level = str.ToArray().Where(x => x != '0').Sum(x => Int32.Parse(x.ToString()));                    var group = new List<T>();                    for (var j = 0; j < str.Length; j++)                  {                      if (str[j] == '1')                      {                          @group.Add(collectionArray[j]);                      }                  }                    combos.Add(new Tuple<int' IEnumerable<T>>(level' @group));              }
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetVersion,The following statement contains a magic number: if (maxParts >= 4)              {                  return new Version(semVersion.Major' semVersion.Minor' semVersion.Patch' build);              }
Magic Number,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetVersion,The following statement contains a magic number: if (maxParts == 3)              {                  return new Version(semVersion.Major' semVersion.Minor' semVersion.Patch);              }
Magic Number,Merchello.Core,PagedCollection<TResultType>,C:\repos\Merchello_Merchello\src\Merchello.Core\PagedCollection.cs,Empty,The following statement contains a magic number: return new PagedCollection<TResultType>              {                  CurrentPage = 1'                  Items = Enumerable.Empty<TResultType>()'                  PageSize = 20'                  TotalItems = 0'                  TotalPages = 0              };
Magic Number,Merchello.Core.Builders,CheckoutInvoiceBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\CheckoutInvoiceBuilderChain.cs,Build,The following statement contains a magic number: attempt.Result.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2);
Magic Number,Merchello.Core.Builders,InvoiceBuilderChain,C:\repos\Merchello_Merchello\src\Merchello.Core\Builders\InvoiceBuilderChain.cs,Build,The following statement contains a magic number: attempt.Result.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2);
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFourZero,AddShipmentTrackingUrlColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoFourZero\AddShipmentTrackingUrlColumns.cs,Up,The following statement contains a magic number: if (                  columns.Any(                      x => x.TableName.InvariantEquals("merchShipment") && x.ColumnName.InvariantEquals("trackingUrl"))                  == false)              {                  Logger.Info(typeof(AddShipmentTrackingUrlColumns)' "Adding trackingUrl colument to merchShipment table.");                    //// Add the new currency code column                  Create.Column("trackingUrl").OnTable("merchShipment").AsString(1000).Nullable();              }
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeOne,AlterProductAttributeColumnToNtext,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeOne\AlterProductAttributeColumnToNtext.cs,Up,The following statement contains a magic number: if (databaseSchemaHelper.TableExist("merchProductAttribute"))              {                  // Add another assertion that the field size has not already been changed to NTEXT                   // and some other migration failed which flagged the version to 2.3.0 or earlier                  var size = database.GetDbTableColumnSize("merchProductAttribute"' "detachedContentValues");                    if (size > 500) return;                    // Update the column to be NTEXT instead of 255 - BUG FIX                  var textType = this.SqlSyntax.GetSpecialDbType(SpecialDbTypes.NTEXT);                  Alter.Table("merchProductAttribute").AlterColumn("detachedContentValues").AsCustom(textType).Nullable();              }
Magic Number,Merchello.Core.Persistence.Repositories,ProductRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductRepository.BackOffice.cs,GetProductsKeysInPriceRange,The following statement contains a magic number: if (modifier > 0) modifier = taxModifier / 100;
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,ExecuteBatchUpdate,The following statement contains a magic number: var batchSize = 2100 / parameterCount;
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,GenerateBulkInsertCommand,The following statement contains a magic number: var itemsPerTrans = Math.Floor(2000.00 / paramsPerItem);
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)       // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column.                       // Set before attempting to set Size' or Size will always max out at 4000                      if ((item as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = (item as string).Length + 1;                      if (p.Size < 4000)                          p.Size = Math.Max((item as string).Length + 1' 4000);       // Help query plan caching by using common size                        p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool))                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)       // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column.                       // Set before attempting to set Size' or Size will always max out at 4000                      if ((item as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = (item as string).Length + 1;                      if (p.Size < 4000)                          p.Size = Math.Max((item as string).Length + 1' 4000);       // Help query plan caching by using common size                        p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool))                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)       // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column.                       // Set before attempting to set Size' or Size will always max out at 4000                      if ((item as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = (item as string).Length + 1;                      if (p.Size < 4000)                          p.Size = Math.Max((item as string).Length + 1' 4000);       // Help query plan caching by using common size                        p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool))                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)       // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column.                       // Set before attempting to set Size' or Size will always max out at 4000                      if ((item as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = (item as string).Length + 1;                      if (p.Size < 4000)                          p.Size = Math.Max((item as string).Length + 1' 4000);       // Help query plan caching by using common size                        p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool))                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloBulkOperationRepository<TEntity;TDto>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloBulkOperationRepository.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)       // PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      // out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column.                       // Set before attempting to set Size' or Size will always max out at 4000                      if ((item as string).Length + 1 > 4000 && p.GetType().Name == "SqlCeParameter")                          p.GetType().GetProperty("SqlDbType").SetValue(p' SqlDbType.NText' null);                        p.Size = (item as string).Length + 1;                      if (p.Size < 4000)                          p.Size = Math.Max((item as string).Length + 1' 4000);       // Help query plan caching by using common size                        p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool))                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,InvoiceRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\InvoiceRepository.cs,BuildInvoiceSearchSql,The following statement contains a magic number: if (numbers.Any() && terms.Any())              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @email OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @invNo = numbers.ToArray()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }              else if (numbers.Any())              {  				if (numbers.Count() == 1)  				{  					int number = numbers[0];  					// if there is only one number' use starts-with type logic so that the list descreases as more digits are inserted.  					// invoiceNumber is indexed' so use index by including ranges. Query looks ugly' but more effectcient than casting  					// invoiceNumber to a string and using a 'like' - which wouldn't use an index.  					// postcode is a string and not indexed - so is doing a full table scan. If performance is an issue on large data sets'  					//   consider removing postcode from lookup or enhancing with an index  					sql.Where(  						"invoiceNumber = @invNo OR invoiceNumber BETWEEN @invNo10 AND @invNo19 OR invoiceNumber BETWEEN @invNo100 AND @invNo199 OR invoiceNumber BETWEEN @invNo1000 AND @invNo1999 OR invoiceNumber BETWEEN @invNo10000 AND @invNo19999 OR invoiceNumber BETWEEN @invNo100000 AND @invNo199999 OR invoiceNumber BETWEEN @invNo1000000 AND @invNo1999999 OR billToPostalCode LIKE @postal "'   						new {  							@invNo = number'  							@invNo10 = number * 10'  							@invNo19 = number * 10 + 9'  							@invNo100 = number * 100'  							@invNo199 = number * 100 + 99'  							@invNo1000 = number * 1000'  							@invNo1999 = number * 1000 + 999'  							@invNo10000 = number * 10000'  							@invNo19999 = number * 10000 + 9999'  							@invNo100000 = number * 100000'  							@invNo199999 = number * 100000 + 99999'  							@invNo1000000 = number * 1000000'  							@invNo1999999 = number * 1000000 + 999999'  							@postal = string.Format("{0}%"' number).Trim()  						});  				}  				else  				{  					sql.Where("invoiceNumber IN (@invNo) OR billToPostalCode IN (@postal) "' new { @invNo = numbers.ToArray()' @postal = numbers.ToArray() });  				}              }              else              {                  sql.Where(                      "billToName LIKE @term OR billToEmail LIKE @term OR billToAddress1 LIKE @adr1 OR billToLocality LIKE @loc OR billToPostalCode IN (@postal)"'                      new                          {                              @term = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @email = string.Format("%{0}%"' string.Join("% "' terms)).Trim()'                              @adr1 = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @loc = string.Format("%{0}%"' string.Join("%"' terms)).Trim()'                              @postal = string.Format("%{0}%"' string.Join("%"' terms)).Trim()                      });              }
Magic Number,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveCatalogInventory,The following statement contains a magic number: foreach (var productVariant in productVariants)              {                  foreach (var dto in inventoryDtos.Where(i => i.ProductVariantKey == productVariant.Key))                  {                      if (!((ProductVariant)productVariant).CatalogInventoryCollection.Contains(dto.CatalogKey))                      {                          if (isSqlCe)                          {                              SqlCeDeleteCatalogInventory(dto.ProductVariantKey' dto.CatalogKey);                          }                          else                          {                              sqlStatement += string.Format(" DELETE FROM merchCatalogInventory WHERE productVariantKey = @{0} AND catalogKey = @{1}"' paramIndex++' paramIndex++);                              parms.Add(dto.ProductVariantKey);                              parms.Add(dto.CatalogKey);                          }                        }                  }                    foreach (var inv in productVariant.CatalogInventories)                  {                      inv.UpdateDate = DateTime.Now;                      if (inventoryDtos.Any(i => i.ProductVariantKey == productVariant.Key && i.CatalogKey == inv.CatalogKey))                      {                          if (isSqlCe)                          {                              SqlCeUpdateCatalogInventory(inv);                          }                          else                          {                              sqlStatement += string.Format(" UPDATE merchCatalogInventory SET Count = @{0}' LowCount = @{1}' Location = @{2}' UpdateDate = @{3} WHERE catalogKey = @{4} AND productVariantKey = @{5}"' paramIndex++' paramIndex++' paramIndex++' paramIndex++' paramIndex++' paramIndex++);                              parms.Add(inv.Count);                              parms.Add(inv.LowCount);                              parms.Add(inv.Location);                              parms.Add(inv.UpdateDate);                              parms.Add(inv.CatalogKey);                              parms.Add(inv.ProductVariantKey);                          }                      }                      else                      {                          inv.CreateDate = DateTime.Now;                          inv.UpdateDate = DateTime.Now;                          inserts.Add(new CatalogInventoryDto                          {                              CatalogKey = inv.CatalogKey'                              ProductVariantKey = productVariant.Key'                              Count = inv.Count'                              LowCount = inv.LowCount'                              Location = inv.Location'                              CreateDate = inv.CreateDate'                              UpdateDate = inv.UpdateDate                          });                      }                  }                                    //split into batches of 100                  if (++variantIndex >= 100) {                      if (!string.IsNullOrEmpty(sqlStatement))                      {                      		Database.Execute(sqlStatement' parms.ToArray());                      }                  		variantIndex = 0;                      sqlStatement = string.Empty;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,ProductVariantRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\ProductVariantRepository.cs,SaveDetachedContents,The following statement contains a magic number: foreach (var variant in variants)              {                  if (variant.DetachedContents.Any() || existing.Any(x => x.ProductVariantKey == variant.Key))                  {                      if (existing.Any(x => x.ProductVariantKey == variant.Key) && !variant.DetachedContents.Any())                      {                          sqlStatement += string.Format(" DELETE [merchProductVariantDetachedContent] WHERE [productVariantKey] = @{0}"' paramIndex++);                      }                        var slug = PathHelper.ConvertToSlug(variant.Name);                      foreach (var dc in variant.DetachedContents)                      {                          if (!dc.HasIdentity)                          {                              ((Entity)dc).AddingEntity();                              dc.Slug = this.EnsureSlug(dc' slug);                              var dto = factory.BuildDto(dc);                              inserts.Add(dto);                          }                          else                          {                              ((Entity)dc).UpdatingEntity();                              var dto = factory.BuildDto(dc);                              sqlStatement +=                                  string.Format(                                      " UPDATE [merchProductVariantDetachedContent] SET [merchProductVariantDetachedContent].[detachedContentTypeKey] = @{0}' [merchProductVariantDetachedContent].[templateId] = @{1}' [merchProductVariantDetachedContent].[slug] = @{2}' [merchProductVariantDetachedContent].[values] = @{3}' [merchProductVariantDetachedContent].[canBeRendered] = @{4}' [merchProductVariantDetachedContent].[updateDate] = @{5} WHERE [merchProductVariantDetachedContent].[cultureName] = @{6} AND [merchProductVariantDetachedContent].[productVariantKey] = @{7}"'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++'                                      paramIndex++);                                parms.Add(dto.DetachedContentTypeKey);                              parms.Add(dto.TemplateId);                              parms.Add(dto.Slug);                              parms.Add(dto.Values);                              parms.Add(dto.CanBeRendered);                              parms.Add(dto.UpdateDate);                              parms.Add(dto.CultureName);                              parms.Add(dto.ProductVariantKey);                          }                      }                  }                                    //split into batches of 100                  if (++variantIndex >= 100) {                      if (!string.IsNullOrEmpty(sqlStatement))                      {                      		Database.Execute(sqlStatement' parms.ToArray());                      }                  		variantIndex = 0;                      sqlStatement = string.Empty;                  }              }
Magic Number,Merchello.Core.Persistence.Repositories,StoreSettingRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\StoreSettingRepository.cs,GetNextInvoiceNumber,The following statement contains a magic number: nextInvoiceNumber = nextInvoiceNumber >= max ? nextInvoiceNumber : max + 5;
Magic Number,Merchello.Core.Persistence.Repositories,StoreSettingRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\StoreSettingRepository.cs,GetNextOrderNumber,The following statement contains a magic number: nextOrderNumber = nextOrderNumber >= max ? nextOrderNumber : max + 5;
Magic Number,Merchello.Core.Persistence.Repositories,StoreSettingRepository,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\StoreSettingRepository.cs,GetNextShipmentNumber,The following statement contains a magic number: nextShipmentNumber = nextShipmentNumber >= max ? nextShipmentNumber : max + 5;
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloRepositoryBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloRepositoryBase.cs,PersistNewItem,The following statement contains a magic number: try              {                  PersistNewItem((TEntity)entity);                  RuntimeCache.GetCacheItem(GetCacheKey(entity.Key)' () => entity' TimeSpan.FromHours(2)' true);              }              catch (Exception ex)              {                  LogHelper.Error(GetType()' "An error occurred trying to add a new entity"' ex);                  ////if an exception is thrown we need to remove the entry from cache' this is ONLY a work around because of the way                  //// that we cache entities: http://issues.umbraco.org/issue/U4-4259                  RuntimeCache.ClearCacheItem(GetCacheKey(entity.Key));                  throw;              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloRepositoryBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloRepositoryBase.cs,PersistUpdatedItem,The following statement contains a magic number: try              {                  PersistUpdatedItem((TEntity)entity);                  RuntimeCache.GetCacheItem(GetCacheKey(entity.Key)' () => entity' TimeSpan.FromHours(2)' true);              }              catch (Exception ex)              {                    LogHelper.Error(GetType()' "An error occurred trying to update an exiting entity"' ex);                  ////if an exception is thrown we need to remove the entry from cache' this is ONLY a work around because of the way                  //// that we cache entities: http://issues.umbraco.org/issue/U4-4259                  RuntimeCache.ClearCacheItem(GetCacheKey(entity.Key));                  throw;              }
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloRepositoryBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloRepositoryBase.cs,Get,The following statement contains a magic number: if (entity != null)  			{                  RuntimeCache.GetCacheItem(GetCacheKey(key)' () => entity' TimeSpan.FromHours(2)' true);  				entity.ResetDirtyProperties();  			}
Magic Number,Merchello.Core.Persistence.Repositories,MerchelloRepositoryBase<TEntity>,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Repositories\MerchelloRepositoryBase.cs,GetAll,The following statement contains a magic number: foreach (var entity in entityCollection)              {                  if (entity != null)                  {                      RuntimeCache.GetCacheItem(GetCacheKey(entity.Key)' () => entity' TimeSpan.FromHours(2)' true);                  }              }
Magic Number,Merchello.Core.Services,InvoiceService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\InvoiceService.cs,ReSyncInvoiceTotal,The following statement contains a magic number: invoice.Total = Math.Round(decimal.TryParse((charges - discounts).ToString(CultureInfo.InvariantCulture)' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture.NumberFormat' out converted) ? converted : 0' 2);
Magic Number,Merchello.Core.Gateways.Taxation,TaxableLineItemVisitor,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\TaxableLineItemVisitor.cs,TaxableLineItemVisitor,The following statement contains a magic number: _taxRate = taxRate > 1 ? taxRate / 100 : taxRate;
Magic Number,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayMethod,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayMethod.cs,SmtpNotificationGatewayMethod,The following statement contains a magic number: _settings.Port = _settings.Port == 0 ? 25 : _settings.Port;
Magic Number,Merchello.Core.Gateways.Notification.Smtp,SmtpNotificationGatewayProviderSettings,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Notification\Smtp\SmtpNotificationGatewayProviderSettings.cs,SmtpNotificationGatewayProviderSettings,The following statement contains a magic number: Port = 25;
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero,AlterAppliedPaymentDescriptionFieldSize,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeZero\AlterAppliedPaymentDescriptionFieldSize.cs,Up,The following statement contains a magic number: if (databaseSchemaHelper.TableExist("merchAppliedPayment"))  			{                  // Add another assertion that the field size has not already been changed to 500                   // and some other migration failed which flagged the version to 2.2.0 or earlier  			    var size = database.GetDbTableColumnSize("merchAppliedPayment"' "description");                    if (size == 500) return;                    // Update the column to allow for 500 characters instead of 255 which proved too small                  Alter.Table("merchAppliedPayment").AlterColumn("description").AsString(500).NotNullable();  			}
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero,AlterAppliedPaymentDescriptionFieldSize,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoThreeZero\AlterAppliedPaymentDescriptionFieldSize.cs,Up,The following statement contains a magic number: if (databaseSchemaHelper.TableExist("merchAppliedPayment"))  			{                  // Add another assertion that the field size has not already been changed to 500                   // and some other migration failed which flagged the version to 2.2.0 or earlier  			    var size = database.GetDbTableColumnSize("merchAppliedPayment"' "description");                    if (size == 500) return;                    // Update the column to allow for 500 characters instead of 255 which proved too small                  Alter.Table("merchAppliedPayment").AlterColumn("description").AsString(500).NotNullable();  			}
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero,AddInvoiceCurrencyCodeColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneFourteenZero\AddInvoiceCurrencyCodeColumn.cs,Up,The following statement contains a magic number: if (                  columns.Any(                      x => x.TableName.InvariantEquals("merchInvoice") && x.ColumnName.InvariantEquals("currencyCode"))                  == false)              {                  Logger.Info(typeof(AddInvoiceCurrencyCodeColumn)' "Adding currencyCode column to merchInvoice table.");                    //// Add the new currency code column                  Create.Column("currencyCode").OnTable("merchInvoice").AsString(3).Nullable();                    if (_sqlSyntax is SqlCeSyntaxProvider)                  {                      SqlCe();                  }                  else                  {                      SqlServer();                  }                    ////// Populate the values from the line items                  //var sql = @"SELECT T1.pk'                  //    currencyCode = SUBSTRING(                  //    (SELECT TOP 1 extendedData FROM merchInvoiceItem WHERE invoiceKey = T1.pk)'                   //    PATINDEX('%<merchCurrencyCode>%'' (SELECT TOP 1 extendedData FROM merchInvoiceItem WHERE invoiceKey = T1.pk)) + 19                  //    ' 3) FROM merchInvoice T1";                      //var dtos = _database.Fetch<InvoiceCurrencyDto>(sql);                    //foreach (var dto in dtos)                  //{                  //    Update.Table("merchInvoice")                  //        .Set(new { currencyCode = dto.CurrencyCode })                  //        .Where(new { pk = dto.InvoiceKey });                  //}                      //// Set the column to not null                  Alter.Table("merchInvoice").AlterColumn("currencyCode").AsString(3).NotNullable();              }
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero,AddInvoiceCurrencyCodeColumn,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionOneFourteenZero\AddInvoiceCurrencyCodeColumn.cs,Up,The following statement contains a magic number: if (                  columns.Any(                      x => x.TableName.InvariantEquals("merchInvoice") && x.ColumnName.InvariantEquals("currencyCode"))                  == false)              {                  Logger.Info(typeof(AddInvoiceCurrencyCodeColumn)' "Adding currencyCode column to merchInvoice table.");                    //// Add the new currency code column                  Create.Column("currencyCode").OnTable("merchInvoice").AsString(3).Nullable();                    if (_sqlSyntax is SqlCeSyntaxProvider)                  {                      SqlCe();                  }                  else                  {                      SqlServer();                  }                    ////// Populate the values from the line items                  //var sql = @"SELECT T1.pk'                  //    currencyCode = SUBSTRING(                  //    (SELECT TOP 1 extendedData FROM merchInvoiceItem WHERE invoiceKey = T1.pk)'                   //    PATINDEX('%<merchCurrencyCode>%'' (SELECT TOP 1 extendedData FROM merchInvoiceItem WHERE invoiceKey = T1.pk)) + 19                  //    ' 3) FROM merchInvoice T1";                      //var dtos = _database.Fetch<InvoiceCurrencyDto>(sql);                    //foreach (var dto in dtos)                  //{                  //    Update.Table("merchInvoice")                  //        .Set(new { currencyCode = dto.CurrencyCode })                  //        .Where(new { pk = dto.InvoiceKey });                  //}                      //// Set the column to not null                  Alter.Table("merchInvoice").AlterColumn("currencyCode").AsString(3).NotNullable();              }
Magic Number,Merchello.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero,AddProductOptionColumns,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Upgrades\TargetVersionTwoTwoZero\AddProductOptionColumns.cs,Up,The following statement contains a magic number: if (columns.Any(x => x.TableName.InvariantEquals("merchProductOption") && x.ColumnName.InvariantEquals("uiOption"))                == false)              {                  Logger.Info(typeof(AddProductOptionColumns)' "Adding uiOption column to merchProductOption table.");                    //// Add the new 'shared' column                  Create.Column("uiOption").OnTable("merchProductOption").AsString(50).Nullable();              }
Magic Number,Merchello.Core.Gateways.Taxation.FixedRate,FixedRateTaxCalculationStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Taxation\FixedRate\FixedRateTaxCalculationStrategy.cs,CalculateTaxesForInvoice,The following statement contains a magic number: try              {                                  var baseTaxRate = _taxMethod.PercentageTaxRate;                    extendedData.SetValue(Core.Constants.ExtendedDataKeys.BaseTaxRate' baseTaxRate.ToString(CultureInfo.InvariantCulture));                    if (_taxMethod.HasProvinces)                  {                      baseTaxRate = AdjustedRate(baseTaxRate' _taxMethod.Provinces.FirstOrDefault(x => x.Code == TaxAddress.Region)' extendedData);                  }                                    var visitor = new TaxableLineItemVisitor(baseTaxRate / 100);                    Invoice.Items.Accept(visitor);                    var totalTax = visitor.TaxableLineItems.Sum(x => decimal.Parse(x.ExtendedData.GetValue(Core.Constants.ExtendedDataKeys.LineItemTaxAmount)' CultureInfo.InvariantCulture));                    return Attempt<ITaxCalculationResult>.Succeed(                      new TaxCalculationResult(_taxMethod.Name' baseTaxRate' totalTax' extendedData));              }              catch (Exception ex)              {                  return Attempt<ITaxCalculationResult>.Fail(ex);              }
Magic Number,Merchello.Core.Gateways.Shipping,DefaultShipmentRateQuoteStrategy,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\DefaultShipmentRateQuoteStrategy.cs,GetShipmentRateQuotes,The following statement contains a magic number: foreach (var gwShipMethod in ShippingGatewayMethods)              {                                    var rateQuote = tryGetCached ? TryGetCachedShipmentRateQuote(Shipment' gwShipMethod) : default(ShipmentRateQuote);                    if (rateQuote == null)                  {                      // REFACTOR-v3 this would only need happen if an attempt was to get cached' then not' then cached again                      // without any changes.                      RuntimeCache.ClearCacheItem(GetShipmentRateQuoteCacheKey(Shipment' gwShipMethod));                        //// http://issues.merchello.com/youtrack/issue/M-458                      //// Clones the shipment so that with each iteration so that we can have the same shipment                      //// with different ship methods                      //// REFACTOR-v3 clone should be inherent on ICloneableEntity                      var attempt = gwShipMethod.QuoteShipment(Shipment.Clone());                      if (attempt.Success)                      {                          rateQuote = attempt.Result;                            RuntimeCache.GetCacheItem(GetShipmentRateQuoteCacheKey(Shipment' gwShipMethod)' () => rateQuote' TimeSpan.FromMinutes(5));                      }                  }                    if (rateQuote != null) quotes.Add(rateQuote);              }
Magic Number,Merchello.Core.Gateways.Shipping,ShippingGatewayMethodBase,C:\repos\Merchello_Merchello\src\Merchello.Core\Gateways\Shipping\ShippingGatewayMethodBase.cs,AdjustedRate,The following statement contains a magic number: return province.RateAdjustmentType == RateAdjustmentType.Numeric                         ? baseRate + province.RateAdjustment                         : baseRate * (1 + (province.RateAdjustment / 100));
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (this.StoreSettings.All(x => x.Key != Constants.StoreSetting.MigrationKey))              {                  return new Version(1' 7' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (StoreSettings.All(x => x.Key != Constants.StoreSetting.GlobalTaxationApplicationKey))              {                  return new Version(1' 9' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidTables.Contains("merchEntityCollection")                  || !this.ValidTables.Contains("merchProduct2EntityCollection"))              {                  return new Version(1' 10' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidTables.Contains("merchDetachedContentType")                  || !this.ValidTables.Contains("merchProductVariantDetachedContent"))              {                  return new Version(1' 11' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchInvoice'currencyCode"))              {                  return new Version(1' 13' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchNote'internalOnly") ||                  StoreSettings.All(x => x.Key != Constants.StoreSetting.HasDomainRecordKey) ||                  !this.ValidColumns.Contains("merchNote'author") ||                  !this.ValidColumns.Contains("merchCustomer'notes") ||                  this.TypeFields.All(x => x.Key != Constants.TypeFieldKeys.PaymentMethod.RedirectKey))              {                  return new Version(1' 14' 1);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchProductOption'shared") ||                  !this.ValidColumns.Contains("merchProductOption'detachedContentTypeKey") ||                  !this.ValidColumns.Contains("merchProductOption'uiOption") ||                  !this.ValidColumns.Contains("merchProductAttribute'detachedContentValues") ||                  !this.ValidColumns.Contains("merchProductAttribute'isDefaultChoice") ||                  !this.ValidColumns.Contains("merchProduct2ProductOption'useName") ||                  !this.ValidTables.Contains("merchProductOptionAttributeShare") ||                  this.TypeFields.All(x => x.Key != Constants.TypeFieldKeys.Entity.ProductOptionKey))              {                  return new Version(2' 1' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchEntityCollection'isFilter")                  || !this.ValidColumns.Contains("merchEntityCollection'extendedData")   				|| merchAppliedPaymentDescriptionSize != 500)  			{  				return new Version(2' 2' 0);  	        }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchEntityCollection'isFilter")                  || !this.ValidColumns.Contains("merchEntityCollection'extendedData")   				|| merchAppliedPaymentDescriptionSize != 500)  			{  				return new Version(2' 2' 0);  	        }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchEntityCollection'isFilter")                  || !this.ValidColumns.Contains("merchEntityCollection'extendedData")   				|| merchAppliedPaymentDescriptionSize != 500)  			{  				return new Version(2' 2' 0);  	        }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (this.ValidColumns.Contains("merchProductAttribute'detachedContentValues"))              {                  var merchProductAttributeDetachedContentValuesSize = _database.GetDbTableColumnSize("merchProductAttribute"' "detachedContentValues");                  if (merchProductAttributeDetachedContentValuesSize <= 500)                  {                      return new Version(2' 3' 0);                  }              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (this.ValidColumns.Contains("merchProductAttribute'detachedContentValues"))              {                  var merchProductAttributeDetachedContentValuesSize = _database.GetDbTableColumnSize("merchProductAttribute"' "detachedContentValues");                  if (merchProductAttributeDetachedContentValuesSize <= 500)                  {                      return new Version(2' 3' 0);                  }              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (this.ValidColumns.Contains("merchProductAttribute'detachedContentValues"))              {                  var merchProductAttributeDetachedContentValuesSize = _database.GetDbTableColumnSize("merchProductAttribute"' "detachedContentValues");                  if (merchProductAttributeDetachedContentValuesSize <= 500)                  {                      return new Version(2' 3' 0);                  }              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchShipment'trackingUrl"))              {                  return new Version(2' 3' 1);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidColumns.Contains("merchShipment'trackingUrl"))              {                  return new Version(2' 3' 1);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidIndexes.Contains("IX_merchProductVariantName") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantPrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantSalePrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantBarcode") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantManufacturer") ||                  !this.ValidIndexes.Contains("IX_merchInvoiceBillToPostalCode") ||                  !this.ValidTables.Contains("merchDigitalMedia"))              {                  return new Version(2' 4' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,MerchelloDatabaseSchemaResult,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\MerchelloDatabaseSchemaResult.cs,DetermineInstalledVersion,The following statement contains a magic number: if (!this.ValidIndexes.Contains("IX_merchProductVariantName") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantPrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantSalePrice") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantBarcode") ||                  !this.ValidIndexes.Contains("IX_merchProductVariantManufacturer") ||                  !this.ValidIndexes.Contains("IX_merchInvoiceBillToPostalCode") ||                  !this.ValidTables.Contains("merchDigitalMedia"))              {                  return new Version(2' 4' 0);              }
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The following statement contains a magic number: _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Paid' Alias = "paid"' Name = "Paid"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The following statement contains a magic number: _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Partial' Alias = "partial"' Name = "Partial"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The following statement contains a magic number: _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Cancelled' Alias = "cancelled"' Name = "Cancelled"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateInvoiceStatusData,The following statement contains a magic number: _database.Insert("merchInvoiceStatus"' "Key"' new InvoiceStatusDto() { Key = Constants.InvoiceStatus.Fraud' Alias = "fraud"' Name = "Fraud"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The following statement contains a magic number: _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Open' Alias = "open"' Name = "Open"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The following statement contains a magic number: _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Fulfilled' Alias = "fulfilled"' Name = "Fulfilled"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The following statement contains a magic number: _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.BackOrder' Alias = "backOrder"' Name = "BackOrder"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateOrderStatusData,The following statement contains a magic number: _database.Insert("merchOrderStatus"' "Key"' new OrderStatusDto() { Key = Constants.OrderStatus.Cancelled' Alias = "cancelled"' Name = "Cancelled"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The following statement contains a magic number: _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Packaging' Alias = "packaging"' Name = "Packaging"' Active = true' Reportable = true' SortOrder = 2' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The following statement contains a magic number: _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Ready' Alias = "ready"' Name = "Ready"' Active = true' Reportable = true' SortOrder = 3' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The following statement contains a magic number: _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Shipped' Alias = "shipped"' Name = "Shipped"' Active = true' Reportable = true' SortOrder = 4' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Persistence.Migrations.Initial,BaseDataCreation,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\Migrations\Initial\BaseDataCreation.cs,CreateShipmentStatusData,The following statement contains a magic number: _database.Insert("merchShipmentStatus"' "Key"' new ShipmentStatusDto() { Key = Constants.ShipmentStatus.Delivered' Alias = "delivered"' Name = "Delivered"' Active = true' Reportable = true' SortOrder = 5' CreateDate = DateTime.Now' UpdateDate = DateTime.Now });
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,BankingValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\BankingValidationHelper.cs,IbanBanknrValid,The following statement contains a magic number: if ((!string.IsNullOrEmpty(iban)) && (System.Text.RegularExpressions.Regex.IsMatch(iban' @"[A-Z]{2}[0-9]{2}\s?[A-Za-z0-9 ]{11'45}")))              {                  ////Ok' so there is a IBAN (!string.IsNullOrEmpty) and it validates initial `quick Regex test`                  ////Each country has its own length for the BBAN number (the part after the 2 country chars and 2 check digits)                  ////Norway [NO] has the shortest IBAN with a total of 15 (for example `NO 93 86011117947`)                  ////Malta  [MT] has the longest  IBAN with a total of 31 (for example `MT 84 MALT011000012345MTLCAST001S`)                  ////Netherlands [NL] has an IBAN with a total of 18 where the 4 alphas after the checkdigits identify the bank                  ////(for example `NL 91 ABNA 0417 1643 00` where the `ABNA`-part stands for the ABN Amro Bank)                    var countryLength = new Dictionary<string' int>                   {                      { "AD"' 24 }' { "AE"' 23 }' { "AL"' 28 }' { "AT"' 20 }' { "AZ"' 28 }' { "BA"' 20 }' { "BE"' 16 }' { "BG"' 22 }' { "BH"' 22 }' { "BR"' 29 }' { "CH"' 21 }' { "CR"' 21 }' { "CY"' 28 }' { "CZ"' 24 }' { "DE"' 22 }' { "DK"' 18 }' { "DO"' 28 }' { "EE"' 20 }' { "ES"' 24 }' { "FI"' 18 }' { "FO"' 18 }' { "FR"' 27 }' { "GB"' 22 }' { "GE"' 22 }' { "GI"' 23 }' { "GL"' 18 }' { "GR"' 27 }' { "GT"' 28 }' { "HR"' 21 }' { "HU"' 28 }' { "IE"' 22 }' { "IL"' 23 }' { "IS"' 26 }' { "IT"' 27 }' { "JO"' 30 }' { "KW"' 30 }' { "KZ"' 20 }' { "LB"' 28 }' { "LI"' 21 }' { "LT"' 20 }' { "LU"' 20 }' { "LV"' 21 }' { "MC"' 27 }' { "MD"' 24 }' { "ME"' 22 }' { "MK"' 19 }' { "MR"' 27 }' { "MT"' 31 }' { "MU"' 30 }' { "NL"' 18 }' { "NO"' 15 }' { "PK"' 24 }' { "PL"' 28 }' { "PS"' 29 }' { "PT"' 25 }' { "QA"' 29 }' { "RO"' 24 }' { "RS"' 22 }' { "SA"' 24 }' { "SE"' 24 }' { "SI"' 19 }' { "SK"' 24 }' { "SM"' 27 }' { "TN"' 24 }' { "TR"' 26 }' { "VG"' 24 }                      //' { "TL"' 23 }' //Timor-Leste                      //'{ "XK"' 20 } The code XK is being used by the European Commission' Switzerland' the Deutsche Bundesbank' SWIFT and other organizations as a temporary country code for Kosovo.                  };                    if (countryLength.ContainsKey(iban.Substring(0' 2)))                  {                         ////IBAN starts with existing' valid (ISO 3166-1 alpha-2) countrycode                        var alphaNumIban = System.Text.RegularExpressions.Regex.Replace(iban' "[^A-Za-z0-9]"' string.Empty);                      if (alphaNumIban.Length == countryLength[iban.Substring(0' 2)])                      {                           ////The length of the IBAN is valid (corresponding to the length set for the country!)                          ////So now' validate the BBAN part with the check digits                            ////From Wikipedia; "Validating the IBAN"                          ////An IBAN is validated by converting it into an integer and performing a basic mod-97 operation (as described in ISO 7064) on it.                          ////If the IBAN is valid' the remainder equals 1.[Note 1]                          ////The algorithm of IBAN validation is as follows:                          ////Check that the total IBAN length is correct as per the country. If not' the IBAN is invalid (done)                          ////Move the four initial characters to the end of the string                          ////Replace each letter in the string with two digits' thereby expanding the string' where A = 10' B = 11' ...' Z = 35                          ////Interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////If the remainder is 1' the check digit test is passed and the IBAN might be valid.                            ////Example (fictitious United Kingdom bank' sort code 12-34-56' account number 98765432):                          ////  (0) IBAN:                   GB 82 WEST  1234 5698 7654 32                          ////  (1) Rearrange:              W  E  S  T  1234 5698 7654 32 G  B  82                          ////  (2) Convert to integer:     32 14 28 29 1234 5698 7654 32 16 11 82                          ////  (3) Compute remainder:      32 14 28 29 1234 5698 7654 32 16 11 82 	mod 97 == 1 !                            ////Step (1) `Rearrange` - move country and check digits (first 4) to the back                          iban = (alphaNumIban.Substring(4) + alphaNumIban.Substring(0' 4)).ToUpper();                            ////Step (2) `Convert to integer`- replace each letter in the string with two digits' where A = 10' B = 11' ...' Z = 35                          ////Possible approach' first string to: byte[] asciiBytes = Encoding.ASCII.GetBytes(iban);                          for (int i = 0; i < iban.Length; i++)                          {                              ////A-Z! Translate!                              if ((int)iban[i] >= 65)                              {                                                                  if (i == 0)                                  {                                         ////First kar needs to be `translated`                                      iban = ((int)iban[i] - 55) + iban.Substring(1); // 1?                                  }                                  else                                  {                                      iban = iban.Substring(0' i) + ((int)iban[i] - 55) + iban.Substring(i + 1);                                  }                              }                          }                            ////Step (3) `Compute remainder` - interpret the string as a decimal integer and compute the remainder of that number on division by 97                          ////.NET 4.0 has System.Numerics.BigInteger - use this to parse (big) int value                          System.Numerics.BigInteger bigAssInt = 0;                          char[] zero = { '0' };                          bool parsed = System.Numerics.BigInteger.TryParse(iban.TrimStart(zero)' out bigAssInt);                          if (parsed && (bigAssInt > 0))                          {                              ibanValid = bigAssInt % 97 == 1;                          }                      }                  }              }
Magic Number,Merchello.Core.Validation,EmailValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\EmailValidationHelper.cs,IsValidEmail,The following statement contains a magic number: try              {                  value = Regex.Replace(value' @"(@)(.+)$"' this.DomainMapper' RegexOptions.None' TimeSpan.FromMilliseconds(200));              }              catch (RegexMatchTimeoutException)              {                  return false;              }
Magic Number,Merchello.Core.Validation,EmailValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\EmailValidationHelper.cs,IsValidEmail,The following statement contains a magic number: try              {                  return Regex.IsMatch(                        value'                        @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +                        @"(?(\[)(\[(\d{1'3}\.){3}\d{1'3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0'22}[a-z0-9]))$"'                        RegexOptions.IgnoreCase'                        TimeSpan.FromMilliseconds(250));              }              catch (RegexMatchTimeoutException)              {                  return false;              }
Magic Number,Merchello.Core.Validation,EmailValidationHelper,C:\repos\Merchello_Merchello\src\Merchello.Core\Validation\EmailValidationHelper.cs,DomainMapper,The following statement contains a magic number: var domainName = match.Groups[2].Value;
Magic Number,Merchello.Core.ValueConverters,DetachedValuesConverter,C:\repos\Merchello_Merchello\src\Merchello.Core\ValueConverters\DetachedValuesConverter.cs,TryFixLegacyValue,The following statement contains a magic number: if (value.StartsWith("\"") && value.EndsWith("\""))              {                  value = value.Substring(1' value.Length - 2);              }
Missing Default,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetTypeField,The following switch statement is missing a default case: switch (type)              {                  case Core.EntityType.Custom:                      typeField =                          EnumTypeFieldConverter.EntityType.CustomTypeFields.FirstOrDefault(                              x => x.TypeKey.Equals(entity.EntityTfKey));                      break;                  case Core.EntityType.Customer:                      typeField = EnumTypeFieldConverter.EntityType.Customer;                      break;                  case Core.EntityType.Product:                      typeField = EnumTypeFieldConverter.EntityType.Product;                      break;                  case Core.EntityType.Invoice:                      typeField = EnumTypeFieldConverter.EntityType.Invoice;                      break;                  case Core.EntityType.EntityCollection:                      typeField = EnumTypeFieldConverter.EntityType.EntityCollection;                      break;                  case Core.EntityType.GatewayProvider:                      typeField = EnumTypeFieldConverter.EntityType.GatewayProvider;                      break;                  case Core.EntityType.ItemCache:                      typeField = EnumTypeFieldConverter.EntityType.ItemCache;                      break;                  case Core.EntityType.Order:                      typeField = EnumTypeFieldConverter.EntityType.Order;                      break;                  case Core.EntityType.Payment:                      typeField = EnumTypeFieldConverter.EntityType.Payment;                      break;                  case Core.EntityType.Shipment:                      typeField = EnumTypeFieldConverter.EntityType.Shipment;                      break;                  case Core.EntityType.Warehouse:                      typeField = EnumTypeFieldConverter.EntityType.Warehouse;                      break;                  case Core.EntityType.WarehouseCatalog:                      typeField = EnumTypeFieldConverter.EntityType.WarehouseCatalog;                      break;              }
Missing Default,Merchello.Core,Extensions,C:\repos\Merchello_Merchello\src\Merchello.Core\Extensions.cs,GetTypeField,The following switch statement is missing a default case: switch (type)              {                  case LineItemType.Custom:                      typeField =                          EnumTypeFieldConverter.LineItemType.CustomTypeFields.FirstOrDefault(                              x => x.TypeKey.Equals(lineItem.LineItemTfKey));                      break;                  case LineItemType.Adjustment:                      typeField = EnumTypeFieldConverter.LineItemType.Adjustment;                      break;                  case LineItemType.Discount:                      typeField = EnumTypeFieldConverter.LineItemType.Discount;                      break;                  case LineItemType.Product:                      typeField = EnumTypeFieldConverter.LineItemType.Product;                      break;                  case LineItemType.Tax:                      typeField = EnumTypeFieldConverter.LineItemType.Tax;                      break;                  case LineItemType.Shipping:                      typeField = EnumTypeFieldConverter.LineItemType.Shipping;                      break;                }
Missing Default,Merchello.Core.Cache,ObjectCacheRuntimeCacheProvider,C:\repos\Merchello_Merchello\src\Merchello.Core\Cache\ObjectCacheRuntimeCacheProvider.cs,GetPolicy,The following switch statement is missing a default case: switch (arguments.RemovedReason)                      {                          case CacheEntryRemovedReason.Removed:                              reason = CacheItemRemovedReason.Removed;                              break;                          case CacheEntryRemovedReason.Expired:                              reason = CacheItemRemovedReason.Expired;                              break;                          case CacheEntryRemovedReason.Evicted:                              reason = CacheItemRemovedReason.Underused;                              break;                          case CacheEntryRemovedReason.ChangeMonitorChanged:                              reason = CacheItemRemovedReason.Expired;                              break;                          case CacheEntryRemovedReason.CacheSpecificEviction:                              reason = CacheItemRemovedReason.Underused;                              break;                      }
Missing Default,Merchello.Core.Services,GatewayProviderService,C:\repos\Merchello_Merchello\src\Merchello.Core\Services\GatewayProviderService.cs,Delete,The following switch statement is missing a default case: switch (gatewayProviderSettings.GatewayProviderType)              {                  case GatewayProviderType.Payment:                      var paymentMethods = _paymentMethodService.GetPaymentMethodsByProviderKey(gatewayProviderSettings.Key).ToArray();                      if (paymentMethods.Any()) _paymentMethodService.Delete(paymentMethods);                      break;                                        case GatewayProviderType.Shipping:                      var shippingMethods = _shipMethodService.GetShipMethodsByProviderKey(gatewayProviderSettings.Key).ToArray();                      if (shippingMethods.Any()) _shipMethodService.Delete(shippingMethods);                      break;                    case GatewayProviderType.Taxation:                      var taxMethods = _taxMethodService.GetTaxMethodsByProviderKey(gatewayProviderSettings.Key).ToArray();                      if (taxMethods.Any()) _taxMethodService.Delete(taxMethods);                      break;                    case GatewayProviderType.Notification:                      var notificationMethods =                          _notificationMethodService.GetNotifcationMethodsByProviderKey(gatewayProviderSettings.Key).ToArray();                      if (notificationMethods.Any()) _notificationMethodService.Delete(notificationMethods);                      break;              }
Missing Default,Merchello.Core.Persistence.UnitOfWork,PetaPocoUnitOfWork,C:\repos\Merchello_Merchello\src\Merchello.Core\Persistence\UnitOfWork\PetaPocoUnitOfWork.cs,Commit,The following switch statement is missing a default case: switch (operation.Type)                      {                          case TransactionType.Insert:                              operation.Repository.PersistNewItem(operation.Entity);                              break;                          case TransactionType.Delete:                              operation.Repository.PersistDeletedItem(operation.Entity);                              break;                          case TransactionType.Update:                              operation.Repository.PersistUpdatedItem(operation.Entity);                              break;                      }
