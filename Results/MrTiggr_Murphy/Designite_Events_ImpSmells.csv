Implementation smell,Namespace,Class,File,Method,Description
Long Method,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The method has 158 lines of code.
Complex Method,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,Cyclomatic complexity of the method is 33
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("add <nick> to [<number>]") + " - Adds <nick> as there to the specified event (You may use 'me' instead of <nick>)."); " is 156.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("add <nick> not to [<number>]") + " - Adds <nick> as not there to the specified event (You may use 'me' instead of <nick>)."); " is 164.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("add <nick> maybe to [<number>]") + " - Adds <nick> as maybe there to the specified event (You may use 'me' instead of <nick>)."); " is 168.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("remove <nick> from [<number>]") + " - Removes <nick> from the specified event (You may use 'me' instead of <nick>)."); " is 157.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("add event <day>.<month>.<year> <hours>:<minutes> <text>") + " - Adds the specified event."); " is 131.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("edit event [<number>] <day>.<month>.<year> <hours>:<minutes> <text>") + " - Edits the specified event' but leaves the there/not there/maybe there nicknames intact."); " is 205.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		AnswerWithNotice (n' e' FormatItalic ("clear event [<number>]") + " - Removes all the there/not there/maybe there nicknames from the specified event' but leaves the event itself intact."); " is 188.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "			AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ()); " is 202.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "			AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere)); " is 152.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "	else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) { " is 157.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0); " is 242.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "	else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) { " is 183.
Long Statement,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The length of the statement  "		DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0); " is 242.
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^events \\?$"' e.Data.Message)) {  	AnswerWithNotice (n' e' FormatBold ("Use of Events plugin:"));  	AnswerWithNotice (n' e' FormatItalic ("list events") + " - Lists details of all upcoming events.");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> to [<number>]") + " - Adds <nick> as there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> not to [<number>]") + " - Adds <nick> as not there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> maybe to [<number>]") + " - Adds <nick> as maybe there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("remove <nick> from [<number>]") + " - Removes <nick> from the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add event <day>.<month>.<year> <hours>:<minutes> <text>") + " - Adds the specified event.");  	AnswerWithNotice (n' e' FormatItalic ("edit event [<number>] <day>.<month>.<year> <hours>:<minutes> <text>") + " - Edits the specified event' but leaves the there/not there/maybe there nicknames intact.");  	AnswerWithNotice (n' e' FormatItalic ("remove event [<number>]") + " - Removes the entire specified event.");  	AnswerWithNotice (n' e' FormatItalic ("clear event [<number>]") + " - Removes all the there/not there/maybe there nicknames from the specified event' but leaves the event itself intact.");  }  else if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^events \\?$"' e.Data.Message)) {  	AnswerWithNotice (n' e' FormatBold ("Use of Events plugin:"));  	AnswerWithNotice (n' e' FormatItalic ("list events") + " - Lists details of all upcoming events.");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> to [<number>]") + " - Adds <nick> as there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> not to [<number>]") + " - Adds <nick> as not there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> maybe to [<number>]") + " - Adds <nick> as maybe there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("remove <nick> from [<number>]") + " - Removes <nick> from the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add event <day>.<month>.<year> <hours>:<minutes> <text>") + " - Adds the specified event.");  	AnswerWithNotice (n' e' FormatItalic ("edit event [<number>] <day>.<month>.<year> <hours>:<minutes> <text>") + " - Edits the specified event' but leaves the there/not there/maybe there nicknames intact.");  	AnswerWithNotice (n' e' FormatItalic ("remove event [<number>]") + " - Removes the entire specified event.");  	AnswerWithNotice (n' e' FormatItalic ("clear event [<number>]") + " - Removes all the there/not there/maybe there nicknames from the specified event' but leaves the event itself intact.");  }  else if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^events \\?$"' e.Data.Message)) {  	AnswerWithNotice (n' e' FormatBold ("Use of Events plugin:"));  	AnswerWithNotice (n' e' FormatItalic ("list events") + " - Lists details of all upcoming events.");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> to [<number>]") + " - Adds <nick> as there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> not to [<number>]") + " - Adds <nick> as not there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add <nick> maybe to [<number>]") + " - Adds <nick> as maybe there to the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("remove <nick> from [<number>]") + " - Removes <nick> from the specified event (You may use 'me' instead of <nick>).");  	AnswerWithNotice (n' e' FormatItalic ("add event <day>.<month>.<year> <hours>:<minutes> <text>") + " - Adds the specified event.");  	AnswerWithNotice (n' e' FormatItalic ("edit event [<number>] <day>.<month>.<year> <hours>:<minutes> <text>") + " - Edits the specified event' but leaves the there/not there/maybe there nicknames intact.");  	AnswerWithNotice (n' e' FormatItalic ("remove event [<number>]") + " - Removes the entire specified event.");  	AnswerWithNotice (n' e' FormatItalic ("clear event [<number>]") + " - Removes all the there/not there/maybe there nicknames from the specified event' but leaves the event itself intact.");  }  else if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (IsMatch ("^list events$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	DeleteOldEvents (eventInfos);  	int i = 0;  	foreach (EventInfo eventinfo in eventInfos) {  		string there = "";  		foreach (string s in eventinfo.There)  			there += s + "' ";  		if (there.Length > 0)  			there = there.Substring (0' there.Length - 2);  		string maybeThere = "";  		foreach (string s in eventinfo.MaybeThere)  			maybeThere += s + "' ";  		if (maybeThere.Length > 0)  			maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  		string notThere = "";  		foreach (string s in eventinfo.NotThere)  			notThere += s + "' ";  		if (notThere.Length > 0)  			notThere = notThere.Substring (0' notThere.Length - 2);  		AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  		AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  		i++;  	}  	if (i <= 0)  		AnswerWithNotice (n' e' "There are no upcoming events.");  	return;  }  else if (IsMatch ("^add event (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	List<EventInfo> eventInfos = Load ();  	eventInfos.Add (new EventInfo (d' Matches ["text"].ToString ()));  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added the event.");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.There.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) not to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.NotThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("not there") + ".");  	return;  }  else if (IsMatch ("^add (?<nick>\\w*) maybe to \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	Remove (nick' eventinfo);  	eventinfo.MaybeThere.Add (nick);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I added " + FormatItalic (nick) + " as " + FormatItalic ("maybe there") + ".");  	return;  }  else if (IsMatch ("^remove (?<nick>\\w*) from \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	string nick = Matches ["nick"].ToString ();  	if (nick.ToLower () == "me")  		nick = e.Data.Nick;  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	Remove (nick' eventInfos [i]);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed " + FormatItalic (nick) + ".");  	return;  }  else if (IsMatch ("^remove event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	eventInfos.RemoveAt (i);  	Save (eventInfos);  	AnswerWithNotice (n' e' "I removed the event.");  	return;  }  else if (IsMatch ("^clear event \\[(?<event>\\d{1'3})\\]$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	eventinfo.There.Clear ();  	eventinfo.MaybeThere.Clear ();  	eventinfo.NotThere.Clear ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I cleared the event.");  	return;  }  else if (IsMatch ("^edit event \\[(?<event>\\d{1'3})\\] (?<day>\\d{1'2})\\.(?<month>\\d{1'2})\\.(?<year>\\d{4}) (?<hour>\\d{1'2}):(?<minute>\\d{1'2}) (?<text>.*)$"' e.Data.Message)) {  	List<EventInfo> eventInfos = Load ();  	int i = int.Parse (Matches ["event"].ToString ());  	if (i >= eventInfos.Count) {  		AnswerWithNotice (n' e' "There is no such event.");  		return;  	}  	EventInfo eventinfo = eventInfos [i];  	DateTime d = new DateTime (int.Parse (Matches ["year"].ToString ())' int.Parse (Matches ["month"].ToString ())' int.Parse (Matches ["day"].ToString ())' int.Parse (Matches ["hour"].ToString ())' int.Parse (Matches ["minute"].ToString ())' 0);  	eventinfo.Date = d;  	eventinfo.Text = Matches ["text"].ToString ();  	Save (eventInfos);  	AnswerWithNotice (n' e' "I edited the event.");  	return;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: foreach (EventInfo eventinfo in eventInfos) {  	string there = "";  	foreach (string s in eventinfo.There)  		there += s + "' ";  	if (there.Length > 0)  		there = there.Substring (0' there.Length - 2);  	string maybeThere = "";  	foreach (string s in eventinfo.MaybeThere)  		maybeThere += s + "' ";  	if (maybeThere.Length > 0)  		maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  	string notThere = "";  	foreach (string s in eventinfo.NotThere)  		notThere += s + "' ";  	if (notThere.Length > 0)  		notThere = notThere.Substring (0' notThere.Length - 2);  	AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  	AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  	i++;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: foreach (EventInfo eventinfo in eventInfos) {  	string there = "";  	foreach (string s in eventinfo.There)  		there += s + "' ";  	if (there.Length > 0)  		there = there.Substring (0' there.Length - 2);  	string maybeThere = "";  	foreach (string s in eventinfo.MaybeThere)  		maybeThere += s + "' ";  	if (maybeThere.Length > 0)  		maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  	string notThere = "";  	foreach (string s in eventinfo.NotThere)  		notThere += s + "' ";  	if (notThere.Length > 0)  		notThere = notThere.Substring (0' notThere.Length - 2);  	AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  	AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  	i++;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: foreach (EventInfo eventinfo in eventInfos) {  	string there = "";  	foreach (string s in eventinfo.There)  		there += s + "' ";  	if (there.Length > 0)  		there = there.Substring (0' there.Length - 2);  	string maybeThere = "";  	foreach (string s in eventinfo.MaybeThere)  		maybeThere += s + "' ";  	if (maybeThere.Length > 0)  		maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  	string notThere = "";  	foreach (string s in eventinfo.NotThere)  		notThere += s + "' ";  	if (notThere.Length > 0)  		notThere = notThere.Substring (0' notThere.Length - 2);  	AnswerWithNotice (n' e' FormatBold ("[" + Format (i) + "]") + " - " + FormatBold (eventinfo.Text) + " - scheduled for " + eventinfo.Date.ToLongDateString () + " " + eventinfo.Date.ToShortTimeString ());  	AnswerWithNotice (n' e' "there: " + FormatItalic (there) + " - maybe there: " + FormatItalic (maybeThere) + " - not there: " + FormatItalic (notThere));  	i++;  }  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (there.Length > 0)  	there = there.Substring (0' there.Length - 2);  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: there = there.Substring (0' there.Length - 2);  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (maybeThere.Length > 0)  	maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: maybeThere = maybeThere.Substring (0' maybeThere.Length - 2);  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: if (notThere.Length > 0)  	notThere = notThere.Substring (0' notThere.Length - 2);  
Magic Number,Murphy.Plugins,Events,C:\repos\MrTiggr_Murphy\Plugins\Events\Events.cs,Bot_OnMessage,The following statement contains a magic number: notThere = notThere.Substring (0' notThere.Length - 2);  
