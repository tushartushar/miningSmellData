Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,Bot_OnMessage,Cyclomatic complexity of the method is 39
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' FormatBold (String.Format ("_______________________________________________________________________________________"' BOT_CONTROL_SEQ))); " is 161.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' FormatBold (String.Format ("                           IDENTITY VERIFICATION COMMANDS                "' BOT_CONTROL_SEQ))); " is 147.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}help") + " - Shows this help screen"' BOT_CONTROL_SEQ)); " is 120.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}register <BusinessNick> <GpGKey>") + " - registers a business nick as having the GpG key specified"' BOT_CONTROL_SEQ)); " is 183.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}eauth <?BusinessNick>") + " - authenticates you as the (optional) nick by creating a One-Time pawword for you to decrypt with your GpG key"' BOT_CONTROL_SEQ)); " is 223.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}setemail <email>") + " - sets the registered email for your logged in nick"' BOT_CONTROL_SEQ)); " is 159.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}email") + " - performs a pseudo-2-factor login via email"' BOT_CONTROL_SEQ)); " is 141.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}bizident <?name>") + " - Shows the login details for (optional) <name> or the requestor"' BOT_CONTROL_SEQ)); " is 172.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' String.Format ("    " + FormatBold ("{0}logout") + " - logs your identity out of the system"' BOT_CONTROL_SEQ)); " is 136.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,help,The length of the statement  "	AnswerWithNotice (n' e' FormatBold (String.Format ("_______________________________________________________________________________________"' BOT_CONTROL_SEQ))); " is 161.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The length of the statement  "			Answer (n' e' e.Data.Nick + ": Successfully registered business: " + FormatBold (Matches ["name"].Value) + " with GPG key: " + FormatBold (Matches ["gpgkey"].Value)); " is 166.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The length of the statement  "			Answer (n' e' FormatColor (FormatBold ("PLEASE BE PATIENT WE ARE DOWNLOADING YOUR KEY FROM pgp.mit.edu KEYSERVERS. THIS MAY TAKE UP TO A MINUTE!")' IrcColor.Purple)); " is 166.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The length of the statement  "		Answer (n' e' FormatBold (String.Format ("Register Command Usage: {0}register <businessname> <gpgkey>"' BOT_CONTROL_SEQ))); " is 123.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,rollcall,The length of the statement  "		AnswerWithNotice (n' e' FormatBold (String.Format ("RollCall can only be performed by a logged in administrator. Command Usage: {0}rollcall"' BOT_CONTROL_SEQ))); " is 161.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The length of the statement  "			g.Send ("MrTiggr@BitcoinPolice.org"' account ["EMAIL"].ToString ()' "#bitcoin-police gpg login request for: " + name' StreamToString (encrypted)); " is 146.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The length of the statement  "			Answer (n' e' e.Data.Nick + ": An Email has been sent to your registered email address. Decrypt the contents using your GpG Key and then send IRC message " + FormatBold ("#everify <decodedctext>") + " to login."); " is 213.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The length of the statement  "		Answer (n' e' e.Data.Nick + ": No registered email for your nick. To register an email; login normally then issue IRC command " + FormatBold ("#setemail <emailaddress>")); " is 171.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The length of the statement  "		Answer (n' e' FormatBold ("Once you have registered an email address' you may perform a two-factor login at any time by typing #email")); " is 137.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,setemail,The length of the statement  "						g.Send ("MrTiggr@BitcoinPolice.org"' Matches ["email"].Value' "#bitcoin-police email confirmation for: " + name' "Confirming your email address."); " is 147.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,setemail,The length of the statement  "						Answer (n' e' e.Data.Nick + ": Your email address has been registered. An Email has been sent to your registered email address."); " is 130.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,setemail,The length of the statement  "		AnswerWithNotice (n' e' FormatBold (String.Format ("You may only set the email for your user if you are logged in. Command Usage: {0}setemail <email>"' BOT_CONTROL_SEQ))); " is 171.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The length of the statement  "				Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt"); " is 124.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,ident,The length of the statement  "	Answer (n' e' e.Data.Nick + String.Format (": Use {0}bizident to identify a business' or ;;ident to identify a person."' BOT_CONTROL_SEQ)); " is 139.
Long Statement,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,bizident,The length of the statement  "			Answer (n' e' ((e.Data.Nick == name) ? "You are logged in as " : e.Data.Nick + ":" + name + " is logged in as ") + FormatBold (s.user) + " with GpG Key of " + FormatBold (s.kid)); " is 179.
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The following statement contains a magic number: if (IsMatch ("^register (?<name>.*?) (?<gpgkey>.*)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	if ((Matches ["gpgkey"].Value.Length == 16) || (Matches ["gpgkey"].Value.Length == 8)) {  		Dictionary<String' String> account = new Dictionary<string' string> ();  		account.Add ("name"' Matches ["name"].Value);  		account.Add ("gpgkey"' Matches ["gpgkey"].Value);  		db.Insert ("accounts"' account);  		ProcessStartInfo startInfo = new ProcessStartInfo ();  		startInfo.FileName = gpgpath + "gpg.exe";  		startInfo.Arguments = " --keyserver pgp.mit.edu --recv-key 0x" + Matches ["gpgkey"].Value;  		Process.Start (startInfo);  		Answer (n' e' e.Data.Nick + ": Successfully registered business: " + FormatBold (Matches ["name"].Value) + " with GPG key: " + FormatBold (Matches ["gpgkey"].Value));  		Answer (n' e' FormatColor (FormatBold ("PLEASE BE PATIENT WE ARE DOWNLOADING YOUR KEY FROM pgp.mit.edu KEYSERVERS. THIS MAY TAKE UP TO A MINUTE!")' IrcColor.Purple));  	}  	else {  		Answer (n' e' FormatBold (e.Data.Nick + ": Invalid GPG key id."));  	}  }  else {  	Answer (n' e' FormatBold (String.Format ("Register Command Usage: {0}register <businessname> <gpgkey>"' BOT_CONTROL_SEQ)));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The following statement contains a magic number: if (IsMatch ("^register (?<name>.*?) (?<gpgkey>.*)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	if ((Matches ["gpgkey"].Value.Length == 16) || (Matches ["gpgkey"].Value.Length == 8)) {  		Dictionary<String' String> account = new Dictionary<string' string> ();  		account.Add ("name"' Matches ["name"].Value);  		account.Add ("gpgkey"' Matches ["gpgkey"].Value);  		db.Insert ("accounts"' account);  		ProcessStartInfo startInfo = new ProcessStartInfo ();  		startInfo.FileName = gpgpath + "gpg.exe";  		startInfo.Arguments = " --keyserver pgp.mit.edu --recv-key 0x" + Matches ["gpgkey"].Value;  		Process.Start (startInfo);  		Answer (n' e' e.Data.Nick + ": Successfully registered business: " + FormatBold (Matches ["name"].Value) + " with GPG key: " + FormatBold (Matches ["gpgkey"].Value));  		Answer (n' e' FormatColor (FormatBold ("PLEASE BE PATIENT WE ARE DOWNLOADING YOUR KEY FROM pgp.mit.edu KEYSERVERS. THIS MAY TAKE UP TO A MINUTE!")' IrcColor.Purple));  	}  	else {  		Answer (n' e' FormatBold (e.Data.Nick + ": Invalid GPG key id."));  	}  }  else {  	Answer (n' e' FormatBold (String.Format ("Register Command Usage: {0}register <businessname> <gpgkey>"' BOT_CONTROL_SEQ)));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The following statement contains a magic number: if ((Matches ["gpgkey"].Value.Length == 16) || (Matches ["gpgkey"].Value.Length == 8)) {  	Dictionary<String' String> account = new Dictionary<string' string> ();  	account.Add ("name"' Matches ["name"].Value);  	account.Add ("gpgkey"' Matches ["gpgkey"].Value);  	db.Insert ("accounts"' account);  	ProcessStartInfo startInfo = new ProcessStartInfo ();  	startInfo.FileName = gpgpath + "gpg.exe";  	startInfo.Arguments = " --keyserver pgp.mit.edu --recv-key 0x" + Matches ["gpgkey"].Value;  	Process.Start (startInfo);  	Answer (n' e' e.Data.Nick + ": Successfully registered business: " + FormatBold (Matches ["name"].Value) + " with GPG key: " + FormatBold (Matches ["gpgkey"].Value));  	Answer (n' e' FormatColor (FormatBold ("PLEASE BE PATIENT WE ARE DOWNLOADING YOUR KEY FROM pgp.mit.edu KEYSERVERS. THIS MAY TAKE UP TO A MINUTE!")' IrcColor.Purple));  }  else {  	Answer (n' e' FormatBold (e.Data.Nick + ": Invalid GPG key id."));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,register,The following statement contains a magic number: if ((Matches ["gpgkey"].Value.Length == 16) || (Matches ["gpgkey"].Value.Length == 8)) {  	Dictionary<String' String> account = new Dictionary<string' string> ();  	account.Add ("name"' Matches ["name"].Value);  	account.Add ("gpgkey"' Matches ["gpgkey"].Value);  	db.Insert ("accounts"' account);  	ProcessStartInfo startInfo = new ProcessStartInfo ();  	startInfo.FileName = gpgpath + "gpg.exe";  	startInfo.Arguments = " --keyserver pgp.mit.edu --recv-key 0x" + Matches ["gpgkey"].Value;  	Process.Start (startInfo);  	Answer (n' e' e.Data.Nick + ": Successfully registered business: " + FormatBold (Matches ["name"].Value) + " with GPG key: " + FormatBold (Matches ["gpgkey"].Value));  	Answer (n' e' FormatColor (FormatBold ("PLEASE BE PATIENT WE ARE DOWNLOADING YOUR KEY FROM pgp.mit.edu KEYSERVERS. THIS MAY TAKE UP TO A MINUTE!")' IrcColor.Purple));  }  else {  	Answer (n' e' FormatBold (e.Data.Nick + ": Invalid GPG key id."));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The following statement contains a magic number: if (IsMatch ("^emailauth (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The following statement contains a magic number: if (IsMatch ("^emailauth (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,emailogin,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (IsMatch ("^.?eauth (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (IsMatch ("^.?eauth (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: foreach (DataRow account in accounts.Rows) {  	id++;  	if (account ["NAME"] as string == name) {  		gpg.Recipient = account ["key"] as string;  		MemoryStream unencrypted = new MemoryStream (Encoding.ASCII.GetBytes (name + ":" + DateTime.Now.Ticks + "\n"));  		MemoryStream encrypted = new MemoryStream ();  		gpg.Encrypt (unencrypted' encrypted);  		Dictionary<String' String> data = new Dictionary<String' String> ();  		data.Add ("verify"' StreamToString (unencrypted));  		db.Update ("accounts"' data' String.Format ("id = {0}"' id));  		Pastie p = new Pastie ();  		string pastie = p.SendViaPasteBin (StreamToString (encrypted)' "#bitcoin-police gpg login request for: " + name);  		string[] paste = pastie.Split ('/');  		if (wget) {  			Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  		}  		else {  			Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  		}  	}  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: foreach (DataRow account in accounts.Rows) {  	id++;  	if (account ["NAME"] as string == name) {  		gpg.Recipient = account ["key"] as string;  		MemoryStream unencrypted = new MemoryStream (Encoding.ASCII.GetBytes (name + ":" + DateTime.Now.Ticks + "\n"));  		MemoryStream encrypted = new MemoryStream ();  		gpg.Encrypt (unencrypted' encrypted);  		Dictionary<String' String> data = new Dictionary<String' String> ();  		data.Add ("verify"' StreamToString (unencrypted));  		db.Update ("accounts"' data' String.Format ("id = {0}"' id));  		Pastie p = new Pastie ();  		string pastie = p.SendViaPasteBin (StreamToString (encrypted)' "#bitcoin-police gpg login request for: " + name);  		string[] paste = pastie.Split ('/');  		if (wget) {  			Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  		}  		else {  			Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  		}  	}  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (account ["NAME"] as string == name) {  	gpg.Recipient = account ["key"] as string;  	MemoryStream unencrypted = new MemoryStream (Encoding.ASCII.GetBytes (name + ":" + DateTime.Now.Ticks + "\n"));  	MemoryStream encrypted = new MemoryStream ();  	gpg.Encrypt (unencrypted' encrypted);  	Dictionary<String' String> data = new Dictionary<String' String> ();  	data.Add ("verify"' StreamToString (unencrypted));  	db.Update ("accounts"' data' String.Format ("id = {0}"' id));  	Pastie p = new Pastie ();  	string pastie = p.SendViaPasteBin (StreamToString (encrypted)' "#bitcoin-police gpg login request for: " + name);  	string[] paste = pastie.Split ('/');  	if (wget) {  		Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  	}  	else {  		Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  	}  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (account ["NAME"] as string == name) {  	gpg.Recipient = account ["key"] as string;  	MemoryStream unencrypted = new MemoryStream (Encoding.ASCII.GetBytes (name + ":" + DateTime.Now.Ticks + "\n"));  	MemoryStream encrypted = new MemoryStream ();  	gpg.Encrypt (unencrypted' encrypted);  	Dictionary<String' String> data = new Dictionary<String' String> ();  	data.Add ("verify"' StreamToString (unencrypted));  	db.Update ("accounts"' data' String.Format ("id = {0}"' id));  	Pastie p = new Pastie ();  	string pastie = p.SendViaPasteBin (StreamToString (encrypted)' "#bitcoin-police gpg login request for: " + name);  	string[] paste = pastie.Split ('/');  	if (wget) {  		Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  	}  	else {  		Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  	}  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (wget) {  	Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  }  else {  	Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: if (wget) {  	Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  }  else {  	Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: Answer (n' e' e.Data.Nick + ": wget -qO " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]) + " | gpg --decrypt");  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,login,The following statement contains a magic number: Answer (n' e' e.Data.Nick + ": Request here: " + FormatBold ("http://pastebin.com/raw.php?i=" + paste [3]));  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,bizident,The following statement contains a magic number: if (IsMatch ("^bizident (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,bizident,The following statement contains a magic number: if (IsMatch ("^bizident (?<name>.*?)$"' e.Data.Message.Substring (BOT_CONTROL_SEQ.Length))) {  	name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  }  else {  	name = e.Data.Nick;  }  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,bizident,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Magic Number,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,bizident,The following statement contains a magic number: name = (Matches ["name"].Value.Length > 16) ? Matches ["name"].Value.Substring (0' 16) : Matches ["name"].Value;  
Missing Default,Murphy.Plugins,GPGAuth,C:\repos\MrTiggr_Murphy\Plugins\GPGAuth\GPGAuth.cs,Bot_OnMessage,The following switch statement is missing a default case: switch (mes) {  case "rollcall":  	rollcall (n' e);  	isadmin = true;  	break;  }  
