Implementation smell,Namespace,Class,File,Method,Description
Long Method,Murphy,Bot,C:\repos\MrTiggr_Murphy\Engine\Bot.cs,Bot,The method has 105 lines of code.
Long Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The method has 165 lines of code.
Long Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has 256 lines of code.
Complex Method,Murphy,Bot,C:\repos\MrTiggr_Murphy\Engine\Bot.cs,Bot,Cyclomatic complexity of the method is 15
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,Cyclomatic complexity of the method is 28
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,Cyclomatic complexity of the method is 67
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_HandleEvents,Cyclomatic complexity of the method is 73
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,Cyclomatic complexity of the method is 88
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_JOIN,Cyclomatic complexity of the method is 8
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,Cyclomatic complexity of the method is 25
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_NOTICE,Cyclomatic complexity of the method is 12
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_NICK,Cyclomatic complexity of the method is 9
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,Cyclomatic complexity of the method is 31
Complex Method,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,Cyclomatic complexity of the method is 26
Complex Method,Murphy.Irc,IrcCommands,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcCommands\IrcCommands.cs,SendMessage,Cyclomatic complexity of the method is 15
Complex Method,Murphy.Irc,IrcCommands,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcCommands\IrcCommands.cs,SendReply,Cyclomatic complexity of the method is 9
Complex Method,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,RijndaelEnhanced,Cyclomatic complexity of the method is 8
Long Parameter List,Murphy.Irc,KickEventArgs,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\EventArgs.cs,KickEventArgs,The method has 5 parameters.
Long Parameter List,Murphy.Irc,WhoEventArgs,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\EventArgs.cs,WhoEventArgs,The method has 12 parameters.
Long Parameter List,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,Login,The method has 5 parameters.
Long Parameter List,Murphy.Irc,IrcMessageData,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcMessageData.cs,IrcMessageData,The method has 10 parameters.
Long Parameter List,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,RijndaelEnhanced,The method has 5 parameters.
Long Parameter List,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,RijndaelEnhanced,The method has 6 parameters.
Long Parameter List,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,RijndaelEnhanced,The method has 7 parameters.
Long Parameter List,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,RijndaelEnhanced,The method has 8 parameters.
Long Statement,Murphy,Plugin,C:\repos\MrTiggr_Murphy\Engine\Plugin.cs,FormatColor,The length of the statement  "	return "\u0003" + ((int)foreground).ToString () + "'" + ((int)background).ToString () + s + "\u0003" + ((int)foreground).ToString () + "'" + ((int)background).ToString (); " is 171.
Long Statement,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The length of the statement  "			                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecongzied replycode '"+replycode+"'");" is 139.
Long Statement,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The length of the statement  "				                        Logger.ChannelSyncing.Debug("creating ChannelUser: "+nickname+" for Channel: "+channelname+" because he doesn't exist yet");" is 124.
Long Statement,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The length of the statement  "		OnWho (this' new WhoEventArgs (ircdata' channel' nick' ident' host' realname' away' op' voice' ircop' server' hopcount)); " is 121.
Long Statement,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,DecryptToBytes,The length of the statement  "		saltLen = (decryptedBytes [0] & 0x03) | (decryptedBytes [1] & 0x0c) | (decryptedBytes [2] & 0x30) | (decryptedBytes [3] & 0xc0); " is 128.
Empty Catch Block,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,_SimpleParser,The method has an empty catch block.
Empty Catch Block,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,_OnConnectionError,The method has an empty catch block.
Magic Number,Murphy,Plugin,C:\repos\MrTiggr_Murphy\Engine\Plugin.cs,Format,The following statement contains a magic number: if (i >= 10)  	return i.ToString ();  else  	return "0" + i.ToString ();  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [2];  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [3];  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [4];  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {  	string code = found.Groups [1].Value;  	ReplyCode replycode = (ReplyCode)int.Parse (code);  	// check if this replycode is known in the RFC  	if (Array.IndexOf (_ReplyCodes' replycode) == -1) {  		#if LOG4NET  		                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecongzied replycode '"+replycode+"'"); #endif  		return ReceiveType.Unknown;  	}  	switch (replycode) {  	case ReplyCode.Welcome:  	case ReplyCode.YourHost:  	case ReplyCode.Created:  	case ReplyCode.MyInfo:  	case ReplyCode.Bounce:  		return ReceiveType.Login;  	case ReplyCode.LuserClient:  	case ReplyCode.LuserOp:  	case ReplyCode.LuserUnknown:  	case ReplyCode.LuserMe:  	case ReplyCode.LuserChannels:  		return ReceiveType.Info;  	case ReplyCode.MotdStart:  	case ReplyCode.Motd:  	case ReplyCode.EndOfMotd:  		return ReceiveType.Motd;  	case ReplyCode.NamesReply:  	case ReplyCode.EndOfNames:  		return ReceiveType.Name;  	case ReplyCode.WhoReply:  	case ReplyCode.EndOfWho:  		return ReceiveType.Who;  	case ReplyCode.ListStart:  	case ReplyCode.List:  	case ReplyCode.ListEnd:  		return ReceiveType.List;  	case ReplyCode.BanList:  	case ReplyCode.EndOfBanList:  		return ReceiveType.BanList;  	case ReplyCode.Topic:  	case ReplyCode.NoTopic:  		return ReceiveType.Topic;  	case ReplyCode.WhoIsUser:  	case ReplyCode.WhoIsServer:  	case ReplyCode.WhoIsOperator:  	case ReplyCode.WhoIsIdle:  	case ReplyCode.WhoIsChannels:  	case ReplyCode.EndOfWhoIs:  		return ReceiveType.WhoIs;  	case ReplyCode.WhoWasUser:  	case ReplyCode.EndOfWhoWas:  		return ReceiveType.WhoWas;  	case ReplyCode.UserModeIs:  		return ReceiveType.UserMode;  	case ReplyCode.ChannelModeIs:  		return ReceiveType.ChannelMode;  	default:  		if (((int)replycode >= 400) && ((int)replycode <= 599)) {  			return ReceiveType.ErrorMessage;  		}  		else {  			#if LOG4NET  			                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  			return ReceiveType.Unknown;  		}  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {  	string code = found.Groups [1].Value;  	ReplyCode replycode = (ReplyCode)int.Parse (code);  	// check if this replycode is known in the RFC  	if (Array.IndexOf (_ReplyCodes' replycode) == -1) {  		#if LOG4NET  		                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecongzied replycode '"+replycode+"'"); #endif  		return ReceiveType.Unknown;  	}  	switch (replycode) {  	case ReplyCode.Welcome:  	case ReplyCode.YourHost:  	case ReplyCode.Created:  	case ReplyCode.MyInfo:  	case ReplyCode.Bounce:  		return ReceiveType.Login;  	case ReplyCode.LuserClient:  	case ReplyCode.LuserOp:  	case ReplyCode.LuserUnknown:  	case ReplyCode.LuserMe:  	case ReplyCode.LuserChannels:  		return ReceiveType.Info;  	case ReplyCode.MotdStart:  	case ReplyCode.Motd:  	case ReplyCode.EndOfMotd:  		return ReceiveType.Motd;  	case ReplyCode.NamesReply:  	case ReplyCode.EndOfNames:  		return ReceiveType.Name;  	case ReplyCode.WhoReply:  	case ReplyCode.EndOfWho:  		return ReceiveType.Who;  	case ReplyCode.ListStart:  	case ReplyCode.List:  	case ReplyCode.ListEnd:  		return ReceiveType.List;  	case ReplyCode.BanList:  	case ReplyCode.EndOfBanList:  		return ReceiveType.BanList;  	case ReplyCode.Topic:  	case ReplyCode.NoTopic:  		return ReceiveType.Topic;  	case ReplyCode.WhoIsUser:  	case ReplyCode.WhoIsServer:  	case ReplyCode.WhoIsOperator:  	case ReplyCode.WhoIsIdle:  	case ReplyCode.WhoIsChannels:  	case ReplyCode.EndOfWhoIs:  		return ReceiveType.WhoIs;  	case ReplyCode.WhoWasUser:  	case ReplyCode.EndOfWhoWas:  		return ReceiveType.WhoWas;  	case ReplyCode.UserModeIs:  		return ReceiveType.UserMode;  	case ReplyCode.ChannelModeIs:  		return ReceiveType.ChannelMode;  	default:  		if (((int)replycode >= 400) && ((int)replycode <= 599)) {  			return ReceiveType.ErrorMessage;  		}  		else {  			#if LOG4NET  			                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  			return ReceiveType.Unknown;  		}  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: switch (replycode) {  case ReplyCode.Welcome:  case ReplyCode.YourHost:  case ReplyCode.Created:  case ReplyCode.MyInfo:  case ReplyCode.Bounce:  	return ReceiveType.Login;  case ReplyCode.LuserClient:  case ReplyCode.LuserOp:  case ReplyCode.LuserUnknown:  case ReplyCode.LuserMe:  case ReplyCode.LuserChannels:  	return ReceiveType.Info;  case ReplyCode.MotdStart:  case ReplyCode.Motd:  case ReplyCode.EndOfMotd:  	return ReceiveType.Motd;  case ReplyCode.NamesReply:  case ReplyCode.EndOfNames:  	return ReceiveType.Name;  case ReplyCode.WhoReply:  case ReplyCode.EndOfWho:  	return ReceiveType.Who;  case ReplyCode.ListStart:  case ReplyCode.List:  case ReplyCode.ListEnd:  	return ReceiveType.List;  case ReplyCode.BanList:  case ReplyCode.EndOfBanList:  	return ReceiveType.BanList;  case ReplyCode.Topic:  case ReplyCode.NoTopic:  	return ReceiveType.Topic;  case ReplyCode.WhoIsUser:  case ReplyCode.WhoIsServer:  case ReplyCode.WhoIsOperator:  case ReplyCode.WhoIsIdle:  case ReplyCode.WhoIsChannels:  case ReplyCode.EndOfWhoIs:  	return ReceiveType.WhoIs;  case ReplyCode.WhoWasUser:  case ReplyCode.EndOfWhoWas:  	return ReceiveType.WhoWas;  case ReplyCode.UserModeIs:  	return ReceiveType.UserMode;  case ReplyCode.ChannelModeIs:  	return ReceiveType.ChannelMode;  default:  	if (((int)replycode >= 400) && ((int)replycode <= 599)) {  		return ReceiveType.ErrorMessage;  	}  	else {  		#if LOG4NET  		                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  		return ReceiveType.Unknown;  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: switch (replycode) {  case ReplyCode.Welcome:  case ReplyCode.YourHost:  case ReplyCode.Created:  case ReplyCode.MyInfo:  case ReplyCode.Bounce:  	return ReceiveType.Login;  case ReplyCode.LuserClient:  case ReplyCode.LuserOp:  case ReplyCode.LuserUnknown:  case ReplyCode.LuserMe:  case ReplyCode.LuserChannels:  	return ReceiveType.Info;  case ReplyCode.MotdStart:  case ReplyCode.Motd:  case ReplyCode.EndOfMotd:  	return ReceiveType.Motd;  case ReplyCode.NamesReply:  case ReplyCode.EndOfNames:  	return ReceiveType.Name;  case ReplyCode.WhoReply:  case ReplyCode.EndOfWho:  	return ReceiveType.Who;  case ReplyCode.ListStart:  case ReplyCode.List:  case ReplyCode.ListEnd:  	return ReceiveType.List;  case ReplyCode.BanList:  case ReplyCode.EndOfBanList:  	return ReceiveType.BanList;  case ReplyCode.Topic:  case ReplyCode.NoTopic:  	return ReceiveType.Topic;  case ReplyCode.WhoIsUser:  case ReplyCode.WhoIsServer:  case ReplyCode.WhoIsOperator:  case ReplyCode.WhoIsIdle:  case ReplyCode.WhoIsChannels:  case ReplyCode.EndOfWhoIs:  	return ReceiveType.WhoIs;  case ReplyCode.WhoWasUser:  case ReplyCode.EndOfWhoWas:  	return ReceiveType.WhoWas;  case ReplyCode.UserModeIs:  	return ReceiveType.UserMode;  case ReplyCode.ChannelModeIs:  	return ReceiveType.ChannelMode;  default:  	if (((int)replycode >= 400) && ((int)replycode <= 599)) {  		return ReceiveType.ErrorMessage;  	}  	else {  		#if LOG4NET  		                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  		return ReceiveType.Unknown;  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (((int)replycode >= 400) && ((int)replycode <= 599)) {  	return ReceiveType.ErrorMessage;  }  else {  	#if LOG4NET  	                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  	return ReceiveType.Unknown;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (((int)replycode >= 400) && ((int)replycode <= 599)) {  	return ReceiveType.ErrorMessage;  }  else {  	#if LOG4NET  	                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  	return ReceiveType.Unknown;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Type == ReceiveType.CtcpRequest) {  	if (ircdata.Message.StartsWith ("\x1" + "PING")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  	}  	else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  		string versionstring;  		if (_CtcpVersion == null) {  			versionstring = VersionString;  		}  		else {  			versionstring = _CtcpVersion + " | using " + VersionString;  		}  		SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  	}  	else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Type == ReceiveType.CtcpRequest) {  	if (ircdata.Message.StartsWith ("\x1" + "PING")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  	}  	else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  		string versionstring;  		if (_CtcpVersion == null) {  			versionstring = VersionString;  		}  		else {  			versionstring = _CtcpVersion + " | using " + VersionString;  		}  		SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  	}  	else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  	}  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.StartsWith ("\x1" + "PING")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  }  else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  	string versionstring;  	if (_CtcpVersion == null) {  		versionstring = VersionString;  	}  	else {  		versionstring = _CtcpVersion + " | using " + VersionString;  	}  	SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  }  else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.StartsWith ("\x1" + "PING")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  }  else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  	string versionstring;  	if (_CtcpVersion == null) {  		versionstring = VersionString;  	}  	else {  		versionstring = _CtcpVersion + " | using " + VersionString;  	}  	SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  }  else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		OnCtcpRequest (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		OnCtcpRequest (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		OnCtcpRequest (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		OnCtcpRequest (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnChannelAction != null) {  	string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  	OnChannelAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnChannelAction != null) {  	string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  	OnChannelAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnQueryAction != null) {  	string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  	OnQueryAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnQueryAction != null) {  	string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  	OnQueryAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: _Usermode = ircdata.RawMessageArray [3].Substring (1);  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WELCOME,The following statement contains a magic number: _Nickname = ircdata.RawMessageArray [2];  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (Nickname.Length > 5) {  	nickname = Nickname.Substring (0' 5) + number;  }  else {  	nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (Nickname.Length > 5) {  	nickname = Nickname.Substring (0' 5) + number;  }  else {  	nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  }  
Magic Number,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: nickname = Nickname.Substring (0' 5) + number;  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	_Reader = new StreamReader (_TcpClient.GetStream ()' Encoding);  	_Writer = new StreamWriter (_TcpClient.GetStream ()' Encoding);  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		_Reader.Close ();  	}  	if (_Writer != null) {  		_Writer.Close ();  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && (_ConnectTries <= 3)) {  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	_Reader = new StreamReader (_TcpClient.GetStream ()' Encoding);  	_Writer = new StreamWriter (_TcpClient.GetStream ()' Encoding);  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		_Reader.Close ();  	}  	if (_Writer != null) {  		_Writer.Close ();  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && (_ConnectTries <= 3)) {  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	_Reader = new StreamReader (_TcpClient.GetStream ()' Encoding);  	_Writer = new StreamWriter (_TcpClient.GetStream ()' Encoding);  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		_Reader.Close ();  	}  	if (_Writer != null) {  		_Writer.Close ();  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && (_ConnectTries <= 3)) {  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	_Reader = new StreamReader (_TcpClient.GetStream ()' Encoding);  	_Writer = new StreamWriter (_TcpClient.GetStream ()' Encoding);  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		_Reader.Close ();  	}  	if (_Writer != null) {  		_Writer.Close ();  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && (_ConnectTries <= 3)) {  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: _TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: _TcpClient.SendTimeout = _SocketSendTimeout * 1000;  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: if (_AutoRetry && (_ConnectTries <= 3)) {  	#if LOG4NET  	                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  	Thread.Sleep (_AutoRetryDelay * 1000);  	_NextAddress ();  	Connect (_AddressList' _Port);  }  else {  	throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: if (_AutoRetry && (_ConnectTries <= 3)) {  	#if LOG4NET  	                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  	Thread.Sleep (_AutoRetryDelay * 1000);  	_NextAddress ();  	Connect (_AddressList' _Port);  }  else {  	throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: Thread.Sleep (_AutoRetryDelay * 1000);  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: if (blocking) {  	// block till the queue has data' but bail out on connection error  	while (IsConnected && !IsConnectionError && (_ReadThread.Queue.Count == 0)) {  		Thread.Sleep (10);  	}  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: while (IsConnected && !IsConnectionError && (_ReadThread.Queue.Count == 0)) {  	Thread.Sleep (10);  }  
Magic Number,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,DecryptToBytes,The following statement contains a magic number: if (maxSaltLen > 0 && maxSaltLen >= minSaltLen) {  	saltLen = (decryptedBytes [0] & 0x03) | (decryptedBytes [1] & 0x0c) | (decryptedBytes [2] & 0x30) | (decryptedBytes [3] & 0xc0);  }  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,DecryptToBytes,The following statement contains a magic number: if (maxSaltLen > 0 && maxSaltLen >= minSaltLen) {  	saltLen = (decryptedBytes [0] & 0x03) | (decryptedBytes [1] & 0x0c) | (decryptedBytes [2] & 0x30) | (decryptedBytes [3] & 0xc0);  }  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,DecryptToBytes,The following statement contains a magic number: saltLen = (decryptedBytes [0] & 0x03) | (decryptedBytes [1] & 0x0c) | (decryptedBytes [2] & 0x30) | (decryptedBytes [3] & 0xc0);  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,DecryptToBytes,The following statement contains a magic number: saltLen = (decryptedBytes [0] & 0x03) | (decryptedBytes [1] & 0x0c) | (decryptedBytes [2] & 0x30) | (decryptedBytes [3] & 0xc0);  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,GenerateSalt,The following statement contains a magic number: salt [2] = (byte)((salt [2] & 0xcf) | (saltLen & 0x30));  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,GenerateSalt,The following statement contains a magic number: salt [2] = (byte)((salt [2] & 0xcf) | (saltLen & 0x30));  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,GenerateSalt,The following statement contains a magic number: salt [3] = (byte)((salt [3] & 0x3f) | (saltLen & 0xc0));  
Magic Number,Engine,RijndaelEnhanced,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,GenerateSalt,The following statement contains a magic number: salt [3] = (byte)((salt [3] & 0x3f) | (saltLen & 0xc0));  
Magic Number,Engine,RijndaelEnhancedTest,C:\repos\MrTiggr_Murphy\Engine\RijndaelEnhanced.cs,Main,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	cipherText = rijndaelKey.Encrypt (plainText);  	Console.WriteLine (String.Format ("Encrypted #{0}: {1}"' i' cipherText));  	plainText = rijndaelKey.Decrypt (cipherText);  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,MessageParser,The following switch statement is missing a default case: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {  case "PING":  	_Event_PING (ircdata);  	break;  case "ERROR":  	_Event_ERROR (ircdata);  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {  case "PRIVMSG":  	_Event_PRIVMSG (ircdata);  	break;  case "NOTICE":  	_Event_NOTICE (ircdata);  	break;  case "JOIN":  	_Event_JOIN (ircdata);  	break;  case "PART":  	_Event_PART (ircdata);  	break;  case "KICK":  	_Event_KICK (ircdata);  	break;  case "QUIT":  	_Event_QUIT (ircdata);  	break;  case "TOPIC":  	_Event_TOPIC (ircdata);  	break;  case "NICK":  	_Event_NICK (ircdata);  	break;  case "INVITE":  	_Event_INVITE (ircdata);  	break;  case "MODE":  	_Event_MODE (ircdata);  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (ircdata.ReplyCode) {  case ReplyCode.Welcome:  	_Event_RPL_WELCOME (ircdata);  	break;  case ReplyCode.Topic:  	_Event_RPL_TOPIC (ircdata);  	break;  case ReplyCode.NoTopic:  	_Event_RPL_NOTOPIC (ircdata);  	break;  case ReplyCode.NamesReply:  	_Event_RPL_NAMREPLY (ircdata);  	break;  case ReplyCode.EndOfNames:  	_Event_RPL_ENDOFNAMES (ircdata);  	break;  case ReplyCode.WhoReply:  	_Event_RPL_WHOREPLY (ircdata);  	break;  case ReplyCode.ChannelModeIs:  	_Event_RPL_CHANNELMODEIS (ircdata);  	break;  case ReplyCode.BanList:  	_Event_RPL_BANLIST (ircdata);  	break;  case ReplyCode.EndOfBanList:  	_Event_RPL_ENDOFBANLIST (ircdata);  	break;  case ReplyCode.Motd:  	_Event_RPL_MOTD (ircdata);  	break;  case ReplyCode.EndOfMotd:  	_Event_RPL_ENDOFMOTD (ircdata);  	break;  case ReplyCode.ErrorNicknameInUse:  	_Event_ERR_NICKNAMEINUSE (ircdata);  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following switch statement is missing a default case: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (7' ircdata.Message.Length - 8);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		OnCtcpRequest (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_NOTICE,The following switch statement is missing a default case: switch (ircdata.Type) {  case ReceiveType.ChannelNotice:  	if (OnChannelNotice != null) {  		OnChannelNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryNotice:  	if (OnQueryNotice != null) {  		OnQueryNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.CtcpReply:  	if (OnCtcpReply != null) {  		OnCtcpReply (this' new IrcEventArgs (ircdata));  	}  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The following switch statement is missing a default case: switch (usermode [i]) {  case 'H':  	away = false;  	break;  case 'G':  	away = true;  	break;  case '@':  	op = true;  	break;  case '+':  	voice = true;  	break;  case '*':  	ircop = true;  	break;  }  
Missing Default,Murphy.Irc,IrcClient,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The following switch statement is missing a default case: switch (channel [0]) {  case '#':  case '!':  case '&':  case '+':  	// this channel may not be where we are joined!  	// see RFC 1459 and RFC 2812' it must return a channelname  	// we use this channel info when possible...  	if (channeluser != null) {  		channeluser.IsOp = op;  		channeluser.IsVoice = voice;  	}  	break;  }  
Missing Default,Murphy.Irc,IrcCommands,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcCommands\IrcCommands.cs,SendMessage,The following switch statement is missing a default case: switch (type) {  case SendType.Message:  	RfcPrivmsg (destination' message' priority);  	break;  case SendType.Action:  	RfcPrivmsg (destination' "\x1" + "ACTION " + message + "\x1"' priority);  	break;  case SendType.Notice:  	RfcNotice (destination' message' priority);  	break;  case SendType.CtcpRequest:  	RfcPrivmsg (destination' "\x1" + message + "\x1"' priority);  	break;  case SendType.CtcpReply:  	RfcNotice (destination' "\x1" + message + "\x1"' priority);  	break;  }  
Missing Default,Murphy.Irc,IrcCommands,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcCommands\IrcCommands.cs,SendReply,The following switch statement is missing a default case: switch (data.Type) {  case ReceiveType.ChannelMessage:  	SendMessage (SendType.Message' data.Channel' message' priority);  	break;  case ReceiveType.QueryMessage:  	SendMessage (SendType.Message' data.Nick' message' priority);  	break;  case ReceiveType.QueryNotice:  	SendMessage (SendType.Notice' data.Nick' message' priority);  	break;  }  
Missing Default,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (replycode) {  case ReplyCode.Welcome:  	_IsRegistered = true;  	#if LOG4NET  	                            Logger.Connection.Info("logged in"); #endif  	break;  }  
Missing Default,Murphy.Irc,IrcConnection,C:\repos\MrTiggr_Murphy\Engine\Irc\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (messagecode) {  case "ERROR":  	IsConnectionError = true;  	break;  }  
