Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,GenerateGraph,Cyclomatic complexity of the method is 8
Complex Method,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,GetFileStatusNoCache,Cyclomatic complexity of the method is 10
Complex Method,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,GetRelativePath,Cyclomatic complexity of the method is 11
Complex Method,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,GetChangedFilesImpl,Cyclomatic complexity of the method is 8
Complex Method,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,ParseGitStatus,Cyclomatic complexity of the method is 8
Long Statement,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The length of the statement  "                var result = GitBash.Run(string.Format("diff -M -C --name-status -z {0} {1}"' fromCommitId' toCommitId)' this.workingDirectory); " is 128.
Long Statement,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,DiffFile,The length of the statement  "                    GitBash.RunCmd(string.Format("diff {2} {3} -- \"{0}\" > \"{1}\""' fileNameRel' tmpFileName' commitId1' commitId2)' this.GitWorkingDirectory); " is 141.
Long Statement,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,GetCommitsForFile,The length of the statement  "            var result = GitBash.Run(string.Format("log -z --ignore-space-change --pretty=format:%H -- \"{0}\""' fileNameRel)' this.GitWorkingDirectory); " is 141.
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(itemsString) || (itemsString.Length <= 53))                  return null;
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var guidStart = itemsString.IndexOf(' '' 7);
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var name = itemsString.Substring(guidStart + 42).Trim();
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The following statement contains a magic number: try              {                  var result = GitBash.Run(string.Format("diff -M -C --name-status -z {0} {1}"' fromCommitId' toCommitId)' this.workingDirectory);                    if (!string.IsNullOrWhiteSpace(result.Output))                  {                      //from gitextensions GitCommandHelper.cs                      var nl = new char[] { '\n'' '\r' };                      string trimmedStatus = result.Output.Trim(nl);                      int lastNewLinePos = trimmedStatus.LastIndexOfAny(nl);                      if (lastNewLinePos > 0)                      {                          int ind = trimmedStatus.LastIndexOf('\0');                          if (ind < lastNewLinePos) //Warning at end                          {                              lastNewLinePos = trimmedStatus.IndexOfAny(nl' ind >= 0 ? ind : 0);                              trimmedStatus = trimmedStatus.Substring(0' lastNewLinePos).Trim(nl);                          }                          else //Warning at beginning                              trimmedStatus = trimmedStatus.Substring(lastNewLinePos).Trim(nl);                      }                        var files = trimmedStatus.Split(new char[] { '\0' }' StringSplitOptions.RemoveEmptyEntries);                      for (int n = 0; n < files.Length; n++)                      {                          string status = files[n];                          var fileName = string.Empty;                          var change = ParseStaus(status);                            switch (change)                          {                              case ChangeType.Renamed:                              case ChangeType.Copied:                                  fileName = files[n + 2];                                  n++; n++;                                  break;                              case ChangeType.Unknown:                                   continue;                              default:                                                                 fileName = files[n + 1];                                  n++;                                  break;                          }                            changes.Add(new Change                          {                              ChangeType = change'                              Name = fileName.Trim()                          });                      }                  }              }              catch (Exception ex)              {                  Log.WriteLine("Repository.GetChanges: {0} - {1}\r\n{2}"' fromCommitId' toCommitId' ex.ToString());              }
Magic Number,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,IsBinaryFile,The following statement contains a magic number: try              {                  int len = Convert.ToInt32(fs.Length);                  if (len > 1000) len = 1000;                  byte[] bytes = new byte[len];                  fs.Read(bytes' 0' len);                  for (int i = 0; i < len - 1; i++)                  {                      if (bytes[i] == 0) return true;                  }                  return false;              }              finally              {                  fs.Close();              }
Magic Number,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,IsBinaryFile,The following statement contains a magic number: try              {                  int len = Convert.ToInt32(fs.Length);                  if (len > 1000) len = 1000;                  byte[] bytes = new byte[len];                  fs.Read(bytes' 0' len);                  for (int i = 0; i < len - 1; i++)                  {                      if (bytes[i] == 0) return true;                  }                  return false;              }              finally              {                  fs.Close();              }
Magic Number,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,CurrentCommitHasRefs,The following statement contains a magic number: return refs.Count()>2;
Missing Default,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitApi\DataServices\RepositoryGraph.cs,ParseStaus,The following switch statement is missing a default case: switch (x)              {                  case 'A':                      return ChangeType.Added;                  case 'C':                      return ChangeType.Copied;                  case 'D':                      return ChangeType.Deleted;                  case 'M':                      return ChangeType.Modified;                  case 'R':                      return ChangeType.Renamed;                  case 'T':                      return ChangeType.TypeChanged;                  case 'U':                      return ChangeType.Unmerged;              }
Missing Default,GitScc,GitFileStatusTracker,C:\repos\yysun_Git-Source-Control-Provider\GitApi\GitFileStatusTracker.cs,ParseGitStatus,The following switch statement is missing a default case: switch (x)                  {                      case '?':                          gitFile.Status = GitFileStatus.New;                          break;                      case '!':                          gitFile.Status = GitFileStatus.Ignored;                          break;                      case ' ':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else if (y == 'D') gitFile.Status = GitFileStatus.Deleted;                          break;                      case 'M':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else gitFile.Status = GitFileStatus.Staged;                          break;                      case 'A':                          gitFile.Status = GitFileStatus.Added;                          break;                      case 'D':                          gitFile.Status = GitFileStatus.Removed;                          break;                      case 'R':                          gitFile.Status = GitFileStatus.Renamed;                          break;                      case 'C':                          gitFile.Status = GitFileStatus.Copied;                          break;                        case 'U':                          gitFile.Status = GitFileStatus.Conflict;                          break;                  }
