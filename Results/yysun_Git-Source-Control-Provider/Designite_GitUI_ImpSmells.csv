Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The method has 122 lines of code.
Long Method,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The method has 187 lines of code.
Complex Method,Mono.Options,Option,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Identifier,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,,The length of the parameter origZoomAndPanControlMouseDownPoint is 35.
Long Statement,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,ShowWaring,The length of the statement  "            WriteText(@"WARNING: Git commands that require interactive inputs are not working in this console. E.g. git mergetool' git push/pull with http(s) that need to enter password are not supported. Please use Git Bash instead. " is 221.
Long Statement,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown); " is 126.
Long Statement,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The length of the statement  "            this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp); " is 121.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,ShowFile,The length of the statement  "                this.DiffEditor.SyntaxHighlighting = ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.Instance.GetDefinitionByExtension( " is 127.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_ContextMenuOpening,The length of the statement  "                menuDeleteFile.Visibility = (selectedItem.Status == GitFileStatus.New || selectedItem.Status == GitFileStatus.Modified) ? " is 121.
Long Statement,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The length of the statement  "            this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged); " is 133.
Long Statement,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,ShowFile,The length of the statement  "            this.editor.SyntaxHighlighting = ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.Instance.GetDefinitionByExtension( " is 123.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\yysun_Git-Source-Control-Provider\GitUI\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Mono.Options,Option,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Complex Conditional,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,menuUndo_Click,The conditional expression  "status == GitFileStatus.Modified || status == GitFileStatus.Staged ||                      status == GitFileStatus.Deleted || status == GitFileStatus.Removed"  is complex.
Complex Conditional,GitUI.UI,ExtHelper,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,FindVisualChild,The conditional expression  "child != null && child is TChild && (name == null || ((Control)child).Name == name)"  is complex.
Empty Catch Block,GitScc,GitSccOptions,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitSccOptions.cs,LoadFromConfig,The method has an empty catch block.
Empty Catch Block,GitScc,GitSccOptions,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitSccOptions.cs,SaveConfig,The method has an empty catch block.
Empty Catch Block,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,fileTree_SelectedItemChanged,The method has an empty catch block.
Empty Catch Block,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,patchList_SelectionChanged,The method has an empty catch block.
Empty Catch Block,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,ShowBlame,The method has an empty catch block.
Empty Catch Block,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,lstFileCommits_SelectionChanged,The method has an empty catch block.
Empty Catch Block,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,lstFileCommits_SelectionChanged,The method has an empty catch block.
Magic Number,GitUI,GitViewModel,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitViewModel.cs,GitViewModel,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(100);
Magic Number,GitUI,GitViewModel,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitViewModel.cs,fileSystemWatcher_Changed,The following statement contains a magic number: if (!NoRefresh)  			{  				double delta = DateTime.Now.Subtract(lastTimeRefresh).TotalMilliseconds;  				if (delta > 500)  				{  					NeedRefresh = true;  					lastTimeRefresh = DateTime.Now;  					nextTimeRefresh = DateTime.Now;  				}  			}
Magic Number,GitUI,GitViewModel,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitViewModel.cs,timer_Tick,The following statement contains a magic number: if (NeedRefresh && !NoRefresh)  			{  				double delta = DateTime.Now.Subtract(nextTimeRefresh).TotalMilliseconds;  				if (delta > 200)  				{  					System.Diagnostics.Debug.WriteLine("$$$$ Refresh");  					DisableAutoRefresh();  					Refresh(false);  					NoRefresh = false;  					NeedRefresh = false;  					nextTimeRefresh = DateTime.Now;  				}  			}
Magic Number,GitUI,GitViewModel,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitViewModel.cs,DisableAutoRefresh,The following statement contains a magic number: lastTimeRefresh = DateTime.Now.AddSeconds(2);
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,ShowCommitDetails,The following statement contains a magic number: if (id != null)  			{  				this.details.RenderTransform.SetValue(TranslateTransform.XProperty' this.ActualWidth);  				this.details.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;    				animation.Completed += (_' e) =>  				{  					this.details.Show(this.gitViewModel.Tracker' id);  					loading.Visibility = Visibility.Collapsed;  				};  				this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: DoubleAnimation doubleAnimation = new DoubleAnimation  			{  				Duration = new Duration(TimeSpan.FromMilliseconds(10000))'  				From = 1.0'  				To = 0.0  			};
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,CompareCommits_Executed,The following statement contains a magic number: try  			{  				this.details.RenderTransform.SetValue(TranslateTransform.XProperty' this.ActualWidth);  				this.details.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;  				animation.Completed += (_' x) =>  				{  					var ids = e.Parameter as string[];  					this.details.Show(this.gitViewModel.Tracker' ids[0]' ids[1]);  					loading.Visibility = Visibility.Collapsed;  				};    				this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CompareCommits_Executed {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_Git-Source-Control-Provider\GitUI\MainWindow.xaml.cs,PendingChanges_Executed,The following statement contains a magic number: try  			{  				this.pendingChanges.RenderTransform.SetValue(TranslateTransform.XProperty' -this.ActualWidth);  				this.pendingChanges.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;  				animation.Completed += (_' x) =>  				{  					this.pendingChanges.Refresh(gitViewModel.Tracker);  					loading.Visibility = Visibility.Collapsed;  				};  				this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);    			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.PendingChanges_Executed {0}"' ex.ToString());  			}
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				List<string> lines = GetLines (localizer (GetDescription (p.Description)));  				o.WriteLine (lines [0]);  				string prefix = new string (' '' OptionWidth+2);  				for (int i = 1; i < lines.Count; ++i) {  					o.Write (prefix);  					o.WriteLine (lines [i]);  				}  			}
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,GitUI.UI,BottomToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,BottomToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,RunConsoleCommand,The following statement contains a magic number: if (!ProcessInternalCommand(command))              {                  if (command == "git")                  {                      //command = "/C \"\"" + GitExePath + "\"";                      GitViewModel.OpenGitBash();                      return;                  }                  else if (command.StartsWith("git "))                  {                      command = command.Substring(4);                      command = "/C \"\"" + GitExePath + "\" " + command + "\"";                  }                  else                  {                      command = "/C " + command;                      isGit = false;                  }                    ProcessStartInfo startInfo = new ProcessStartInfo("cmd.exe");                  startInfo.Arguments = command;                  //startInfo.RedirectStandardInput = true;                  startInfo.RedirectStandardError = true;                  startInfo.RedirectStandardOutput = true;                  startInfo.UseShellExecute = false;                  startInfo.CreateNoWindow = true;                  startInfo.WindowStyle = ProcessWindowStyle.Hidden;                  startInfo.ErrorDialog = false;                  startInfo.WorkingDirectory = WorkingDirectory;                    using (Process process = Process.Start(startInfo))                  using (ManualResetEvent mreOut = new ManualResetEvent(false)' mreErr = new ManualResetEvent(false))                  {                      flag = 0;                        //new ReadOutput(process.StandardOutput' mreOut' (c) =>                      //{                      //    Action act = () =>                      //    {                      //        TextRange range = new TextRange(richTextBox1.Document.ContentEnd' richTextBox1.Document.ContentEnd);                      //        range.Text = c.ToString();                      //        this.richTextBox1.CaretPosition = this.richTextBox1.CaretPosition.DocumentEnd;                      //        //this.richTextBox1.AppendText(c.ToString());                      //    };                      //    this.Dispatcher.BeginInvoke(act' DispatcherPriority.ApplicationIdle);                      //});                        process.OutputDataReceived += (o' e) =>                      {                          if (e.Data == null)                          {                              mreOut.Set();                              Done();                          }                          else                              WriteOutput(e.Data);                      };                      process.BeginOutputReadLine();                        process.ErrorDataReceived += (o' e) =>                      {                          if (e.Data == null)                          {                              mreErr.Set();                              Done();                          }                          else                              WriteError(e.Data);                      };                      process.BeginErrorReadLine();                        //string line = "git status";                      ////while (input != null && null != (line = input.ReadLine()))                       //process.StandardInput.WriteLine(line);                      //process.StandardInput.Close();                        process.WaitForExit();                      mreOut.WaitOne();                      mreErr.WaitOne();                        //var code = process.ExitCode;                  }              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,WritePrompt,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,WriteText,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                   left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  lstOptions.Visibility = Visibility.Visible;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                   left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  lstOptions.Visibility = Visibility.Visible;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                   left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  lstOptions.Visibility = Visibility.Visible;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_MouseDoubleClick);                            #line default              #line hidden                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstOptions_PreviewKeyDown);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_MouseDoubleClick);                            #line default              #line hidden                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstOptions_PreviewKeyDown);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,SelectCommit,The following statement contains a magic number: id = id.Substring(0' 7);
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Show,The following statement contains a magic number: window = new Window              {                  Title = "Switch (checkout) branch"'                  Content = this'                  WindowStartupLocation = WindowStartupLocation.CenterScreen'                  ResizeMode = System.Windows.ResizeMode.NoResize'                  Width = 350'                  Height = 200              };
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Show,The following statement contains a magic number: window = new Window              {                  Title = "Switch (checkout) branch"'                  Content = this'                  WindowStartupLocation = WindowStartupLocation.CenterScreen'                  ResizeMode = System.Windows.ResizeMode.NoResize'                  Width = 350'                  Height = 200              };
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,Show,The following statement contains a magic number: try              {                  this.tracker = tracker;                  var repositoryGraph = tracker.RepositoryGraph;                    var msg1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var msg2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var names1 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Name);                    var names2 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Name);                    var name1 = names1.Count() == 0 ? commitId1 : string.Join("' "' names1.ToArray()) + " " + commitId1.Substring(0' 7);                  var name2 = names2.Count() == 0 ? commitId2 : string.Join("' "' names2.ToArray()) + " " + commitId2.Substring(0' 7);                    this.lblCommit.Content = string.Format("[{1}] {0}"' msg2' name2);                  this.lblMessage.Content = string.Format("[{1}] {0}"' msg1' name1);                  this.lblAuthor.Content = "";                    var comment1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Message)                      .FirstOrDefault();                    var comment2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Message)                      .FirstOrDefault();                    this.Comments = string.Format(@"{0}:  ----------  {1}    {2}:  ----------  {3}"'                      commitId1' comment1' commitId2' comment2);                    this.patchList.ItemsSource = repositoryGraph.GetChanges(commitId1' commitId2);                  this.radioShowChanges.IsChecked = true;                  this.radioShowFileTree.IsEnabled = false;                  ClearEditor();                  this.commitId1 = commitId1;                  this.commitId2 = commitId2;                  this.btnSwitch.Visibility = Visibility.Visible;                  this.txtFileName.Text = "";                    if (this.patchList.Items.Count > 0) this.patchList.SelectedIndex = 0;              }              catch (Exception ex)              {                  this.lblCommit.Content = ex.Message + " Please try again.";              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,Show,The following statement contains a magic number: try              {                  this.tracker = tracker;                  var repositoryGraph = tracker.RepositoryGraph;                    var msg1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var msg2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var names1 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Name);                    var names2 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Name);                    var name1 = names1.Count() == 0 ? commitId1 : string.Join("' "' names1.ToArray()) + " " + commitId1.Substring(0' 7);                  var name2 = names2.Count() == 0 ? commitId2 : string.Join("' "' names2.ToArray()) + " " + commitId2.Substring(0' 7);                    this.lblCommit.Content = string.Format("[{1}] {0}"' msg2' name2);                  this.lblMessage.Content = string.Format("[{1}] {0}"' msg1' name1);                  this.lblAuthor.Content = "";                    var comment1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Message)                      .FirstOrDefault();                    var comment2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Message)                      .FirstOrDefault();                    this.Comments = string.Format(@"{0}:  ----------  {1}    {2}:  ----------  {3}"'                      commitId1' comment1' commitId2' comment2);                    this.patchList.ItemsSource = repositoryGraph.GetChanges(commitId1' commitId2);                  this.radioShowChanges.IsChecked = true;                  this.radioShowFileTree.IsEnabled = false;                  ClearEditor();                  this.commitId1 = commitId1;                  this.commitId2 = commitId2;                  this.btnSwitch.Visibility = Visibility.Visible;                  this.txtFileName.Text = "";                    if (this.patchList.Items.Count > 0) this.patchList.SelectedIndex = 0;              }              catch (Exception ex)              {                  this.lblCommit.Content = ex.Message + " Please try again.";              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.textBlock.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.textBlock.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.textBlock.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.textBlock.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.textBlock.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.HasGitRepository)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + CommitBox.WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                        this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                        this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + CommitBox.HEIGHT + 4);                                        this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + CommitBox.HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + CommitBox.WIDTH;                                  y2 = GetScreenY(y2) + CommitBox.HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + CommitBox.WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    //loading.Visibility = Visibility.Collapsed;                    HistoryViewCommands.GraphLoaded.Execute(null' this);              };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,GetHashCode,The following statement contains a magic number: foreach (var c in commits)              {                  sb.Append(c.Id.Substring(5));                  foreach (var r in c.Refs) sb.Append(r.Id.Substring(5));              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,GetHashCode,The following statement contains a magic number: foreach (var c in commits)              {                  sb.Append(c.Id.Substring(5));                  foreach (var r in c.Refs) sb.Append(r.Id.Substring(5));              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: var id = commitId.Substring(0' 7);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ZoomOut,The following statement contains a magic number: zoomAndPanControl.ContentScale -= 0.1;
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,ZoomIn,The following statement contains a magic number: zoomAndPanControl.ContentScale += 0.1;
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Width = Math.Max(this.ActualWidth - PADDING' (PADDING * 2 + maxX * GRID_WIDTH));
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Height = Math.Max(this.ActualHeight * 2' (PADDING * 2 + (maxY + 1) * GRID_HEIGHT));
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Height = Math.Max(this.ActualHeight * 2' (PADDING * 2 + (maxY + 1) * GRID_HEIGHT));
Missing Default,GitUI,GitIntellisenseHelper,C:\repos\yysun_Git-Source-Control-Provider\GitUI\GitIntellisenseHelper.cs,GetOptions,The following switch statement is missing a default case: switch (options[0])              {                  case "*branches*":                      return GitViewModel.Current.Tracker.RepositoryGraph.Refs                          .Where(r => r.Type == RefTypes.Branch)                          .Select(r => r.Name);                    case "*tags*":                      return GitViewModel.Current.Tracker.RepositoryGraph.Refs                          .Where(r => r.Type == RefTypes.Tag)                          .Select(r => r.Name);                    case "*remotes*":                      return GitViewModel.Current.Tracker.Remotes;                    case "*configs*":                      return GitViewModel.Current.Tracker.Configs.Keys;                    case "*commits*":                      return GitViewModel.Current.Tracker.RepositoryGraph.Commits                          .OrderByDescending(c=>c.AuthorDate)                          .Select(r => r.ShortId);              }
Missing Default,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
Missing Default,Mono.Options,OptionSet,C:\repos\yysun_Git-Source-Control-Provider\GitUI\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  					case ' ':  					case '\t':  					case '\v':  					case '-':  					case ''':  					case '.':  					case ';':  						sep = i;  						break;  					case '\n':  						return i;  				}
Missing Default,GitUI.UI,BottomToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,GitConsole,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\GitConsole.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_MouseDoubleClick);                            #line default              #line hidden                            #line 15 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstOptions_PreviewKeyDown);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,MainToolBar,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\MainToolBar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,PendingChanges,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_ContextMenuOpening,The following switch statement is missing a default case: switch (selectedItem.Status)                  {                      case GitFileStatus.Added:                      case GitFileStatus.New:                          //menuCompare.IsEnabled =                           menuUndo.IsEnabled = false;                          break;                        case GitFileStatus.Modified:                      case GitFileStatus.Staged:                          //menuCompare.IsEnabled =                           menuUndo.IsEnabled = true;                          break;                        case GitFileStatus.Removed:                      case GitFileStatus.Deleted:                          //menuCompare.IsEnabled = false;                          menuUndo.IsEnabled = true;                          break;                  }
Missing Default,GitScc.UI,BranchPicker,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\BranchPicker.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.radioButton1 = ((System.Windows.Controls.RadioButton)(target));              return;              case 2:              this.comboBranches = ((System.Windows.Controls.ComboBox)(target));                            #line 26 "..\..\..\UI\BranchPicker.xaml"              this.comboBranches.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBranches_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.radioButton2 = ((System.Windows.Controls.RadioButton)(target));              return;              case 4:              this.txtNewBranch = ((System.Windows.Controls.TextBox)(target));                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.GotFocus += new System.Windows.RoutedEventHandler(this.txtNewBranch_GotFocus);                            #line default              #line hidden                            #line 28 "..\..\..\UI\BranchPicker.xaml"              this.txtNewBranch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtNewBranch_TextChanged);                            #line default              #line hidden              return;              case 5:              this.btnOK = ((System.Windows.Controls.Button)(target));                            #line 29 "..\..\..\UI\BranchPicker.xaml"              this.btnOK.Click += new System.Windows.RoutedEventHandler(this.btnOK_Click);                            #line default              #line hidden              return;              case 6:              this.button2 = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,GitScc.UI,CommitBox,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitBox.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 2:                            #line 39 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 4:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 44 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 6:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 7:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 8:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 10:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 11:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 12:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 13:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 14:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 15:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 16:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:                            #line 108 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,GitScc.UI,CommitHead,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitHead.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 5:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 6:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,GitScc.UI,CommitTag,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\CommitTag.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 10 "..\..\..\UI\CommitTag.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteTag_Click);                            #line default              #line hidden              return;              }
Missing Default,GitScc.UI,Loading,C:\repos\yysun_Git-Source-Control-Provider\GitUI\UI\Loading.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.spin = ((System.Windows.Media.RotateTransform)(target));              return;              }
