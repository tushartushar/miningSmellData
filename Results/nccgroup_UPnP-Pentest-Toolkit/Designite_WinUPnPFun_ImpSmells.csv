Implementation smell,Namespace,Class,File,Method,Description
Long Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The method has 137 lines of code.
Long Method,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The method has 154 lines of code.
Complex Method,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,Cyclomatic complexity of the method is 8
Complex Method,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,button1_Click,Cyclomatic complexity of the method is 8
Complex Method,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,Cyclomatic complexity of the method is 17
Complex Method,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,button3_Click,Cyclomatic complexity of the method is 10
Complex Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,Cyclomatic complexity of the method is 27
Complex Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,treeView1_AfterSelect,Cyclomatic complexity of the method is 8
Complex Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,Cyclomatic complexity of the method is 9
Complex Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,enumAllDevices,Cyclomatic complexity of the method is 9
Complex Method,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,Cyclomatic complexity of the method is 30
Complex Method,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,Cyclomatic complexity of the method is 11
Complex Method,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,Cyclomatic complexity of the method is 30
Complex Method,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,find_content,Cyclomatic complexity of the method is 17
Long Parameter List,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,notify_spoof,The method has 6 parameters.
Long Parameter List,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,msearch_response_spoof,The method has 7 parameters.
Long Parameter List,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,addPortMapping,The method has 10 parameters.
Long Parameter List,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,deletePortMapping,The method has 5 parameters.
Long Parameter List,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,notifySpoof,The method has 6 parameters.
Long Statement,WinUPnPFun,AboutBox1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\AboutBox1.cs,bw_RunWorkerCompleted,The length of the statement  "		MessageBox.Show ("Could not make a HTTP request to get latest version. No internet connectivity?"' "Could not check latest version"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 216.
Long Statement,WinUPnPFun,AboutBox1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\AboutBox1.cs,bw_RunWorkerCompleted,The length of the statement  "			string messageContent = String.Format ("The latest version is: {0}\r\nPlease update to the latest version for new features and bug fixes!"' latestVersion); " is 155.
Long Statement,WinUPnPFun,AboutBox1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\AboutBox1.cs,bw_RunWorkerCompleted,The length of the statement  "			MessageBox.Show (messageContent' "There is a newer version available"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 154.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,ComeGetIt_Load,The length of the statement  "		networkInterfaces.Items.Add (String.Format ("{1} {0}"' device.Name' device.Description != null ? String.Format (" ({0})"' device.Description) : "[nNo device description]")); " is 173.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The length of the statement  "			webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n"; " is 1488.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The length of the statement  "	string msearch_string = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + deviceDescURL.Text + "\r\n" + "NT: " + upnpTypes [r] + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid () + "\r\n" + "\r\n"; " is 311.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,notify_spoof,The length of the statement  "	using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout " is 130.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,button1_Click,The length of the statement  "		MessageBox.Show ("Please select a network interface first."' "Select a network interface"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 174.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,SendResponse,The length of the statement  "	mywebserverLog = request.HttpMethod + " from: " + request.RemoteEndPoint.ToString () + " " + request.UserAgent + " [" + DateTime.Now + "]\r\n" + request.RawUrl + "\r\n" + mywebserverLog; " is 186.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,SendSCPDResponse,The length of the statement  "	mywebserverLog = request.HttpMethod + " from: " + request.RemoteEndPoint.ToString () + " " + request.UserAgent + " [" + DateTime.Now + "]\r\n" + request.RawUrl + "\r\n" + mywebserverLog; " is 186.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,SendSCPDResponse,The length of the statement  "	string sendResponse = "<?xml version=\"1.0\"?>" + "<scpd xmlns=\"urn:schemas-upnp-org:service-1-0\">" + "  <specVersion>" + "    <major>1</major>" + "    <minor>0</minor>" + "  </specVersion>" + "  <actionList>" + "    <action>" + "    <name>GetSearchCapabilities</name>" + "      <argumentList>" + "        <argument>" + "          <name>SearchCaps</name>" + "          <direction>out</direction>" + "         <relatedStateVariable>SearchCapabilities</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "    <action>" + "    <name>GetSortCapabilities</name>" + "      <argumentList>" + "        <argument>" + "          <name>SortCaps</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>SortCapabilities</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "    <action>" + "    <name>GetSystemUpdateID</name>" + "      <argumentList>" + "        <argument>" + "          <name>Id</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>SystemUpdateID</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "    <action>" + "    <name>Browse</name>" + "      <argumentList>" + "        <argument>" + "          <name>ObjectID</name>" + "          <direction>in</direction>         " + "        <relatedStateVariable>A_ARG_TYPE_ObjectID</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>BrowseFlag</name>" + "          <direction>in</direction>          " + "          <relatedStateVariable>A_ARG_TYPE_BrowseFlag</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>Filter</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Filter</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>StartingIndex</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Index</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>RequestedCount</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>SortCriteria</name>" + "          <direction>in</direction>            " + "          <relatedStateVariable>A_ARG_TYPE_SortCriteria</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>Result</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Result</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>NumberReturned</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>TotalMatches</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>UpdateID</name>" + "          <direction>out</direction>        " + "        <relatedStateVariable>A_ARG_TYPE_UpdateID</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "    <action>" + "    <name>Search</name>" + "      <argumentList>" + "        <argument>" + "          <name>ContainerID</name>" + "          <direction>in</direction>         " + "        <relatedStateVariable>A_ARG_TYPE_ObjectID</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>SearchCriteria</name>" + "          <direction>in</direction>            " + "          <relatedStateVariable>A_ARG_TYPE_SearchCriteria</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>Filter</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Filter</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>StartingIndex</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Index</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>RequestedCount</name>" + "          <direction>in</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>SortCriteria</name>" + "          <direction>in</direction>          " + "          <relatedStateVariable>A_ARG_TYPE_SortCriteria</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>Result</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Result</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>NumberReturned</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>TotalMatches</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>A_ARG_TYPE_Count</relatedStateVariable>" + "        </argument>" + "        <argument>" + "          <name>UpdateID</name>" + "          <direction>out</direction>           " + "       <relatedStateVariable>A_ARG_TYPE_UpdateID</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "    <action>" + "    <name>X_GetRemoteSharingStatus</name>" + "      <argumentList>" + "        <argument>" + "          <name>Status</name>" + "          <direction>out</direction>" + "          <relatedStateVariable>X_RemoteSharingEnabled</relatedStateVariable>" + "        </argument>" + "      </argumentList>" + "    </action>" + "  </actionList>" + "  <serviceStateTable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_ObjectID</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_Result</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_SearchCriteria</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_BrowseFlag</name>" + "      <dataType>string</dataType>" + "      <allowedValueList>" + "        <allowedValue>BrowseMetadata</allowedValue>" + "        <allowedValue>BrowseDirectChildren</allowedValue>" + "      </allowedValueList>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_Filter</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_SortCriteria</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_Index</name>" + "      <dataType>ui4</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_Count</name>" + "      <dataType>ui4</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>A_ARG_TYPE_UpdateID</name>" + "      <dataType>ui4</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>SearchCapabilities</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"no\">" + "      <name>SortCapabilities</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"yes\">" + "      <name>SystemUpdateID</name>" + "      <dataType>ui4</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"yes\">" + "      <name>ContainerUpdateIDs</name>" + "      <dataType>string</dataType>" + "    </stateVariable>" + "    <stateVariable sendEvents=\"yes\">" + "      <name>X_RemoteSharingEnabled</name>" + "      <dataType>boolean</dataType>" + "    </stateVariable>" + "  </serviceStateTable>" + "</scpd>"; " is 8230.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer1_Tick,The length of the statement  "		msearch_string = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + deviceDescURL.Text + "\r\n" + "NT: " + upnpTypes [r] + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + tmpGuid + "\r\n" + "\r\n"; " is 296.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer1_Tick,The length of the statement  "		msearch_string = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + deviceDescURL.Text + "\r\n" + "NT: " + upnpTypes [r] + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + webserverGuid + "\r\n" + "\r\n"; " is 302.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer1_Tick,The length of the statement  "	notify_spoof (selectedDevice' msearch_string' sourceIP.Text' ushort.Parse (sourcePort.Text)' destIP.Text' ushort.Parse (destPort.Text)); " is 136.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "		string msearch_response = "HTTP/1.1 200 OK\r\n" + "Cache-Control:max-age = 300\r\n" + "Date:" + DateTime.Now.ToUniversalTime ().ToString ("r") + "\r\n" + "ST:" + STHeaderAskedFor + "\r\n" + "USN:uuid:" + newGuid + "\r\n" + "Location:" + deviceDescURL.Text + "\r\n" + "OPT:\"http://schemas.upnp.org/upnp/1/0/\"; ns=01\r\n" + "01-NLS:" + bootid + "\r\n" + "Server:UPnP-Pentest-Toolkit\r\n" + "Ext:\r\n" + "\r\n"; " is 410.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "			msearch_response_spoof (device' msearch_response' sourceIP.Text' ushort.Parse (sourcePort.Text)' ip.Source.ToString ()' ushort.Parse (udp.SourcePort.ToString ())' packetSource); " is 177.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "				msearch_response = "HTTP/1.1 200 OK\r\n" + "Cache-Control:max-age = 300\r\n" + "Date:" + DateTime.Now.ToUniversalTime ().ToString ("r") + "\r\n" + "ST:uuid:" + STHeaderAskedFor + "\r\n" + "USN:uuid:" + newGuid + "\r\n" + "Location:" + deviceDescURL.Text + "\r\n" + "OPT:\"http://schemas.upnp.org/upnp/1/0/\"; ns=01\r\n" + "01-NLS:" + bootid + "\r\n" + "Server:UPnP-Pentest-Toolkit" + "Ext:\r\n" + "\r\n"; " is 404.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "					msearch_response_spoof (device' msearch_response' sourceIP.Text' ushort.Parse (sourcePort.Text)' ip.Source.ToString ()' ushort.Parse (udp.SourcePort.ToString ())' packetSource); " is 177.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "				msearch_response = "HTTP/1.1 200 OK\r\n" + "CACHE-CONTROL: max-age=1800\r\n" + "DATE: " + DateTime.Now.ToUniversalTime ().ToString ("r") + "\r\n" + "EXT:\r\n" + "LOCATION: " + deviceDescURL.Text + "\r\n" + "OPT: \"http://schemas.upnp.org/upnp/1/0/\"; ns=01\r\n" + "01-NLS: " + newGuid + "\r\n" + "SERVER: Linux/3.8.13' UPnP/1.0' Portable SDK for UPnP devices/1.6.18\r\n" + "X-User-Agent: redsonic\r\n" + "ST: " + upnpTypes [r] + "\r\n" + "USN: uuid:" + newGuid + "::" + upnpTypes [r] + "\r\n" + "BOOTID.UPNP.ORG: 67\r\n" + "CONFIGID.UPNP.ORG: 2\r\n"; " is 550.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The length of the statement  "					msearch_response_spoof (device' msearch_response' sourceIP.Text' ushort.Parse (sourcePort.Text)' ip.Source.ToString ()' ushort.Parse (udp.SourcePort.ToString ())' packetSource); " is 177.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,msearch_response_spoof,The length of the statement  "	using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout " is 130.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,useFuzzCases_CheckedChanged,The length of the statement  "		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>" + fuzzPoint + "</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>" + fuzzPoint + "</manufacturer>" + "<manufacturerURL>" + fuzzPoint + "</manufacturerURL>" + "<modelName>" + fuzzPoint + "</modelName>" + "<modelNumber>" + fuzzPoint + "</modelNumber>" + "<modelURL>" + fuzzPoint + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n"; " is 1475.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,ResourceSendResponse,The length of the statement  "	mywebserverLog = "[Resource Request]" + request.HttpMethod + " from: " + request.RemoteEndPoint.ToString () + " " + request.UserAgent + " [" + DateTime.Now + "]\r\n" + request.RawUrl + "\r\n" + mywebserverLog; " is 209.
Long Statement,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,button3_Click,The length of the statement  "				rNode.ToolTipText = "/resource/?localResourceID=" + resource + " - " + device.mimeTypes [resource] + "' " + device.downloadedURLs [resource].Count () + "bytes"; " is 160.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "			newNode.ToolTipText = "Device Description:\r\n" + myTarget.friendlyName + "\r\nDocument URL:\r\n" + myTarget.documentURL + "\r\nControl URL:\r\n" + myTarget.controlURL + "\r\n"; " is 177.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "		string makeSOAPRequest = "<?xml version=\"1.0\"?>\r\n" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n" + "<s:Body>\r\n" + "<m:" + myTarget.actionDesc.Name + " xmlns:m=\"" + myTarget.ServiceTypeIdentifier + "\">\r\n"; " is 305.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "		string makeSOAPResponse = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n" + "<s:Body>\r\n" + "<u:" + myTarget.actionDesc.Name + " xmlns:u=\"" + myTarget.ServiceTypeIdentifier + "\">"; " is 321.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "					TreeNode argumentNode = treeData.ElementAt (i).Nodes [j].Nodes.Add (myTarget.targetId.ToString ()' String.Format ("->{0}"' nArg.Name)); " is 135.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "					argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Data Type: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType)); " is 169.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Default Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DefaultValue)); " is 177.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "							argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Allowed Value {0}: {1}"' av.ToString ()' allowedValue)); " is 127.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Minimum Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Minimum)); " is 185.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Maximum Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Maximum)); " is 185.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPRequest = makeSOAPRequest + "<" + nArg.Name + ">" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DefaultValue + "</" + nArg.Name + ">\r\n"; " is 172.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPRequest = makeSOAPRequest + "<" + nArg.Name + ">" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Maximum + "</" + nArg.Name + ">\r\n"; " is 180.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPRequest = makeSOAPRequest + "<" + nArg.Name + ">" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedValues [0] + "</" + nArg.Name + ">\r\n"; " is 177.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "					TreeNode argumentNode = treeData.ElementAt (i).Nodes [j].Nodes.Add (myTarget.targetId.ToString ()' String.Format ("<-{0}"' nArg.Name)); " is 135.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "					argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Data Type: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType)); " is 169.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Default Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DefaultValue)); " is 177.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "							argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Allowed Value {0}: {1}"' av.ToString ()' allowedValue)); " is 127.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Minimum Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Minimum)); " is 185.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						argumentNode.Nodes.Add (myTarget.targetId.ToString ()' String.Format ("Maximum Value: {0}"' myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Maximum)); " is 185.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPResponse = makeSOAPResponse + "<" + nArg.Name + "><DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE>" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DefaultValue + "<DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE></" + nArg.Name + ">\r\n"; " is 386.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPResponse = makeSOAPResponse + "<" + nArg.Name + "><DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE>" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedRange.Maximum + "<DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE></" + nArg.Name + ">\r\n"; " is 394.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPResponse = makeSOAPResponse + "<" + nArg.Name + "><DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE>" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].AllowedValues [0] + "<DEFAULT-FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE></" + nArg.Name + ">\r\n"; " is 391.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "						makeSOAPResponse = makeSOAPResponse + "<" + nArg.Name + ">" + "<FUZZ-" + myTarget.targetServiceDesc.StateVariables [nArg.RelatedStateVariable].DataType + "-HERE>" + "</" + nArg.Name + ">\r\n"; " is 192.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "		makeSOAPRequest = makeSOAPRequest + "</m:" + myTarget.actionDesc.Name + ">\r\n" + "</s:Body>\r\n" + "</s:Envelope>\r\n"; " is 120.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "		makeSOAPResponse = makeSOAPResponse + "</u:" + myTarget.actionDesc.Name + ">\r\n" + "</s:Body>\r\n" + "</s:Envelope>\r\n"; " is 122.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,bw_DoWork,The length of the statement  "			newNode.ToolTipText = "Device Description:\r\n" + quickListDevice.FriendlyName + "\r\nDocument URL:\r\n" + quickListDevice.DocumentURL + "\r\n"; " is 144.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,GetServiceUrl,The length of the statement  "		XmlNode node = desc.SelectSingleNode ("//tns:service[tns:serviceType=\"" + serviceType + "\"]/tns:controlURL/text()"' nsMgr); " is 125.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button2_Click,The length of the statement  "		MessageBox.Show ("Please wait for enumeration to complete."' "Please wait"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 159.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button2_Click,The length of the statement  "					MessageBox.Show ("Select either a 'Browse' or 'SetVolume' action for a media player target."' "Selected action was not 'Browse' or 'SetVolume'"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 228.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button2_Click,The length of the statement  "				MessageBox.Show ("Select either a 'Browse' or 'SetVolume' action for a media player target."' "No target selected"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 199.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button2_Click,The length of the statement  "			MessageBox.Show ("Please enumerate a device before using this tool."' "No devices enumerated yet"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 182.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button3_Click,The length of the statement  "		string elevation = "This feature requires to create web servers and does so using the HTTPListener class. " + "To listen externally this either requires admin privileges or you have to add each URL using netsh." + "You can either click 'Yes' to elevate this application (Only use in a trusted environment) or click 'No' and you can click through the individual elevation prompts that netsh requires to add each URL." + "When you close the application you will then have to click through the elevation prompts for removing the URLs."; " is 533.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button3_Click,The length of the statement  "		DialogResult dialogResult = MessageBox.Show (elevation' "Not running as Administrator. Do you wish to elevate?"' MessageBoxButtons.YesNo); " is 138.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button5_Click,The length of the statement  "		MessageBox.Show ("Please wait for enumeration to complete."' "Please wait"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 159.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button5_Click,The length of the statement  "			MessageBox.Show ("There are no targets yet."' "No targets"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 143.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button6_Click,The length of the statement  "				MessageBox.Show ("No action selected."' "Select the action of a target first."' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 163.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button6_Click,The length of the statement  "			MessageBox.Show ("No action selected."' "Select the action of a target first."' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 163.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button6_Click,The length of the statement  "		MessageBox.Show ("There are no targets yet."' "No targets"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 143.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,saveResultsToolStripMenuItem_Click,The length of the statement  "				string resultsHeader = String.Format ("{0}UPnP Pentest Toolkit\r\nDTM' NCC Group\r\nResults Saved: {1}\r\n{0}\r\n"' sep' DateTime.Now.ToUniversalTime ().ToString ("r")); " is 169.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button1_Click_1,The length of the statement  "		MessageBox.Show ("Please wait for enumeration to complete."' "Please wait"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 159.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button1_Click_1,The length of the statement  "			MessageBox.Show ("Please enumerate devices for at least one target"' "No devices enumerated"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 177.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button8_Click,The length of the statement  "		string elevation = "This feature requires to create web servers and does so using the HTTPListener class. " + "To listen externally this either requires admin privileges or you have to add each URL using netsh." + "You can either click 'Yes' to elevate this application (Only use in a trusted environment)"; " is 307.
Long Statement,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,button8_Click,The length of the statement  "		DialogResult dialogResult = MessageBox.Show (elevation' "Not running as Administrator. Do you wish to elevate?"' MessageBoxButtons.YesNo); " is 138.
Long Statement,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,addPortMapping,The length of the statement  "	string req = "<?xml version=\"1.0\"?>" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<s:Body>" + "<m:AddPortMapping xmlns:m=\"" + serviceIdentifier + "\">" + "<NewRemoteHost>" + NewRemoteHost + "</NewRemoteHost>" + "<NewExternalPort>" + NewExternalPort + "</NewExternalPort>" + "<NewProtocol>" + NewProtocol + "</NewProtocol>" + "<NewInternalPort>" + NewInternalPort + "</NewInternalPort>" + "<NewInternalClient>" + NewInternalClient + "</NewInternalClient>" + "<NewEnabled>" + NewEnabled + "</NewEnabled>" + "<NewPortMappingDescription>" + NewPortMappingDescription + "</NewPortMappingDescription>" + "<NewLeaseDuration>" + NewLeaseDuration + "</NewLeaseDuration>" + "</m:AddPortMapping>" + "</s:Body>" + "</s:Envelope>"; " is 812.
Long Statement,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,deletePortMapping,The length of the statement  "	string req = "<?xml version=\"1.0\"?>" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<s:Body>" + "<m:DeletePortMapping xmlns:m=\"" + serviceIdentifier + "\">" + "<NewRemoteHost>" + NewRemoteHost + "</NewRemoteHost>" + "<NewExternalPort>" + NewExternalPort + "</NewExternalPort>" + "<NewProtocol>" + NewProtocol + "</NewProtocol>" + "</m:DeletePortMapping>" + "</s:Body>" + "</s:Envelope>"; " is 479.
Long Statement,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,bw_DoWork,The length of the statement  "			logText = String.Format ("{0} seems to allow portmapping. It has an 'AddPortMapping' method.\r\n{1}"' myTarget.targetService.Device.FriendlyName' logText); " is 155.
Long Statement,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,bw_DoWork,The length of the statement  "			logText = String.Format ("{0} seems to allow portmapping. It has an 'GetGenericPortMappingEntry' method.\r\n{1}"' myTarget.targetService.Device.FriendlyName' logText); " is 167.
Long Statement,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,bw2_DoWork,The length of the statement  "				addPortMapping (coURL' serviceIdent' remoteHostEntry.Text' externalPortEntry.Text' protocolEntry.Text' internalPortEntry.Text' internalClientEntry.Text' enabledEntry.Text' portMappingDescEntry.Text' leaseDurationEntry.Text); " is 224.
Long Statement,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The length of the statement  "				deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n"; " is 215.
Long Statement,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The length of the statement  "			string sep = "--------------------------------------------------------------------------------------------------------------------------------\r\n"; " is 148.
Long Statement,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,MSearchSpoof_Load,The length of the statement  "		networkInterfaces.Items.Add (String.Format ("{1} {0}"' device.Name' device.Description != null ? String.Format (" ({0})"' device.Description) : "[No Description] ")); " is 166.
Long Statement,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,msearch_spoof,The length of the statement  "	String msearch_string = "M-SEARCH * HTTP/1.1\r\nHOST:239.255.255.250:1900\r\nST: ssdp:all\r\nMAN: \"ssdp:discover\"\r\nMX:2\r\n\r\n"; " is 133.
Long Statement,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,msearch_spoof,The length of the statement  "	using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout " is 130.
Long Statement,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,timer1_Tick,The length of the statement  "	spoofLog.Text = String.Format ("Spoofed M-Search from {0} on port {1} [{2}]\r\n"' targetIP.Text' targetPort.Text' DateTime.Now) + spoofLog.Text; " is 144.
Long Statement,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,button1_Click,The length of the statement  "		MessageBox.Show ("Please select a network interface first."' "Select a network interface"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 174.
Long Statement,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The length of the statement  "									rstr = "<?xml version=\"1.0\"?>" + "<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<SOAP-ENV:Body>" + "<m:BrowseResponse xmlns:m=\"urn:schemas-upnp-org:service:ContentDirectory:1\">" + "<Result xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"string\">&lt;DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"&gt;&lt;container id=\"0\" restricted=\"1\" parentID=\"-1\" childCount=\"0\"&gt;&lt;dc:title&gt;UPnP-Pentest-Toolkit&lt;/dc:title&gt;&lt;upnp:class&gt;object.container&lt;/upnp:class&gt;&lt;/container&gt;&lt;/DIDL-Lite&gt;</Result>" + "<NumberReturned xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"ui4\">1</NumberReturned>" + "<TotalMatches xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"ui4\">1</TotalMatches>" + "<UpdateID xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"ui4\">0</UpdateID>" + "</m:BrowseResponse>" + "</SOAP-ENV:Body>" + "</SOAP-ENV:Envelope>"; " is 1129.
Long Statement,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The length of the statement  "									rstr = "<?xml version=\"1.0\"?>" + "<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<SOAP-ENV:Body>" + "<m:GetSearchCapabilitiesResponse xmlns:m=\"urn:schemas-upnp-org:service:ContentDirectory:1\">" + "<SearchCaps xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"string\">@id'@refID'dc:title'upnp:class'upnp:genre'upnp:artist'upnp:author'upnp:author@role'upnp:album'dc:creator'res@size'res@duration'res@protocolInfo'res@protection'dc:publisher'dc:language'upnp:originalTrackNumber'dc:date'upnp:producer'upnp:rating'upnp:actor'upnp:director'upnp:toc'dc:description'microsoft:userRatingInStars'microsoft:userEffectiveRatingInStars'microsoft:userRating'microsoft:userEffectiveRating'microsoft:serviceProvider'microsoft:artistAlbumArtist'microsoft:artistPerformer'microsoft:artistConductor'microsoft:authorComposer'microsoft:authorOriginalLyricist'microsoft:authorWriter'upnp:userAnnotation'upnp:channelName'upnp:longDescription'upnp:programTitle'upnp:episodeNumber</SearchCaps>" + "</m:GetSearchCapabilitiesResponse>" + "</SOAP-ENV:Body>" + "</SOAP-ENV:Envelope>"; " is 1175.
Long Statement,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The length of the statement  "									rstr = "<?xml version=\"1.0\"?>" + "<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<SOAP-ENV:Body>" + "<m:GetSortCapabilitiesResponse xmlns:m=\"urn:schemas-upnp-org:service:ContentDirectory:1\">" + "<SortCaps xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" dt:dt=\"string\">dc:title'upnp:genre'upnp:album'dc:creator'res@size'res@duration'res@bitrate'dc:publisher'dc:language'upnp:originalTrackNumber'dc:date'upnp:producer'upnp:rating'upnp:actor'upnp:director'upnp:toc'dc:description'microsoft:year'microsoft:userRatingInStars'microsoft:userEffectiveRatingInStars'microsoft:userRating'microsoft:userEffectiveRating'microsoft:serviceProvider'microsoft:artistAlbumArtist'microsoft:artistPerformer'microsoft:artistConductor'microsoft:authorComposer'microsoft:authorWriter'microsoft:sourceUrl'upnp:userAnnotation'upnp:channelName'upnp:longDescription'upnp:programTitle'upnp:episodeNumber</SortCaps>" + "</m:GetSortCapabilitiesResponse>" + "</SOAP-ENV:Body>" + "</SOAP-ENV:Envelope>"; " is 1086.
Long Statement,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The length of the statement  "									mimicDeviceLog = "Source: " + requestFrom + "\r\n\r\n" + "SOAP Action: " + incomingSOAPAction + "\r\n" + "\r\nRequest:\r\n" + requestContent + "\r\n\r\nResponse:\r\n" + rstr + "\r\n---\r\n" + mimicDeviceLog; " is 207.
Long Statement,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,sendWindowsMediaRenderingControl,The length of the statement  "	string req = "<?xml version=\"1.0\"?>" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<s:Body>" + soap + "</s:Body>" + "</s:Envelope>"; " is 224.
Long Statement,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,setVolume,The length of the statement  "	string soap = "<m:SetVolume xmlns:m=\"urn:schemas-upnp-org:service:RenderingControl:1\">" + "<InstanceID>0</InstanceID>" + "<Channel>Master</Channel>" + "<DesiredVolume>" + volume.ToString () + "</DesiredVolume>" + "</m:SetVolume>"; " is 232.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,notifySpoof,The length of the statement  "	using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout " is 130.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The length of the statement  "				string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n"; " is 334.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The length of the statement  "				string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n"; " is 334.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterSendResponse,The length of the statement  "		fakeRouterBaseDescription = "<?xml version=\"1.0\"?><root xmlns=\"urn:schemas-upnp-org:device-1-0\"><specVersion><major>1</major><minor>0</minor></specVersion><device><deviceType>urn:schemas-upnp-org:device:InternetGatewayDevice:1</deviceType><friendlyName>" + fakeRouterName + "</friendlyName><manufacturer>Rick</manufacturer><manufacturerURL>" + fakeRouterUrl + "</manufacturerURL><modelDescription>Rick</modelDescription><modelName>Rick</modelName><modelNumber>Rick</modelNumber><modelURL>" + fakeRouterUrl + "</modelURL><serialNumber>Rick</serialNumber><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><iconList><icon><mimetype>image/gif</mimetype><width>48</width><height>48</height><depth>24</depth><url>icon.gif</url></icon></iconList><serviceList><service><serviceType>urn:schemas-upnp-org:service:Layer3Forwarding:1</serviceType><serviceId>urn:upnp-org:serviceId:Layer3Forwarding1</serviceId><controlURL>/ctl/L3F</controlURL><eventSubURL>/evt/L3F</eventSubURL><SCPDURL>/L3F.xml</SCPDURL></service></serviceList><deviceList><device><deviceType>urn:schemas-upnp-org:device:WANDevice:1</deviceType><friendlyName>WANDevice</friendlyName><manufacturer>MiniUPnP</manufacturer><manufacturerURL>http://www.youtube.com/watch?v=dQw4w9WgXcQ</manufacturerURL><modelDescription>WAN Device</modelDescription><modelName>WAN Device</modelName><modelNumber>20120731</modelNumber><modelURL>http://www.youtube.com/watch?v=dQw4w9WgXcQ</modelURL><serialNumber>Rick</serialNumber><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><UPC>123456789012</UPC><serviceList><service><serviceType>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1</serviceType><serviceId>urn:upnp-org:serviceId:WANCommonIFC1</serviceId><controlURL>/ctl/CmnIfCfg</controlURL><eventSubURL>/evt/CmnIfCfg</eventSubURL><SCPDURL>/WANCfg.xml</SCPDURL></service></serviceList><deviceList><device><deviceType>urn:schemas-upnp-org:device:WANConnectionDevice:1</deviceType><friendlyName>WANConnectionDevice</friendlyName><manufacturer>Rick</manufacturer><manufacturerURL>http://www.youtube.com/watch?v=dQw4w9WgXcQ</manufacturerURL><modelDescription>MiniUPnP daemon</modelDescription><modelName>MiniUPnPd</modelName><modelNumber>20120731</modelNumber><modelURL>http://www.youtube.com/watch?v=dQw4w9WgXcQ</modelURL><serialNumber>Rick</serialNumber><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><UPC>123456789012</UPC><serviceList><service><serviceType>urn:schemas-upnp-org:service:WANIPConnection:1</serviceType><serviceId>urn:upnp-org:serviceId:WANIPConn1</serviceId><controlURL>/ctl/IPConn</controlURL><eventSubURL>/evt/IPConn</eventSubURL><SCPDURL>/WANIPCn.xml</SCPDURL></service></serviceList></device></deviceList></device></deviceList><presentationURL>" + fakeRouterUrl + "</presentationURL></device></root>"; " is 2777.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterSendResponse,The length of the statement  "		fakeRouterBaseDescription = "<?xml version=\"1.0\"?><root xmlns=\"urn:schemas-upnp-org:device-1-0\"><specVersion><major>1</major><minor>0</minor></specVersion><device><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><friendlyName>" + fakeRouterName + "</friendlyName><deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType><manufacturer>Microsoft Corporation</manufacturer><manufacturerURL>http://www.microsoft.com</manufacturerURL><modelName>Windows Media Player Sharing</modelName><modelNumber>12.0</modelNumber><modelURL>http://go.microsoft.com/fwlink/?LinkId=105926</modelURL><serialNumber>S-1-5-21-2287713506-505016645-1800792052-1001</serialNumber><dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC><microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported><iconList><icon><mimetype>image/jpeg</mimetype><width>120</width><height>120</height><depth>24</depth><url>/upnphost/udhisapi.dll?content=uuid:19901bf6-4490-4be2-8690-7e95234e26fc</url></icon></iconList><serviceList><service><serviceType>urn:schemas-upnp-org:service:ConnectionManager:1</serviceType><serviceId>urn:upnp-org:serviceId:ConnectionManager</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:upnp-org:serviceId:ConnectionManager</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:upnp-org:serviceId:ConnectionManager</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:2c3d8049-4823-4f2b-97a8-f7ab17c6abdb</SCPDURL></service><service><serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType><serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:upnp-org:serviceId:ContentDirectory</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:upnp-org:serviceId:ContentDirectory</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:bf61c87d-1ac7-4f28-b621-534563eb59c9</SCPDURL></service><service><serviceType>urn:microsoft.com:service:X_MS_MediaReceiverRegistrar:1</serviceType><serviceId>urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:21afdb06-ddb1-4c7b-b94f-521e4fdcdb67+urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:66ce6d8c-7e58-428a-84ae-1b9e09f95da1</SCPDURL></service></serviceList><presentationURL>" + fakeRouterUrl + "</presentationURL></device></root>"; " is 2809.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterSendResponse,The length of the statement  "		fakeRouterBaseDescription = "<?xml version=\"1.0\"?><root xmlns=\"urn:schemas-upnp-org:device-1-0\" xmlns:df=\"http://schemas.microsoft.com/windows/2008/09/devicefoundation\" xmlns:microsoft=\"urn:schemas-microsoft-com:WMPDMR-1-0\" xmlns:pnpx=\"http://schemas.microsoft.com/windows/pnpx/2005/11\"><specVersion><major>1</major><minor>0</minor></specVersion><device><deviceType>urn:schemas-upnp-org:device:MediaRenderer:1</deviceType><friendlyName>" + fakeRouterName + "</friendlyName><modelName>" + fakeRouterName + "</modelName><modelDescription>Digital Media Renderer</modelDescription><manufacturer>Microsoft Corporation</manufacturer><manufacturerURL>http://www.microsoft.com</manufacturerURL><modelURL>http://xbox.com</modelURL><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><df:X_containerId>{2BDAA238-07DF-4EFA-9DA8-E7D888E0B8F6}</df:X_containerId><dlna:X_DLNACAP xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\"/><dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMR-1.50</dlna:X_DLNADOC><pnpx:X_deviceCategory>MediaDevices</pnpx:X_deviceCategory><pnpx:X_hardwareId>LOLCAT</pnpx:X_hardwareId><iconList><icon><mimetype>image/jpeg</mimetype><width>120</width><height>120</height><depth>24</depth><url>/upnphost/udhisapi.dll?content=uuid:ce86489c-976b-4dd3-be1a-64ccddbf6031</url></icon></iconList><serviceList><service><serviceType>urn:schemas-upnp-org:service:RenderingControl:1</serviceType><serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:RenderingControl</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:RenderingControl</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:439e9e51-d938-472d-87af-df7d7534e82e</SCPDURL></service><service><serviceType>urn:schemas-upnp-org:service:AVTransport:1</serviceType><serviceId>urn:upnp-org:serviceId:AVTransport</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:AVTransport</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:AVTransport</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:b851bd2d-4131-4b05-882b-d6a8401488cd</SCPDURL></service><service><serviceType>urn:schemas-upnp-org:service:ConnectionManager:1</serviceType><serviceId>urn:upnp-org:serviceId:ConnectionManager</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:ConnectionManager</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:ConnectionManager</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:11219e36-01b6-4390-870d-1efe62b73f45</SCPDURL></service></serviceList><presentationURL>" + fakeRouterUrl + "</presentationURL></device></root>"; " is 2962.
Long Statement,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,WinEnum_Load,The length of the statement  "		networkInterfaces.Items.Add (String.Format ("{0} {2} {1}"' ifaceIP.ToString ()' device.Name' device.Description != null ? String.Format (" ({0})"' device.Description) : "[nNo device description]")); " is 198.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,PacketHandler,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,ResourceSendResponse,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,button3_Click,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,saveResultsToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,list_port_mapping_entries,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,bw2_DoWork,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,bw2_DoWork,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,Run,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,find_content,The method has an empty catch block.
Empty Catch Block,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,find_content,The method has an empty catch block.
Magic Number,WinUPnPFun,AboutBox1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\AboutBox1.cs,bw_DoWork,The following statement contains a magic number: try {  	string url = "https://dtm.co.uk/upnp_pentest_toolkit/version.txt";  	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (url);  	request.Timeout = 10000;  	HttpWebResponse response = (HttpWebResponse)request.GetResponse ();  	Stream resStream = response.GetResponseStream ();  	StreamReader objReader = new StreamReader (resStream);  	latestVersion = objReader.ReadToEnd ().Trim ();  }  catch {  	latestVersion = "";  }  
Magic Number,WinUPnPFun,AboutBox1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\AboutBox1.cs,bw_DoWork,The following statement contains a magic number: request.Timeout = 10000;  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	int wsPort = 9090;  	try {  		wsPort = int.Parse (webserverPort.Text);  		if ((wsPort > 65535) || (wsPort < 1)) {  			wsPort = 9090;  		}  	}  	catch {  	}  	string deviceDesc = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + webserverGuid + "/";  	if (wsPort == 80) {  		deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  	}  	deviceDescURL.Text = deviceDesc;  	string scpd = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + scpdGuid + "/";  	if (wsPort == 80) {  		scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  	}  	scpdURL.Text = scpd;  	if ((learnedUDN != "") && (learnedUDN != null)) {  		webServerResponse.Text = webServerResponse.Text.Replace (learnedUDN' "uuid:" + webserverGuid);  		learnedUDN = "uuid:" + webserverGuid;  	}  	if ((useFuzzCases.Checked == false) && (deviceFromFile == null)) {  		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n";  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	int wsPort = 9090;  	try {  		wsPort = int.Parse (webserverPort.Text);  		if ((wsPort > 65535) || (wsPort < 1)) {  			wsPort = 9090;  		}  	}  	catch {  	}  	string deviceDesc = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + webserverGuid + "/";  	if (wsPort == 80) {  		deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  	}  	deviceDescURL.Text = deviceDesc;  	string scpd = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + scpdGuid + "/";  	if (wsPort == 80) {  		scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  	}  	scpdURL.Text = scpd;  	if ((learnedUDN != "") && (learnedUDN != null)) {  		webServerResponse.Text = webServerResponse.Text.Replace (learnedUDN' "uuid:" + webserverGuid);  		learnedUDN = "uuid:" + webserverGuid;  	}  	if ((useFuzzCases.Checked == false) && (deviceFromFile == null)) {  		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n";  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	int wsPort = 9090;  	try {  		wsPort = int.Parse (webserverPort.Text);  		if ((wsPort > 65535) || (wsPort < 1)) {  			wsPort = 9090;  		}  	}  	catch {  	}  	string deviceDesc = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + webserverGuid + "/";  	if (wsPort == 80) {  		deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  	}  	deviceDescURL.Text = deviceDesc;  	string scpd = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + scpdGuid + "/";  	if (wsPort == 80) {  		scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  	}  	scpdURL.Text = scpd;  	if ((learnedUDN != "") && (learnedUDN != null)) {  		webServerResponse.Text = webServerResponse.Text.Replace (learnedUDN' "uuid:" + webserverGuid);  		learnedUDN = "uuid:" + webserverGuid;  	}  	if ((useFuzzCases.Checked == false) && (deviceFromFile == null)) {  		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n";  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	int wsPort = 9090;  	try {  		wsPort = int.Parse (webserverPort.Text);  		if ((wsPort > 65535) || (wsPort < 1)) {  			wsPort = 9090;  		}  	}  	catch {  	}  	string deviceDesc = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + webserverGuid + "/";  	if (wsPort == 80) {  		deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  	}  	deviceDescURL.Text = deviceDesc;  	string scpd = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + scpdGuid + "/";  	if (wsPort == 80) {  		scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  	}  	scpdURL.Text = scpd;  	if ((learnedUDN != "") && (learnedUDN != null)) {  		webServerResponse.Text = webServerResponse.Text.Replace (learnedUDN' "uuid:" + webserverGuid);  		learnedUDN = "uuid:" + webserverGuid;  	}  	if ((useFuzzCases.Checked == false) && (deviceFromFile == null)) {  		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n";  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	int wsPort = 9090;  	try {  		wsPort = int.Parse (webserverPort.Text);  		if ((wsPort > 65535) || (wsPort < 1)) {  			wsPort = 9090;  		}  	}  	catch {  	}  	string deviceDesc = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + webserverGuid + "/";  	if (wsPort == 80) {  		deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  	}  	deviceDescURL.Text = deviceDesc;  	string scpd = "http://" + sourceIP.Text + ":" + wsPort.ToString () + "/" + scpdGuid + "/";  	if (wsPort == 80) {  		scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  	}  	scpdURL.Text = scpd;  	if ((learnedUDN != "") && (learnedUDN != null)) {  		webServerResponse.Text = webServerResponse.Text.Replace (learnedUDN' "uuid:" + webserverGuid);  		learnedUDN = "uuid:" + webserverGuid;  	}  	if ((useFuzzCases.Checked == false) && (deviceFromFile == null)) {  		webServerResponse.Text = "<?xml version=\"1.0\"?>" + "<root xmlns=\"urn:schemas-upnp-org:device-1-0\">" + "<specVersion>" + "<major>1</major>" + "<minor>0</minor>" + "</specVersion>" + "<device>" + "<UDN>uuid:" + webserverGuid + "</UDN>" + "<friendlyName>UPnP Pentest Toolkit</friendlyName>" + "<deviceType>urn:schemas-upnp-org:device:MediaServer:1</deviceType>" + "<manufacturer>UPnP Pentest Toolkit</manufacturer>" + "<manufacturerURL>" + deviceDescURL.Text + "</manufacturerURL>" + "<modelName>UPnP Pentest Toolkit</modelName>" + "<modelNumber>1.0</modelNumber>" + "<modelURL>" + deviceDescURL.Text + "</modelURL>" + "<serialNumber>" + webserverGuid + "</serialNumber>" + "<dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMS-1.50</dlna:X_DLNADOC>" + "<microsoft:magicPacketWakeSupported xmlns:microsoft=\"urn:schemas-microsoft-com:WMPNSS-1-0\">1</microsoft:magicPacketWakeSupported>" + "<iconList>" + "<icon>" + "<mimetype>image/jpeg</mimetype>" + "<width>120</width>" + "<height>120</height>" + "<depth>24</depth>" + "<url>/" + scpdGuid + "/?image</url>" + "</icon>" + "</iconList>" + "<serviceList>" + "<service>" + "<serviceType>urn:schemas-upnp-org:service:ContentDirectory:1</serviceType>" + "<serviceId>urn:upnp-org:serviceId:ContentDirectory</serviceId>" + "<controlURL>/" + scpdGuid + "/</controlURL>" + "<eventSubURL>/" + scpdGuid + "/</eventSubURL>" + "<SCPDURL>/" + scpdGuid + "/</SCPDURL>" + "</service>" + "</serviceList>" + "</device>\r\n" + "</root>\r\n";  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: try {  	wsPort = int.Parse (webserverPort.Text);  	if ((wsPort > 65535) || (wsPort < 1)) {  		wsPort = 9090;  	}  }  catch {  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: try {  	wsPort = int.Parse (webserverPort.Text);  	if ((wsPort > 65535) || (wsPort < 1)) {  		wsPort = 9090;  	}  }  catch {  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if ((wsPort > 65535) || (wsPort < 1)) {  	wsPort = 9090;  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if ((wsPort > 65535) || (wsPort < 1)) {  	wsPort = 9090;  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: wsPort = 9090;  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (wsPort == 80) {  	deviceDesc = "http://" + sourceIP.Text + "/" + webserverGuid + "/";  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,allSystemsOnline,The following statement contains a magic number: if (wsPort == 80) {  	scpd = "http://" + sourceIP.Text + "/" + scpdGuid + "/";  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,notify_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,notify_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,bw_DoWork,The following statement contains a magic number: using (PacketCommunicator communicator = device.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  	using (BerkeleyPacketFilter filter = communicator.CreateFilter ("udp dst port 1900")) {  		communicator.SetFilter (filter);  	}  	captureLabel = String.Format ("[Started Capture] {0}"' device.Description);  	communicator.ReceivePackets (0' PacketHandler);  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,bw_DoWork,The following statement contains a magic number: using (PacketCommunicator communicator = device.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  	using (BerkeleyPacketFilter filter = communicator.CreateFilter ("udp dst port 1900")) {  		communicator.SetFilter (filter);  	}  	captureLabel = String.Format ("[Started Capture] {0}"' device.Description);  	communicator.ReceivePackets (0' PacketHandler);  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,msearch_response_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,msearch_response_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer2_Tick,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	string[] logLines = mywebserverLog.Split (new[] {  		'\r''  		'\n'  	});  	if (logLines.Count () > 1000) {  		mywebserverLog = "";  		foreach (string i in logLines.Take (10)) {  			mywebserverLog = i.Trim () + "\r\n" + mywebserverLog;  		}  	}  	webserverLog.Text = mywebserverLog;  	hitCounter.Text = string.Format ("{0} hits"' mywebserverhits);  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer2_Tick,The following statement contains a magic number: if (disableWebServer.Checked != true) {  	string[] logLines = mywebserverLog.Split (new[] {  		'\r''  		'\n'  	});  	if (logLines.Count () > 1000) {  		mywebserverLog = "";  		foreach (string i in logLines.Take (10)) {  			mywebserverLog = i.Trim () + "\r\n" + mywebserverLog;  		}  	}  	webserverLog.Text = mywebserverLog;  	hitCounter.Text = string.Format ("{0} hits"' mywebserverhits);  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer2_Tick,The following statement contains a magic number: if (logLines.Count () > 1000) {  	mywebserverLog = "";  	foreach (string i in logLines.Take (10)) {  		mywebserverLog = i.Trim () + "\r\n" + mywebserverLog;  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer2_Tick,The following statement contains a magic number: if (logLines.Count () > 1000) {  	mywebserverLog = "";  	foreach (string i in logLines.Take (10)) {  		mywebserverLog = i.Trim () + "\r\n" + mywebserverLog;  	}  }  
Magic Number,WinUPnPFun,ComeGetIt,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\ComeGetIt.cs,timer2_Tick,The following statement contains a magic number: foreach (string i in logLines.Take (10)) {  	mywebserverLog = i.Trim () + "\r\n" + mywebserverLog;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,GetServiceUrl,The following statement contains a magic number: try {  	WebRequest r = HttpWebRequest.Create (resp);  	r.Timeout = 10000;  	WebResponse wres = r.GetResponse ();  	Stream ress = wres.GetResponseStream ();  	desc.Load (ress);  	XmlNamespaceManager nsMgr = new XmlNamespaceManager (desc.NameTable);  	nsMgr.AddNamespace ("tns"' "urn:schemas-upnp-org:device-1-0");  	XmlNode node = desc.SelectSingleNode ("//tns:service[tns:serviceType=\"" + serviceType + "\"]/tns:controlURL/text()"' nsMgr);  	Uri baseURI = new Uri (resp);  	Uri coURL = new Uri (baseURI' node.Value);  	return coURL.AbsoluteUri;  }  catch (Exception) {  	return "";  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,GetServiceUrl,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if (deviceBw.IsBusy) {  	if (deviceWantToEnum > 0) {  		int percent = (int)Math.Ceiling (Decimal.Divide ((deviceDoneCount + deviceTimedOut)' deviceWantToEnum) * (decimal)100);  		if ((percent >= 0) && (percent <= 100)) {  			if (currentProgressBar != percent) {  				progressBar1.Value = percent;  			}  			currentProgressBar = percent;  		}  	}  }  else {  	progressBar1.Value = 100;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if (deviceBw.IsBusy) {  	if (deviceWantToEnum > 0) {  		int percent = (int)Math.Ceiling (Decimal.Divide ((deviceDoneCount + deviceTimedOut)' deviceWantToEnum) * (decimal)100);  		if ((percent >= 0) && (percent <= 100)) {  			if (currentProgressBar != percent) {  				progressBar1.Value = percent;  			}  			currentProgressBar = percent;  		}  	}  }  else {  	progressBar1.Value = 100;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if (deviceBw.IsBusy) {  	if (deviceWantToEnum > 0) {  		int percent = (int)Math.Ceiling (Decimal.Divide ((deviceDoneCount + deviceTimedOut)' deviceWantToEnum) * (decimal)100);  		if ((percent >= 0) && (percent <= 100)) {  			if (currentProgressBar != percent) {  				progressBar1.Value = percent;  			}  			currentProgressBar = percent;  		}  	}  }  else {  	progressBar1.Value = 100;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if (deviceWantToEnum > 0) {  	int percent = (int)Math.Ceiling (Decimal.Divide ((deviceDoneCount + deviceTimedOut)' deviceWantToEnum) * (decimal)100);  	if ((percent >= 0) && (percent <= 100)) {  		if (currentProgressBar != percent) {  			progressBar1.Value = percent;  		}  		currentProgressBar = percent;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if (deviceWantToEnum > 0) {  	int percent = (int)Math.Ceiling (Decimal.Divide ((deviceDoneCount + deviceTimedOut)' deviceWantToEnum) * (decimal)100);  	if ((percent >= 0) && (percent <= 100)) {  		if (currentProgressBar != percent) {  			progressBar1.Value = percent;  		}  		currentProgressBar = percent;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: if ((percent >= 0) && (percent <= 100)) {  	if (currentProgressBar != percent) {  		progressBar1.Value = percent;  	}  	currentProgressBar = percent;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,timer1_Tick,The following statement contains a magic number: progressBar1.Value = 100;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (inString && nodeText [i] == '"')  	lastSt = i;  else if (nodeText [i] == '"') {  	rtb.Select (lastSt + st + 2' i - lastSt - 1);  	rtb.SelectionColor = HighlightColors.HC_STRING;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (nodeText [i] == '"') {  	rtb.Select (lastSt + st + 2' i - lastSt - 1);  	rtb.SelectionColor = HighlightColors.HC_STRING;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: rtb.Select (lastSt + st + 2' i - lastSt - 1);  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (Char.IsWhiteSpace (nodeText' i)) {  	rtb.Select (startNodeName + st' i - startNodeName + 1);  	rtb.SelectionColor = HighlightColors.HC_NODE;  	state = 2;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: state = 2;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (!Char.IsWhiteSpace (nodeText' i)) {  	startAtt = i;  	state = 3;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: state = 3;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  	rtb.Select (startAtt + st' i - startAtt + 1);  	rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  	state = 4;  }  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: state = 4;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: if (nodeText [i] == '"' && !inString)  	state = 2;  
Magic Number,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following statement contains a magic number: state = 2;  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,list_port_mapping_entries,The following statement contains a magic number: try {  	for (int i = 0; i < 100; i++) {  		object[] inObj = new object[] {  			i  		};  		object[] outObj = myTarget.targetService.InvokeAction ("GetGenericPortMappingEntry"' inObj);  		tableData.Add (outObj);  	}  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,list_port_mapping_entries,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	object[] inObj = new object[] {  		i  	};  	object[] outObj = myTarget.targetService.InvokeAction ("GetGenericPortMappingEntry"' inObj);  	tableData.Add (outObj);  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,addPortMapping,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,deletePortMapping,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: try {  	remoteHostEntry.Text = "";  	externalPortEntry.Text = "";  	protocolEntry.Text = "";  	internalPortEntry.Text = "";  	internalClientEntry.Text = "";  	enabledEntry.Text = "";  	portMappingDescEntry.Text = "";  	leaseDurationEntry.Text = "";  	remoteHostEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [0].Value.ToString ();  	externalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [1].Value.ToString ();  	protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  	internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  	internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  	enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  	portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  	leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  }  catch {  }  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: protocolEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [2].Value.ToString ();  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: internalPortEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [3].Value.ToString ();  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: internalClientEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [4].Value.ToString ();  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: enabledEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [5].Value.ToString ();  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: portMappingDescEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [6].Value.ToString ();  
Magic Number,WinUPnPFun,HolePunch,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\HolePunch.cs,portMappingTable_CellContentClick,The following statement contains a magic number: leaseDurationEntry.Text = portMappingTable.Rows [e.RowIndex].Cells [7].Value.ToString ();  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string nodeName = node.Name;  	Regex regex = new Regex (@"URL$");  	Match match = regex.Match (nodeName.ToUpper ());  	if (match.Success) {  		string localResourceID = Guid.NewGuid ().ToString ();  		Uri uriResult;  		bool result = Uri.TryCreate (node.InnerText' UriKind.Absolute' out uriResult) && uriResult.Scheme == Uri.UriSchemeHttp;  		if (!result) {  			Uri baseURI = new Uri (deviceURL);  			Uri actualURL = new Uri (baseURI' node.InnerText);  			uriResult = actualURL;  		}  		try {  			WebRequest r = HttpWebRequest.Create (uriResult);  			r.Timeout = 10000;  			WebResponse wres = r.GetResponse ();  			string contentType = wres.ContentType;  			Stream ress = wres.GetResponseStream ();  			MemoryStream streamReader = new MemoryStream ();  			ress.CopyTo (streamReader);  			Byte[] saveData = streamReader.ToArray ();  			downloadedURLs.Add (localResourceID' saveData);  			mimeTypes.Add (localResourceID' contentType);  			deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n";  		}  		catch {  		}  		if (node.InnerText.Length > 3) {  			if (!localResourceReplacements.ContainsKey (node.InnerText)) {  				localResourceReplacements.Add (node.InnerText' "/resource/?localResourceID=" + localResourceID);  			}  		}  	}  	TraverseNodes (node.ChildNodes' deviceURL);  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string nodeName = node.Name;  	Regex regex = new Regex (@"URL$");  	Match match = regex.Match (nodeName.ToUpper ());  	if (match.Success) {  		string localResourceID = Guid.NewGuid ().ToString ();  		Uri uriResult;  		bool result = Uri.TryCreate (node.InnerText' UriKind.Absolute' out uriResult) && uriResult.Scheme == Uri.UriSchemeHttp;  		if (!result) {  			Uri baseURI = new Uri (deviceURL);  			Uri actualURL = new Uri (baseURI' node.InnerText);  			uriResult = actualURL;  		}  		try {  			WebRequest r = HttpWebRequest.Create (uriResult);  			r.Timeout = 10000;  			WebResponse wres = r.GetResponse ();  			string contentType = wres.ContentType;  			Stream ress = wres.GetResponseStream ();  			MemoryStream streamReader = new MemoryStream ();  			ress.CopyTo (streamReader);  			Byte[] saveData = streamReader.ToArray ();  			downloadedURLs.Add (localResourceID' saveData);  			mimeTypes.Add (localResourceID' contentType);  			deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n";  		}  		catch {  		}  		if (node.InnerText.Length > 3) {  			if (!localResourceReplacements.ContainsKey (node.InnerText)) {  				localResourceReplacements.Add (node.InnerText' "/resource/?localResourceID=" + localResourceID);  			}  		}  	}  	TraverseNodes (node.ChildNodes' deviceURL);  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: if (match.Success) {  	string localResourceID = Guid.NewGuid ().ToString ();  	Uri uriResult;  	bool result = Uri.TryCreate (node.InnerText' UriKind.Absolute' out uriResult) && uriResult.Scheme == Uri.UriSchemeHttp;  	if (!result) {  		Uri baseURI = new Uri (deviceURL);  		Uri actualURL = new Uri (baseURI' node.InnerText);  		uriResult = actualURL;  	}  	try {  		WebRequest r = HttpWebRequest.Create (uriResult);  		r.Timeout = 10000;  		WebResponse wres = r.GetResponse ();  		string contentType = wres.ContentType;  		Stream ress = wres.GetResponseStream ();  		MemoryStream streamReader = new MemoryStream ();  		ress.CopyTo (streamReader);  		Byte[] saveData = streamReader.ToArray ();  		downloadedURLs.Add (localResourceID' saveData);  		mimeTypes.Add (localResourceID' contentType);  		deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n";  	}  	catch {  	}  	if (node.InnerText.Length > 3) {  		if (!localResourceReplacements.ContainsKey (node.InnerText)) {  			localResourceReplacements.Add (node.InnerText' "/resource/?localResourceID=" + localResourceID);  		}  	}  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: if (match.Success) {  	string localResourceID = Guid.NewGuid ().ToString ();  	Uri uriResult;  	bool result = Uri.TryCreate (node.InnerText' UriKind.Absolute' out uriResult) && uriResult.Scheme == Uri.UriSchemeHttp;  	if (!result) {  		Uri baseURI = new Uri (deviceURL);  		Uri actualURL = new Uri (baseURI' node.InnerText);  		uriResult = actualURL;  	}  	try {  		WebRequest r = HttpWebRequest.Create (uriResult);  		r.Timeout = 10000;  		WebResponse wres = r.GetResponse ();  		string contentType = wres.ContentType;  		Stream ress = wres.GetResponseStream ();  		MemoryStream streamReader = new MemoryStream ();  		ress.CopyTo (streamReader);  		Byte[] saveData = streamReader.ToArray ();  		downloadedURLs.Add (localResourceID' saveData);  		mimeTypes.Add (localResourceID' contentType);  		deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n";  	}  	catch {  	}  	if (node.InnerText.Length > 3) {  		if (!localResourceReplacements.ContainsKey (node.InnerText)) {  			localResourceReplacements.Add (node.InnerText' "/resource/?localResourceID=" + localResourceID);  		}  	}  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: try {  	WebRequest r = HttpWebRequest.Create (uriResult);  	r.Timeout = 10000;  	WebResponse wres = r.GetResponse ();  	string contentType = wres.ContentType;  	Stream ress = wres.GetResponseStream ();  	MemoryStream streamReader = new MemoryStream ();  	ress.CopyTo (streamReader);  	Byte[] saveData = streamReader.ToArray ();  	downloadedURLs.Add (localResourceID' saveData);  	mimeTypes.Add (localResourceID' contentType);  	deviceDescString = deviceDescString + "Saved:\r\n" + uriResult + "\r\nLocal Resource:\r\n" + localResourceID + "\r\nContent Type: " + contentType + "\r\nSize:\r\n" + saveData.Count ().ToString () + " bytes\r\n\r\n";  }  catch {  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,TraverseNodes,The following statement contains a magic number: if (node.InnerText.Length > 3) {  	if (!localResourceReplacements.ContainsKey (node.InnerText)) {  		localResourceReplacements.Add (node.InnerText' "/resource/?localResourceID=" + localResourceID);  	}  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: for (int i = 0; i < checkedListBox1.Items.Count; i++) {  	if (checkedListBox1.GetItemChecked (i)) {  		downloadedURLs.Clear ();  		mimeTypes.Clear ();  		actions.Clear ();  		actionDataTypes.Clear ();  		requestActions.Clear ();  		string deviceURL = (string)checkedListBox1.Items [i];  		string deviceName = "";  		List<String> servceTypes = new List<String> ();  		string deviceUDN = "";  		string sep = "--------------------------------------------------------------------------------------------------------------------------------\r\n";  		deviceDescString = deviceDescString + sep + "Device:\r\n " + deviceURL + "\r\n" + sep + "\r\n";  		foreach (Form1.Target Target in Targets) {  			if (Target.targetService.Device.DocumentURL == deviceURL) {  				deviceDescString = deviceDescString + "Action: " + Target.actionDesc.Name + "\r\n\r\n";  				deviceDescString = deviceDescString + "Base SOAP Response:\r\n" + Target.soapResponse + "\r\n\r\n";  				if (!actions.ContainsKey (Target.actionDesc.Name)) {  					actions.Add (Target.actionDesc.Name' Target.soapResponse);  				}  				if (!actionDataTypes.ContainsKey (Target.actionDesc.Name)) {  					actionDataTypes.Add (Target.actionDesc.Name' Target.dataTypes);  				}  				if (!requestActions.ContainsKey (Target.actionDesc.Name)) {  					requestActions.Add (Target.actionDesc.Name' Target.soapRequest);  				}  				deviceName = Target.targetService.Device.FriendlyName;  				deviceUDN = Target.targetService.Device.UniqueDeviceName;  				servceTypes.Add (Target.targetService.Device.Type);  			}  		}  		localResourceReplacements.Clear ();  		XmlDocument desc = new XmlDocument ();  		string newDeviceDesc = "";  		try {  			WebRequest r = HttpWebRequest.Create (deviceURL);  			r.Timeout = 10000;  			WebResponse wres = r.GetResponse ();  			Stream ress = wres.GetResponseStream ();  			desc.Load (ress);  			XmlElement root = desc.DocumentElement;  			XmlNodeList nodes = root.SelectNodes ("*");  			TraverseNodes (nodes' deviceURL);  			newDeviceDesc = desc.InnerXml.ToString ();  			foreach (KeyValuePair<string' string> entry in localResourceReplacements) {  				newDeviceDesc = newDeviceDesc.Replace (entry.Key' entry.Value);  			}  			deviceDescString = deviceDescString + newDeviceDesc;  		}  		catch (Exception err) {  			MessageBox.Show (err.ToString ());  		}  		device learnedDevice = new device ();  		learnedDevice.deviceDescription = newDeviceDesc;  		learnedDevice.downloadedURLs = downloadedURLs;  		learnedDevice.mimeTypes = mimeTypes;  		learnedDevice.actions = actions;  		learnedDevice.actionDataTypes = actionDataTypes;  		learnedDevice.deviceName = deviceName;  		learnedDevice.serviceTypes = servceTypes;  		learnedDevice.UDN = deviceUDN;  		bw.ReportProgress (1' learnedDevice);  		waitUntilSave = true;  		while (waitUntilSave == true) {  			System.Threading.Thread.Sleep (100);  		}  		deviceDescString = deviceDescString + "\r\n";  	}  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: for (int i = 0; i < checkedListBox1.Items.Count; i++) {  	if (checkedListBox1.GetItemChecked (i)) {  		downloadedURLs.Clear ();  		mimeTypes.Clear ();  		actions.Clear ();  		actionDataTypes.Clear ();  		requestActions.Clear ();  		string deviceURL = (string)checkedListBox1.Items [i];  		string deviceName = "";  		List<String> servceTypes = new List<String> ();  		string deviceUDN = "";  		string sep = "--------------------------------------------------------------------------------------------------------------------------------\r\n";  		deviceDescString = deviceDescString + sep + "Device:\r\n " + deviceURL + "\r\n" + sep + "\r\n";  		foreach (Form1.Target Target in Targets) {  			if (Target.targetService.Device.DocumentURL == deviceURL) {  				deviceDescString = deviceDescString + "Action: " + Target.actionDesc.Name + "\r\n\r\n";  				deviceDescString = deviceDescString + "Base SOAP Response:\r\n" + Target.soapResponse + "\r\n\r\n";  				if (!actions.ContainsKey (Target.actionDesc.Name)) {  					actions.Add (Target.actionDesc.Name' Target.soapResponse);  				}  				if (!actionDataTypes.ContainsKey (Target.actionDesc.Name)) {  					actionDataTypes.Add (Target.actionDesc.Name' Target.dataTypes);  				}  				if (!requestActions.ContainsKey (Target.actionDesc.Name)) {  					requestActions.Add (Target.actionDesc.Name' Target.soapRequest);  				}  				deviceName = Target.targetService.Device.FriendlyName;  				deviceUDN = Target.targetService.Device.UniqueDeviceName;  				servceTypes.Add (Target.targetService.Device.Type);  			}  		}  		localResourceReplacements.Clear ();  		XmlDocument desc = new XmlDocument ();  		string newDeviceDesc = "";  		try {  			WebRequest r = HttpWebRequest.Create (deviceURL);  			r.Timeout = 10000;  			WebResponse wres = r.GetResponse ();  			Stream ress = wres.GetResponseStream ();  			desc.Load (ress);  			XmlElement root = desc.DocumentElement;  			XmlNodeList nodes = root.SelectNodes ("*");  			TraverseNodes (nodes' deviceURL);  			newDeviceDesc = desc.InnerXml.ToString ();  			foreach (KeyValuePair<string' string> entry in localResourceReplacements) {  				newDeviceDesc = newDeviceDesc.Replace (entry.Key' entry.Value);  			}  			deviceDescString = deviceDescString + newDeviceDesc;  		}  		catch (Exception err) {  			MessageBox.Show (err.ToString ());  		}  		device learnedDevice = new device ();  		learnedDevice.deviceDescription = newDeviceDesc;  		learnedDevice.downloadedURLs = downloadedURLs;  		learnedDevice.mimeTypes = mimeTypes;  		learnedDevice.actions = actions;  		learnedDevice.actionDataTypes = actionDataTypes;  		learnedDevice.deviceName = deviceName;  		learnedDevice.serviceTypes = servceTypes;  		learnedDevice.UDN = deviceUDN;  		bw.ReportProgress (1' learnedDevice);  		waitUntilSave = true;  		while (waitUntilSave == true) {  			System.Threading.Thread.Sleep (100);  		}  		deviceDescString = deviceDescString + "\r\n";  	}  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: if (checkedListBox1.GetItemChecked (i)) {  	downloadedURLs.Clear ();  	mimeTypes.Clear ();  	actions.Clear ();  	actionDataTypes.Clear ();  	requestActions.Clear ();  	string deviceURL = (string)checkedListBox1.Items [i];  	string deviceName = "";  	List<String> servceTypes = new List<String> ();  	string deviceUDN = "";  	string sep = "--------------------------------------------------------------------------------------------------------------------------------\r\n";  	deviceDescString = deviceDescString + sep + "Device:\r\n " + deviceURL + "\r\n" + sep + "\r\n";  	foreach (Form1.Target Target in Targets) {  		if (Target.targetService.Device.DocumentURL == deviceURL) {  			deviceDescString = deviceDescString + "Action: " + Target.actionDesc.Name + "\r\n\r\n";  			deviceDescString = deviceDescString + "Base SOAP Response:\r\n" + Target.soapResponse + "\r\n\r\n";  			if (!actions.ContainsKey (Target.actionDesc.Name)) {  				actions.Add (Target.actionDesc.Name' Target.soapResponse);  			}  			if (!actionDataTypes.ContainsKey (Target.actionDesc.Name)) {  				actionDataTypes.Add (Target.actionDesc.Name' Target.dataTypes);  			}  			if (!requestActions.ContainsKey (Target.actionDesc.Name)) {  				requestActions.Add (Target.actionDesc.Name' Target.soapRequest);  			}  			deviceName = Target.targetService.Device.FriendlyName;  			deviceUDN = Target.targetService.Device.UniqueDeviceName;  			servceTypes.Add (Target.targetService.Device.Type);  		}  	}  	localResourceReplacements.Clear ();  	XmlDocument desc = new XmlDocument ();  	string newDeviceDesc = "";  	try {  		WebRequest r = HttpWebRequest.Create (deviceURL);  		r.Timeout = 10000;  		WebResponse wres = r.GetResponse ();  		Stream ress = wres.GetResponseStream ();  		desc.Load (ress);  		XmlElement root = desc.DocumentElement;  		XmlNodeList nodes = root.SelectNodes ("*");  		TraverseNodes (nodes' deviceURL);  		newDeviceDesc = desc.InnerXml.ToString ();  		foreach (KeyValuePair<string' string> entry in localResourceReplacements) {  			newDeviceDesc = newDeviceDesc.Replace (entry.Key' entry.Value);  		}  		deviceDescString = deviceDescString + newDeviceDesc;  	}  	catch (Exception err) {  		MessageBox.Show (err.ToString ());  	}  	device learnedDevice = new device ();  	learnedDevice.deviceDescription = newDeviceDesc;  	learnedDevice.downloadedURLs = downloadedURLs;  	learnedDevice.mimeTypes = mimeTypes;  	learnedDevice.actions = actions;  	learnedDevice.actionDataTypes = actionDataTypes;  	learnedDevice.deviceName = deviceName;  	learnedDevice.serviceTypes = servceTypes;  	learnedDevice.UDN = deviceUDN;  	bw.ReportProgress (1' learnedDevice);  	waitUntilSave = true;  	while (waitUntilSave == true) {  		System.Threading.Thread.Sleep (100);  	}  	deviceDescString = deviceDescString + "\r\n";  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: if (checkedListBox1.GetItemChecked (i)) {  	downloadedURLs.Clear ();  	mimeTypes.Clear ();  	actions.Clear ();  	actionDataTypes.Clear ();  	requestActions.Clear ();  	string deviceURL = (string)checkedListBox1.Items [i];  	string deviceName = "";  	List<String> servceTypes = new List<String> ();  	string deviceUDN = "";  	string sep = "--------------------------------------------------------------------------------------------------------------------------------\r\n";  	deviceDescString = deviceDescString + sep + "Device:\r\n " + deviceURL + "\r\n" + sep + "\r\n";  	foreach (Form1.Target Target in Targets) {  		if (Target.targetService.Device.DocumentURL == deviceURL) {  			deviceDescString = deviceDescString + "Action: " + Target.actionDesc.Name + "\r\n\r\n";  			deviceDescString = deviceDescString + "Base SOAP Response:\r\n" + Target.soapResponse + "\r\n\r\n";  			if (!actions.ContainsKey (Target.actionDesc.Name)) {  				actions.Add (Target.actionDesc.Name' Target.soapResponse);  			}  			if (!actionDataTypes.ContainsKey (Target.actionDesc.Name)) {  				actionDataTypes.Add (Target.actionDesc.Name' Target.dataTypes);  			}  			if (!requestActions.ContainsKey (Target.actionDesc.Name)) {  				requestActions.Add (Target.actionDesc.Name' Target.soapRequest);  			}  			deviceName = Target.targetService.Device.FriendlyName;  			deviceUDN = Target.targetService.Device.UniqueDeviceName;  			servceTypes.Add (Target.targetService.Device.Type);  		}  	}  	localResourceReplacements.Clear ();  	XmlDocument desc = new XmlDocument ();  	string newDeviceDesc = "";  	try {  		WebRequest r = HttpWebRequest.Create (deviceURL);  		r.Timeout = 10000;  		WebResponse wres = r.GetResponse ();  		Stream ress = wres.GetResponseStream ();  		desc.Load (ress);  		XmlElement root = desc.DocumentElement;  		XmlNodeList nodes = root.SelectNodes ("*");  		TraverseNodes (nodes' deviceURL);  		newDeviceDesc = desc.InnerXml.ToString ();  		foreach (KeyValuePair<string' string> entry in localResourceReplacements) {  			newDeviceDesc = newDeviceDesc.Replace (entry.Key' entry.Value);  		}  		deviceDescString = deviceDescString + newDeviceDesc;  	}  	catch (Exception err) {  		MessageBox.Show (err.ToString ());  	}  	device learnedDevice = new device ();  	learnedDevice.deviceDescription = newDeviceDesc;  	learnedDevice.downloadedURLs = downloadedURLs;  	learnedDevice.mimeTypes = mimeTypes;  	learnedDevice.actions = actions;  	learnedDevice.actionDataTypes = actionDataTypes;  	learnedDevice.deviceName = deviceName;  	learnedDevice.serviceTypes = servceTypes;  	learnedDevice.UDN = deviceUDN;  	bw.ReportProgress (1' learnedDevice);  	waitUntilSave = true;  	while (waitUntilSave == true) {  		System.Threading.Thread.Sleep (100);  	}  	deviceDescString = deviceDescString + "\r\n";  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: try {  	WebRequest r = HttpWebRequest.Create (deviceURL);  	r.Timeout = 10000;  	WebResponse wres = r.GetResponse ();  	Stream ress = wres.GetResponseStream ();  	desc.Load (ress);  	XmlElement root = desc.DocumentElement;  	XmlNodeList nodes = root.SelectNodes ("*");  	TraverseNodes (nodes' deviceURL);  	newDeviceDesc = desc.InnerXml.ToString ();  	foreach (KeyValuePair<string' string> entry in localResourceReplacements) {  		newDeviceDesc = newDeviceDesc.Replace (entry.Key' entry.Value);  	}  	deviceDescString = deviceDescString + newDeviceDesc;  }  catch (Exception err) {  	MessageBox.Show (err.ToString ());  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: while (waitUntilSave == true) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,WinUPnPFun,Learn,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Learn.cs,bw_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,WinUPnPFun,LogViewer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\LogViewer.cs,timer1_Tick,The following statement contains a magic number: elapsed = elapsed + 0.1;  
Magic Number,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,msearch_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,MSearchSpoof,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\MSearchSpoof.cs,msearch_spoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,bw_DoWork,The following statement contains a magic number: try {  	WebRequest r = HttpWebRequest.Create (controlURL.Text);  	r.Timeout = 10000;  	r.Method = "POST";  	byte[] b = Encoding.UTF8.GetBytes (requestEdit.Text);  	r.Headers.Add ("SOAPACTION"' "\"" + serviceIdent.Text.Trim () + "#" + actionName.Text.Trim () + "\"");  	r.ContentType = "text/xml; charset=\"utf-8\"";  	r.ContentLength = b.Length;  	r.GetRequestStream ().Write (b' 0' b.Length);  	XmlDocument resp = new XmlDocument ();  	WebResponse wres = r.GetResponse ();  	Stream ress = wres.GetResponseStream ();  	resp.Load (ress);  	responseText = resp.OuterXml;  }  catch (Exception err) {  	if (err is WebException && ((WebException)err).Status == WebExceptionStatus.ProtocolError) {  		WebResponse errResp = ((WebException)err).Response;  		using (Stream respStream = errResp.GetResponseStream ()) {  			StreamReader streamReader = new StreamReader (respStream' true);  			try {  				responseText = streamReader.ReadToEnd ();  			}  			finally {  				streamReader.Close ();  			}  		}  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,bw_DoWork,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: while (k < str.Length) {  	st = str.IndexOf ('<'' k);  	if (st < 0)  		break;  	if (lasten > 0) {  		rtb.Select (lasten + 1' st - lasten - 1);  		rtb.SelectionColor = HighlightColors.HC_INNERTEXT;  	}  	en = str.IndexOf ('>'' st + 1);  	if (en < 0)  		break;  	k = en + 1;  	lasten = en;  	if (str [st + 1] == '!') {  		rtb.Select (st + 1' en - st - 1);  		rtb.SelectionColor = HighlightColors.HC_COMMENT;  		continue;  	}  	String nodeText = str.Substring (st + 1' en - st - 1);  	bool inString = false;  	int lastSt = -1;  	int state = 0;  	/* 0 = before node name                  * 1 = in node name                    2 = after node name                    3 = in attribute                    4 = in string                    */int startNodeName = 0' startAtt = 0;  	for (int i = 0; i < nodeText.Length; ++i) {  		if (nodeText [i] == '"')  			inString = !inString;  		if (inString && nodeText [i] == '"')  			lastSt = i;  		else if (nodeText [i] == '"') {  			rtb.Select (lastSt + st + 2' i - lastSt - 1);  			rtb.SelectionColor = HighlightColors.HC_STRING;  		}  		switch (state) {  		case 0:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startNodeName = i;  				state = 1;  			}  			break;  		case 1:  			if (Char.IsWhiteSpace (nodeText' i)) {  				rtb.Select (startNodeName + st' i - startNodeName + 1);  				rtb.SelectionColor = HighlightColors.HC_NODE;  				state = 2;  			}  			break;  		case 2:  			if (!Char.IsWhiteSpace (nodeText' i)) {  				startAtt = i;  				state = 3;  			}  			break;  		case 3:  			if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  				rtb.Select (startAtt + st' i - startAtt + 1);  				rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  				state = 4;  			}  			break;  		case 4:  			if (nodeText [i] == '"' && !inString)  				state = 2;  			break;  		}  	}  	if (state == 1) {  		rtb.Select (st + 1' nodeText.Length);  		rtb.SelectionColor = HighlightColors.HC_NODE;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: for (int i = 0; i < nodeText.Length; ++i) {  	if (nodeText [i] == '"')  		inString = !inString;  	if (inString && nodeText [i] == '"')  		lastSt = i;  	else if (nodeText [i] == '"') {  		rtb.Select (lastSt + st + 2' i - lastSt - 1);  		rtb.SelectionColor = HighlightColors.HC_STRING;  	}  	switch (state) {  	case 0:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startNodeName = i;  			state = 1;  		}  		break;  	case 1:  		if (Char.IsWhiteSpace (nodeText' i)) {  			rtb.Select (startNodeName + st' i - startNodeName + 1);  			rtb.SelectionColor = HighlightColors.HC_NODE;  			state = 2;  		}  		break;  	case 2:  		if (!Char.IsWhiteSpace (nodeText' i)) {  			startAtt = i;  			state = 3;  		}  		break;  	case 3:  		if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  			rtb.Select (startAtt + st' i - startAtt + 1);  			rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  			state = 4;  		}  		break;  	case 4:  		if (nodeText [i] == '"' && !inString)  			state = 2;  		break;  	}  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (inString && nodeText [i] == '"')  	lastSt = i;  else if (nodeText [i] == '"') {  	rtb.Select (lastSt + st + 2' i - lastSt - 1);  	rtb.SelectionColor = HighlightColors.HC_STRING;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (nodeText [i] == '"') {  	rtb.Select (lastSt + st + 2' i - lastSt - 1);  	rtb.SelectionColor = HighlightColors.HC_STRING;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: rtb.Select (lastSt + st + 2' i - lastSt - 1);  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (Char.IsWhiteSpace (nodeText' i)) {  	rtb.Select (startNodeName + st' i - startNodeName + 1);  	rtb.SelectionColor = HighlightColors.HC_NODE;  	state = 2;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: state = 2;  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (!Char.IsWhiteSpace (nodeText' i)) {  	startAtt = i;  	state = 3;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: state = 3;  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  	rtb.Select (startAtt + st' i - startAtt + 1);  	rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  	state = 4;  }  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: state = 4;  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: if (nodeText [i] == '"' && !inString)  	state = 2;  
Magic Number,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following statement contains a magic number: state = 2;  
Magic Number,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,CreateAnImage,The following statement contains a magic number: g.DrawImage (srcImage' new Rectangle (0' 0' 120' 120));  
Magic Number,WinUPnPFun,WebServer,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\SimpleWebServer.cs,CreateAnImage,The following statement contains a magic number: g.DrawImage (srcImage' new Rectangle (0' 0' 120' 120));  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,bw_DoWork,The following statement contains a magic number: worker.ReportProgress (33);  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,bw_DoWork,The following statement contains a magic number: worker.ReportProgress (66);  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,sendWindowsMediaRenderingControl,The following statement contains a magic number: r.Timeout = 10000;  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,timer1_Tick,The following statement contains a magic number: if (thisValue == 100) {  	addThis = -1;  }  else if (thisValue == 0) {  	addThis = 1;  }  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,find_content,The following statement contains a magic number: if (use_list == false) {  	for (int i = 0; i < 5; i++) {  		string response_string = "";  		try {  			object[] test = myTarget.targetService.InvokeAction ("Browse"' new object[] {  				i'  				"BrowseDirectChildren"'  				"*"'  				0'  				0'  				""  			});  			for (int k = 0; k < test.Count (); k++) {  				String nR = test [k].ToString ();  				response_string = response_string + nR;  			}  			string pattern = @"container id=\""([^\""]+)\""";  			MatchCollection matches1 = Regex.Matches (response_string' pattern);  			foreach (Match match in matches1) {  				if (match.Success) {  					containers.Add (match.Groups [1].Value);  				}  			}  			pattern = "<dc:title>([^<]+)</dc:title>";  			MatchCollection matches2 = Regex.Matches (response_string' pattern);  			foreach (Match match in matches2) {  				if (match.Success) {  					titles.Add (match.Groups [1].Value);  				}  			}  		}  		catch {  		}  	}  }  else {  	foreach (string container in myContainers) {  		string response_string = "";  		try {  			object[] test = myTarget.targetService.InvokeAction ("Browse"' new object[] {  				container'  				"BrowseDirectChildren"'  				"*"'  				0'  				0'  				""  			});  			for (int k = 0; k < test.Count (); k++) {  				String nR = test [k].ToString ();  				response_string = response_string + nR;  			}  			string pattern = "";  			if (store == true) {  				pattern = "container id=\"([^\"]+)\"";  				MatchCollection matches3 = Regex.Matches (response_string' pattern);  				foreach (Match match in matches3) {  					if (match.Success) {  						containers2.Add (match.Groups [1].Value);  					}  				}  			}  			pattern = "<dc:title>([^<]+)</dc:title>";  			MatchCollection matches4 = Regex.Matches (response_string' pattern);  			foreach (Match match in matches4) {  				if (match.Success) {  					titles.Add (match.Groups [1].Value);  				}  			}  		}  		catch {  		}  	}  }  
Magic Number,WinUPnPFun,WindowsMedia,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WindowsMedia.cs,find_content,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	string response_string = "";  	try {  		object[] test = myTarget.targetService.InvokeAction ("Browse"' new object[] {  			i'  			"BrowseDirectChildren"'  			"*"'  			0'  			0'  			""  		});  		for (int k = 0; k < test.Count (); k++) {  			String nR = test [k].ToString ();  			response_string = response_string + nR;  		}  		string pattern = @"container id=\""([^\""]+)\""";  		MatchCollection matches1 = Regex.Matches (response_string' pattern);  		foreach (Match match in matches1) {  			if (match.Success) {  				containers.Add (match.Groups [1].Value);  			}  		}  		pattern = "<dc:title>([^<]+)</dc:title>";  		MatchCollection matches2 = Regex.Matches (response_string' pattern);  		foreach (Match match in matches2) {  			if (match.Success) {  				titles.Add (match.Groups [1].Value);  			}  		}  	}  	catch {  	}  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,notifySpoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,notifySpoof,The following statement contains a magic number: using (PacketCommunicator communicator = selectedDevice.Open (69559' PacketDeviceOpenAttributes.Promiscuous' 1000))// read timeout   {  	communicator.SendPacket (builder.Build (DateTime.Now));  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (windowsEnumSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < 10; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  		Thread.Sleep (1000);  	}  	Thread.Sleep (60000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (windowsEnumSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < 10; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  		Thread.Sleep (1000);  	}  	Thread.Sleep (60000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (windowsEnumSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < 10; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  		Thread.Sleep (1000);  	}  	Thread.Sleep (60000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (windowsEnumSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < 10; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  		Thread.Sleep (1000);  	}  	Thread.Sleep (60000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (windowsEnumSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < 10; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  		Thread.Sleep (1000);  	}  	Thread.Sleep (60000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  	Thread.Sleep (1000);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  	Thread.Sleep (1000);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  	Thread.Sleep (1000);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  	Thread.Sleep (1000);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: foreach (string upnpType in upnpTypes) {  	string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  	notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: foreach (string upnpType in upnpTypes) {  	string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  	notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,windowsEnumBw_DoWork,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (fakeRouterSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < fakeRouterHowMany; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  	}  	Thread.Sleep (600000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (fakeRouterSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < fakeRouterHowMany; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  	}  	Thread.Sleep (600000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: if (srcIP != "") {  	string srcURL = "http://" + srcIP + ":9090/";  	WebServer ws = new WebServer (fakeRouterSendResponse' srcURL);  	ws.Run ();  	for (int i = 0; i < fakeRouterHowMany; i++) {  		foreach (string upnpType in upnpTypes) {  			string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  			notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  		}  	}  	Thread.Sleep (600000);  	ws.Stop ();  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: for (int i = 0; i < fakeRouterHowMany; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: for (int i = 0; i < fakeRouterHowMany; i++) {  	foreach (string upnpType in upnpTypes) {  		string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  		notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  	}  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: foreach (string upnpType in upnpTypes) {  	string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  	notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: foreach (string upnpType in upnpTypes) {  	string notifyString = "NOTIFY * HTTP/1.1\r\n" + "Cache-Control: max-age = 300\r\n" + "Host: 239.255.255.250:1900\r\n" + "Location: " + srcURL + Guid.NewGuid ().ToString () + "\r\n" + "NT: " + upnpType + "\r\n" + "NTS: ssdp:alive\r\n" + "SERVER: UPnP-Pentest-Toolkit\r\n" + "USN: uuid:" + Guid.NewGuid ().ToString () + "\r\n" + "\r\n";  	notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  }  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: notifySpoof (device' notifyString' srcIP' 1900' "239.255.255.250"' 1900);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterBw_DoWork,The following statement contains a magic number: Thread.Sleep (600000);  
Magic Number,WinUPnPFun,WinEnum,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\WinEnum.cs,fakeRouterSendResponse,The following statement contains a magic number: if (fakeMode == 2) {  	fakeRouterBaseDescription = "<?xml version=\"1.0\"?><root xmlns=\"urn:schemas-upnp-org:device-1-0\" xmlns:df=\"http://schemas.microsoft.com/windows/2008/09/devicefoundation\" xmlns:microsoft=\"urn:schemas-microsoft-com:WMPDMR-1-0\" xmlns:pnpx=\"http://schemas.microsoft.com/windows/pnpx/2005/11\"><specVersion><major>1</major><minor>0</minor></specVersion><device><deviceType>urn:schemas-upnp-org:device:MediaRenderer:1</deviceType><friendlyName>" + fakeRouterName + "</friendlyName><modelName>" + fakeRouterName + "</modelName><modelDescription>Digital Media Renderer</modelDescription><manufacturer>Microsoft Corporation</manufacturer><manufacturerURL>http://www.microsoft.com</manufacturerURL><modelURL>http://xbox.com</modelURL><UDN>uuid:" + Guid.NewGuid ().ToString () + "</UDN><df:X_containerId>{2BDAA238-07DF-4EFA-9DA8-E7D888E0B8F6}</df:X_containerId><dlna:X_DLNACAP xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\"/><dlna:X_DLNADOC xmlns:dlna=\"urn:schemas-dlna-org:device-1-0\">DMR-1.50</dlna:X_DLNADOC><pnpx:X_deviceCategory>MediaDevices</pnpx:X_deviceCategory><pnpx:X_hardwareId>LOLCAT</pnpx:X_hardwareId><iconList><icon><mimetype>image/jpeg</mimetype><width>120</width><height>120</height><depth>24</depth><url>/upnphost/udhisapi.dll?content=uuid:ce86489c-976b-4dd3-be1a-64ccddbf6031</url></icon></iconList><serviceList><service><serviceType>urn:schemas-upnp-org:service:RenderingControl:1</serviceType><serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:RenderingControl</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:RenderingControl</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:439e9e51-d938-472d-87af-df7d7534e82e</SCPDURL></service><service><serviceType>urn:schemas-upnp-org:service:AVTransport:1</serviceType><serviceId>urn:upnp-org:serviceId:AVTransport</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:AVTransport</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:AVTransport</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:b851bd2d-4131-4b05-882b-d6a8401488cd</SCPDURL></service><service><serviceType>urn:schemas-upnp-org:service:ConnectionManager:1</serviceType><serviceId>urn:upnp-org:serviceId:ConnectionManager</serviceId><controlURL>/upnphost/udhisapi.dll?control=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:ConnectionManager</controlURL><eventSubURL>/upnphost/udhisapi.dll?event=uuid:2bdaa238-07df-4efa-9da8-e7d888e0b8f6+urn:upnp-org:serviceId:ConnectionManager</eventSubURL><SCPDURL>/upnphost/udhisapi.dll?content=uuid:11219e36-01b6-4390-870d-1efe62b73f45</SCPDURL></service></serviceList><presentationURL>" + fakeRouterUrl + "</presentationURL></device></root>";  }  
Missing Default,WinUPnPFun,Form1,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\Form1.cs,HighlightRTF,The following switch statement is missing a default case: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
Missing Default,WinUPnPFun,RequestSender,C:\repos\nccgroup_UPnP-Pentest-Toolkit\WinUPnPFun\RequestSender.cs,HighlightRTF,The following switch statement is missing a default case: switch (state) {  case 0:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startNodeName = i;  		state = 1;  	}  	break;  case 1:  	if (Char.IsWhiteSpace (nodeText' i)) {  		rtb.Select (startNodeName + st' i - startNodeName + 1);  		rtb.SelectionColor = HighlightColors.HC_NODE;  		state = 2;  	}  	break;  case 2:  	if (!Char.IsWhiteSpace (nodeText' i)) {  		startAtt = i;  		state = 3;  	}  	break;  case 3:  	if (Char.IsWhiteSpace (nodeText' i) || nodeText [i] == '=') {  		rtb.Select (startAtt + st' i - startAtt + 1);  		rtb.SelectionColor = HighlightColors.HC_ATTRIBUTE;  		state = 4;  	}  	break;  case 4:  	if (nodeText [i] == '"' && !inString)  		state = 2;  	break;  }  
