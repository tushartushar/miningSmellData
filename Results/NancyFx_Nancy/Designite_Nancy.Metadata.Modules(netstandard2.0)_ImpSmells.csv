Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Nancy.Metadata.Modules,DefaultMetadataModuleConventions,C:\research\architectureSmells\repos\NancyFx_Nancy\src\Nancy.Metadata.Modules\DefaultMetadataModuleConventions.cs,ConfigureMetadataModuleConventions,The following statement contains a magic number: return new List<Func<INancyModule' IEnumerable<IMetadataModule>' IMetadataModule>>                  {                      // 0 Handles: ./BlahModule -> ./BlahMetadataModule                      (module' metadataModules) =>                          {                              var moduleType = module.GetType();                              var moduleName = moduleType.FullName;                              var metadataModuleName = ReplaceModuleWithMetadataModule(moduleName);                                return metadataModules.FirstOrDefault(m =>                                      string.Compare(m.GetType().FullName' metadataModuleName' StringComparison.OrdinalIgnoreCase) == 0);                          }'                        // 1 Handles: ./BlahModule -> ./Metadata/BlahMetadataModule                      (module' metadataModules) =>                          {                              var moduleType = module.GetType();                              var moduleName = moduleType.FullName;                              var parts = moduleName.Split('.').ToList();                              parts.Insert(parts.Count - 1' "Metadata");                                var metadataModuleName = ReplaceModuleWithMetadataModule(string.Join("."' (IEnumerable<string>)parts));                                return metadataModules.FirstOrDefault(m =>                                      string.Compare(m.GetType().FullName' metadataModuleName' StringComparison.OrdinalIgnoreCase) == 0);                          }'                        // 2 Handles: ./Modules/BlahModule -> ../Metadata/BlahMetadataModule                      (module' metadataModules) =>                          {                              var moduleType = module.GetType();                              var moduleName = moduleType.FullName;                              var parts = moduleName.Split('.').ToList();                              parts[parts.Count - 2] = "Metadata";                                var metadataModuleName = ReplaceModuleWithMetadataModule(string.Join("."' (IEnumerable<string>)parts));                                return metadataModules.FirstOrDefault(m =>                                      string.Compare(m.GetType().FullName' metadataModuleName' StringComparison.OrdinalIgnoreCase) == 0);                          }                  };
