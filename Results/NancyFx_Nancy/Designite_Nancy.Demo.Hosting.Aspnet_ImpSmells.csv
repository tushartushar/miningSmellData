Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The method has 219 lines of code.
Long Statement,Nancy.Demo.Hosting.Aspnet.Models,Payload,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\Models\Payload.cs,Equals,The length of the statement  "            return other.IntValue == this.IntValue && other.BoolValue.Equals(this.BoolValue) && Equals(other.StringValue' this.StringValue); " is 128.
Long Statement,Yarrrr,HereBePiratesYarrr,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\Piratizer4000.cs,Piratize,The length of the statement  "            return lowerSubstitutions.Aggregate(boringEnglishString' (current' substitution) => current.Replace(substitution.Key' substitution.Value)); " is 139.
Magic Number,Nancy.Demo.Hosting.Aspnet,DemoBootstrapper,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\DemoBootstrapper.cs,Configure,The following statement contains a magic number: environment.Diagnostics(                  enabled: true'                  password: "password"'                  path: "/_Nancy"'                  cookieName: "__custom_cookie"'                  slidingTimeout: 30'                  cryptographyConfiguration: CryptographyConfiguration.NoEncryption);
Magic Number,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The following statement contains a magic number: Get("/nustache"' args =>              {                  return View["nustache"' new { name = "Nancy"' value = 1000000 }];              });
Magic Number,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The following statement contains a magic number: Get("/razor-divzero"' args =>              {                  var model = new { FirstName = "Frank"' Number = 22 };                  return View["razor-divzero.cshtml"' model];              });
Magic Number,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The following statement contains a magic number: Get("/sessionObject"' args =>              {                  var value = Session["baa"] ?? "null";                    var output = "Current session value is: " + value;                    if (value.ToString() == "null")                  {                      Session["baa"] = new Payload(27' true' "some random string value");                  }                    return output;              });
Magic Number,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The following statement contains a magic number: Get("/error"' args =>              {                  throw new NotSupportedException("This is an exception thrown in a route.");                  return 500;              });
Magic Number,Nancy.Demo.Hosting.Aspnet,MainModule,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\MainModule.cs,MainModule,The following statement contains a magic number: Post("/csrfWithExpiry"' args =>              {                  this.ValidateCsrfToken(TimeSpan.FromSeconds(20));                    return string.Format("Hello {0}!"' this.Request.Form.Name);              });
Magic Number,Nancy.Demo.Hosting.Aspnet.Models,Payload,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\Models\Payload.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var result = this.IntValue;                  result = (result * 397) ^ this.BoolValue.GetHashCode();                  result = (result * 397) ^ (this.StringValue != null ? this.StringValue.GetHashCode() : 0);                  return result;              }
Magic Number,Nancy.Demo.Hosting.Aspnet.Models,Payload,C:\repos\NancyFx_Nancy\samples\Nancy.Demo.Hosting.Aspnet\Models\Payload.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var result = this.IntValue;                  result = (result * 397) ^ this.BoolValue.GetHashCode();                  result = (result * 397) ^ (this.StringValue != null ? this.StringValue.GetHashCode() : 0);                  return result;              }
