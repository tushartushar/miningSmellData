Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,Cyclomatic complexity of the method is 12
Complex Method,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,Cyclomatic complexity of the method is 13
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The length of the statement  "	bool enabled = HostSettingManager.Get (HostSettingNames.UserAccountSource) == "ActiveDirectory" || HostSettingManager.Get (HostSettingNames.UserAccountSource) == "WindowsSAM"; " is 175.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The length of the statement  "			if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) { " is 142.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The length of the statement  "							mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus); " is 174.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The length of the statement  "							mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email); " is 120.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The length of the statement  "							Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex); " is 207.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The length of the statement  "		string username = identification.Substring (identification.LastIndexOf (@"\") + 1' identification.Length - identification.LastIndexOf (@"\") - 1); " is 146.
Long Statement,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The length of the statement  "				Regex regexEmail = new Regex (ValidEmailRegularExpression' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace); " is 155.
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (enabled) {  	if (System.Web.HttpContext.Current.User != null)  		MDC.Set ("user"' System.Web.HttpContext.Current.User.Identity.Name);  	// This was moved from outside "if enabled" to only happen when we need it.  	HttpRequest request = HttpContext.Current.Request;  	// not needed to be removed  	// HttpResponse response = HttpContext.Current.Response;  	if (request.IsAuthenticated) {  		if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  			//check if the user exists in the database   			MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  			if (user == null) {  				try {  					UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  					MembershipUser mu = null;  					MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  					//create a new user with the current identity and a random password.  					if (Membership.RequiresQuestionAndAnswer)  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  					else  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  					if (createStatus == MembershipCreateStatus.Success && mu != null) {  						WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  						if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  							Profile.DisplayName = userprop.DisplayName;  						else  							Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  						Profile.FirstName = userprop.FirstName;  						Profile.LastName = userprop.LastName;  						Profile.Save ();  						//auto assign user to roles  						List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  						foreach (Role r in roles)  							RoleManager.AddUser (mu.UserName' r.Id);  					}  					user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  				} catch (Exception ex) {  					if (Log.IsErrorEnabled)  						Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  				}  			} else {  				//update the user's last login date.  				user.LastLoginDate = DateTime.Now;  				Membership.UpdateUser (user);  			}  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (enabled) {  	if (System.Web.HttpContext.Current.User != null)  		MDC.Set ("user"' System.Web.HttpContext.Current.User.Identity.Name);  	// This was moved from outside "if enabled" to only happen when we need it.  	HttpRequest request = HttpContext.Current.Request;  	// not needed to be removed  	// HttpResponse response = HttpContext.Current.Response;  	if (request.IsAuthenticated) {  		if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  			//check if the user exists in the database   			MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  			if (user == null) {  				try {  					UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  					MembershipUser mu = null;  					MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  					//create a new user with the current identity and a random password.  					if (Membership.RequiresQuestionAndAnswer)  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  					else  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  					if (createStatus == MembershipCreateStatus.Success && mu != null) {  						WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  						if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  							Profile.DisplayName = userprop.DisplayName;  						else  							Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  						Profile.FirstName = userprop.FirstName;  						Profile.LastName = userprop.LastName;  						Profile.Save ();  						//auto assign user to roles  						List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  						foreach (Role r in roles)  							RoleManager.AddUser (mu.UserName' r.Id);  					}  					user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  				} catch (Exception ex) {  					if (Log.IsErrorEnabled)  						Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  				}  			} else {  				//update the user's last login date.  				user.LastLoginDate = DateTime.Now;  				Membership.UpdateUser (user);  			}  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (enabled) {  	if (System.Web.HttpContext.Current.User != null)  		MDC.Set ("user"' System.Web.HttpContext.Current.User.Identity.Name);  	// This was moved from outside "if enabled" to only happen when we need it.  	HttpRequest request = HttpContext.Current.Request;  	// not needed to be removed  	// HttpResponse response = HttpContext.Current.Response;  	if (request.IsAuthenticated) {  		if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  			//check if the user exists in the database   			MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  			if (user == null) {  				try {  					UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  					MembershipUser mu = null;  					MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  					//create a new user with the current identity and a random password.  					if (Membership.RequiresQuestionAndAnswer)  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  					else  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  					if (createStatus == MembershipCreateStatus.Success && mu != null) {  						WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  						if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  							Profile.DisplayName = userprop.DisplayName;  						else  							Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  						Profile.FirstName = userprop.FirstName;  						Profile.LastName = userprop.LastName;  						Profile.Save ();  						//auto assign user to roles  						List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  						foreach (Role r in roles)  							RoleManager.AddUser (mu.UserName' r.Id);  					}  					user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  				} catch (Exception ex) {  					if (Log.IsErrorEnabled)  						Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  				}  			} else {  				//update the user's last login date.  				user.LastLoginDate = DateTime.Now;  				Membership.UpdateUser (user);  			}  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (enabled) {  	if (System.Web.HttpContext.Current.User != null)  		MDC.Set ("user"' System.Web.HttpContext.Current.User.Identity.Name);  	// This was moved from outside "if enabled" to only happen when we need it.  	HttpRequest request = HttpContext.Current.Request;  	// not needed to be removed  	// HttpResponse response = HttpContext.Current.Response;  	if (request.IsAuthenticated) {  		if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  			//check if the user exists in the database   			MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  			if (user == null) {  				try {  					UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  					MembershipUser mu = null;  					MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  					//create a new user with the current identity and a random password.  					if (Membership.RequiresQuestionAndAnswer)  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  					else  						mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  					if (createStatus == MembershipCreateStatus.Success && mu != null) {  						WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  						if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  							Profile.DisplayName = userprop.DisplayName;  						else  							Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  						Profile.FirstName = userprop.FirstName;  						Profile.LastName = userprop.LastName;  						Profile.Save ();  						//auto assign user to roles  						List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  						foreach (Role r in roles)  							RoleManager.AddUser (mu.UserName' r.Id);  					}  					user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  				} catch (Exception ex) {  					if (Log.IsErrorEnabled)  						Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  				}  			} else {  				//update the user's last login date.  				user.LastLoginDate = DateTime.Now;  				Membership.UpdateUser (user);  			}  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (request.IsAuthenticated) {  	if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  		//check if the user exists in the database   		MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  		if (user == null) {  			try {  				UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  				MembershipUser mu = null;  				MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  				//create a new user with the current identity and a random password.  				if (Membership.RequiresQuestionAndAnswer)  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  				else  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  				if (createStatus == MembershipCreateStatus.Success && mu != null) {  					WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  					if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  						Profile.DisplayName = userprop.DisplayName;  					else  						Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  					Profile.FirstName = userprop.FirstName;  					Profile.LastName = userprop.LastName;  					Profile.Save ();  					//auto assign user to roles  					List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  					foreach (Role r in roles)  						RoleManager.AddUser (mu.UserName' r.Id);  				}  				user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  			} catch (Exception ex) {  				if (Log.IsErrorEnabled)  					Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  			}  		} else {  			//update the user's last login date.  			user.LastLoginDate = DateTime.Now;  			Membership.UpdateUser (user);  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (request.IsAuthenticated) {  	if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  		//check if the user exists in the database   		MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  		if (user == null) {  			try {  				UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  				MembershipUser mu = null;  				MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  				//create a new user with the current identity and a random password.  				if (Membership.RequiresQuestionAndAnswer)  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  				else  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  				if (createStatus == MembershipCreateStatus.Success && mu != null) {  					WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  					if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  						Profile.DisplayName = userprop.DisplayName;  					else  						Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  					Profile.FirstName = userprop.FirstName;  					Profile.LastName = userprop.LastName;  					Profile.Save ();  					//auto assign user to roles  					List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  					foreach (Role r in roles)  						RoleManager.AddUser (mu.UserName' r.Id);  				}  				user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  			} catch (Exception ex) {  				if (Log.IsErrorEnabled)  					Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  			}  		} else {  			//update the user's last login date.  			user.LastLoginDate = DateTime.Now;  			Membership.UpdateUser (user);  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (request.IsAuthenticated) {  	if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  		//check if the user exists in the database   		MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  		if (user == null) {  			try {  				UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  				MembershipUser mu = null;  				MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  				//create a new user with the current identity and a random password.  				if (Membership.RequiresQuestionAndAnswer)  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  				else  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  				if (createStatus == MembershipCreateStatus.Success && mu != null) {  					WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  					if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  						Profile.DisplayName = userprop.DisplayName;  					else  						Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  					Profile.FirstName = userprop.FirstName;  					Profile.LastName = userprop.LastName;  					Profile.Save ();  					//auto assign user to roles  					List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  					foreach (Role r in roles)  						RoleManager.AddUser (mu.UserName' r.Id);  				}  				user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  			} catch (Exception ex) {  				if (Log.IsErrorEnabled)  					Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  			}  		} else {  			//update the user's last login date.  			user.LastLoginDate = DateTime.Now;  			Membership.UpdateUser (user);  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (request.IsAuthenticated) {  	if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  		//check if the user exists in the database   		MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  		if (user == null) {  			try {  				UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  				MembershipUser mu = null;  				MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  				//create a new user with the current identity and a random password.  				if (Membership.RequiresQuestionAndAnswer)  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  				else  					mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  				if (createStatus == MembershipCreateStatus.Success && mu != null) {  					WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  					if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  						Profile.DisplayName = userprop.DisplayName;  					else  						Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  					Profile.FirstName = userprop.FirstName;  					Profile.LastName = userprop.LastName;  					Profile.Save ();  					//auto assign user to roles  					List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  					foreach (Role r in roles)  						RoleManager.AddUser (mu.UserName' r.Id);  				}  				user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  			} catch (Exception ex) {  				if (Log.IsErrorEnabled)  					Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  			}  		} else {  			//update the user's last login date.  			user.LastLoginDate = DateTime.Now;  			Membership.UpdateUser (user);  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  	//check if the user exists in the database   	MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  	if (user == null) {  		try {  			UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  			MembershipUser mu = null;  			MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  			//create a new user with the current identity and a random password.  			if (Membership.RequiresQuestionAndAnswer)  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  			else  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  			if (createStatus == MembershipCreateStatus.Success && mu != null) {  				WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  				if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  					Profile.DisplayName = userprop.DisplayName;  				else  					Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  				Profile.FirstName = userprop.FirstName;  				Profile.LastName = userprop.LastName;  				Profile.Save ();  				//auto assign user to roles  				List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  				foreach (Role r in roles)  					RoleManager.AddUser (mu.UserName' r.Id);  			}  			user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  		} catch (Exception ex) {  			if (Log.IsErrorEnabled)  				Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  		}  	} else {  		//update the user's last login date.  		user.LastLoginDate = DateTime.Now;  		Membership.UpdateUser (user);  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  	//check if the user exists in the database   	MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  	if (user == null) {  		try {  			UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  			MembershipUser mu = null;  			MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  			//create a new user with the current identity and a random password.  			if (Membership.RequiresQuestionAndAnswer)  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  			else  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  			if (createStatus == MembershipCreateStatus.Success && mu != null) {  				WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  				if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  					Profile.DisplayName = userprop.DisplayName;  				else  					Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  				Profile.FirstName = userprop.FirstName;  				Profile.LastName = userprop.LastName;  				Profile.Save ();  				//auto assign user to roles  				List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  				foreach (Role r in roles)  					RoleManager.AddUser (mu.UserName' r.Id);  			}  			user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  		} catch (Exception ex) {  			if (Log.IsErrorEnabled)  				Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  		}  	} else {  		//update the user's last login date.  		user.LastLoginDate = DateTime.Now;  		Membership.UpdateUser (user);  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  	//check if the user exists in the database   	MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  	if (user == null) {  		try {  			UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  			MembershipUser mu = null;  			MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  			//create a new user with the current identity and a random password.  			if (Membership.RequiresQuestionAndAnswer)  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  			else  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  			if (createStatus == MembershipCreateStatus.Success && mu != null) {  				WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  				if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  					Profile.DisplayName = userprop.DisplayName;  				else  					Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  				Profile.FirstName = userprop.FirstName;  				Profile.LastName = userprop.LastName;  				Profile.Save ();  				//auto assign user to roles  				List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  				foreach (Role r in roles)  					RoleManager.AddUser (mu.UserName' r.Id);  			}  			user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  		} catch (Exception ex) {  			if (Log.IsErrorEnabled)  				Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  		}  	} else {  		//update the user's last login date.  		user.LastLoginDate = DateTime.Now;  		Membership.UpdateUser (user);  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if ((HttpContext.Current.User.Identity.AuthenticationType == "NTLM" || HttpContext.Current.User.Identity.AuthenticationType == "Negotiate")) {  	//check if the user exists in the database   	MembershipUser user = UserManager.GetUser (HttpContext.Current.User.Identity.Name);  	if (user == null) {  		try {  			UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  			MembershipUser mu = null;  			MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  			//create a new user with the current identity and a random password.  			if (Membership.RequiresQuestionAndAnswer)  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  			else  				mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  			if (createStatus == MembershipCreateStatus.Success && mu != null) {  				WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  				if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  					Profile.DisplayName = userprop.DisplayName;  				else  					Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  				Profile.FirstName = userprop.FirstName;  				Profile.LastName = userprop.LastName;  				Profile.Save ();  				//auto assign user to roles  				List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  				foreach (Role r in roles)  					RoleManager.AddUser (mu.UserName' r.Id);  			}  			user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  		} catch (Exception ex) {  			if (Log.IsErrorEnabled)  				Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  		}  	} else {  		//update the user's last login date.  		user.LastLoginDate = DateTime.Now;  		Membership.UpdateUser (user);  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (user == null) {  	try {  		UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  		MembershipUser mu = null;  		MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  		//create a new user with the current identity and a random password.  		if (Membership.RequiresQuestionAndAnswer)  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  		else  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  		if (createStatus == MembershipCreateStatus.Success && mu != null) {  			WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  			if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  				Profile.DisplayName = userprop.DisplayName;  			else  				Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  			Profile.FirstName = userprop.FirstName;  			Profile.LastName = userprop.LastName;  			Profile.Save ();  			//auto assign user to roles  			List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  			foreach (Role r in roles)  				RoleManager.AddUser (mu.UserName' r.Id);  		}  		user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  	} catch (Exception ex) {  		if (Log.IsErrorEnabled)  			Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  	}  } else {  	//update the user's last login date.  	user.LastLoginDate = DateTime.Now;  	Membership.UpdateUser (user);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (user == null) {  	try {  		UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  		MembershipUser mu = null;  		MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  		//create a new user with the current identity and a random password.  		if (Membership.RequiresQuestionAndAnswer)  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  		else  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  		if (createStatus == MembershipCreateStatus.Success && mu != null) {  			WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  			if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  				Profile.DisplayName = userprop.DisplayName;  			else  				Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  			Profile.FirstName = userprop.FirstName;  			Profile.LastName = userprop.LastName;  			Profile.Save ();  			//auto assign user to roles  			List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  			foreach (Role r in roles)  				RoleManager.AddUser (mu.UserName' r.Id);  		}  		user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  	} catch (Exception ex) {  		if (Log.IsErrorEnabled)  			Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  	}  } else {  	//update the user's last login date.  	user.LastLoginDate = DateTime.Now;  	Membership.UpdateUser (user);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (user == null) {  	try {  		UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  		MembershipUser mu = null;  		MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  		//create a new user with the current identity and a random password.  		if (Membership.RequiresQuestionAndAnswer)  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  		else  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  		if (createStatus == MembershipCreateStatus.Success && mu != null) {  			WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  			if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  				Profile.DisplayName = userprop.DisplayName;  			else  				Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  			Profile.FirstName = userprop.FirstName;  			Profile.LastName = userprop.LastName;  			Profile.Save ();  			//auto assign user to roles  			List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  			foreach (Role r in roles)  				RoleManager.AddUser (mu.UserName' r.Id);  		}  		user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  	} catch (Exception ex) {  		if (Log.IsErrorEnabled)  			Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  	}  } else {  	//update the user's last login date.  	user.LastLoginDate = DateTime.Now;  	Membership.UpdateUser (user);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (user == null) {  	try {  		UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  		MembershipUser mu = null;  		MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  		//create a new user with the current identity and a random password.  		if (Membership.RequiresQuestionAndAnswer)  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  		else  			mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  		if (createStatus == MembershipCreateStatus.Success && mu != null) {  			WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  			if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  				Profile.DisplayName = userprop.DisplayName;  			else  				Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  			Profile.FirstName = userprop.FirstName;  			Profile.LastName = userprop.LastName;  			Profile.Save ();  			//auto assign user to roles  			List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  			foreach (Role r in roles)  				RoleManager.AddUser (mu.UserName' r.Id);  		}  		user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  	} catch (Exception ex) {  		if (Log.IsErrorEnabled)  			Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  	}  } else {  	//update the user's last login date.  	user.LastLoginDate = DateTime.Now;  	Membership.UpdateUser (user);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: try {  	UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  	MembershipUser mu = null;  	MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  	//create a new user with the current identity and a random password.  	if (Membership.RequiresQuestionAndAnswer)  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  	else  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  	if (createStatus == MembershipCreateStatus.Success && mu != null) {  		WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  		if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  			Profile.DisplayName = userprop.DisplayName;  		else  			Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  		Profile.FirstName = userprop.FirstName;  		Profile.LastName = userprop.LastName;  		Profile.Save ();  		//auto assign user to roles  		List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  		foreach (Role r in roles)  			RoleManager.AddUser (mu.UserName' r.Id);  	}  	user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  } catch (Exception ex) {  	if (Log.IsErrorEnabled)  		Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: try {  	UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  	MembershipUser mu = null;  	MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  	//create a new user with the current identity and a random password.  	if (Membership.RequiresQuestionAndAnswer)  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  	else  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  	if (createStatus == MembershipCreateStatus.Success && mu != null) {  		WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  		if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  			Profile.DisplayName = userprop.DisplayName;  		else  			Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  		Profile.FirstName = userprop.FirstName;  		Profile.LastName = userprop.LastName;  		Profile.Save ();  		//auto assign user to roles  		List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  		foreach (Role r in roles)  			RoleManager.AddUser (mu.UserName' r.Id);  	}  	user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  } catch (Exception ex) {  	if (Log.IsErrorEnabled)  		Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: try {  	UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  	MembershipUser mu = null;  	MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  	//create a new user with the current identity and a random password.  	if (Membership.RequiresQuestionAndAnswer)  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  	else  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  	if (createStatus == MembershipCreateStatus.Success && mu != null) {  		WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  		if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  			Profile.DisplayName = userprop.DisplayName;  		else  			Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  		Profile.FirstName = userprop.FirstName;  		Profile.LastName = userprop.LastName;  		Profile.Save ();  		//auto assign user to roles  		List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  		foreach (Role r in roles)  			RoleManager.AddUser (mu.UserName' r.Id);  	}  	user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  } catch (Exception ex) {  	if (Log.IsErrorEnabled)  		Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: try {  	UserProperties userprop = GetUserProperties (HttpContext.Current.User.Identity.Name);  	MembershipUser mu = null;  	MembershipCreateStatus createStatus = MembershipCreateStatus.Success;  	//create a new user with the current identity and a random password.  	if (Membership.RequiresQuestionAndAnswer)  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  	else  		mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  	if (createStatus == MembershipCreateStatus.Success && mu != null) {  		WebProfile Profile = new WebProfile ().GetProfile (HttpContext.Current.User.Identity.Name);  		if (!string.IsNullOrWhiteSpace (userprop.DisplayName))  			Profile.DisplayName = userprop.DisplayName;  		else  			Profile.DisplayName = String.Format ("{0} {1}"' userprop.FirstName' userprop.LastName);  		Profile.FirstName = userprop.FirstName;  		Profile.LastName = userprop.LastName;  		Profile.Save ();  		//auto assign user to roles  		List<Role> roles = RoleManager.GetAll ().FindAll (r => r.AutoAssign == true);  		foreach (Role r in roles)  			RoleManager.AddUser (mu.UserName' r.Id);  	}  	user = Membership.GetUser (HttpContext.Current.User.Identity.Name);  } catch (Exception ex) {  	if (Log.IsErrorEnabled)  		Log.Error (String.Format ("Unable to add new user '{0}' to BugNET application. Authentication Type='{1}'."' HttpContext.Current.User.Identity.Name' HttpContext.Current.User.Identity.AuthenticationType)' ex);  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (Membership.RequiresQuestionAndAnswer)  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  else  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (Membership.RequiresQuestionAndAnswer)  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  else  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (Membership.RequiresQuestionAndAnswer)  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  else  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: if (Membership.RequiresQuestionAndAnswer)  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  else  	mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email' "WindowsAuth"' "WindowsAuth"' true' out createStatus);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,context_AuthenticateRequest,The following statement contains a magic number: mu = Membership.CreateUser (HttpContext.Current.User.Identity.Name' Membership.GeneratePassword (7' 2)' userprop.Email);  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: if (HostSettingManager.UserAccountSource == "WindowsSAM") {  	// Extract the machine or domain name and the user name from the  	// identification string  	string[] samPath = identification.Split (new char[] {  		'\\'  	});  	_path = String.Format ("{0}{1}"' "WinNT://"' samPath [0]);  	try {  		// Find the user  		DirectoryEntry entryRoot = new DirectoryEntry (_path);  		DirectoryEntry userEntry = entryRoot.Children.Find (samPath [1]' "user");  		userprop.FirstName = userEntry.Properties ["FullName"].Value.ToString ();  		userprop.Email = string.Empty;  		return userprop;  	} catch {  		return userprop;  	}  } // Active Directory  else if (HostSettingManager.UserAccountSource == "ActiveDirectory") {  	// Setup the filter  	string username = identification.Substring (identification.LastIndexOf (@"\") + 1' identification.Length - identification.LastIndexOf (@"\") - 1);  	string domain = HostSettingManager.Get (HostSettingNames.ADPath);  	string login = HostSettingManager.Get (HostSettingNames.ADUserName);  	string password = HostSettingManager.Get (HostSettingNames.ADPassword);  	List<string> emailAddresses = new List<string> ();  	PrincipalContext domainContext;  	if (string.IsNullOrWhiteSpace (login))  		domainContext = new PrincipalContext (ContextType.Domain' domain);  	else  		domainContext = new PrincipalContext (ContextType.Domain' domain' login' password);  	if (domainContext != null) {  		UserPrincipal user = UserPrincipal.FindByIdentity (domainContext' username);  		if (user != null) {  			// extract full name  			if (!string.IsNullOrWhiteSpace (user.GivenName) || !string.IsNullOrWhiteSpace (user.Surname)) {  				userprop.FirstName = user.GivenName == null ? "" : user.GivenName.Trim ();  				userprop.LastName = user.Surname == null ? "" : user.Surname.Trim ();  			}  			if (!string.IsNullOrWhiteSpace (user.DisplayName)) {  				userprop.DisplayName = user.DisplayName;  			}  			Regex regexEmail = new Regex (ValidEmailRegularExpression' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace);  			foreach (var email in GetEmails (user)) {  				if (string.IsNullOrWhiteSpace (email))  					continue;  				var fixedEmail = email.Trim ();  				//Make it 'case insensitive'  				if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  					//Get the email string from AD  					fixedEmail = fixedEmail.Substring (5).Trim ();  				}  				if (regexEmail.IsMatch (fixedEmail)) {  					userprop.Email = fixedEmail;  					break;  				}  			}  		}  	}  	//add new properties here to fill the profile.  	return userprop;  } else {  	// The user has not chosen an UserAccountSource or UserAccountSource as None  	// Usernames will be displayed as "Domain\Username"  	return userprop;  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: if (HostSettingManager.UserAccountSource == "ActiveDirectory") {  	// Setup the filter  	string username = identification.Substring (identification.LastIndexOf (@"\") + 1' identification.Length - identification.LastIndexOf (@"\") - 1);  	string domain = HostSettingManager.Get (HostSettingNames.ADPath);  	string login = HostSettingManager.Get (HostSettingNames.ADUserName);  	string password = HostSettingManager.Get (HostSettingNames.ADPassword);  	List<string> emailAddresses = new List<string> ();  	PrincipalContext domainContext;  	if (string.IsNullOrWhiteSpace (login))  		domainContext = new PrincipalContext (ContextType.Domain' domain);  	else  		domainContext = new PrincipalContext (ContextType.Domain' domain' login' password);  	if (domainContext != null) {  		UserPrincipal user = UserPrincipal.FindByIdentity (domainContext' username);  		if (user != null) {  			// extract full name  			if (!string.IsNullOrWhiteSpace (user.GivenName) || !string.IsNullOrWhiteSpace (user.Surname)) {  				userprop.FirstName = user.GivenName == null ? "" : user.GivenName.Trim ();  				userprop.LastName = user.Surname == null ? "" : user.Surname.Trim ();  			}  			if (!string.IsNullOrWhiteSpace (user.DisplayName)) {  				userprop.DisplayName = user.DisplayName;  			}  			Regex regexEmail = new Regex (ValidEmailRegularExpression' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace);  			foreach (var email in GetEmails (user)) {  				if (string.IsNullOrWhiteSpace (email))  					continue;  				var fixedEmail = email.Trim ();  				//Make it 'case insensitive'  				if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  					//Get the email string from AD  					fixedEmail = fixedEmail.Substring (5).Trim ();  				}  				if (regexEmail.IsMatch (fixedEmail)) {  					userprop.Email = fixedEmail;  					break;  				}  			}  		}  	}  	//add new properties here to fill the profile.  	return userprop;  } else {  	// The user has not chosen an UserAccountSource or UserAccountSource as None  	// Usernames will be displayed as "Domain\Username"  	return userprop;  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: if (domainContext != null) {  	UserPrincipal user = UserPrincipal.FindByIdentity (domainContext' username);  	if (user != null) {  		// extract full name  		if (!string.IsNullOrWhiteSpace (user.GivenName) || !string.IsNullOrWhiteSpace (user.Surname)) {  			userprop.FirstName = user.GivenName == null ? "" : user.GivenName.Trim ();  			userprop.LastName = user.Surname == null ? "" : user.Surname.Trim ();  		}  		if (!string.IsNullOrWhiteSpace (user.DisplayName)) {  			userprop.DisplayName = user.DisplayName;  		}  		Regex regexEmail = new Regex (ValidEmailRegularExpression' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace);  		foreach (var email in GetEmails (user)) {  			if (string.IsNullOrWhiteSpace (email))  				continue;  			var fixedEmail = email.Trim ();  			//Make it 'case insensitive'  			if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  				//Get the email string from AD  				fixedEmail = fixedEmail.Substring (5).Trim ();  			}  			if (regexEmail.IsMatch (fixedEmail)) {  				userprop.Email = fixedEmail;  				break;  			}  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: if (user != null) {  	// extract full name  	if (!string.IsNullOrWhiteSpace (user.GivenName) || !string.IsNullOrWhiteSpace (user.Surname)) {  		userprop.FirstName = user.GivenName == null ? "" : user.GivenName.Trim ();  		userprop.LastName = user.Surname == null ? "" : user.Surname.Trim ();  	}  	if (!string.IsNullOrWhiteSpace (user.DisplayName)) {  		userprop.DisplayName = user.DisplayName;  	}  	Regex regexEmail = new Regex (ValidEmailRegularExpression' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.IgnorePatternWhitespace);  	foreach (var email in GetEmails (user)) {  		if (string.IsNullOrWhiteSpace (email))  			continue;  		var fixedEmail = email.Trim ();  		//Make it 'case insensitive'  		if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  			//Get the email string from AD  			fixedEmail = fixedEmail.Substring (5).Trim ();  		}  		if (regexEmail.IsMatch (fixedEmail)) {  			userprop.Email = fixedEmail;  			break;  		}  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: foreach (var email in GetEmails (user)) {  	if (string.IsNullOrWhiteSpace (email))  		continue;  	var fixedEmail = email.Trim ();  	//Make it 'case insensitive'  	if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  		//Get the email string from AD  		fixedEmail = fixedEmail.Substring (5).Trim ();  	}  	if (regexEmail.IsMatch (fixedEmail)) {  		userprop.Email = fixedEmail;  		break;  	}  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: if (fixedEmail.StartsWith ("smtp:"' StringComparison.InvariantCultureIgnoreCase)) {  	//Get the email string from AD  	fixedEmail = fixedEmail.Substring (5).Trim ();  }  
Magic Number,BugNET.HttpModules,AuthenticationModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\Authentication\AuthenticationModule.cs,GetUserProperties,The following statement contains a magic number: fixedEmail = fixedEmail.Substring (5).Trim ();  
