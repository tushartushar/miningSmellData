Implementation smell,Namespace,Class,File,Method,Description
Long Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The method has 120 lines of code.
Long Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The method has 141 lines of code.
Complex Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ReadMail,Cyclomatic complexity of the method is 9
Complex Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,Cyclomatic complexity of the method is 13
Complex Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,GetMessageContent,Cyclomatic complexity of the method is 8
Complex Method,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,Cyclomatic complexity of the method is 19
Long Parameter List,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewIssue,The method has 5 parameters. Parameters: recipients' message' mailHeader' projects' result
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewIssue,The length of the statement  "                        LogWarning(string.Format("MailboxReader: Project {0} - {1} is flagged as disabled skipping."' project.Id' project.Code)); " is 121.
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,GetMessageContent,The length of the statement  "                List<MIME_Entity> allAttachs = mailbody.GetAttachments(Config.ProcessInlineAttachedPictures).Where(p => p.ContentType != null).ToList(); " is 136.
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The length of the statement  "                        var anchor = string.Format("<span class='inline-mail-attachment'>Inline Attachment: <a href='DownloadAttachment.axd?id={0}' target='_blank'>{1}</a></span>"' attachment.Id' fileName); " is 182.
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,IsAllowedFileExtension,The length of the statement  "            var allowed = allowedFileTypes.Select(allowedFileType => allowedFileType.Replace("*"' "")).Any(fileType => fileName.EndsWith(fileType)); " is 136.
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,IsAllowedFileExtension,The length of the statement  "                LogWarning(string.Format("MailboxReader: Attachment {0} was not one of the allowed attachment extensions {1} skipping."' fileName' Config.AllowedFileExtensions.ToLower())); " is 172.
Long Statement,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ConvertImageToBase64,The length of the statement  "            return String.Format("data:{0};base64'{1}"' image.ContentType.TypeWithSubtype' Convert.ToBase64String((image.Body as MIME_b_Image).Data)); " is 138.
Empty Catch Block,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ReadMail,The method has an empty catch block.
Magic Number,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The following statement contains a magic number: int.TryParse(commentMatch.Groups[3].Value' out issueId)
Magic Number,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The following statement contains a magic number: commentMatch.Success && commentMatch.Groups.Count >= 4
Magic Number,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The following statement contains a magic number: switch (contentType)                      {                          case "application":                              attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                              break;                          case "attachment":                          case "image":                          case "video":                          case "audio":                                attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                              break;                          case "message":                                // we need to pull the actual email message out of the entity' and strip the "content type" out so that                              // email programs will read the file properly                              var messageBody = mimeEntity.ToString().Replace(mimeEntity.Header.ToString()' "");                              if (messageBody.StartsWith("\r\n"))                              {                                  messageBody = messageBody.Substring(2);                              }                                attachment.Attachment = Encoding.UTF8.GetBytes(messageBody);                                break;                          default:                              LogWarning(string.Format("MailboxReader: Attachment type could not be processed {0}"' mimeEntity.ContentType.Type));                              break;                      }
Missing Default,BugNET.MailboxReader,MailboxReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,LogPop3Client,The following switch statement is missing a default case: switch (e.LogEntry.EntryType)                  {                      case LogEntryType.Read:                          message = string.Format("pop3Client: {0} >> {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                      case LogEntryType.Write:                          message = string.Format("pop3Client: {0} << {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                      case LogEntryType.Text:                          message = string.Format("pop3Client: {0} xx {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                  }
