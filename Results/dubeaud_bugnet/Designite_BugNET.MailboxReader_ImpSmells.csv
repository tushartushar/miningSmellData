Implementation smell,Namespace,Class,File,Method,Description
Long Method,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The method has 120 lines of code.
Long Method,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The method has 141 lines of code.
Complex Method,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,Cyclomatic complexity of the method is 12
Complex Method,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,Cyclomatic complexity of the method is 15
Long Parameter List,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewIssue,The method has 5 parameters. Parameters: recipients' message' mailHeader' projects' result
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewIssue,The length of the statement  "                        LogWarning(string.Format("MailboxReader: Project {0} - {1} is flagged as disabled skipping."' project.Id' project.Code)); " is 121.
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,GetMessageContent,The length of the statement  "                List<MIME_Entity> allAttachs = mailbody.GetAttachments(Config.ProcessInlineAttachedPictures).Where(p => p.ContentType != null).ToList(); " is 136.
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The length of the statement  "                        var anchor = string.Format("<span class='inline-mail-attachment'>Inline Attachment: <a href='DownloadAttachment.axd?id={0}' target='_blank'>{1}</a></span>"' attachment.Id' fileName); " is 182.
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,IsAllowedFileExtension,The length of the statement  "            var allowed = allowedFileTypes.Select(allowedFileType => allowedFileType.Replace("*"' "")).Any(fileType => fileName.EndsWith(fileType)); " is 136.
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,IsAllowedFileExtension,The length of the statement  "                LogWarning(string.Format("MailboxReader: Attachment {0} was not one of the allowed attachment extensions {1} skipping."' fileName' Config.AllowedFileExtensions.ToLower())); " is 172.
Long Statement,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ConvertImageToBase64,The length of the statement  "            return String.Format("data:{0};base64'{1}"' image.ContentType.TypeWithSubtype' Convert.ToBase64String((image.Body as MIME_b_Image).Data)); " is 138.
Empty Catch Block,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ReadMail,The method has an empty catch block.
Magic Number,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The following statement contains a magic number: foreach (var address in recipients)              {                  Regex isReply = new Regex(@"(.*)(\+iid-)(\d+)@(.*)");                  Match commentMatch = isReply.Match(address);                  if (commentMatch.Success && commentMatch.Groups.Count >= 4)                  {                      // we are in a reply and group 4 must contain the id of the original issue                      int issueId;                      if (int.TryParse(commentMatch.Groups[3].Value' out issueId))                      {                          var _currentIssue = IssueManager.GetById(issueId);                            if (_currentIssue != null)                          {                              var project = ProjectManager.GetById(_currentIssue.ProjectId);                                var mailbody = Mail_Message.ParseFromByte(message.MessageToByte());                                bool isHtml;                              List<MIME_Entity> attachments = null;                              string content = GetMessageContent(mailbody' project' out isHtml' ref attachments);                                IssueComment comment = new IssueComment                              {                                  IssueId = issueId'                                  Comment = content'                                  DateCreated = mailHeader.Date                              };                                // try to find if the creator is valid user in the project' otherwise take                              // the user defined in the mailbox config                              var users = UserManager.GetUsersByProjectId(project.Id);                              var emails = messageFrom.Split(';').Select(e => e.Trim().ToLower());                              var user = users.Find(x => emails.Contains(x.Email.ToLower()));                              if (user != null)                              {                                  comment.CreatorUserName = user.UserName;                              }                              else                              {                                  // user not found                                  continue;                              }                                var saved = IssueCommentManager.SaveOrUpdate(comment);                              if (saved)                              {                                  //add history record                                  var history = new IssueHistory                                  {                                      IssueId = issueId'                                      CreatedUserName = comment.CreatorUserName'                                      DateChanged = comment.DateCreated'                                      FieldChanged = ResourceStrings.GetGlobalResource(GlobalResources.SharedResources' "Comment"' "Comment")'                                      OldValue = string.Empty'                                      NewValue = ResourceStrings.GetGlobalResource(GlobalResources.SharedResources' "Added"' "Added")'                                      TriggerLastUpdateChange = true                                  };                                  IssueHistoryManager.SaveOrUpdate(history);                                    var projectFolderPath = Path.Combine(Config.UploadsFolderPath' project.UploadPath);                                    // save attachments as new files                                  int attachmentsSavedCount = 1;                                  foreach (MIME_Entity mimeEntity in attachments)                                  {                                      string fileName;                                      var contentType = mimeEntity.ContentType.Type.ToLower();                                        var attachment = new IssueAttachment                                      {                                          Id = 0'                                          Description = "File attached by mailbox reader"'                                          DateCreated = DateTime.Now'                                          ContentType = mimeEntity.ContentType.TypeWithSubtype'                                          CreatorDisplayName = user.DisplayName'                                          CreatorUserName = user.UserName'                                          IssueId = issueId'                                          ProjectFolderPath = projectFolderPath                                      };                                      attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                                        if (contentType.Equals("attachment")) // this is an attached email                                      {                                          fileName = mimeEntity.ContentDisposition.Param_FileName;                                      }                                      else if (contentType.Equals("message")) // message has no filename so we create one                                      {                                          fileName = string.Format("Attached_Message_{0}.eml"' attachmentsSavedCount);                                      }                                      else                                      {                                          fileName = string.IsNullOrWhiteSpace(mimeEntity.ContentType.Param_Name) ?                                              string.Format("untitled.{0}"' mimeEntity.ContentType.SubType) :                                              mimeEntity.ContentType.Param_Name;                                      }                                        attachment.FileName = fileName;                                        var saveFile = IsAllowedFileExtension(fileName);                                      var fileSaved = false;                                        // can we save the file?                                      if (saveFile)                                      {                                          fileSaved = IssueAttachmentManager.SaveOrUpdate(attachment);                                            if (fileSaved)                                          {                                              attachmentsSavedCount++;                                          }                                          else                                          {                                              LogWarning("MailboxReader: Attachment could not be saved' please see previous logs");                                          }                                      }                                  }                                    processed = true;                                    // add the entry if the save did not throw any exceptions                                  result.MailboxEntries.Add(new MailboxEntry());                              }                          }                      }                  }              }
Magic Number,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,ProcessNewComment,The following statement contains a magic number: foreach (var address in recipients)              {                  Regex isReply = new Regex(@"(.*)(\+iid-)(\d+)@(.*)");                  Match commentMatch = isReply.Match(address);                  if (commentMatch.Success && commentMatch.Groups.Count >= 4)                  {                      // we are in a reply and group 4 must contain the id of the original issue                      int issueId;                      if (int.TryParse(commentMatch.Groups[3].Value' out issueId))                      {                          var _currentIssue = IssueManager.GetById(issueId);                            if (_currentIssue != null)                          {                              var project = ProjectManager.GetById(_currentIssue.ProjectId);                                var mailbody = Mail_Message.ParseFromByte(message.MessageToByte());                                bool isHtml;                              List<MIME_Entity> attachments = null;                              string content = GetMessageContent(mailbody' project' out isHtml' ref attachments);                                IssueComment comment = new IssueComment                              {                                  IssueId = issueId'                                  Comment = content'                                  DateCreated = mailHeader.Date                              };                                // try to find if the creator is valid user in the project' otherwise take                              // the user defined in the mailbox config                              var users = UserManager.GetUsersByProjectId(project.Id);                              var emails = messageFrom.Split(';').Select(e => e.Trim().ToLower());                              var user = users.Find(x => emails.Contains(x.Email.ToLower()));                              if (user != null)                              {                                  comment.CreatorUserName = user.UserName;                              }                              else                              {                                  // user not found                                  continue;                              }                                var saved = IssueCommentManager.SaveOrUpdate(comment);                              if (saved)                              {                                  //add history record                                  var history = new IssueHistory                                  {                                      IssueId = issueId'                                      CreatedUserName = comment.CreatorUserName'                                      DateChanged = comment.DateCreated'                                      FieldChanged = ResourceStrings.GetGlobalResource(GlobalResources.SharedResources' "Comment"' "Comment")'                                      OldValue = string.Empty'                                      NewValue = ResourceStrings.GetGlobalResource(GlobalResources.SharedResources' "Added"' "Added")'                                      TriggerLastUpdateChange = true                                  };                                  IssueHistoryManager.SaveOrUpdate(history);                                    var projectFolderPath = Path.Combine(Config.UploadsFolderPath' project.UploadPath);                                    // save attachments as new files                                  int attachmentsSavedCount = 1;                                  foreach (MIME_Entity mimeEntity in attachments)                                  {                                      string fileName;                                      var contentType = mimeEntity.ContentType.Type.ToLower();                                        var attachment = new IssueAttachment                                      {                                          Id = 0'                                          Description = "File attached by mailbox reader"'                                          DateCreated = DateTime.Now'                                          ContentType = mimeEntity.ContentType.TypeWithSubtype'                                          CreatorDisplayName = user.DisplayName'                                          CreatorUserName = user.UserName'                                          IssueId = issueId'                                          ProjectFolderPath = projectFolderPath                                      };                                      attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                                        if (contentType.Equals("attachment")) // this is an attached email                                      {                                          fileName = mimeEntity.ContentDisposition.Param_FileName;                                      }                                      else if (contentType.Equals("message")) // message has no filename so we create one                                      {                                          fileName = string.Format("Attached_Message_{0}.eml"' attachmentsSavedCount);                                      }                                      else                                      {                                          fileName = string.IsNullOrWhiteSpace(mimeEntity.ContentType.Param_Name) ?                                              string.Format("untitled.{0}"' mimeEntity.ContentType.SubType) :                                              mimeEntity.ContentType.Param_Name;                                      }                                        attachment.FileName = fileName;                                        var saveFile = IsAllowedFileExtension(fileName);                                      var fileSaved = false;                                        // can we save the file?                                      if (saveFile)                                      {                                          fileSaved = IssueAttachmentManager.SaveOrUpdate(attachment);                                            if (fileSaved)                                          {                                              attachmentsSavedCount++;                                          }                                          else                                          {                                              LogWarning("MailboxReader: Attachment could not be saved' please see previous logs");                                          }                                      }                                  }                                    processed = true;                                    // add the entry if the save did not throw any exceptions                                  result.MailboxEntries.Add(new MailboxEntry());                              }                          }                      }                  }              }
Magic Number,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,GetMessageContent,The following statement contains a magic number: if (string.IsNullOrEmpty(mailbody.BodyHtmlText)) // no html must be text              {                  content = mailbody.BodyText.Replace("\n\r"' "<br/>").Replace("\r\n"' "<br/>").Replace("\r"' "");                  int replyToPos = content.IndexOf("-- WRITE ABOVE THIS LINE TO REPLY --");                  if (replyToPos != -1)                      content = content.Substring(0' replyToPos);              }              else              {                  //TODO: Enhancements could include regular expressions / string matching or not matching                   // for particular strings values in the subject or body.                  // strip the <body> out of the message (using code from below)                  var bodyExtractor = new Regex("<body.*?>(?<content>.*)</body>"' RegexOptions.IgnoreCase | RegexOptions.Singleline);                  var match = bodyExtractor.Match(mailbody.BodyHtmlText);                    var emailContent = match.Success && match.Groups["content"] != null                      ? match.Groups["content"].Value                      : mailbody.BodyHtmlText;                    isContentHtml = true;                  content = emailContent.Replace("&lt;"' "<").Replace("&gt;"' ">");                    content = Regex.Replace(content' "</?o:p>"' string.Empty); // Clean MSWord stuff                    int replyToStart = content.IndexOf("<p>-- WRITE ABOVE THIS LINE TO REPLY --</p>");                  int replyToEnd = content.IndexOf("<p>-- WRITE BELOW THIS LINE TO REPLY --</p>");                  if (replyToStart != -1 && replyToEnd != -1)                      content = content.Substring(0' replyToStart) +                                content.Substring(replyToEnd + 43);              }
Magic Number,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,SaveMailboxEntry,The following statement contains a magic number: try              {                  //load template                   var body = string.Format("<div >Sent by:{1} on: {2}<br/>{0}</div>"' entry.Content.Trim()' entry.From' entry.Date);                    if (Config.BodyTemplate.Trim().Length > 0)                  {                      var data = new Dictionary<string' object> { { "MailboxEntry"' entry } };                      body = NotificationManager.GenerateNotificationContent(Config.BodyTemplate' data);                  }                    var projectId = entry.ProjectMailbox.ProjectId;                    // try to find if the creator is valid user in the project' otherwise take                  // the user defined in the mailbox config                  var creator = Config.ReportingUserName;                  var users = UserManager.GetUsersByProjectId(projectId);                  var emails = entry.From.Split(';').Select(e => e.Trim().ToLower());                  var user = users.Find(x => emails.Contains(x.Email.ToLower()));                  if (user != null)                      creator = user.UserName;                    var mailIssue = IssueManager.GetDefaultIssueByProjectId(                      projectId'                      entry.Title.Trim()'                      body.Trim()'                      entry.ProjectMailbox.IssueTypeId'                      entry.ProjectMailbox.AssignToUserName'                      creator);                    if (entry.ProjectMailbox.CategoryId != 0)                  {                      // overwrite default category with mailbox category                      mailIssue.CategoryId = entry.ProjectMailbox.CategoryId;                  }                    if (!IssueManager.SaveOrUpdate(mailIssue)) return null;                    entry.IssueId = mailIssue.Id;                  entry.WasProcessed = true;                    var project = ProjectManager.GetById(projectId);                    var projectFolderPath = Path.Combine(Config.UploadsFolderPath' project.UploadPath);                    var doc = new HtmlDocument();                  doc.LoadHtml(mailIssue.Description); // load the issue body to we can process it for inline images (if exist)                    //If there is an attached file present then add it to the database                   //and copy it to the directory specified in the web.config file                  foreach (MIME_Entity mimeEntity in entry.MailAttachments)                  {                      string fileName;                      var isInline = false;                      var contentType = mimeEntity.ContentType.Type.ToLower();                        var attachment = new IssueAttachment                          {                              Id = 0'                              Description = "File attached by mailbox reader"'                              DateCreated = DateTime.Now'                              ContentType = mimeEntity.ContentType.TypeWithSubtype'                              CreatorDisplayName = Config.ReportingUserName'                              CreatorUserName = Config.ReportingUserName'                              IssueId = mailIssue.Id'                              ProjectFolderPath = projectFolderPath                          };                        switch (contentType)                      {                          case "application":                              attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                              break;                          case "attachment":                          case "image":                          case "video":                          case "audio":                                attachment.Attachment = ((MIME_b_SinglepartBase)mimeEntity.Body).Data;                              break;                          case "message":                                // we need to pull the actual email message out of the entity' and strip the "content type" out so that                              // email programs will read the file properly                              var messageBody = mimeEntity.ToString().Replace(mimeEntity.Header.ToString()' "");                              if (messageBody.StartsWith("\r\n"))                              {                                  messageBody = messageBody.Substring(2);                              }                                attachment.Attachment = Encoding.UTF8.GetBytes(messageBody);                                break;                          default:                              LogWarning(string.Format("MailboxReader: Attachment type could not be processed {0}"' mimeEntity.ContentType.Type));                              break;                      }                        if (contentType.Equals("attachment")) // this is an attached email                      {                          fileName = mimeEntity.ContentDisposition.Param_FileName;                      }                      else if (contentType.Equals("message")) // message has no filename so we create one                      {                          fileName = string.Format("Attached_Message_{0}.eml"' entry.AttachmentsSavedCount);                      }                      else                      {                          isInline = true;                          fileName = string.IsNullOrWhiteSpace(mimeEntity.ContentType.Param_Name) ?                              string.Format("untitled.{0}"' mimeEntity.ContentType.SubType) :                              mimeEntity.ContentType.Param_Name;                      }                        attachment.FileName = fileName;                        var saveFile = IsAllowedFileExtension(fileName);                      var fileSaved = false;                        // can we save the file?                      if (saveFile)                      {                          fileSaved = IssueAttachmentManager.SaveOrUpdate(attachment);                            if (fileSaved)                          {                              entry.AttachmentsSavedCount++;                          }                          else                          {                              LogWarning("MailboxReader: Attachment could not be saved' please see previous logs");                          }                      }                        if (!entry.IsHtml || !isInline) continue;                        if (string.IsNullOrWhiteSpace(mimeEntity.ContentID)) continue;                        var contentId = mimeEntity.ContentID.Replace("<"' "").Replace(">"' "").Replace("["' "").Replace("]"' "");                        // this is pretty greedy but since people might be sending screenshots I doubt they will send in dozens of images                      // embedded in the email.  one would hope                      foreach (var node in doc.DocumentNode.SelectNodes(XpathElementCaseInsensitive("img")).ToList())                      {                          var attr = node.Attributes.FirstOrDefault(p => p.Name.ToLowerInvariant() == "src");// get the src attribute                            if (attr == null) continue; // image has no src attribute                          if (!attr.Value.Contains(contentId)) continue; // is the attribute value the content id?                            // swap out the content of the parent node html will our link to the image                          var anchor = string.Format("<span class='inline-mail-attachment'>Inline Attachment: <a href='DownloadAttachment.axd?id={0}' target='_blank'>{1}</a></span>"' attachment.Id' fileName);                            // for each image in the body if the file was saved swap out the inline link for a link to the saved attachment                          // otherwise blank out the content link so we don't get a missing image link                          node.ParentNode.InnerHtml = fileSaved ? anchor : "";                      }                        mailIssue.Description = doc.DocumentNode.InnerHtml;                      mailIssue.LastUpdateUserName = mailIssue.OwnerUserName;                      mailIssue.LastUpdate = DateTime.Now;                        IssueManager.SaveOrUpdate(mailIssue);                  }                    return mailIssue;              }              catch (Exception ex)              {                  LogException(ex);                  throw;              }
Missing Default,BugNET.MailboxReader,MailboxReader,C:\repos\dubeaud_bugnet\src\BugNET.MailboxReader\MailboxReader.cs,LogPop3Client,The following switch statement is missing a default case: switch (e.LogEntry.EntryType)                  {                      case LogEntryType.Read:                          message = string.Format("pop3Client: {0} >> {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                      case LogEntryType.Write:                          message = string.Format("pop3Client: {0} << {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                      case LogEntryType.Text:                          message = string.Format("pop3Client: {0} xx {1}"' ObjectToString(e.LogEntry.RemoteEndPoint)' e.LogEntry.Text);                          break;                  }
