Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,Cyclomatic complexity of the method is 18
Long Statement,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,Init,The length of the statement  "		Log.Warn (string.Format ("MailboxReaderModule: [Pop3Interval] was too small. Using minimum threshold of {0} milliseconds"' MIN_INTERVAL)); " is 138.
Long Statement,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,The length of the statement  "		var pop3TemplatePath = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3BodyTemplate' "templates/NewMailboxIssue.xslt"); " is 130.
Long Statement,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,The length of the statement  "			ProcessInlineAttachedPictures = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3InlineAttachedPictures' false)' " is 122.
Long Statement,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,The length of the statement  "			UploadsFolderPath = (state == null) ? Path.Combine (HostSettingManager.Get (HostSettingNames.AttachmentUploadPath)' path) : state.UploadsFolderPath' " is 148.
Long Statement,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,The length of the statement  "	Log.Error (string.Format ("MailboxReaderModule: The Mailbox reader has thrown [{0}] consecutive errors and will be disabled"' _readerErrors)); " is 142.
Magic Number,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,Init,The following statement contains a magic number: _timer = new Timer (ScheduledWorkCallback' state' 15' _interval);  
Magic Number,BugNET.HttpModules,MailboxReaderModule,F:\newReposMay17\dubeaud_bugnet\src\Library\HttpModules\MailBoxReader\MailboxReaderModule.cs,ScheduledWorkCallback,The following statement contains a magic number: try {  	if (_timer == null) {  		if (_readerErrors.Equals (0)) {  			Log.Error ("MailboxReaderModule: First instance of mailbox reader timer is null");  		}  		throw new Exception ("MailboxReaderModule: Mailbox reader timer is null");  	}  	// set the flag we are processing  	lock (_locker)  		_isMailboxReaderProcessing = true;  	//stop the timer  	lock (_locker)  		_timer.Change (Timeout.Infinite' Timeout.Infinite);  	var assemblyUri = new Uri (Assembly.GetExecutingAssembly ().CodeBase);  	var path = Path.GetDirectoryName (assemblyUri.LocalPath).Replace ("\\bin"' "");  	var hostSettings = HostSettingManager.LoadHostSettings ();  	var emailFormat = HostSettingManager.Get (hostSettings' HostSettingNames.SMTPEMailFormat' EmailFormatType.Text);  	var pop3TemplatePath = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3BodyTemplate' "templates/NewMailboxIssue.xslt");  	var mailBoxConfig = new MailboxReaderConfig {  		Server = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3Server' string.Empty)'  		Port = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3Port' 110)'  		UseSsl = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3UseSSL' false)'  		Username = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3Username' string.Empty)'  		Password = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3Password' string.Empty)'  		ProcessInlineAttachedPictures = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3InlineAttachedPictures' false)'  		DeleteAllMessages = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3DeleteAllMessages' true)'  		ReportingUserName = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3ReportingUsername' string.Empty)'  		ProcessAttachments = HostSettingManager.Get (hostSettings' HostSettingNames.Pop3ProcessAttachments' true)'  		UploadsFolderPath = (state == null) ? Path.Combine (HostSettingManager.Get (HostSettingNames.AttachmentUploadPath)' path) : state.UploadsFolderPath'  		AllowedFileExtensions = HostSettingManager.Get (hostSettings' HostSettingNames.AllowedFileExtensions' ".")'  		FileSizeLimit = HostSettingManager.Get (hostSettings' HostSettingNames.FileSizeLimit' 0)'  		EmailFormatType = emailFormat  	};  	if (File.Exists (Path.Combine (path' pop3TemplatePath))) {  		mailBoxConfig.BodyTemplate = File.ReadAllText (Path.Combine (path' pop3TemplatePath));  	}  	var mailboxReader = new MailboxReader.MailboxReader (mailBoxConfig);  	// read the mail for the mailboxes  	var result = mailboxReader.ReadMail ();  	// handle the result of the read  	// we should never get an exception from the reader only statuses' this so we don't kill the background thread  	// unless it is absolute  	switch (result.Status) {  	case ResultStatuses.None:  	case ResultStatuses.Success:  		lock (_locker)  			_readerErrors = 0;  		break;  	case ResultStatuses.Failed:  		foreach (var processingMessage in result.ProcessingMessages) {  			Log.Warn (processingMessage);  		}  		break;  	case ResultStatuses.FailedWithException:  		Log.Error (result.LastException);  		lock (_locker)  			_readerErrors++;  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  } catch (Exception ex) {  	Log.Error (ex);  	lock (_locker)  		_readerErrors++;  } finally {  	// set the flag back so we are not processing  	_isMailboxReaderProcessing = false;  }  
