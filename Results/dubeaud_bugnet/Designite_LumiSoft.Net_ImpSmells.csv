Implementation smell,Namespace,Class,File,Method,Description
Long Method,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The method has 101 lines of code.
Long Method,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The method has 126 lines of code.
Long Method,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The method has 176 lines of code.
Long Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The method has 193 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,The method has 234 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,GetFoldersAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The method has 123 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,StoreMessageAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The method has 112 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,ReadResponseAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadLineCompleted,The method has 201 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,_FetchResponseReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The method has 213 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ParseDataItems,The method has 276 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_Search_Key,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Search_Key.cs,ParseKey,The method has 161 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_t_Fetch_r_i_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_Fetch_r_i_Envelope.cs,ConstructEnvelope,The method has 141 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_Obsolete\IMAP\IMAP_Envelope.cs,ConstructEnvelope,The method has 141 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The method has 164 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The method has 201 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LIST,The method has 150 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STATUS,The method has 112 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The method has 153 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The method has 103 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,The method has 139 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The method has 671 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The method has 199 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The method has 144 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The method has 146 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ConstructParts,The method has 237 lines of code.
Long Method,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The method has 112 lines of code.
Long Method,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,Parse,The method has 110 lines of code.
Long Method,LumiSoft.Net.MIME,_MultipartReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,Read,The method has 133 lines of code.
Long Method,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The method has 357 lines of code.
Complex Method,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,Cyclomatic complexity of the method is 21
Complex Method,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,Cyclomatic complexity of the method is 17
Complex Method,LumiSoft.Net,StringReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\StringReader.cs,QuotedReadToDelimiter,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net,StringReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\StringReader.cs,ReadWord,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net,StringReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\StringReader.cs,ReadParenthesized,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net,TextUtils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TextUtils.cs,UnQuoteString,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net,TextUtils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TextUtils.cs,SplitQuotedString,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net,IPBindInfo,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IPBindInfo.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.AUTH,AUTH_Gmail_OAuth1_3leg,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_Gmail_OAuth1_3leg.cs,GetAccessToken,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,ToAuthorization,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.AUTH,AUTH_SASL_Client_DigestMd5,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_DigestMd5.cs,AUTH_SASL_Client_DigestMd5,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Challenge,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Challenge.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,AUTH_SASL_DigestMD5_Response,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Authenticate,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,Cyclomatic complexity of the method is 32
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetFile,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,AppendToFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,StoreFile,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,StoreFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Rename,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StartTls,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StartTlsAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Login,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Authenticate,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolder,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SubscribeFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,UnsubscribeFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FolderStatus,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExamineFolder,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuotaRoots,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetQuota,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderAcl,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderAcl,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAcl,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderRights,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderMyRights,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Enable,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,EnableAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CloseFolder,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CloseFolderAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Fetch,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FetchAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Search,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SearchAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlags,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlagsAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessagesAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,MoveMessages,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Expunge,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExpungeAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,IdleAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,Cyclomatic complexity of the method is 58
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Search,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Fetch,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,MoveMessages,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuota,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,SearchAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,StoreMessageFlagsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,ReadResponseAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadLineCompleted,Cyclomatic complexity of the method is 44
Complex Method,LumiSoft.Net.IMAP.Client,_FetchResponseReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,Cyclomatic complexity of the method is 29
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ToStreamAsync,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ParseDataItems,Cyclomatic complexity of the method is 29
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadData,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Namespace,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Namespace.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Namespace,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Namespace.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Status,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Status.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP,IMAP_r_u_Status,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Status.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP,IMAP_Search_Key,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Search_Key.cs,ParseKey,Cyclomatic complexity of the method is 38
Complex Method,LumiSoft.Net.IMAP,IMAP_t_Fetch_r_i_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_Fetch_r_i_Envelope.cs,ConstructEnvelope,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP,IMAP_t_orc,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,ACL_to_String,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,ACL_From_String,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,Decode_IMAP_UTF7_String,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,ImapStringToByte,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP,IMAP_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_Obsolete\IMAP\IMAP_Envelope.cs,ConstructEnvelope,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,Cyclomatic complexity of the method is 43
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STATUS,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,GETQUOTAROOT,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,Cyclomatic complexity of the method is 40
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,Cyclomatic complexity of the method is 17
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,GetMimeEntity,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ConstructParts,Cyclomatic complexity of the method is 17
Complex Method,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,Cyclomatic complexity of the method is 19
Complex Method,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadLine,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IO,ReadLineAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,DoLineReading,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IO,ReadLineAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,DoLineReading,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,Parse,Cyclomatic complexity of the method is 27
Complex Method,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,GetAttachments,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.Mail,Mail_t_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_AddressList.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net.MIME,_MultipartReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,Next,Cyclomatic complexity of the method is 16
Complex Method,LumiSoft.Net.MIME,_MultipartReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,Read,Cyclomatic complexity of the method is 26
Complex Method,LumiSoft.Net.MIME,MIME_b_Provider,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Provider.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,GetDataStream,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,SetData,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.MIME,MIME_h_Collection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Collection.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,QuotedString,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,ReadParenthesized,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,QuotedReadToDelimiter,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,Cyclomatic complexity of the method is 80
Complex Method,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,Login,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,Authenticate,Cyclomatic complexity of the method is 9
Long Parameter List,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,FF,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,GG,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HH,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,LumiSoft.Net,IPBindInfo,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IPBindInfo.cs,IPBindInfo,The method has 5 parameters. Parameters: hostName' ip' port' sslMode' sslCertificate
Long Parameter List,LumiSoft.Net,IPBindInfo,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IPBindInfo.cs,IPBindInfo,The method has 6 parameters. Parameters: hostName' protocol' ip' port' sslMode' sslCertificate
Long Parameter List,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,Auth_HttpDigest,The method has 6 parameters. Parameters: userName' password' cnonce' uri' digestResponse' requestMethod
Long Parameter List,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,MessageType3,The method has 5 parameters. Parameters: domain' user' host' lm' nt
Long Parameter List,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,AUTH_SASL_DigestMD5_Response,The method has 8 parameters. Parameters: challenge' realm' userName' password' cnonce' nonceCount' qop' digestUri
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The method has 5 parameters. Parameters: folder' flags' internalDate' message' count
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The method has 5 parameters. Parameters: folder' flags' internalDate' message' count
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,The method has 14 parameters. Parameters: capability' folderInfo' search' list' lsub' acl' myRights' listRights' status' quota' quotaRoot' nspace' fetchHandler' enable
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The method has 5 parameters. Parameters: folder' flags' internalDate' message' count
Long Parameter List,LumiSoft.Net.IMAP.Client,SetFolderAclAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderAclAsyncOP,The method has 5 parameters. Parameters: folder' identifier' setType' permissions' callback
Long Parameter List,LumiSoft.Net.IMAP.Client,StoreMessageAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageAsyncOP,The method has 6 parameters. Parameters: folder' flags' internalDate' message' count' callback
Long Parameter List,LumiSoft.Net.IMAP.Client,StoreMessageFlagsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlagsAsyncOP,The method has 6 parameters. Parameters: uid' seqSet' silent' setType' msgFlags' callback
Long Parameter List,LumiSoft.Net.IMAP,IMAP_r_u_Status,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Status.cs,IMAP_r_u_Status,The method has 6 parameters. Parameters: folder' messagesCount' recentCount' uidNext' folderUid' unseenCount
Long Parameter List,LumiSoft.Net.IMAP,IMAP_t_Fetch_r_i_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_Fetch_r_i_Envelope.cs,IMAP_t_Fetch_r_i_Envelope,The method has 10 parameters. Parameters: date' subject' from' sender' replyTo' to' cc' bcc' inReplyTo' messageID
Long Parameter List,LumiSoft.Net.IMAP,IMAP_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_Obsolete\IMAP\IMAP_Envelope.cs,IMAP_Envelope,The method has 10 parameters. Parameters: date' subject' from' sender' replyTo' to' cc' bcc' inReplyTo' messageID
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_e_Append,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_e_Append.cs,IMAP_e_Append,The method has 5 parameters. Parameters: folder' flags' date' size' response
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_e_SetAcl,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_e_SetAcl.cs,IMAP_e_SetAcl,The method has 5 parameters. Parameters: folder' identifier' flagsSetType' rights' response
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_e_Store,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_e_Store.cs,IMAP_e_Store,The method has 5 parameters. Parameters: folder' msgInfo' flagsSetType' flags' response
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_MessageInfo,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_MessageInfo.cs,IMAP_MessageInfo,The method has 5 parameters. Parameters: id' uid' flags' size' internalDate
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,OnAppend,The method has 5 parameters. Parameters: folder' flags' date' size' response
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,OnSetAcl,The method has 5 parameters. Parameters: folder' identifier' flagsSetType' rights' response
Long Parameter List,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The method has 6 parameters. Parameters: encBuffer' encOffset' encCount' buffer' offset' ignoreNonBase64Chars
Long Parameter List,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BeginReadHeader,The method has 5 parameters. Parameters: storeStream' maxCount' exceededAction' callback' state
Long Parameter List,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BeginReadLine,The method has 6 parameters. Parameters: buffer' offset' maxCount' exceededAction' callback' state
Long Parameter List,LumiSoft.Net.IO,ReadLineAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadLineAsyncOperation,The method has 7 parameters. Parameters: owner' buffer' offset' maxCount' exceededAction' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The method has 7 parameters. Parameters: owner' terminator' storeStream' maxCount' exceededAction' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadToStreamAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadToStreamAsyncOperation,The method has 5 parameters. Parameters: owner' storeStream' count' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadAsyncOperation,The method has 6 parameters. Parameters: owner' buffer' offset' maxSize' callback' asyncState
Long Parameter List,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,BeginConnect,The method has 5 parameters. Parameters: host' port' ssl' callback' state
Long Parameter List,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,BeginConnect,The method has 5 parameters. Parameters: localEP' remoteEP' ssl' callback' state
Long Parameter List,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,Init,The method has 5 parameters. Parameters: server' socket' hostName' ssl' certificate
Long Parameter List,LumiSoft.Net.Log,LogEntry,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\LogEntry.cs,LogEntry,The method has 8 parameters. Parameters: type' id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,LogEntry,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\LogEntry.cs,LogEntry,The method has 8 parameters. Parameters: type' id' userIdentity' size' text' localEP' remoteEP' exception
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddRead,The method has 6 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddRead,The method has 7 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddWrite,The method has 6 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddWrite,The method has 7 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddText,The method has 5 parameters. Parameters: id' userIdentity' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Log\Logger.cs,AddException,The method has 6 parameters. Parameters: id' userIdentity' text' localEP' remoteEP' exception
Long Parameter List,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,BeginAuthenticate,The method has 5 parameters. Parameters: userName' password' tryApop' callback' state
Long Identifier,LumiSoft.Net.IMAP,IMAP_t_orc_CopyUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_CopyUid.cs,Parse,The length of the parameter code_mailboxUid_sourceSeqSet_targetSeqSet is 41.
Long Statement,LumiSoft.Net.AUTH,AUTH_Gmail_OAuth1_3leg,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_Gmail_OAuth1_3leg.cs,ComputeHmacSha1Signature,The length of the statement  "            hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format("{0}&{1}"' UrlEncode(consumerSecret)' string.IsNullOrEmpty(tokenSecret) ? "" : UrlEncode(tokenSecret))); " is 157.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,CalculateRspAuth,The length of the statement  "                return Net_Utils.ComputeMd5(Net_Utils.ComputeMd5(a1'true) + ":" + this.Nonce + ":" + this.NonceCount.ToString("x8") + ":" + this.CNonce + ":" + this.Qop + ":" + Net_Utils.ComputeMd5(a2'true)'true); " is 197.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,CalculateRspAuth,The length of the statement  "                return Net_Utils.ComputeMd5(Net_Utils.ComputeMd5(a1'true) + ":" + this.Nonce + ":" + Net_Utils.ComputeMd5(a2'true)'true); " is 121.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,CalculateResponse,The length of the statement  "                        request-digest  = <"> < KD ( H(A1)'unq(nonce-value) ":" nc-value ":" unq(cnonce-value) ":" unq(qop-value) ":" H(A2) )> <"> " is 122.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,CalculateResponse,The length of the statement  "                // request-digest  = <"> < KD ( H(A1)'unq(nonce-value) ":" nc-value ":" unq(cnonce-value) ":" unq(qop-value) ":" H(A2) )> <"> " is 125.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_Client_DigestMd5,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_DigestMd5.cs,Continue,The length of the statement  "                if(!string.Equals(Encoding.UTF8.GetString(serverResponse)'m_pResponse.ToRspauthResponse(m_UserName'm_Password)'StringComparison.InvariantCultureIgnoreCase)){ " is 157.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,ToRspauthResponse,The length of the statement  "                return "rspauth=" + hex(kd(hex(h(a1(userName'password)))'m_Nonce + ":" + this.NonceCount.ToString("x8") + ":" + this.Cnonce + ":" + this.Qop + ":" + hex(h(a2)))); " is 162.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,CalculateResponse,The length of the statement  "                return hex(kd(hex(h(a1(userName'password)))'m_Nonce + ":" + this.NonceCount.ToString("x8") + ":" + this.Cnonce + ":" + this.Qop + ":" + hex(h(a2())))); " is 151.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_DigestMd5,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_ServerMechanism_DigestMd5.cs,Continue,The length of the statement  "                AUTH_SASL_DigestMD5_Challenge callenge = new AUTH_SASL_DigestMD5_Challenge(new string[]{m_Realm}'m_Nonce'new string[]{"auth"}'false); " is 133.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_Plain,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_ServerMechanism_Plain.cs,Continue,The length of the statement  "                    AUTH_e_Authenticate result = OnAuthenticate(authzid_authcid_passwd[0]'authzid_authcid_passwd[1]'authzid_authcid_passwd[2]); " is 123.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                    SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException); " is 120.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 124.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                        if(DateTime.TryParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None'out modified)){ " is 185.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                            DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 185.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                            DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 203.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Port,The length of the statement  "                    WriteLine("PORT " + ip.ToString().Replace("."'"'") + "'" + (m_pDataConnection.LocalEndPoint.Port >> 8) + "'" + (m_pDataConnection.LocalEndPoint.Port & 0xFF)); " is 158.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The length of the statement  "			string[] parts = response[0].Substring(response[0].IndexOf("(") + 1'response[0].IndexOf(")") - response[0].IndexOf("(") - 1).Split('''); " is 136.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The length of the statement  "            m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5]))); " is 189.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,SwitchToActive,The length of the statement  "                m_pOwner.LogAddText("FTP data channel switched to Active mode' listening FTP server connect to '" + m_pSocket.LocalEndPoint.ToString() + "'."); " is 143.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,SwitchToPassive,The length of the statement  "                m_pOwner.LogAddText("FTP data channel switched to Passive mode' connecting to FTP server '" + remoteEP.ToString() + "'."); " is 122.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,SwitchToPassive,The length of the statement  "                m_pOwner.LogAddText("FTP Passive data channel established' localEP='" + m_pSocket.LocalEndPoint.ToString() + "' remoteEP='" + m_pSocket.RemoteEndPoint.ToString() + "'."); " is 170.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The length of the statement  "                    m_pOwner.LogAddText("FTP Active data channel waiting FTP server connect to '" + m_pSocket.LocalEndPoint.ToString() + "'."); " is 123.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The length of the statement  "                    m_pOwner.LogAddText("FTP Active data channel established' localEP='" + socket.LocalEndPoint.ToString() + "' remoteEP='" + socket.RemoteEndPoint.ToString() + "'."); " is 163.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StartTls,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StartTlsAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StartTlsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Login,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,LoginAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,LoginAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Authenticate,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,AuthenticateAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,AuthenticateAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetNamespaces,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetNamespacesAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetNamespacesAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolders,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFoldersAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFoldersAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetSubscribedFolders,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetSubscribedFoldersAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetSubscribedFoldersAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SubscribeFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SubscribeFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SubscribeFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,UnsubscribeFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,UnsubscribeFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,UnsubscribeFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FolderStatus,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FolderStatusAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FolderStatusAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExamineFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExamineFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExamineFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuotaRoots,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuotaRootsAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuotaRootsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetQuota,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetQuotaAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetQuotaAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderAcl,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderAclAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderAclAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderAcl,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderAclAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderAclAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAcl,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAclAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderAclAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderRights,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderRightsAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderRightsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderMyRights,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderMyRightsAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderMyRightsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The length of the statement  "            StoreMessage(folder'flags != null ? new IMAP_t_MsgFlags(flags) : new IMAP_t_MsgFlags(new string[0])'internalDate'message'count); " is 128.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Enable,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,EnableAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,EnableAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,EnableUtf8,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CloseFolder,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CloseFolderAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CloseFolderAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Fetch,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FetchAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,FetchAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Search,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SearchAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SearchAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlags,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlagsAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlagsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessagesAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessagesAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,MoveMessages,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Expunge,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExpungeAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ExpungeAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,IdleAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Capability,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CapabilityAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CapabilityAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Noop,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,NoopAsync,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,NoopAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,SendCmdAndReadRespAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponseAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadFinalResponseAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadStringLiteralAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,The length of the statement  "            SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 125.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Fetch,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,MoveMessages,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuota,The length of the statement  "                throw new InvalidOperationException("This command is not valid in IDLE state' you need stop idling before calling this command."); " is 130.
Long Statement,LumiSoft.Net.IMAP.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                    byte[] cmdLine    = Encoding.UTF8.GetBytes((m_pImapClient.m_CommandIndex++).ToString("d5") + " LOGIN " + TextUtils.QuoteString(m_User) + " " + TextUtils.QuoteString(m_Password) + "\r\n"); " is 187.
Long Statement,LumiSoft.Net.IMAP.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                    string cmdLineLog = (m_pImapClient.m_CommandIndex - 1).ToString("d5") + " LOGIN " + TextUtils.QuoteString(m_User) + " <PASSWORD-REMOVED>"; " is 138.
Long Statement,LumiSoft.Net.IMAP.Client,AuthenticateAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                        byte[] buffer = Encoding.UTF8.GetBytes((m_pImapClient.m_CommandIndex++).ToString("d5") + " AUTHENTICATE " + m_pSASL.Name + " " + Convert.ToBase64String(m_pSASL.Continue(null)) + "\r\n"); " is 186.
Long Statement,LumiSoft.Net.IMAP.Client,AuthenticateAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                        byte[] buffer = Encoding.UTF8.GetBytes((m_pImapClient.m_CommandIndex++).ToString("d5") + " AUTHENTICATE " + m_pSASL.Name + "\r\n"); " is 131.
Long Statement,LumiSoft.Net.IMAP.Client,AuthenticateAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                        m_pImapClient.LogAddWrite(buffer.Length'(m_pImapClient.m_CommandIndex++).ToString("d5") + " AUTHENTICATE " + m_pSASL.Name); " is 123.
Long Statement,LumiSoft.Net.IMAP.Client,GetFoldersAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                    byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " LIST \"\" " + IMAP_Utils.EncodeMailbox(m_Filter'imap.m_MailboxEncoding) + "\r\n"); " is 165.
Long Statement,LumiSoft.Net.IMAP.Client,CreateFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " CREATE " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 162.
Long Statement,LumiSoft.Net.IMAP.Client,DeleteFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " DELETE " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 162.
Long Statement,LumiSoft.Net.IMAP.Client,RenameFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " RENAME " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + " " + IMAP_Utils.EncodeMailbox(m_NewFolder'imap.m_MailboxEncoding) + "\r\n"); " is 231.
Long Statement,LumiSoft.Net.IMAP.Client,GetSubscribedFoldersAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                    byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " LSUB \"\" " + IMAP_Utils.EncodeMailbox(m_Filter'imap.m_MailboxEncoding) + "\r\n"); " is 165.
Long Statement,LumiSoft.Net.IMAP.Client,SubscribeFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " SUBSCRIBE " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 165.
Long Statement,LumiSoft.Net.IMAP.Client,UnsubscribeFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " UNSUBSCRIBE " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 167.
Long Statement,LumiSoft.Net.IMAP.Client,FolderStatusAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " STATUS " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + " (MESSAGES RECENT UIDNEXT UIDVALIDITY UNSEEN)\r\n"); " is 207.
Long Statement,LumiSoft.Net.IMAP.Client,SelectFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                    byte[] cmdLine    = Encoding.UTF8.GetBytes((m_pImapClient.m_CommandIndex++).ToString("d5") + " SELECT " + IMAP_Utils.EncodeMailbox(m_Folder'm_pImapClient.m_MailboxEncoding) + "\r\n"); " is 183.
Long Statement,LumiSoft.Net.IMAP.Client,ExamineFolderAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The length of the statement  "                    byte[] cmdLine    = Encoding.UTF8.GetBytes((m_pImapClient.m_CommandIndex++).ToString("d5") + " EXAMINE " + IMAP_Utils.EncodeMailbox(m_Folder'm_pImapClient.m_MailboxEncoding) + "\r\n"); " is 184.
Long Statement,LumiSoft.Net.IMAP.Client,GetFolderQuotaRootsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " GETQUOTAROOT " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 168.
Long Statement,LumiSoft.Net.IMAP.Client,GetQuotaAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " GETQUOTA " + IMAP_Utils.EncodeMailbox(m_QuotaRootName'imap.m_MailboxEncoding) + "\r\n"); " is 171.
Long Statement,LumiSoft.Net.IMAP.Client,GetFolderAclAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " GETACL " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 162.
Long Statement,LumiSoft.Net.IMAP.Client,DeleteFolderAclAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " DELETEACL " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + " " + TextUtils.QuoteString(m_Identifier) + "\r\n"); " is 209.
Long Statement,LumiSoft.Net.IMAP.Client,GetFolderRightsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " LISTRIGHTS " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + " " + TextUtils.QuoteString(m_Identifier) + "\r\n"); " is 210.
Long Statement,LumiSoft.Net.IMAP.Client,GetFolderMyRightsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " MYRIGHTS " + IMAP_Utils.EncodeMailbox(m_Folder'imap.m_MailboxEncoding) + "\r\n"); " is 164.
Long Statement,LumiSoft.Net.IMAP.Client,SearchAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                        if(IMAP_Utils.MustUseLiteralString(cmdPart.Value'(m_pCharset == null && imap.m_MailboxEncoding == IMAP_Mailbox_Encoding.ImapUtf8))){ " is 132.
Long Statement,LumiSoft.Net.IMAP.Client,CopyMessagesAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                    byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " UID COPY " + m_pSeqSet.ToString() + " " + IMAP_Utils.EncodeMailbox(m_TargetFolder'imap.m_MailboxEncoding) + "\r\n"); " is 199.
Long Statement,LumiSoft.Net.IMAP.Client,CopyMessagesAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,OnInitCmdLine,The length of the statement  "                    byte[] cmdLine = Encoding.UTF8.GetBytes((imap.m_CommandIndex++).ToString("d5") + " COPY " + m_pSeqSet.ToString() + " " + IMAP_Utils.EncodeMailbox(m_TargetFolder'imap.m_MailboxEncoding) + "\r\n"); " is 195.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadStringLiteral,The length of the statement  "                string size = r.SourceString.Substring(r.SourceString.LastIndexOf("{") + 1'r.SourceString.Length - r.SourceString.LastIndexOf("{") - 2); " is 136.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadData,The length of the statement  "                IMAP_Client.ReadStringLiteralAsyncOP op = new IMAP_Client.ReadStringLiteralAsyncOP(stream'Convert.ToInt32(r.ReadParenthesized())); " is 130.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadNextFetchLine,The length of the statement  "            SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[64000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_ListRights,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_ListRights.cs,ToString,The length of the statement  "            retVal.Append("* LISTRIGHTS " + IMAP_Utils.EncodeMailbox(m_FolderName'encoding) + " \"" + m_RequiredRights + "\" " + m_OptionalRights + "\r\n"); " is 144.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Namespace,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Namespace.cs,ToString,The length of the statement  "                    retVal.Append("(\"" + m_pPersonalNamespaces[i].NamespaceName + "\" \"" + m_pPersonalNamespaces[i].HierarchyDelimiter + "\")"); " is 126.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Namespace,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Namespace.cs,ToString,The length of the statement  "                    retVal.Append("(\"" + m_pOtherUsersNamespaces[i].NamespaceName + "\" \"" + m_pOtherUsersNamespaces[i].HierarchyDelimiter + "\")"); " is 130.
Long Statement,LumiSoft.Net.IMAP,IMAP_r_u_Namespace,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Namespace.cs,ToString,The length of the statement  "                    retVal.Append("(\"" + m_pSharedNamespaces[i].NamespaceName + "\" \"" + m_pSharedNamespaces[i].HierarchyDelimiter + "\")"); " is 122.
Long Statement,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,ParseDate,The length of the statement  "                    return DateTime.ParseExact(date.Trim()'new string[]{"d-MMM-yyyy"'"d-MMM-yyyy HH:mm:ss zzz"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 188.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Server,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Server.cs,OnMaxConnectionsPerIPExceeded,The length of the statement  "            session.TcpStream.WriteLine("* NO Client host rejected: too many connections from your IP(" + session.RemoteEndPoint.Address + ")' please try again later."); " is 157.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,Start,The length of the statement  "                    response = new IMAP_r_u_ServerStatus("OK"'"<" + Net_Utils.GetLocalHostName(this.LocalHostName) + "> IMAP4rev1 server ready."); " is 126.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,BeginReadCmd,The length of the statement  "                SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,BeginReadCmd,The length of the statement  "                readLineOP.Completed += new EventHandler<EventArgs<SmartStream.ReadLineAsyncOP>>(delegate(object sender'EventArgs<SmartStream.ReadLineAsyncOP> e){                 " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("BAD"'"Error: Command '" + op.LineUtf8 + "' not recognized.")); " is 125.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The length of the statement  "                        this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'op.BytesInBuffer'op.LineUtf8.Substring(0'op.LineUtf8.LastIndexOf(' ')) + " <***REMOVED***>"'this.LocalEndPoint'this.RemoteEndPoint); " is 198.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The length of the statement  "                        this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'op.BytesInBuffer'op.LineUtf8'this.LocalEndPoint'this.RemoteEndPoint); " is 135.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"BAD"'"Error: Command '" + cmd + "' not recognized.")); " is 122.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STARTTLS,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Bad sequence of commands: Session rejected.")); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STARTTLS,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"This ommand is only valid in not-authenticated state.")); " is 130.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STARTTLS,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Bad sequence of commands: Connection is already secure.")); " is 132.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STARTTLS,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"TLS not available: Server has no SSL certificate.")); " is 126.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STARTTLS,The length of the statement  "                            LogAddText("SSL negotiation completed successfully in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds."); " is 128.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LOGIN,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Bad sequence of commands: Session rejected.")); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LOGIN,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Command 'LOGIN' is disabled' use AUTHENTICATE instead.")); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Bad sequence of commands: Session rejected.")); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The length of the statement  "                        m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"BAD"'"Syntax error: Parameter 'initial-response' value must be BASE64 or contain a single character '='.")); " is 176.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The length of the statement  "                        this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'readLineOP.BytesInBuffer'"base64 auth-data"'this.LocalEndPoint'this.RemoteEndPoint); " is 150.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The length of the statement  "                            m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Invalid client response '" + clientResponse + "'.")); " is 126.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LIST,The length of the statement  "            m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"LIST Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 181.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,RENAME,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Internal server error: IMAP Server application didn't return any resposne.")); " is 151.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LSUB,The length of the statement  "            m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"LSUB Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));  " is 181.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STATUS,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"STATUS completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 183.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'new IMAP_t_orc_Unknown("NOT-UTF-8")'"Mailbox does not support UTF-8 access.")); " is 151.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                        m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_Unseen(eMessagesInfo.FirstUnseen)'"Message " + eMessagesInfo.FirstUnseen + " is the first unseen.")); " is 183.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_UidNext((int)eMessagesInfo.UidNext)'"Predicted next message UID.")); " is 150.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_UidValidity(e.FolderUID)'"Folder UID value.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_PermanentFlags(e.PermanentFlags.ToArray())'"Avaliable permanent flags.")); " is 156.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'new IMAP_t_orc_Unknown(e.IsReadOnly ? "READ-ONLY" : "READ-WRITE")'"SELECT completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 249.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'new IMAP_t_orc_Unknown("NOT-UTF-8")'"Mailbox does not support UTF-8 access.")); " is 151.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_Unseen(eMessagesInfo.FirstUnseen)'"Message " + eMessagesInfo.FirstUnseen + " is the first unseen.")); " is 183.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_UidNext((int)eMessagesInfo.UidNext)'"Predicted next message UID.")); " is 150.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_UidValidity(e.FolderUID)'"Folder UID value.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_u_ServerStatus("OK"'new IMAP_t_orc_PermanentFlags(e.PermanentFlags.ToArray())'"Avaliable permanent flags.")); " is 156.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'new IMAP_t_orc_ReadOnly()'"EXAMINE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 210.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,The length of the statement  "            IMAP_e_Append e = OnAppend(folder'flags.ToArray()'date'size'new IMAP_r_ServerStatus(cmdTag'"OK"'"APPEND command completed in %exectime seconds.")); " is 147.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Internal server error: No storage stream available.")); " is 128.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,The length of the statement  "                        SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,APPEND,The length of the statement  "                            m_pResponseSender.SendResponseAsync(IMAP_r_ServerStatus.Parse(e.Response.ToString().TrimEnd().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2")))); " is 187.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ENABLE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"BAD"'"No arguments' or syntax error in an argument.")); " is 123.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,CHECK,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,CHECK,The length of the statement  "            m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"CHECK Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 182.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,CLOSE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,CLOSE,The length of the statement  "                        OnExpunge(msgInfo'new IMAP_r_ServerStatus("dummy"'"OK"'"This is CLOSE command expunge' so this response is not used.")); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"BAD"'"Error in arguments: Invalid 'sequence-set' value.")); " is 127.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "            fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){ " is 128.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                                    byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8)); " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                                byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8)); " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                        entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                        entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false); " is 120.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                    int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position); " is 121.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                                OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used.")); " is 160.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "                            message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false); " is 121.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The length of the statement  "            WriteLine(fetchEArgs.Response.ToString().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2"))); " is 133.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The length of the statement  "                if(!(string.Equals(charset'"US-ASCII"'StringComparison.InvariantCultureIgnoreCase) || string.Equals(charset'"UTF-8"'StringComparison.InvariantCultureIgnoreCase))){ " is 163.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The length of the statement  "                    m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'new IMAP_t_orc_BadCharset(new string[]{"US-ASCII"'"UTF-8"})'"Not supported charset.")); " is 159.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The length of the statement  "                IMAP_e_Search searchArgs = new IMAP_e_Search(criteria'new IMAP_r_ServerStatus(cmdTag'"OK"'"SEARCH completed in %exectime seconds.")); " is 133.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The length of the statement  "                m_pResponseSender.SendResponseAsync(IMAP_r_ServerStatus.Parse(searchArgs.Response.ToString().TrimEnd().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2")))); " is 196.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The length of the statement  "            m_pResponseSender.SendResponseAsync(IMAP_r_ServerStatus.Parse(response.ToString().TrimEnd().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2")))); " is 185.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,COPY,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,UID,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXPUNGE,The length of the statement  "                m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"NO"'"Error: This command is valid only in selected state.")); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXPUNGE,The length of the statement  "            IMAP_r_ServerStatus response = new IMAP_r_ServerStatus(cmdTag'"OK"'"EXPUNGE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."); " is 178.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The length of the statement  "            SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The length of the statement  "            readLineOP.Completed += new EventHandler<EventArgs<SmartStream.ReadLineAsyncOP>>(delegate(object sender'EventArgs<SmartStream.ReadLineAsyncOP> e){ " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,NOOP,The length of the statement  "            m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.")); " is 181.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LOGOUT,The length of the statement  "                if(!m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"LOGOUT completed.")'byeCompletedAsyncCallback)){ " is 125.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,WriteLine,The length of the statement  "                this.Server.Logger.AddWrite(this.ID'this.AuthenticatedUserIdentity'buffer.Length'line'this.LocalEndPoint'this.RemoteEndPoint); " is 126.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ConstructParts,The length of the statement  "				contentTypeMainMediaType contentTypeSubMediaType (conentTypeParameters) contentID contentDescription contentEncoding contentSize [envelope] [contentLine] " is 153.
Long Statement,LumiSoft.Net.IMAP.Server,_CmdReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,Start,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The length of the statement  "                    m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4]; " is 126.
Long Statement,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The length of the statement  "                    m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6]; " is 126.
Long Statement,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Finish,The length of the statement  "                m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4]; " is 132.
Long Statement,LumiSoft.Net.IO,MemoryStreamEx,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\MemoryStreamEx.cs,Write,The length of the statement  "                FileStream fs = new FileStream(Path.GetTempPath() + "ls-" + Guid.NewGuid().ToString().Replace("-"'"") + ".tmp"'FileMode.Create'FileAccess.ReadWrite'FileShare.Read'32000'FileOptions.DeleteOnClose); " is 196.
Long Statement,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Read,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException); " is 124.
Long Statement,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,WriteStreamAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,WritePeriodTerminatedAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BufferRead,The length of the statement  "                m_pReadBufferOP.Completed += new EventHandler<EventArgs<BufferReadAsyncOP>>(delegate(object s'EventArgs<BufferReadAsyncOP> e){             " is 126.
Long Statement,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,BeginReadLine,The length of the statement  "                throw new ArgumentOutOfRangeException("maxCount"'"Argument 'maxCount' is bigger than than argument 'buffer' can store."); " is 121.
Long Statement,LumiSoft.Net.IO,WritePeriodTerminatedAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadLineCompleted,The length of the statement  "                                m_pOwner.BeginWrite(new byte[]{(byte)'\r''(byte)'\n''(byte)'.''(byte)'\r''(byte)'\n'}'0'5'this.SendTerminatorCompleted'null); " is 125.
Long Statement,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadLine_Completed,The length of the statement  "                        m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null); " is 134.
Long Statement,LumiSoft.Net.Mail,Mail_h_Mailbox,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The length of the statement  "                Mail_h_Mailbox h = new Mail_h_Mailbox(name_value[0]'new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized())); " is 182.
Long Statement,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,GetAttachments,The length of the statement  "                if(disposition != null && string.Equals(disposition.DispositionType'"attachment"'StringComparison.InvariantCultureIgnoreCase)){ " is 127.
Long Statement,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,GetAttachments,The length of the statement  "                else if(!includeInline && disposition != null && string.Equals(disposition.DispositionType'"inline"'StringComparison.InvariantCultureIgnoreCase)){ " is 146.
Long Statement,LumiSoft.Net.Mail,Mail_t_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_AddressList.cs,Parse,The length of the statement  "                    Mail_t_Group group = new Mail_t_Group(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null); " is 126.
Long Statement,LumiSoft.Net.Mail,Mail_t_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_AddressList.cs,Parse,The length of the statement  "                            group.Members.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized()));                     " is 148.
Long Statement,LumiSoft.Net.Mail,Mail_t_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_AddressList.cs,Parse,The length of the statement  "                    retVal.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word.Trim())) : null'r.ReadParenthesized()));                     " is 148.
Long Statement,LumiSoft.Net.Mail,Mail_t_Mailbox,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_Mailbox.cs,Parse,The length of the statement  "                    return new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word.Trim())) : null'r.ReadParenthesized()); " is 143.
Long Statement,LumiSoft.Net.Mail,Mail_t_MailboxList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_t_MailboxList.cs,Parse,The length of the statement  "                    retVal.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word.Trim())) : null'r.ReadParenthesized()));                     " is 148.
Long Statement,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,ConnectAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,SwitchToSecureAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,ReadLine,The length of the statement  "            SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 125.
Long Statement,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,BeginConnect,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(localEP'remoteEP'ssl'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 126.
Long Statement,LumiSoft.Net.TCP,ConnectAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,BeginConnectCompleted,The length of the statement  "                    m_pTcpClient.LogAddText("Connected' localEP='" + m_pSocket.LocalEndPoint.ToString() + "'; remoteEP='" + m_pSocket.RemoteEndPoint.ToString() + "'."); " is 148.
Long Statement,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,ProcessConnection,The length of the statement  "                else if(m_MaxConnectionsPerIP != 0 && m_pSessions.GetConnectionsPerIP(session.RemoteEndPoint.Address) > m_MaxConnectionsPerIP){ " is 127.
Long Statement,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,StartI,The length of the statement  "                            LogAddText("SSL negotiation completed successfully in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds."); " is 128.
Long Statement,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,SwitchToSecureAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.MIME,MIME_b,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b.cs,SetParent,The length of the statement  "            if(setContentType &&(entity.ContentType == null || !string.Equals(entity.ContentType.TypeWithSubtype'this.MediaType'StringComparison.InvariantCultureIgnoreCase))){ " is 163.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,VerifySignature,The length of the statement  "            if(!string.Equals(this.Entity.ContentType.Parameters["smime-type"]'"signed-data"'StringComparison.InvariantCultureIgnoreCase)){ " is 127.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,VerifySignature,The length of the statement  "                throw new InvalidOperationException("The VerifySignature method is only valid if Content-Type parameter smime-type=signed-data."); " is 130.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,GetSignedMime,The length of the statement  "            if(!string.Equals(this.Entity.ContentType.Parameters["smime-type"]'"signed-data"'StringComparison.InvariantCultureIgnoreCase)){ " is 127.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,GetSignedMime,The length of the statement  "                throw new InvalidOperationException("The VerifySignature method is only valid if Content-Type parameter smime-type=signed-data."); " is 130.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,GetEnvelopedMime,The length of the statement  "            if(!string.Equals(this.Entity.ContentType.Parameters["smime-type"]'"enveloped-data"'StringComparison.InvariantCultureIgnoreCase)){ " is 130.
Long Statement,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,GetEnvelopedMime,The length of the statement  "                throw new InvalidOperationException("The VerifySignature method is only valid if Content-Type parameter smime-type=enveloped-data."); " is 133.
Long Statement,LumiSoft.Net.MIME,MIME_b_Multipart,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,SetParent,The length of the statement  "            if(setContentType && (this.Entity.ContentType == null || !string.Equals(this.Entity.ContentType.TypeWithSubtype'this.MediaType'StringComparison.InvariantCultureIgnoreCase))){ " is 174.
Long Statement,LumiSoft.Net.MIME,MIME_b_Provider,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Provider.cs,Parse,The length of the statement  "            return (MIME_b)bodyType.GetMethod("Parse"'System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy).Invoke(null'new object[]{owner'defaultContentType'stream}); " is 233.
Long Statement,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,SetParent,The length of the statement  "            if(setContentType && (this.Entity.ContentType == null || !string.Equals(this.Entity.ContentType.TypeWithSubtype'this.MediaType'StringComparison.InvariantCultureIgnoreCase))){ " is 174.
Long Statement,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The length of the statement  "            if(this.Entity.ContentType == null || !string.Equals(this.Entity.ContentType.TypeWithSubtype'this.MediaType'StringComparison.InvariantCultureIgnoreCase)){ " is 154.
Long Statement,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,GetDataStream,The length of the statement  "                throw new NotSupportedException("Not supported Content-Transfer-Encoding '" + this.Entity.ContentTransferEncoding + "'."); " is 122.
Long Statement,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeTextS,The length of the statement  "                        encodedWord = Encoding.GetEncoding(m.Groups["charset"].Value).GetString(Net_Utils.FromBase64(Encoding.Default.GetBytes(m.Groups["value"].Value))); " is 146.
Long Statement,LumiSoft.Net.MIME,MIME_h_Collection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Collection.cs,Parse,The length of the statement  "            SmartStream.ReadLineAsyncOP readLineOP    = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException); " is 127.
Long Statement,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The length of the statement  "                    decodedBuffer[offset++] = byte.Parse(text[i + 1].ToString() + text[i + 2].ToString()'System.Globalization.NumberStyles.HexNumber); " is 130.
Long Statement,LumiSoft.Net.MIME,MIME_h_Unstructured,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The length of the statement  "            retVal.m_Value = MIME_Encoding_EncodedWord.DecodeTextS(MIME_Utils.UnfoldHeader(name_value.Length == 2 ? name_value[1].TrimStart() : "")); " is 137.
Long Statement,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,EncodedWord,The length of the statement  "                            retVal.Append(Encoding.GetEncoding(match.Groups["charset"].Value).GetString(Net_Utils.FromBase64(Encoding.Default.GetBytes(match.Groups["value"].Value)))); " is 155.
Long Statement,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,Phrase,The length of the statement  "                            return Encoding.GetEncoding(m.Groups["charset"].Value).GetString(Net_Utils.FromBase64(Encoding.Default.GetBytes(m.Groups["value"].Value))); " is 139.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,DateTimeToRfc2822,The length of the statement  "            return dateTime.ToString("ddd' dd MMM yyyy HH':'mm':'ss "'System.Globalization.DateTimeFormatInfo.InvariantInfo) + dateTime.ToString("zzz").Replace(":"'""); " is 156.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The length of the statement  "             *      month-name      =       "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec" " is 124.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The length of the statement  "                return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime(); " is 134.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The length of the statement  "			return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">"; " is 139.
Long Statement,LumiSoft.Net.POP3.Client,POP3_ClientMessage,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,MarkForDeletionAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_ClientMessage,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,MessageToStreamAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_ClientMessage,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,MessageTopLinesToStreamAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,MarkForDeletionAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,DeleCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,MessageToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,RetrCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,MessageToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,RetrReadResponseCompleted,The length of the statement  "                            SmartStream.ReadPeriodTerminatedAsyncOP readMsgOP = new SmartStream.ReadPeriodTerminatedAsyncOP(m_pStream'long.MaxValue'SizeExceededAction.ThrowException); " is 155.
Long Statement,LumiSoft.Net.POP3.Client,MessageTopLinesToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,TopCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,MessageTopLinesToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,TopReadResponseCompleted,The length of the statement  "                            SmartStream.ReadPeriodTerminatedAsyncOP readMsgOP = new SmartStream.ReadPeriodTerminatedAsyncOP(m_pStream'long.MaxValue'SizeExceededAction.ThrowException); " is 155.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,CapaAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,StlsAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,LoginAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,AuthAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,NoopAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,RsetAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,FillMessagesAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,ListAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UidlAsync,The length of the statement  "                throw new ArgumentException("Invalid argument 'op' state' 'op' must be in 'AsyncOP_State.WaitingForStart' state."'"op"); " is 120.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,OnConnected,The length of the statement  "            SmartStream.ReadLineAsyncOP readGreetingOP = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 134.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,BeginAuthenticate,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(userName'password'tryApop'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 131.
Long Statement,LumiSoft.Net.POP3.Client,CapaAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,CapaCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,CapaAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,CapaReadResponseCompleted,The length of the statement  "                            SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 130.
Long Statement,LumiSoft.Net.POP3.Client,StlsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,StlsCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UserCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,PassCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,AuthAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,Start,The length of the statement  "                        byte[] buffer = Encoding.UTF8.GetBytes("AUTH " + m_pSASL.Name + " " + Convert.ToBase64String(m_pSASL.Continue(null)) + "\r\n"); " is 127.
Long Statement,LumiSoft.Net.POP3.Client,AuthAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,AuthCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,NoopAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,NoopCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,RsetAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,RsetCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,ListAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,ListCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,ListAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,ListReadResponseCompleted,The length of the statement  "                            SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 130.
Long Statement,LumiSoft.Net.POP3.Client,UidlAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UidlCommandSendingCompleted,The length of the statement  "                    SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 122.
Long Statement,LumiSoft.Net.POP3.Client,UidlAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UidlReadResponseCompleted,The length of the statement  "                            SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 130.
Complex Conditional,LumiSoft.Net,TextUtils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TextUtils.cs,IsToken,The conditional expression  "!((c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A) || (c >= 0x30 && c <= 0x39))"  is complex.
Complex Conditional,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,Encode_IMAP_UTF7_String,The conditional expression  "c >= 0x20 && c <= 0x25 || c >= 0x27 && c <= 0x7E"  is complex.
Complex Conditional,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,Encode_IMAP_UTF7_String,The conditional expression  "cC >= 0x20 && cC <= 0x25 || cC >= 0x27 && cC <= 0x7E"  is complex.
Complex Conditional,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The conditional expression  "(b >= 33 && b <= 60) || (b >= 62 && b <= 126)"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The conditional expression  "b > 127 || b == '=' || b == '?' || b == '_' || b == ' '"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,ToFirstChar,The conditional expression  "peekChar == ' ' || peekChar == '\t' || peekChar == '\r' || peekChar == '\n'"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAlpha,The conditional expression  "(c >= 65 && c <= 90) || (c >= 97 && c <= 122)"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The conditional expression  "c == ' ' || c == '*' || c == '\'' || c == '%'"  is complex.
Empty Catch Block,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_DigestMd5,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_ServerMechanism_DigestMd5.cs,Continue,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_ClientException,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,OnError,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,OnTimeout,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LOGOUT,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LogAddRead,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LogAddWrite,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LogAddText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LogAddException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,Parse,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,GetAttachments,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,GetAttachments,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,LogAddRead,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,LogAddWrite,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,LogAddText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,LogAddException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,OnError,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,ConnectAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,CleanupSocketRelated,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,m_pTimer_IdleTimeout_Elapsed,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,LogAddText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,LogAddException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,VerifySignature,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,Disconnect,The method has an empty catch block.
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,StreamCopy,The following statement contains a magic number: blockSize < 1024
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 192 && ipBytes[1] == 168
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 192 && ipBytes[1] == 168
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 10
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 169 && ipBytes[1] == 254
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsPrivateIP,The following statement contains a magic number: ipBytes[0] == 169 && ipBytes[1] == 254
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,IsAscii,The following statement contains a magic number: (int)c > 127
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: MemoryStream retVal = new MemoryStream(hexData.Length / 2);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: byte[] hexPairInDecimal = new byte[2];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: h<2
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,FromHex,The following statement contains a magic number: retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: base64Chars != null && base64Chars.Length != 64
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: byte[] base64LoockUpTable = new byte[64];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: i<64
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: numberOfLineBreaks = (int)Math.Ceiling(encodedDataLength / (double)76) - 1;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: encodedDataLength > 76
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: byte[] retVal = new byte[encodedDataLength + (numberOfLineBreaks * 2)];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: position += 2;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: lineBytes >= 76
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: position += 4;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: lineBytes += 4;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64EncodeEx,The following statement contains a magic number: (data.Length - i) >= 3
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: base64Chars != null && base64Chars.Length != 64
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodeTable = new byte[128];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: i<128
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedBlock       = new byte[3];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: byte[] base64Block        = new byte[4];
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: encodedBytesCount = 3;
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: nByteInBase64Block == 4
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);
Magic Number,LumiSoft.Net,Net_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Net_Utils.cs,Base64DecodeEx,The following statement contains a magic number: decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);
Magic Number,LumiSoft.Net,TextUtils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TextUtils.cs,EscapeString,The following statement contains a magic number: char[] buffer = new char[text.Length * 2];
Magic Number,LumiSoft.Net,_MD4,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,_MD4,The following statement contains a magic number: HashSizeValue = 128;
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Managed,The following statement contains a magic number: state = new uint [4];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Managed,The following statement contains a magic number: count = new uint [2];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Managed,The following statement contains a magic number: buffer = new byte [64];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Managed,The following statement contains a magic number: digest = new byte [16];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Managed,The following statement contains a magic number: x = new uint [16];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Initialize,The following statement contains a magic number: state [2] = 0x98badcfe;
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Initialize,The following statement contains a magic number: state [3] = 0x10325476;
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Initialize,The following statement contains a magic number: Array.Clear (buffer' 0' 64);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Initialize,The following statement contains a magic number: Array.Clear (x' 0' 16);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: int index = (int) ((count [0] >> 3) & 0x3F);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: count [0] += (uint) (cbSize << 3);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: count [0] < (cbSize << 3)
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: count [1] += (uint) (cbSize >> 29);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: int partLen = 64 - index;
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashCore,The following statement contains a magic number: i + 63 < cbSize
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte [8];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: uint index = ((count [0] >> 3) & 0x3f);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,HashFinal,The following statement contains a magic number: HashCore (bits' 0' 8);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,ROL,The following statement contains a magic number: return (uint) (((x) << (n)) | ((x) >> (32-(n))));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Encode,The following statement contains a magic number: output [j+1] = (byte)(input [i] >> 8);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Encode,The following statement contains a magic number: output [j+2] = (byte)(input [i] >> 16);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Encode,The following statement contains a magic number: output [j+2] = (byte)(input [i] >> 16);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Encode,The following statement contains a magic number: output [j+3] = (byte)(input [i] >> 24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Encode,The following statement contains a magic number: output [j+3] = (byte)(input [i] >> 24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Decode,The following statement contains a magic number: output [i] = (uint) ((input [j]) | (input [j+1] << 8) | (input [j+2] << 16) | (input [j+3] << 24));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Decode,The following statement contains a magic number: output [i] = (uint) ((input [j]) | (input [j+1] << 8) | (input [j+2] << 16) | (input [j+3] << 24));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Decode,The following statement contains a magic number: output [i] = (uint) ((input [j]) | (input [j+1] << 8) | (input [j+2] << 16) | (input [j+3] << 24));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Decode,The following statement contains a magic number: output [i] = (uint) ((input [j]) | (input [j+1] << 8) | (input [j+2] << 16) | (input [j+3] << 24));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,Decode,The following statement contains a magic number: output [i] = (uint) ((input [j]) | (input [j+1] << 8) | (input [j+2] << 16) | (input [j+3] << 24));
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: uint c = state [2];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: uint d = state [3];
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[ 2]' S13);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[ 3]' S14);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[ 4]' S11);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[ 5]' S12);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[ 6]' S13);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[ 7]' S14);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[ 8]' S11);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[ 9]' S12);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[10]' S13);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[11]' S14);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[12]' S11);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[13]' S12);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[14]' S13);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[15]' S14);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 4]' S22);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[ 8]' S23);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[12]' S24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 5]' S22);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[ 9]' S23);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[13]' S24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x[ 2]' S21);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 6]' S22);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[10]' S23);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[14]' S24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x[ 3]' S21);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 7]' S22);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[11]' S23);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[15]' S24);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[ 8]' S32);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 4]' S33);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[12]' S34);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x[ 2]' S31);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[10]' S32);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 6]' S33);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[14]' S34);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[ 9]' S32);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 5]' S33);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[13]' S34);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x[ 3]' S31);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[11]' S32);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 7]' S33);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[15]' S34);
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: state [2] += c;
Magic Number,LumiSoft.Net,MD4Managed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_MD4.cs,MD4Transform,The following statement contains a magic number: state [3] += d;
Magic Number,LumiSoft.Net,HostEndPoint,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\HostEndPoint.cs,Parse,The following statement contains a magic number: string[] host_port = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.AUTH,AUTH_Gmail_OAuth1_3leg,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_Gmail_OAuth1_3leg.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow - new DateTime(1970'1'1'0'0'0'0);
Magic Number,LumiSoft.Net.AUTH,AUTH_Gmail_OAuth1_3leg,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_Gmail_OAuth1_3leg.cs,GenerateNonce,The following statement contains a magic number: return m_pRandom.Next(123400' 9999999).ToString();
Magic Number,LumiSoft.Net.AUTH,AUTH_Gmail_OAuth1_3leg,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_Gmail_OAuth1_3leg.cs,GenerateNonce,The following statement contains a magic number: return m_pRandom.Next(123400' 9999999).ToString();
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,Parse,The following statement contains a magic number: string[] name_value = parameter.Split(new char[]{'='}'2);
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest.cs,Parse,The following statement contains a magic number: name_value.Length == 2
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest_NonceManager,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\Auth_HttpDigest_NonceManager.cs,Auth_HttpDigest_NonceManager,The following statement contains a magic number: m_pTimer = new Timer(15000);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: byte[] data = new byte[32 + dom_len + host_len];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[2]  = (byte)'L';
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[3]  = (byte)'M';
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[4]  = (byte)'S';
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[5]  = (byte)'S';
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[6]  = (byte)'P';
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[7]  = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[8]  = 1;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[9]  = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[10] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[11] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [12] = 0x03;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [13] = 0xb2;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [14] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [15] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: short dom_off = (short)(32 + host_len);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [16] = (byte) dom_len;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [17] = (byte)(dom_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [17] = (byte)(dom_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [18] = data [16];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [18] = data [16];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [19] = data [17];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [19] = data [17];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [20] = (byte) dom_off;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [21] = (byte)(dom_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [21] = (byte)(dom_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [24] = (byte) host_len;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [25] = (byte)(host_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [25] = (byte)(host_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [26] = data [24];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [26] = data [24];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [27] = data [25];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [27] = data [25];
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [28] = 0x20;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [29] = 0x00;
Magic Number,LumiSoft.Net.AUTH,MessageType1,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: Buffer.BlockCopy(host'0'data'32'host.Length);
Magic Number,LumiSoft.Net.AUTH,MessageType2,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,MessageType2,The following statement contains a magic number: nonce.Length != 8
Magic Number,LumiSoft.Net.AUTH,MessageType2,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,Parse,The following statement contains a magic number: byte[] nonce = new byte[8];
Magic Number,LumiSoft.Net.AUTH,MessageType2,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,Parse,The following statement contains a magic number: Buffer.BlockCopy(data'24'nonce'0'8);
Magic Number,LumiSoft.Net.AUTH,MessageType2,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,Parse,The following statement contains a magic number: Buffer.BlockCopy(data'24'nonce'0'8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: byte[] data = new byte[64 + domain.Length + user.Length + host.Length + 24 + 24];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: byte[] data = new byte[64 + domain.Length + user.Length + host.Length + 24 + 24];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: byte[] data = new byte[64 + domain.Length + user.Length + host.Length + 24 + 24];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[2]  = (byte)'L';
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[3]  = (byte)'M';
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[4]  = (byte)'S';
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[5]  = (byte)'S';
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[6]  = (byte)'P';
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[7]  = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[8]  = 3;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[8]  = 3;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[9]  = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[10] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data[11] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: short lmresp_off = (short)(64 + domain.Length + user.Length + host.Length);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [12] = (byte) 0x18;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [13] = (byte) 0x00;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [14] = (byte) 0x18;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [15] = (byte) 0x00;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [16] = (byte) lmresp_off;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [17] = (byte)(lmresp_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [17] = (byte)(lmresp_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: short ntresp_off = (short)(lmresp_off + 24);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [20] = (byte) 0x18;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [21] = (byte) 0x00;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [22] = (byte) 0x18;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [23] = (byte) 0x00;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [24] = (byte) ntresp_off;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [25] = (byte)(ntresp_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [25] = (byte)(ntresp_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: short dom_off = 64;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [28] = (byte) dom_len;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [29] = (byte)(dom_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [29] = (byte)(dom_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [30] = data [28];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [30] = data [28];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [31] = data [29];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [31] = data [29];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [32] = (byte) dom_off;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [33] = (byte)(dom_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [33] = (byte)(dom_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [36] = (byte) uname_len;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [37] = (byte)(uname_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [37] = (byte)(uname_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [38] = data [36];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [38] = data [36];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [39] = data [37];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [39] = data [37];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [40] = (byte) uname_off;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [41] = (byte)(uname_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [41] = (byte)(uname_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [44] = (byte) host_len;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [45] = (byte)(host_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [45] = (byte)(host_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [46] = data [44];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [46] = data [44];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [47] = data [45];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [47] = data [45];
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [48] = (byte) host_off;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [49] = (byte)(host_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [49] = (byte)(host_off >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [56] = (byte) msg_len;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [57] = (byte)(msg_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [57] = (byte)(msg_len >> 8);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [60] = 0x01;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [61] = 0x82;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [62] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: data [63] = 0;
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: Buffer.BlockCopy(m_LM'0'data'lmresp_off' 24);
Magic Number,LumiSoft.Net.AUTH,MessageType3,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,ToByte,The following statement contains a magic number: Buffer.BlockCopy(m_NT'0'data'ntresp_off' 24);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateLM,The following statement contains a magic number: byte[] lmBuffer     = new byte[21];
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateLM,The following statement contains a magic number: Buffer.BlockCopy(nullEncMagic'0'lmBuffer'0'8);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateLM,The following statement contains a magic number: Buffer.BlockCopy(nullEncMagic'0'lmBuffer'8'8);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateLM,The following statement contains a magic number: Buffer.BlockCopy(nullEncMagic'0'lmBuffer'8'8);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateLM,The following statement contains a magic number: password.Length < 8
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateNT,The following statement contains a magic number: byte[] ntBuffer = new byte[21];
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,CalculateNT,The following statement contains a magic number: Buffer.BlockCopy(hash'0'ntBuffer'0'16);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: byte[] response = new byte[24];
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: ct.TransformBlock(nonce'0'8'response'0);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: des.Key = setup_des_key(data'7);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: ct.TransformBlock(nonce'0'8'response'8);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: ct.TransformBlock(nonce'0'8'response'8);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: des.Key = setup_des_key(data'14);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: ct.TransformBlock(nonce'0'8'response'16);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,calc_resp,The following statement contains a magic number: ct.TransformBlock(nonce'0'8'response'16);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: byte[] key = new byte [8];
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [1] = (byte) ((key56bits [position] << 7) | (key56bits [position + 1] >> 1));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [7] = (byte) (key56bits [position + 6] << 1);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,setup_des_key,The following statement contains a magic number: key [7] = (byte) (key56bits [position + 6] << 1);
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,PasswordToKey,The following statement contains a magic number: byte[] key7 = new byte[7];
Magic Number,LumiSoft.Net.AUTH,NTLM_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_Client_Ntlm.cs,PasswordToKey,The following statement contains a magic number: int len = System.Math.Min(password.Length - position' 7);
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Challenge,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Challenge.cs,Parse,The following statement contains a magic number: string[] name_value = parameter.Split(new char[]{'='}'2);
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Challenge,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Challenge.cs,Parse,The following statement contains a magic number: name_value.Length == 2
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,Parse,The following statement contains a magic number: string[] name_value = parameter.Split(new char[]{'='}'2);
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_DigestMD5_Response,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\AUTH\AUTH_SASL_DigestMD5_Response.cs,Parse,The following statement contains a magic number: name_value.Length == 2
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,GetList,The following statement contains a magic number: byte[] lineBuffer = new byte[8000];
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Port,The following statement contains a magic number: WriteLine("PORT " + ip.ToString().Replace("."'"'") + "'" + (m_pDataConnection.LocalEndPoint.Port >> 8) + "'" + (m_pDataConnection.LocalEndPoint.Port & 0xFF));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,ReadResponse,The following statement contains a magic number: string responseCode = response.Substring(0'3);
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,ReadResponse,The following statement contains a magic number: response.Length >= 4 && response[3] == '-'
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,ReadResponse,The following statement contains a magic number: response.Length >= 4 && response[3] == '-'
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,OnConnected,The following statement contains a magic number: greetText.Append(line.Substring(4));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,OnConnected,The following statement contains a magic number: greetText.AppendLine(line.Substring(4));
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_Client.cs,TransferStream,The following statement contains a magic number: byte[] buffer           = new byte[32000];
Magic Number,LumiSoft.Net.FTP.Client,FTP_ClientException,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.FTP.Client,FTP_ClientException,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The following statement contains a magic number: code_text.Length == 2
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponse,The following statement contains a magic number: string[] parts = responseLine.Split(new char[]{' '}'4);
Magic Number,LumiSoft.Net.IMAP.Client,ReadResponseAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,ReadResponseAsyncOP,The following statement contains a magic number: m_pReadLineOP = new SmartStream.ReadLineAsyncOP(new byte[64000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,_FetchResponseReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The following statement contains a magic number: m_pFetchReader = new StringReader(m_FetchLine.Split(new char[]{' '}'4)[3]);
Magic Number,LumiSoft.Net.IMAP.Client,_FetchResponseReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The following statement contains a magic number: m_pFetchReader = new StringReader(m_FetchLine.Split(new char[]{' '}'4)[3]);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_ServerStatus.cs,Parse,The following statement contains a magic number: string[] parts        = responseLine.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_ServerStatus.cs,Parse,The following statement contains a magic number: string   responseText = parts.Length == 2 ? parts[1] : null;
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ParseDataItems,The following statement contains a magic number: IMAP_t_Fetch_r_i_Body dataItem = new IMAP_t_Fetch_r_i_Body(section'offset'new MemoryStreamEx(32000));
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadStringLiteral,The following statement contains a magic number: string size = r.SourceString.Substring(r.SourceString.LastIndexOf("{") + 1'r.SourceString.Length - r.SourceString.LastIndexOf("{") - 2);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ReadNextFetchLine,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[64000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Flags,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Flags.cs,Parse,The following statement contains a magic number: StringReader r = new StringReader(response.Split(new char[]{' '}'3)[2]);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Flags,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Flags.cs,Parse,The following statement contains a magic number: StringReader r = new StringReader(response.Split(new char[]{' '}'3)[2]);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Quota,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Quota.cs,Parse,The following statement contains a magic number: entries.Add(new IMAP_Quota_Entry(items[i]'Convert.ToInt64(items[i + 1])'Convert.ToInt64(items[i + 2])));
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Search,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Search.cs,Parse,The following statement contains a magic number: response.Split(new char[]{' '}'3)[2].Trim().Split(' ')
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Search,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Search.cs,Parse,The following statement contains a magic number: response.Split(new char[]{' '}'3)[2].Trim().Split(' ')
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_Search,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Search.cs,Parse,The following statement contains a magic number: response.Split(' ').Length > 2
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_ServerStatus.cs,Parse,The following statement contains a magic number: string[]   parts        = responseLine.Split(new char[]{' '}'3);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_ServerStatus.cs,Parse,The following statement contains a magic number: string     responseText = parts[2];
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_ServerStatus.cs,Parse,The following statement contains a magic number: StringReader r = new StringReader(parts[2]);
Magic Number,LumiSoft.Net.IMAP,IMAP_r_u_ServerStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_ServerStatus.cs,Parse,The following statement contains a magic number: parts[2].StartsWith("[")
Magic Number,LumiSoft.Net.IMAP,IMAP_t_Fetch_r_i_Envelope,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_Fetch_r_i_Envelope.cs,ReadAndDecodeWord,The following statement contains a magic number: r.ReadSpecifiedLength(2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_MsgFlags,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_MsgFlags.cs,Parse,The following statement contains a magic number: value = value.Substring(1'value.Length - 2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Alert,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Alert.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Alert,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Alert.cs,Parse,The following statement contains a magic number: return new IMAP_t_orc_Alert(code_value.Length == 2 ? code_value[1] : "");
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_AppendUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_AppendUid.cs,Parse,The following statement contains a magic number: string[] code_mailboxUid_msgUid = value.Split(new char[]{' '}'3);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_AppendUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_AppendUid.cs,Parse,The following statement contains a magic number: code_mailboxUid_msgUid.Length != 3
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_AppendUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_AppendUid.cs,Parse,The following statement contains a magic number: return new IMAP_t_orc_AppendUid(Convert.ToInt64(code_mailboxUid_msgUid[1])'Convert.ToInt32(code_mailboxUid_msgUid[2]));
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_BadCharset,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_BadCharset.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Capability,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Capability.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Capability,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Capability.cs,Parse,The following statement contains a magic number: code_value.Length != 2
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_CopyUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_CopyUid.cs,Parse,The following statement contains a magic number: string[] code_mailboxUid_sourceSeqSet_targetSeqSet = value.Split(new char[]{' '}'4);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_CopyUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_CopyUid.cs,Parse,The following statement contains a magic number: code_mailboxUid_sourceSeqSet_targetSeqSet.Length != 4
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_CopyUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_CopyUid.cs,Parse,The following statement contains a magic number: return new IMAP_t_orc_CopyUid(                  Convert.ToInt64(code_mailboxUid_sourceSeqSet_targetSeqSet[1])'                  IMAP_t_SeqSet.Parse(code_mailboxUid_sourceSeqSet_targetSeqSet[2])'                  IMAP_t_SeqSet.Parse(code_mailboxUid_sourceSeqSet_targetSeqSet[3])              );
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_CopyUid,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_CopyUid.cs,Parse,The following statement contains a magic number: return new IMAP_t_orc_CopyUid(                  Convert.ToInt64(code_mailboxUid_sourceSeqSet_targetSeqSet[1])'                  IMAP_t_SeqSet.Parse(code_mailboxUid_sourceSeqSet_targetSeqSet[2])'                  IMAP_t_SeqSet.Parse(code_mailboxUid_sourceSeqSet_targetSeqSet[3])              );
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Parse,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Parse.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Parse,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Parse.cs,Parse,The following statement contains a magic number: return new IMAP_t_orc_Parse(code_value.Length == 2 ? code_value[1] : "");
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_PermanentFlags,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_PermanentFlags.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_PermanentFlags,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_PermanentFlags.cs,Parse,The following statement contains a magic number: code_value.Length != 2
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_ReadOnly,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_ReadOnly.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_ReadWrite,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_ReadWrite.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_TryCreate,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_TryCreate.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_UidNext,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_UidNext.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_UidNext,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_UidNext.cs,Parse,The following statement contains a magic number: code_value.Length != 2
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_UidValidity,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_UidValidity.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_UidValidity,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_UidValidity.cs,Parse,The following statement contains a magic number: code_value.Length != 2
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Unseen,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Unseen.cs,Parse,The following statement contains a magic number: string[] code_value = value.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_t_orc_Unseen,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_orc_Unseen.cs,Parse,The following statement contains a magic number: code_value.Length != 2
Magic Number,LumiSoft.Net.IMAP,IMAP_t_SeqSet,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_t_SeqSet.cs,Parse,The following statement contains a magic number: rangeParts.Length == 2
Magic Number,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,Encode_IMAP_UTF7_String,The following statement contains a magic number: retVal.Write(new byte[]{(byte)'&''(byte)'-'}'0'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,DecodeMailbox,The following statement contains a magic number: return mailbox.Substring(2'mailbox.Length - 3);
Magic Number,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,DecodeMailbox,The following statement contains a magic number: return mailbox.Substring(2'mailbox.Length - 3);
Magic Number,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,MustUseLiteralString,The following statement contains a magic number: !utf8StringSupported && c > 126
Magic Number,LumiSoft.Net.IMAP,IMAP_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_Utils.cs,ImapStringToByte,The following statement contains a magic number: c > 127
Magic Number,LumiSoft.Net.IMAP,IMAP_SequenceSet,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\_Obsolete\IMAP\IMAP_SequenceSet.cs,Parse,The following statement contains a magic number: rangeParts.Length == 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,BeginReadCmd,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The following statement contains a magic number: string[] cmd_args = Encoding.UTF8.GetString(op.Buffer'0'op.LineBytesInBuffer).Split(new char[]{' '}'3);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The following statement contains a magic number: cmd_args.Length < 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The following statement contains a magic number: string   args     = cmd_args.Length == 3 ? cmd_args[2] : "";
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,ProcessCmd,The following statement contains a magic number: string   args     = cmd_args.Length == 3 ? cmd_args[2] : "";
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LOGIN,The following statement contains a magic number: user_pass.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The following statement contains a magic number: arguments.Length > 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,AUTHENTICATE,The following statement contains a magic number: arguments.Length == 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LIST,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LIST,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"LIST Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,RENAME,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LSUB,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LSUB,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"LSUB Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STATUS,The following statement contains a magic number: string[] parts = TextUtils.SplitQuotedString(cmdText'' ''false'2);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STATUS,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The following statement contains a magic number: args.Length >= 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SELECT,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'new IMAP_t_orc_Unknown(e.IsReadOnly ? "READ-ONLY" : "READ-WRITE")'"SELECT completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The following statement contains a magic number: args.Length >= 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXAMINE,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'new IMAP_t_orc_ReadOnly()'"EXAMINE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The following statement contains a magic number: parts.Length != 3
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The following statement contains a magic number: string rights = parts[2];
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,DELETEACL,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,LISTRIGHTS,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,CHECK,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"CHECK Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: string[] parts = cmdText.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: dataItemsString = dataItemsString.Substring(1'dataItemsString.Length - 2).Trim();
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: fetchEArgs.NewMessageData += new EventHandler<IMAP_e_Fetch.e_NewMessageData>(delegate(object s'IMAP_e_Fetch.e_NewMessageData e){                  /*                  // Build response data-items.                  List<IMAP_t_Fetch_r_i> responseItems = new List<IMAP_t_Fetch_r_i>();                  foreach(IMAP_t_Fetch_i dataItem in dataItems){                      if(dataItem is IMAP_t_Fetch_i_BodyS){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Body){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Envelope){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Flags){                          responseItems.Add(new IMAP_t_Fetch_r_i_Flags(new IMAP_t_MsgFlags(e.MessageInfo.Flags)));                      }                      else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          responseItems.Add(new IMAP_t_Fetch_r_i_InternalDate(e.MessageInfo.InternalDate));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          responseItems.Add(new IMAP_t_Fetch_r_i_Rfc822Size(e.MessageInfo.Size));                      }                      else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          //responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                      else if(dataItem is IMAP_t_Fetch_i_Uid){                          responseItems.Add(new IMAP_t_Fetch_r_i_Uid(e.MessageInfo.UID));                      }                  }*/                    StringBuilder reponseBuffer = new StringBuilder();                  reponseBuffer.Append("* " + e.MessageInfo.SeqNo + " FETCH (");                    Mail_Message message = e.MessageData;                    // Return requested data-items for the returned message.                  for(int i=0;i<dataItems.Count;i++){                      IMAP_t_Fetch_i dataItem = dataItems[i];                                                              // Add data-items separator.                      if(i > 0){                          reponseBuffer.Append(" ");                      }                                                               #region BODY                        if(dataItem is IMAP_t_Fetch_i_BodyS){                          reponseBuffer.Append(ConstructBodyStructure(message'false));                      }                        #endregion                        #region BODY[<section>]<<partial>> and BODY.PEEK[<section>]<<partial>>                        else if(dataItem is IMAP_t_Fetch_i_Body || dataItem is IMAP_t_Fetch_i_BodyPeek){                          string section  = "";                          int    offset   = -1;                          int    maxCount = -1;                          if(dataItem is IMAP_t_Fetch_i_Body){                              section  = ((IMAP_t_Fetch_i_Body)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_Body)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_Body)dataItem).MaxCount;                          }                          else{                              section  = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Section;                              offset   = ((IMAP_t_Fetch_i_BodyPeek)dataItem).Offset;                              maxCount = ((IMAP_t_Fetch_i_BodyPeek)dataItem).MaxCount;                          }                            using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              // Empty section' full message wanted.                              if(string.IsNullOrEmpty(section)){                                  message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                  tmpFs.Position = 0;                              }                              // Message data part wanted.                              else{                                  // Get specified MIME part.                                  MIME_Entity entity = GetMimeEntity(message'ParsePartNumberFromSection(section));                                  if(entity != null){                                      string partSpecifier = ParsePartSpecifierFromSection(section);                                        #region HEADER                                        if(string.Equals(partSpecifier'"HEADER"'StringComparison.InvariantCultureIgnoreCase)){                                                                                  entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS"'StringComparison.InvariantCultureIgnoreCase)){                                                                      string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(string filedName in fieldNames){                                              MIME_h[] fields = entity.Header[filedName];                                              if(fields != null){                                                  foreach(MIME_h field in fields){                                                      byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                      tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                                  }                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length > 0){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region HEADER.FIELDS.NOT                                        else if(string.Equals(partSpecifier'"HEADER.FIELDS.NOT"'StringComparison.InvariantCultureIgnoreCase)){                                          string   fieldsString = section.Split(new char[]{' '}'2)[1];                                          string[] fieldNames   = fieldsString.Substring(1'fieldsString.Length - 2).Split(' ');                                          foreach(MIME_h field in entity.Header){                                              bool contains = false;                                              foreach(string fieldName in fieldNames){                                                  if(string.Equals(field.Name'fieldName'StringComparison.InvariantCultureIgnoreCase)){                                                      contains = true;                                                      break;                                                  }                                              }                                                if(!contains){                                                  byte[] fieldBytes = Encoding.UTF8.GetBytes(field.ToString(new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8));                                                  tmpFs.Write(fieldBytes'0'fieldBytes.Length);                                              }                                          }                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region MIME                                        else if(string.Equals(partSpecifier'"MIME"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Header.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                                          // All header fetches must include header terminator(CRLF).                                          if(tmpFs.Length >0 ){                                              tmpFs.WriteByte((byte)'\r');                                              tmpFs.WriteByte((byte)'\n');                                          }                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region TEXT                                        else if(string.Equals(partSpecifier'"TEXT"'StringComparison.InvariantCultureIgnoreCase)){                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                        #region part-number only                                        else{                                          entity.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                                          tmpFs.Position = 0;                                      }                                        #endregion                                  }                              }                                #region Send data                                // All data wanted.                              if(offset < 0){                                  reponseBuffer.Append("BODY[" + section + "] {" + tmpFs.Length + "}\r\n");                                  WriteLine(reponseBuffer.ToString());                                  reponseBuffer = new StringBuilder();                                    this.TcpStream.WriteStream(tmpFs);                                  LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                              }                              // Partial data wanted.                              else{                                                                      // Offet out of range.                                  if(offset >= tmpFs.Length){                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> \"\"");                                  }                                  else{                                      tmpFs.Position = offset;                                                                                int count = maxCount > -1 ? (int)Math.Min(maxCount'tmpFs.Length - tmpFs.Position) : (int)(tmpFs.Length - tmpFs.Position);                                      reponseBuffer.Append("BODY[" + section + "]<" + offset + "> {" + count + "}");                                      WriteLine(reponseBuffer.ToString());                                      reponseBuffer = new StringBuilder();                                        this.TcpStream.WriteStream(tmpFs'count);                                      LogAddWrite(tmpFs.Length'"Wrote " + count + " bytes.");                                  }                              }                                #endregion                          }                            // Set Seen flag.                          if(!m_pSelectedFolder.IsReadOnly && dataItem is IMAP_t_Fetch_i_Body){                              try{                                  OnStore(e.MessageInfo'IMAP_Flags_SetType.Add'new string[]{"Seen"}'new IMAP_r_ServerStatus("dummy"'"OK"'"This is FETCH set Seen flag' this response not used."));                              }                              catch{                              }                          }                      }                        #endregion                        #region BODYSTRUCTURE                        else if(dataItem is IMAP_t_Fetch_i_BodyStructure){                          reponseBuffer.Append(ConstructBodyStructure(message'true));                      }                        #endregion                        #region ENVELOPE                        else if(dataItem is IMAP_t_Fetch_i_Envelope){                          reponseBuffer.Append(IMAP_t_Fetch_r_i_Envelope.ConstructEnvelope(message));                      }                        #endregion                        #region FLAGS                        else if(dataItem is IMAP_t_Fetch_i_Flags){                          reponseBuffer.Append("FLAGS " + e.MessageInfo.FlagsToImapString());                      }                        #endregion                        #region INTERNALDATE                        else if(dataItem is IMAP_t_Fetch_i_InternalDate){                          reponseBuffer.Append("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(e.MessageInfo.InternalDate) + "\"");                      }                        #endregion                        #region RFC822                        else if(dataItem is IMAP_t_Fetch_i_Rfc822){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822 {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region RFC822.HEADER                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Header){                          MemoryStream ms = new MemoryStream();                          message.Header.ToStream(ms'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8);                          ms.Position = 0;                            reponseBuffer.Append("RFC822.HEADER {" + ms.Length + "}\r\n");                          WriteLine(reponseBuffer.ToString());                          reponseBuffer = new StringBuilder();                            this.TcpStream.WriteStream(ms);                          LogAddWrite(ms.Length'"Wrote " + ms.Length + " bytes.");                      }                        #endregion                        #region RFC822.SIZE                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Size){                          reponseBuffer.Append("RFC822.SIZE " + e.MessageInfo.Size);                      }                        #endregion                        #region RFC822.TEXT                        else if(dataItem is IMAP_t_Fetch_i_Rfc822Text){                          using(MemoryStreamEx tmpFs = new MemoryStreamEx(32000)){                              message.Body.ToStream(tmpFs'new MIME_Encoding_EncodedWord(MIME_EncodedWordEncoding.B'Encoding.UTF8)'Encoding.UTF8'false);                              tmpFs.Position = 0;                                reponseBuffer.Append("RFC822.TEXT {" + tmpFs.Length + "}\r\n");                              WriteLine(reponseBuffer.ToString());                              reponseBuffer = new StringBuilder();                                this.TcpStream.WriteStream(tmpFs);                              LogAddWrite(tmpFs.Length'"Wrote " + tmpFs.Length + " bytes.");                          }                      }                        #endregion                        #region UID                        else if(dataItem is IMAP_t_Fetch_i_Uid){                           reponseBuffer.Append("UID " + e.MessageInfo.UID);                      }                        #endregion                  }                    reponseBuffer.Append(")\r\n");                              WriteLine(reponseBuffer.ToString());              });
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,FETCH,The following statement contains a magic number: WriteLine(fetchEArgs.Response.ToString().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2")));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,SEARCH,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(IMAP_r_ServerStatus.Parse(searchArgs.Response.ToString().TrimEnd().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2"))));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: string[] parts = cmdText.Split(new char[]{' '}'3);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: parts.Length != 3
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: !(parts[2].StartsWith("(") && parts[2].EndsWith(")"))
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: !(parts[2].StartsWith("(") && parts[2].EndsWith(")"))
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: parts[2].Substring(1'parts[2].Length - 2).Split(' ')
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: parts[2].Substring(1'parts[2].Length - 2).Split(' ')
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: parts[2].Substring(1'parts[2].Length - 2).Split(' ')
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,STORE,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(IMAP_r_ServerStatus.Parse(response.ToString().TrimEnd().Replace("%exectime"'((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2"))));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,COPY,The following statement contains a magic number: string[] parts = cmdText.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,COPY,The following statement contains a magic number: parts.Length != 2
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,UID,The following statement contains a magic number: string[] cmd_cmtText = cmdText.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,EXPUNGE,The following statement contains a magic number: IMAP_r_ServerStatus response = new IMAP_r_ServerStatus(cmdTag'"OK"'"EXPUNGE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds.");
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The following statement contains a magic number: TimerEx timer = new TimerEx(30000'true);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,IDLE,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,NOOP,The following statement contains a magic number: m_pResponseSender.SendResponseAsync(new IMAP_r_ServerStatus(cmdTag'"OK"'"NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds."));
Magic Number,LumiSoft.Net.IMAP.Server,_CmdReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,Start,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Server,_CmdReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Server\IMAP_Session.cs,GetLiteralSize,The following statement contains a magic number: return Convert.ToInt32(cmdLine.Substring(cmdLine.LastIndexOf('{') + 1'cmdLine.Length - cmdLine.LastIndexOf('{') - 2));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: byte[] base64Block   = new byte[4];
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: offsetInBlock < 2
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: offsetInBlock == 2
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: offsetInBlock < 4
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)((base64Block[0] << 2) | (base64Block[1] >> 4));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)((base64Block[0] << 2) | (base64Block[1] >> 4));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[1] & 0xF) << 4) | (base64Block[2] >> 2));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[1] & 0xF) << 4) | (base64Block[2] >> 2));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[1] & 0xF) << 4) | (base64Block[2] >> 2));
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: offsetInBlock > 2
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[2] & 0x3) << 6) | base64Block[3]);
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[2] & 0x3) << 6) | base64Block[3]);
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: buffer[decodedOffset++] = (byte)(((base64Block[2] & 0x3) << 6) | base64Block[3]);
Magic Number,LumiSoft.Net.IO,Base64,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64.cs,Decode,The following statement contains a magic number: offsetInBlock > 3
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Base64Stream,The following statement contains a magic number: m_pDecodedBlock = new byte[8000];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: byte[] readBuffer = new byte[m_pDecodedBlock.Length + 3];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: int readedCount = m_pStream.Read(readBuffer'0'readBuffer.Length - 3);
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: (base64Count % 4) != 0
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_EncodeBufferOffset >= (encodeBufSize - 2)
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: m_OffsetInEncode3x8Block == 3
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];
Magic Number,LumiSoft.Net.IO,Base64Stream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];
Magic Number,LumiSoft.Net.IO,MemoryStreamEx,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\MemoryStreamEx.cs,Write,The following statement contains a magic number: FileStream fs = new FileStream(Path.GetTempPath() + "ls-" + Guid.NewGuid().ToString().Replace("-"'"") + ".tmp"'FileMode.Create'FileAccess.ReadWrite'FileShare.Read'32000'FileOptions.DeleteOnClose);
Magic Number,LumiSoft.Net.IO,MemoryStreamEx,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\MemoryStreamEx.cs,Write,The following statement contains a magic number: Net_Utils.StreamCopy(m_pStream'fs'8000);
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,QuotedPrintableStream,The following statement contains a magic number: m_pDecodedBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,QuotedPrintableStream,The following statement contains a magic number: m_pEncodedBuffer = new byte[78];
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Read,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: m_EncodedCount >= 75
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: (b >= 33 && b <= 60) || (b >= 62 && b <= 126)
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: (b >= 33 && b <= 60) || (b >= 62 && b <= 126)
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: (b >= 33 && b <= 60) || (b >= 62 && b <= 126)
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: (b >= 33 && b <= 60) || (b >= 62 && b <= 126)
Magic Number,LumiSoft.Net.IO,SmartStream,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadAll,The following statement contains a magic number: byte[] buffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,ReadPeriodTerminatedAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadPeriodTerminatedAsyncOP,The following statement contains a magic number: m_pReadLineOP = new ReadLineAsyncOP(new byte[32000]'exceededAction);
Magic Number,LumiSoft.Net.IO,WriteStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,WriteStreamAsyncOP,The following statement contains a magic number: m_pBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,WritePeriodTerminatedAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,Start,The following statement contains a magic number: m_pReadLineOP = new ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The following statement contains a magic number: m_pLineBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The following statement contains a magic number: m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);
Magic Number,LumiSoft.Net.Mail,Mail_h_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_AddressList.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_AddressList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_AddressList.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.Mail,Mail_h_Mailbox,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_Mailbox,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.Mail,Mail_h_MailboxList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_MailboxList.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_MailboxList,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_MailboxList.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.Mail,Mail_h_ReturnPath,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_ReturnPath.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_ReturnPath,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_h_ReturnPath.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.Mail,Mail_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\Mail\Mail_Message.cs,Clone,The following statement contains a magic number: MemoryStreamEx ms = new MemoryStreamEx(64000);
Magic Number,LumiSoft.Net.TCP,TCP_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Client.cs,ReadLine,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,Start,The following statement contains a magic number: m_pTimer_IdleTimeout = new TimerEx(30000'true);
Magic Number,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,StartListen,The following statement contains a magic number: socket.Listen(100);
Magic Number,LumiSoft.Net.TCP,TCP_Server<T>,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_Server.cs,StartListen,The following statement contains a magic number: i<10
Magic Number,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,Init,The following statement contains a magic number: socket.ReceiveBufferSize = 32000;
Magic Number,LumiSoft.Net.TCP,TCP_ServerSession,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\TCP\TCP_ServerSession.cs,Init,The following statement contains a magic number: socket.SendBufferSize = 32000;
Magic Number,LumiSoft.Net.MIME,MIME_b_Application,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Application.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_ApplicationPkcs7Mime,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_ApplicationPkcs7Mime.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Audio,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Audio.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Image,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Image.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Message,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Message.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_MessageDeliveryStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_MessageDeliveryStatus.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'msBuffer'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_MessageDeliveryStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_MessageDeliveryStatus.cs,ToStream,The following statement contains a magic number: stream.Write(new byte[]{(byte)'\r''(byte)'\n'}'0'2);
Magic Number,LumiSoft.Net.MIME,MIME_b_MessageDeliveryStatus,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_MessageDeliveryStatus.cs,ToStream,The following statement contains a magic number: stream.Write(new byte[]{(byte)'\r''(byte)'\n'}'0'2);
Magic Number,LumiSoft.Net.MIME,_MultipartReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,_MultipartReader,The following statement contains a magic number: m_pReadLineOP   = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.MIME,_DataLine,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,_DataLine,The following statement contains a magic number: m_pLineBuffer = new byte[32000];
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,MIME_b_SinglepartBase,The following statement contains a magic number: m_pEncodedDataStream = new MemoryStreamEx(32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,ToStream,The following statement contains a magic number: Net_Utils.StreamCopy(GetEncodedDataStream()'stream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The following statement contains a magic number: Net_Utils.StreamCopy(stream'm_pEncodedDataStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_SinglepartBase.cs,SetData,The following statement contains a magic number: Net_Utils.StreamCopy(stream'encoder'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Text,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Text.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Unknown,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Unknown.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Video,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Video.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Encoding_EncodedWord.cs,MustEncode,The following statement contains a magic number: c > 127
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: int countReaded = Math.Min(30'text.Length - index);
Magic Number,LumiSoft.Net.MIME,MIME_h,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h.cs,ValueToString,The following statement contains a magic number: return ToString(wordEncoder'parmetersCharset).Split(new char[]{':'}'2)[1].TrimStart();
Magic Number,LumiSoft.Net.MIME,MIME_h_Collection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Collection.cs,Parse,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP    = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentDisposition,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentDisposition.cs,Parse,The following statement contains a magic number: string[] name_value = valueDecoded.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentDisposition,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentDisposition.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentType.cs,MIME_h_ContentType,The following statement contains a magic number: string[] type_subtype = mediaType.Split(new char[]{'/''}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentType.cs,MIME_h_ContentType,The following statement contains a magic number: type_subtype.Length == 2
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentType.cs,Parse,The following statement contains a magic number: string[] name_value = valueDecoded.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ContentType.cs,Parse,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.MIME,MIME_h_Provider,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Provider.cs,Parse,The following statement contains a magic number: string[] name_value  = field.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: string[] name_value = part.Trim().Split(new char[]{'='}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: name_value.Length == 2
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: bool     encoded   = nameParts.Length == 3;
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: nameParts.Length >= 2
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: nameParts.Length < 2 && parameters.ContainsKey(nameParts[0])
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The following statement contains a magic number: decodedBuffer[offset++] = byte.Parse(text[i + 1].ToString() + text[i + 2].ToString()'System.Globalization.NumberStyles.HexNumber);
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The following statement contains a magic number: i += 2;
Magic Number,LumiSoft.Net.MIME,_ParameterBuilder,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_ParameterCollection.cs,AddPart,The following statement contains a magic number: value = charset_language_value[2];
Magic Number,LumiSoft.Net.MIME,MIME_h_Unparsed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Unparsed.cs,MIME_h_Unparsed,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_Unparsed,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Unparsed.cs,MIME_h_Unparsed,The following statement contains a magic number: name_value.Length != 2
Magic Number,LumiSoft.Net.MIME,MIME_h_Unstructured,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_Unstructured,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The following statement contains a magic number: retVal.m_Value = MIME_Encoding_EncodedWord.DecodeTextS(MIME_Utils.UnfoldHeader(name_value.Length == 2 ? name_value[1].TrimStart() : ""));
Magic Number,LumiSoft.Net.MIME,MIME_Entity,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Entity.cs,ToStream,The following statement contains a magic number: stream.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsToken,The following statement contains a magic number: c <= 31 || c == 127
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsToken,The following statement contains a magic number: c <= 31 || c == 127
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The following statement contains a magic number: c <= 31 || c > 127
Magic Number,LumiSoft.Net.MIME,MIME_Reader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The following statement contains a magic number: c <= 31 || c > 127
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: v.Length == 3
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,QuotedPrintableDecode,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,QuotedPrintableDecode,The following statement contains a magic number: int nCount = msSourceStream.Read(buffer'0'2);
Magic Number,LumiSoft.Net.MIME,MIME_Utils,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_Utils.cs,QuotedPrintableDecode,The following statement contains a magic number: nCount == 2
Magic Number,LumiSoft.Net.POP3.Client,POP3_ClientException,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientException.cs,POP3_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{ }'2);
Magic Number,LumiSoft.Net.POP3.Client,POP3_ClientException,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientException.cs,POP3_ClientException,The following statement contains a magic number: code_text.Length == 2
Magic Number,LumiSoft.Net.POP3.Client,MarkForDeletionAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,DeleCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,MessageToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,RetrCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,MessageTopLinesToStreamAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_ClientMessage.cs,TopCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,POP3_Client,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,OnConnected,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readGreetingOP = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,CapaAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,CapaCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,StlsAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,StlsCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UserCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,PassCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,AuthAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,AuthCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,NoopAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,NoopCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,RsetAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,RsetCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,ListAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,ListCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,UidlAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\POP3\Client\POP3_Client.cs,UidlCommandSendingCompleted,The following statement contains a magic number: SmartStream.ReadLineAsyncOP op = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);
Duplicate Code,LumiSoft.Net.IMAP.Client,LoginAsyncOP,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\Client\IMAP_Client.cs,Start,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 59)' (67' 86))
Duplicate Code,LumiSoft.Net.IMAP,IMAP_r_u_Fetch,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\IMAP\IMAP_r_u_Fetch.cs,ParseDataItems,The method contains a code clone-set at the following line numbers (starting from the method definition): ((67' 87)' (184' 204)' (222' 242)' (272' 292))
Duplicate Code,LumiSoft.Net.MIME,_MultipartReader,D:\research\architectureSmells\repos\dubeaud_bugnet\src\LumiSoft.Net\MIME\MIME_b_Multipart.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 53)' (84' 104))
